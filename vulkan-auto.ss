(import :std/foreign :kaladin/ctypes)
(export #t)
(define VK_MAX_PHYSICAL_DEVICE_NAME_SIZE 256)
(define VK_UUID_SIZE 16)
(define VK_LUID_SIZE 8)
(define VK_MAX_EXTENSION_NAME_SIZE 256)
(define VK_MAX_DESCRIPTION_SIZE 256)
(define VK_MAX_MEMORY_TYPES 32)
(define VK_MAX_MEMORY_HEAPS 16)
(define VK_TRUE 1)
(define VK_FALSE 0)
(define VK_MAX_DEVICE_GROUP_SIZE 32)
(define VK_MAX_DRIVER_NAME_SIZE_KHR 256)
(define VK_MAX_DRIVER_INFO_SIZE_KHR 256)
(define VK_IMAGE_LAYOUT_UNDEFINED 0)
(define VK_IMAGE_LAYOUT_GENERAL 1)
(define VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL 2)
(define VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL 3)
(define VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL 4)
(define VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL 5)
(define VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL 6)
(define VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL 7)
(define VK_IMAGE_LAYOUT_PREINITIALIZED 8)
(define VK_ATTACHMENT_LOAD_OP_LOAD 0)
(define VK_ATTACHMENT_LOAD_OP_CLEAR 1)
(define VK_ATTACHMENT_LOAD_OP_DONT_CARE 2)
(define VK_ATTACHMENT_STORE_OP_STORE 0)
(define VK_ATTACHMENT_STORE_OP_DONT_CARE 1)
(define VK_IMAGE_TYPE_1D 0)
(define VK_IMAGE_TYPE_2D 1)
(define VK_IMAGE_TYPE_3D 2)
(define VK_IMAGE_TILING_OPTIMAL 0)
(define VK_IMAGE_TILING_LINEAR 1)
(define VK_IMAGE_VIEW_TYPE_1D 0)
(define VK_IMAGE_VIEW_TYPE_2D 1)
(define VK_IMAGE_VIEW_TYPE_3D 2)
(define VK_IMAGE_VIEW_TYPE_CUBE 3)
(define VK_IMAGE_VIEW_TYPE_1D_ARRAY 4)
(define VK_IMAGE_VIEW_TYPE_2D_ARRAY 5)
(define VK_IMAGE_VIEW_TYPE_CUBE_ARRAY 6)
(define VK_COMMAND_BUFFER_LEVEL_PRIMARY 0)
(define VK_COMMAND_BUFFER_LEVEL_SECONDARY 1)
(define VK_COMPONENT_SWIZZLE_IDENTITY 0)
(define VK_COMPONENT_SWIZZLE_ZERO 1)
(define VK_COMPONENT_SWIZZLE_ONE 2)
(define VK_COMPONENT_SWIZZLE_R 3)
(define VK_COMPONENT_SWIZZLE_G 4)
(define VK_COMPONENT_SWIZZLE_B 5)
(define VK_COMPONENT_SWIZZLE_A 6)
(define VK_DESCRIPTOR_TYPE_SAMPLER 0)
(define VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER 1)
(define VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE 2)
(define VK_DESCRIPTOR_TYPE_STORAGE_IMAGE 3)
(define VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER 4)
(define VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER 5)
(define VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER 6)
(define VK_DESCRIPTOR_TYPE_STORAGE_BUFFER 7)
(define VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC 8)
(define VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC 9)
(define VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT 10)
(define VK_QUERY_TYPE_OCCLUSION 0)
(define VK_QUERY_TYPE_PIPELINE_STATISTICS 1)
(define VK_QUERY_TYPE_TIMESTAMP 2)
(define VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK 0)
(define VK_BORDER_COLOR_INT_TRANSPARENT_BLACK 1)
(define VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK 2)
(define VK_BORDER_COLOR_INT_OPAQUE_BLACK 3)
(define VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE 4)
(define VK_BORDER_COLOR_INT_OPAQUE_WHITE 5)
(define VK_PIPELINE_BIND_POINT_GRAPHICS 0)
(define VK_PIPELINE_BIND_POINT_COMPUTE 1)
(define VK_PIPELINE_CACHE_HEADER_VERSION_ONE 1)
(define VK_PRIMITIVE_TOPOLOGY_POINT_LIST 0)
(define VK_PRIMITIVE_TOPOLOGY_LINE_LIST 1)
(define VK_PRIMITIVE_TOPOLOGY_LINE_STRIP 2)
(define VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST 3)
(define VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP 4)
(define VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN 5)
(define VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY 6)
(define VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY 7)
(define VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY 8)
(define VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY 9)
(define VK_PRIMITIVE_TOPOLOGY_PATCH_LIST 10)
(define VK_SHARING_MODE_EXCLUSIVE 0)
(define VK_SHARING_MODE_CONCURRENT 1)
(define VK_INDEX_TYPE_UINT16 0)
(define VK_INDEX_TYPE_UINT32 1)
(define VK_FILTER_NEAREST 0)
(define VK_FILTER_LINEAR 1)
(define VK_SAMPLER_MIPMAP_MODE_NEAREST 0)
(define VK_SAMPLER_MIPMAP_MODE_LINEAR 1)
(define VK_SAMPLER_ADDRESS_MODE_REPEAT 0)
(define VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT 1)
(define VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE 2)
(define VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER 3)
(define VK_COMPARE_OP_NEVER 0)
(define VK_COMPARE_OP_LESS 1)
(define VK_COMPARE_OP_EQUAL 2)
(define VK_COMPARE_OP_LESS_OR_EQUAL 3)
(define VK_COMPARE_OP_GREATER 4)
(define VK_COMPARE_OP_NOT_EQUAL 5)
(define VK_COMPARE_OP_GREATER_OR_EQUAL 6)
(define VK_COMPARE_OP_ALWAYS 7)
(define VK_POLYGON_MODE_FILL 0)
(define VK_POLYGON_MODE_LINE 1)
(define VK_POLYGON_MODE_POINT 2)
(define VK_CULL_MODE_NONE 0)
(define VK_CULL_MODE_FRONT_BIT 1)
(define VK_CULL_MODE_BACK_BIT 2)
(define VK_CULL_MODE_FRONT_AND_BACK 3)
(define VK_FRONT_FACE_COUNTER_CLOCKWISE 0)
(define VK_FRONT_FACE_CLOCKWISE 1)
(define VK_BLEND_FACTOR_ZERO 0)
(define VK_BLEND_FACTOR_ONE 1)
(define VK_BLEND_FACTOR_SRC_COLOR 2)
(define VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR 3)
(define VK_BLEND_FACTOR_DST_COLOR 4)
(define VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR 5)
(define VK_BLEND_FACTOR_SRC_ALPHA 6)
(define VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA 7)
(define VK_BLEND_FACTOR_DST_ALPHA 8)
(define VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA 9)
(define VK_BLEND_FACTOR_CONSTANT_COLOR 10)
(define VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR 11)
(define VK_BLEND_FACTOR_CONSTANT_ALPHA 12)
(define VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA 13)
(define VK_BLEND_FACTOR_SRC_ALPHA_SATURATE 14)
(define VK_BLEND_FACTOR_SRC1_COLOR 15)
(define VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR 16)
(define VK_BLEND_FACTOR_SRC1_ALPHA 17)
(define VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA 18)
(define VK_BLEND_OP_ADD 0)
(define VK_BLEND_OP_SUBTRACT 1)
(define VK_BLEND_OP_REVERSE_SUBTRACT 2)
(define VK_BLEND_OP_MIN 3)
(define VK_BLEND_OP_MAX 4)
(define VK_STENCIL_OP_KEEP 0)
(define VK_STENCIL_OP_ZERO 1)
(define VK_STENCIL_OP_REPLACE 2)
(define VK_STENCIL_OP_INCREMENT_AND_CLAMP 3)
(define VK_STENCIL_OP_DECREMENT_AND_CLAMP 4)
(define VK_STENCIL_OP_INVERT 5)
(define VK_STENCIL_OP_INCREMENT_AND_WRAP 6)
(define VK_STENCIL_OP_DECREMENT_AND_WRAP 7)
(define VK_LOGIC_OP_CLEAR 0)
(define VK_LOGIC_OP_AND 1)
(define VK_LOGIC_OP_AND_REVERSE 2)
(define VK_LOGIC_OP_COPY 3)
(define VK_LOGIC_OP_AND_INVERTED 4)
(define VK_LOGIC_OP_NO_OP 5)
(define VK_LOGIC_OP_XOR 6)
(define VK_LOGIC_OP_OR 7)
(define VK_LOGIC_OP_NOR 8)
(define VK_LOGIC_OP_EQUIVALENT 9)
(define VK_LOGIC_OP_INVERT 10)
(define VK_LOGIC_OP_OR_REVERSE 11)
(define VK_LOGIC_OP_COPY_INVERTED 12)
(define VK_LOGIC_OP_OR_INVERTED 13)
(define VK_LOGIC_OP_NAND 14)
(define VK_LOGIC_OP_SET 15)
(define VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE 0)
(define VK_SYSTEM_ALLOCATION_SCOPE_COMMAND 0)
(define VK_SYSTEM_ALLOCATION_SCOPE_OBJECT 1)
(define VK_SYSTEM_ALLOCATION_SCOPE_CACHE 2)
(define VK_SYSTEM_ALLOCATION_SCOPE_DEVICE 3)
(define VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE 4)
(define VK_PHYSICAL_DEVICE_TYPE_OTHER 0)
(define VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU 1)
(define VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU 2)
(define VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU 3)
(define VK_PHYSICAL_DEVICE_TYPE_CPU 4)
(define VK_VERTEX_INPUT_RATE_VERTEX 0)
(define VK_VERTEX_INPUT_RATE_INSTANCE 1)
(define VK_FORMAT_UNDEFINED 0)
(define VK_FORMAT_R4G4_UNORM_PACK8 1)
(define VK_FORMAT_R4G4B4A4_UNORM_PACK16 2)
(define VK_FORMAT_B4G4R4A4_UNORM_PACK16 3)
(define VK_FORMAT_R5G6B5_UNORM_PACK16 4)
(define VK_FORMAT_B5G6R5_UNORM_PACK16 5)
(define VK_FORMAT_R5G5B5A1_UNORM_PACK16 6)
(define VK_FORMAT_B5G5R5A1_UNORM_PACK16 7)
(define VK_FORMAT_A1R5G5B5_UNORM_PACK16 8)
(define VK_FORMAT_R8_UNORM 9)
(define VK_FORMAT_R8_SNORM 10)
(define VK_FORMAT_R8_USCALED 11)
(define VK_FORMAT_R8_SSCALED 12)
(define VK_FORMAT_R8_UINT 13)
(define VK_FORMAT_R8_SINT 14)
(define VK_FORMAT_R8_SRGB 15)
(define VK_FORMAT_R8G8_UNORM 16)
(define VK_FORMAT_R8G8_SNORM 17)
(define VK_FORMAT_R8G8_USCALED 18)
(define VK_FORMAT_R8G8_SSCALED 19)
(define VK_FORMAT_R8G8_UINT 20)
(define VK_FORMAT_R8G8_SINT 21)
(define VK_FORMAT_R8G8_SRGB 22)
(define VK_FORMAT_R8G8B8_UNORM 23)
(define VK_FORMAT_R8G8B8_SNORM 24)
(define VK_FORMAT_R8G8B8_USCALED 25)
(define VK_FORMAT_R8G8B8_SSCALED 26)
(define VK_FORMAT_R8G8B8_UINT 27)
(define VK_FORMAT_R8G8B8_SINT 28)
(define VK_FORMAT_R8G8B8_SRGB 29)
(define VK_FORMAT_B8G8R8_UNORM 30)
(define VK_FORMAT_B8G8R8_SNORM 31)
(define VK_FORMAT_B8G8R8_USCALED 32)
(define VK_FORMAT_B8G8R8_SSCALED 33)
(define VK_FORMAT_B8G8R8_UINT 34)
(define VK_FORMAT_B8G8R8_SINT 35)
(define VK_FORMAT_B8G8R8_SRGB 36)
(define VK_FORMAT_R8G8B8A8_UNORM 37)
(define VK_FORMAT_R8G8B8A8_SNORM 38)
(define VK_FORMAT_R8G8B8A8_USCALED 39)
(define VK_FORMAT_R8G8B8A8_SSCALED 40)
(define VK_FORMAT_R8G8B8A8_UINT 41)
(define VK_FORMAT_R8G8B8A8_SINT 42)
(define VK_FORMAT_R8G8B8A8_SRGB 43)
(define VK_FORMAT_B8G8R8A8_UNORM 44)
(define VK_FORMAT_B8G8R8A8_SNORM 45)
(define VK_FORMAT_B8G8R8A8_USCALED 46)
(define VK_FORMAT_B8G8R8A8_SSCALED 47)
(define VK_FORMAT_B8G8R8A8_UINT 48)
(define VK_FORMAT_B8G8R8A8_SINT 49)
(define VK_FORMAT_B8G8R8A8_SRGB 50)
(define VK_FORMAT_A8B8G8R8_UNORM_PACK32 51)
(define VK_FORMAT_A8B8G8R8_SNORM_PACK32 52)
(define VK_FORMAT_A8B8G8R8_USCALED_PACK32 53)
(define VK_FORMAT_A8B8G8R8_SSCALED_PACK32 54)
(define VK_FORMAT_A8B8G8R8_UINT_PACK32 55)
(define VK_FORMAT_A8B8G8R8_SINT_PACK32 56)
(define VK_FORMAT_A8B8G8R8_SRGB_PACK32 57)
(define VK_FORMAT_A2R10G10B10_UNORM_PACK32 58)
(define VK_FORMAT_A2R10G10B10_SNORM_PACK32 59)
(define VK_FORMAT_A2R10G10B10_USCALED_PACK32 60)
(define VK_FORMAT_A2R10G10B10_SSCALED_PACK32 61)
(define VK_FORMAT_A2R10G10B10_UINT_PACK32 62)
(define VK_FORMAT_A2R10G10B10_SINT_PACK32 63)
(define VK_FORMAT_A2B10G10R10_UNORM_PACK32 64)
(define VK_FORMAT_A2B10G10R10_SNORM_PACK32 65)
(define VK_FORMAT_A2B10G10R10_USCALED_PACK32 66)
(define VK_FORMAT_A2B10G10R10_SSCALED_PACK32 67)
(define VK_FORMAT_A2B10G10R10_UINT_PACK32 68)
(define VK_FORMAT_A2B10G10R10_SINT_PACK32 69)
(define VK_FORMAT_R16_UNORM 70)
(define VK_FORMAT_R16_SNORM 71)
(define VK_FORMAT_R16_USCALED 72)
(define VK_FORMAT_R16_SSCALED 73)
(define VK_FORMAT_R16_UINT 74)
(define VK_FORMAT_R16_SINT 75)
(define VK_FORMAT_R16_SFLOAT 76)
(define VK_FORMAT_R16G16_UNORM 77)
(define VK_FORMAT_R16G16_SNORM 78)
(define VK_FORMAT_R16G16_USCALED 79)
(define VK_FORMAT_R16G16_SSCALED 80)
(define VK_FORMAT_R16G16_UINT 81)
(define VK_FORMAT_R16G16_SINT 82)
(define VK_FORMAT_R16G16_SFLOAT 83)
(define VK_FORMAT_R16G16B16_UNORM 84)
(define VK_FORMAT_R16G16B16_SNORM 85)
(define VK_FORMAT_R16G16B16_USCALED 86)
(define VK_FORMAT_R16G16B16_SSCALED 87)
(define VK_FORMAT_R16G16B16_UINT 88)
(define VK_FORMAT_R16G16B16_SINT 89)
(define VK_FORMAT_R16G16B16_SFLOAT 90)
(define VK_FORMAT_R16G16B16A16_UNORM 91)
(define VK_FORMAT_R16G16B16A16_SNORM 92)
(define VK_FORMAT_R16G16B16A16_USCALED 93)
(define VK_FORMAT_R16G16B16A16_SSCALED 94)
(define VK_FORMAT_R16G16B16A16_UINT 95)
(define VK_FORMAT_R16G16B16A16_SINT 96)
(define VK_FORMAT_R16G16B16A16_SFLOAT 97)
(define VK_FORMAT_R32_UINT 98)
(define VK_FORMAT_R32_SINT 99)
(define VK_FORMAT_R32_SFLOAT 100)
(define VK_FORMAT_R32G32_UINT 101)
(define VK_FORMAT_R32G32_SINT 102)
(define VK_FORMAT_R32G32_SFLOAT 103)
(define VK_FORMAT_R32G32B32_UINT 104)
(define VK_FORMAT_R32G32B32_SINT 105)
(define VK_FORMAT_R32G32B32_SFLOAT 106)
(define VK_FORMAT_R32G32B32A32_UINT 107)
(define VK_FORMAT_R32G32B32A32_SINT 108)
(define VK_FORMAT_R32G32B32A32_SFLOAT 109)
(define VK_FORMAT_R64_UINT 110)
(define VK_FORMAT_R64_SINT 111)
(define VK_FORMAT_R64_SFLOAT 112)
(define VK_FORMAT_R64G64_UINT 113)
(define VK_FORMAT_R64G64_SINT 114)
(define VK_FORMAT_R64G64_SFLOAT 115)
(define VK_FORMAT_R64G64B64_UINT 116)
(define VK_FORMAT_R64G64B64_SINT 117)
(define VK_FORMAT_R64G64B64_SFLOAT 118)
(define VK_FORMAT_R64G64B64A64_UINT 119)
(define VK_FORMAT_R64G64B64A64_SINT 120)
(define VK_FORMAT_R64G64B64A64_SFLOAT 121)
(define VK_FORMAT_B10G11R11_UFLOAT_PACK32 122)
(define VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 123)
(define VK_FORMAT_D16_UNORM 124)
(define VK_FORMAT_X8_D24_UNORM_PACK32 125)
(define VK_FORMAT_D32_SFLOAT 126)
(define VK_FORMAT_S8_UINT 127)
(define VK_FORMAT_D16_UNORM_S8_UINT 128)
(define VK_FORMAT_D24_UNORM_S8_UINT 129)
(define VK_FORMAT_D32_SFLOAT_S8_UINT 130)
(define VK_FORMAT_BC1_RGB_UNORM_BLOCK 131)
(define VK_FORMAT_BC1_RGB_SRGB_BLOCK 132)
(define VK_FORMAT_BC1_RGBA_UNORM_BLOCK 133)
(define VK_FORMAT_BC1_RGBA_SRGB_BLOCK 134)
(define VK_FORMAT_BC2_UNORM_BLOCK 135)
(define VK_FORMAT_BC2_SRGB_BLOCK 136)
(define VK_FORMAT_BC3_UNORM_BLOCK 137)
(define VK_FORMAT_BC3_SRGB_BLOCK 138)
(define VK_FORMAT_BC4_UNORM_BLOCK 139)
(define VK_FORMAT_BC4_SNORM_BLOCK 140)
(define VK_FORMAT_BC5_UNORM_BLOCK 141)
(define VK_FORMAT_BC5_SNORM_BLOCK 142)
(define VK_FORMAT_BC6H_UFLOAT_BLOCK 143)
(define VK_FORMAT_BC6H_SFLOAT_BLOCK 144)
(define VK_FORMAT_BC7_UNORM_BLOCK 145)
(define VK_FORMAT_BC7_SRGB_BLOCK 146)
(define VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK 147)
(define VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK 148)
(define VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK 149)
(define VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK 150)
(define VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK 151)
(define VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK 152)
(define VK_FORMAT_EAC_R11_UNORM_BLOCK 153)
(define VK_FORMAT_EAC_R11_SNORM_BLOCK 154)
(define VK_FORMAT_EAC_R11G11_UNORM_BLOCK 155)
(define VK_FORMAT_EAC_R11G11_SNORM_BLOCK 156)
(define VK_FORMAT_ASTC_4x4_UNORM_BLOCK 157)
(define VK_FORMAT_ASTC_4x4_SRGB_BLOCK 158)
(define VK_FORMAT_ASTC_5x4_UNORM_BLOCK 159)
(define VK_FORMAT_ASTC_5x4_SRGB_BLOCK 160)
(define VK_FORMAT_ASTC_5x5_UNORM_BLOCK 161)
(define VK_FORMAT_ASTC_5x5_SRGB_BLOCK 162)
(define VK_FORMAT_ASTC_6x5_UNORM_BLOCK 163)
(define VK_FORMAT_ASTC_6x5_SRGB_BLOCK 164)
(define VK_FORMAT_ASTC_6x6_UNORM_BLOCK 165)
(define VK_FORMAT_ASTC_6x6_SRGB_BLOCK 166)
(define VK_FORMAT_ASTC_8x5_UNORM_BLOCK 167)
(define VK_FORMAT_ASTC_8x5_SRGB_BLOCK 168)
(define VK_FORMAT_ASTC_8x6_UNORM_BLOCK 169)
(define VK_FORMAT_ASTC_8x6_SRGB_BLOCK 170)
(define VK_FORMAT_ASTC_8x8_UNORM_BLOCK 171)
(define VK_FORMAT_ASTC_8x8_SRGB_BLOCK 172)
(define VK_FORMAT_ASTC_10x5_UNORM_BLOCK 173)
(define VK_FORMAT_ASTC_10x5_SRGB_BLOCK 174)
(define VK_FORMAT_ASTC_10x6_UNORM_BLOCK 175)
(define VK_FORMAT_ASTC_10x6_SRGB_BLOCK 176)
(define VK_FORMAT_ASTC_10x8_UNORM_BLOCK 177)
(define VK_FORMAT_ASTC_10x8_SRGB_BLOCK 178)
(define VK_FORMAT_ASTC_10x10_UNORM_BLOCK 179)
(define VK_FORMAT_ASTC_10x10_SRGB_BLOCK 180)
(define VK_FORMAT_ASTC_12x10_UNORM_BLOCK 181)
(define VK_FORMAT_ASTC_12x10_SRGB_BLOCK 182)
(define VK_FORMAT_ASTC_12x12_UNORM_BLOCK 183)
(define VK_FORMAT_ASTC_12x12_SRGB_BLOCK 184)
(define VK_STRUCTURE_TYPE_APPLICATION_INFO 0)
(define VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO 1)
(define VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO 2)
(define VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO 3)
(define VK_STRUCTURE_TYPE_SUBMIT_INFO 4)
(define VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO 5)
(define VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE 6)
(define VK_STRUCTURE_TYPE_BIND_SPARSE_INFO 7)
(define VK_STRUCTURE_TYPE_FENCE_CREATE_INFO 8)
(define VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO 9)
(define VK_STRUCTURE_TYPE_EVENT_CREATE_INFO 10)
(define VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO 11)
(define VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO 12)
(define VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO 13)
(define VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO 14)
(define VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO 15)
(define VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO 16)
(define VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO 17)
(define VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO 18)
(define VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO 19)
(define VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO 20)
(define VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO 21)
(define VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO 22)
(define VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO 23)
(define VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO 24)
(define VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO 25)
(define VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO 26)
(define VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO 27)
(define VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO 28)
(define VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO 29)
(define VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO 30)
(define VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO 31)
(define VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO 32)
(define VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO 33)
(define VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO 34)
(define VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET 35)
(define VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET 36)
(define VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO 37)
(define VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO 38)
(define VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO 39)
(define VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO 40)
(define VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO 41)
(define VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO 42)
(define VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO 43)
(define VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER 44)
(define VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER 45)
(define VK_STRUCTURE_TYPE_MEMORY_BARRIER 46)
(define VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO 47)
(define VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO 48)
(define VK_SUBPASS_CONTENTS_INLINE 0)
(define VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS 1)
(define VK_SUCCESS 0)
(define VK_NOT_READY 1)
(define VK_TIMEOUT 2)
(define VK_EVENT_SET 3)
(define VK_EVENT_RESET 4)
(define VK_INCOMPLETE 5)
(define VK_ERROR_OUT_OF_HOST_MEMORY -1)
(define VK_ERROR_OUT_OF_DEVICE_MEMORY -2)
(define VK_ERROR_INITIALIZATION_FAILED -3)
(define VK_ERROR_DEVICE_LOST -4)
(define VK_ERROR_MEMORY_MAP_FAILED -5)
(define VK_ERROR_LAYER_NOT_PRESENT -6)
(define VK_ERROR_EXTENSION_NOT_PRESENT -7)
(define VK_ERROR_FEATURE_NOT_PRESENT -8)
(define VK_ERROR_INCOMPATIBLE_DRIVER -9)
(define VK_ERROR_TOO_MANY_OBJECTS -10)
(define VK_ERROR_FORMAT_NOT_SUPPORTED -11)
(define VK_ERROR_FRAGMENTED_POOL -12)
(define VK_DYNAMIC_STATE_VIEWPORT 0)
(define VK_DYNAMIC_STATE_SCISSOR 1)
(define VK_DYNAMIC_STATE_LINE_WIDTH 2)
(define VK_DYNAMIC_STATE_DEPTH_BIAS 3)
(define VK_DYNAMIC_STATE_BLEND_CONSTANTS 4)
(define VK_DYNAMIC_STATE_DEPTH_BOUNDS 5)
(define VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK 6)
(define VK_DYNAMIC_STATE_STENCIL_WRITE_MASK 7)
(define VK_DYNAMIC_STATE_STENCIL_REFERENCE 8)
(define VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET 0)
(define VK_OBJECT_TYPE_UNKNOWN 0)
(define VK_OBJECT_TYPE_INSTANCE 1)
(define VK_OBJECT_TYPE_PHYSICAL_DEVICE 2)
(define VK_OBJECT_TYPE_DEVICE 3)
(define VK_OBJECT_TYPE_QUEUE 4)
(define VK_OBJECT_TYPE_SEMAPHORE 5)
(define VK_OBJECT_TYPE_COMMAND_BUFFER 6)
(define VK_OBJECT_TYPE_FENCE 7)
(define VK_OBJECT_TYPE_DEVICE_MEMORY 8)
(define VK_OBJECT_TYPE_BUFFER 9)
(define VK_OBJECT_TYPE_IMAGE 10)
(define VK_OBJECT_TYPE_EVENT 11)
(define VK_OBJECT_TYPE_QUERY_POOL 12)
(define VK_OBJECT_TYPE_BUFFER_VIEW 13)
(define VK_OBJECT_TYPE_IMAGE_VIEW 14)
(define VK_OBJECT_TYPE_SHADER_MODULE 15)
(define VK_OBJECT_TYPE_PIPELINE_CACHE 16)
(define VK_OBJECT_TYPE_PIPELINE_LAYOUT 17)
(define VK_OBJECT_TYPE_RENDER_PASS 18)
(define VK_OBJECT_TYPE_PIPELINE 19)
(define VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT 20)
(define VK_OBJECT_TYPE_SAMPLER 21)
(define VK_OBJECT_TYPE_DESCRIPTOR_POOL 22)
(define VK_OBJECT_TYPE_DESCRIPTOR_SET 23)
(define VK_OBJECT_TYPE_FRAMEBUFFER 24)
(define VK_OBJECT_TYPE_COMMAND_POOL 25)
(define VK_QUEUE_GRAPHICS_BIT 1)
(define VK_QUEUE_COMPUTE_BIT 2)
(define VK_QUEUE_TRANSFER_BIT 4)
(define VK_QUEUE_SPARSE_BINDING_BIT 8)
(define VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT 1)
(define VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT 2)
(define VK_MEMORY_PROPERTY_HOST_COHERENT_BIT 4)
(define VK_MEMORY_PROPERTY_HOST_CACHED_BIT 8)
(define VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT 16)
(define VK_MEMORY_HEAP_DEVICE_LOCAL_BIT 1)
(define VK_ACCESS_INDIRECT_COMMAND_READ_BIT 1)
(define VK_ACCESS_INDEX_READ_BIT 2)
(define VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT 4)
(define VK_ACCESS_UNIFORM_READ_BIT 8)
(define VK_ACCESS_INPUT_ATTACHMENT_READ_BIT 16)
(define VK_ACCESS_SHADER_READ_BIT 32)
(define VK_ACCESS_SHADER_WRITE_BIT 64)
(define VK_ACCESS_COLOR_ATTACHMENT_READ_BIT 128)
(define VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT 256)
(define VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT 512)
(define VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT 1024)
(define VK_ACCESS_TRANSFER_READ_BIT 2048)
(define VK_ACCESS_TRANSFER_WRITE_BIT 4096)
(define VK_ACCESS_HOST_READ_BIT 8192)
(define VK_ACCESS_HOST_WRITE_BIT 16384)
(define VK_ACCESS_MEMORY_READ_BIT 32768)
(define VK_ACCESS_MEMORY_WRITE_BIT 65536)
(define VK_BUFFER_USAGE_TRANSFER_SRC_BIT 1)
(define VK_BUFFER_USAGE_TRANSFER_DST_BIT 2)
(define VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT 4)
(define VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT 8)
(define VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT 16)
(define VK_BUFFER_USAGE_STORAGE_BUFFER_BIT 32)
(define VK_BUFFER_USAGE_INDEX_BUFFER_BIT 64)
(define VK_BUFFER_USAGE_VERTEX_BUFFER_BIT 128)
(define VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT 256)
(define VK_BUFFER_CREATE_SPARSE_BINDING_BIT 1)
(define VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT 2)
(define VK_BUFFER_CREATE_SPARSE_ALIASED_BIT 4)
(define VK_SHADER_STAGE_VERTEX_BIT 1)
(define VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT 2)
(define VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT 4)
(define VK_SHADER_STAGE_GEOMETRY_BIT 8)
(define VK_SHADER_STAGE_FRAGMENT_BIT 16)
(define VK_SHADER_STAGE_COMPUTE_BIT 32)
(define VK_SHADER_STAGE_ALL_GRAPHICS 31)
(define VK_SHADER_STAGE_ALL 2147483647)
(define VK_IMAGE_USAGE_TRANSFER_SRC_BIT 1)
(define VK_IMAGE_USAGE_TRANSFER_DST_BIT 2)
(define VK_IMAGE_USAGE_SAMPLED_BIT 4)
(define VK_IMAGE_USAGE_STORAGE_BIT 8)
(define VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT 16)
(define VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT 32)
(define VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT 64)
(define VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT 128)
(define VK_IMAGE_CREATE_SPARSE_BINDING_BIT 1)
(define VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT 2)
(define VK_IMAGE_CREATE_SPARSE_ALIASED_BIT 4)
(define VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT 8)
(define VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT 16)
(define VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT 1)
(define VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT 2)
(define VK_PIPELINE_CREATE_DERIVATIVE_BIT 4)
(define VK_COLOR_COMPONENT_R_BIT 1)
(define VK_COLOR_COMPONENT_G_BIT 2)
(define VK_COLOR_COMPONENT_B_BIT 4)
(define VK_COLOR_COMPONENT_A_BIT 8)
(define VK_FENCE_CREATE_SIGNALED_BIT 1)
(define VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT 1)
(define VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT 2)
(define VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT 4)
(define VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT 8)
(define VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT 16)
(define VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT 32)
(define VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT 64)
(define VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT 128)
(define VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT 256)
(define VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT 512)
(define VK_FORMAT_FEATURE_BLIT_SRC_BIT 1024)
(define VK_FORMAT_FEATURE_BLIT_DST_BIT 2048)
(define VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT 4096)
(define VK_QUERY_CONTROL_PRECISE_BIT 1)
(define VK_QUERY_RESULT_64_BIT 1)
(define VK_QUERY_RESULT_WAIT_BIT 2)
(define VK_QUERY_RESULT_WITH_AVAILABILITY_BIT 4)
(define VK_QUERY_RESULT_PARTIAL_BIT 8)
(define VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT 1)
(define VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT 2)
(define VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT 4)
(define VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT 1)
(define VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT 2)
(define VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT 4)
(define VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT 8)
(define VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT 16)
(define VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT 32)
(define VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT 64)
(define VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT 128)
(define VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT 256)
(define VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT 512)
(define VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT 1024)
(define VK_IMAGE_ASPECT_COLOR_BIT 1)
(define VK_IMAGE_ASPECT_DEPTH_BIT 2)
(define VK_IMAGE_ASPECT_STENCIL_BIT 4)
(define VK_IMAGE_ASPECT_METADATA_BIT 8)
(define VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT 1)
(define VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT 2)
(define VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT 4)
(define VK_SPARSE_MEMORY_BIND_METADATA_BIT 1)
(define VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT 1)
(define VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT 2)
(define VK_PIPELINE_STAGE_VERTEX_INPUT_BIT 4)
(define VK_PIPELINE_STAGE_VERTEX_SHADER_BIT 8)
(define VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT 16)
(define VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT 32)
(define VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT 64)
(define VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT 128)
(define VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT 256)
(define VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT 512)
(define VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT 1024)
(define VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT 2048)
(define VK_PIPELINE_STAGE_TRANSFER_BIT 4096)
(define VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT 8192)
(define VK_PIPELINE_STAGE_HOST_BIT 16384)
(define VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT 32768)
(define VK_PIPELINE_STAGE_ALL_COMMANDS_BIT 65536)
(define VK_COMMAND_POOL_CREATE_TRANSIENT_BIT 1)
(define VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT 2)
(define VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT 1)
(define VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT 1)
(define VK_SAMPLE_COUNT_1_BIT 1)
(define VK_SAMPLE_COUNT_2_BIT 2)
(define VK_SAMPLE_COUNT_4_BIT 4)
(define VK_SAMPLE_COUNT_8_BIT 8)
(define VK_SAMPLE_COUNT_16_BIT 16)
(define VK_SAMPLE_COUNT_32_BIT 32)
(define VK_SAMPLE_COUNT_64_BIT 64)
(define VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT 1)
(define VK_STENCIL_FACE_FRONT_BIT 1)
(define VK_STENCIL_FACE_BACK_BIT 2)
(define VK_STENCIL_FACE_FRONT_AND_BACK 3)
(define VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT 1)
(define VK_DEPENDENCY_BY_REGION_BIT 1)
(define VK_PRESENT_MODE_IMMEDIATE_KHR 0)
(define VK_PRESENT_MODE_MAILBOX_KHR 1)
(define VK_PRESENT_MODE_FIFO_KHR 2)
(define VK_PRESENT_MODE_FIFO_RELAXED_KHR 3)
(define VK_COLOR_SPACE_SRGB_NONLINEAR_KHR 0)
(define VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR 1)
(define VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR 2)
(define VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR 4)
(define VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR 8)
(define VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR 1)
(define VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR 2)
(define VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR 4)
(define VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR 8)
(define VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR 1)
(define VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR 2)
(define VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR 4)
(define VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR 8)
(define VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR 16)
(define VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR 32)
(define VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR 64)
(define VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR 128)
(define VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR 256)
(define VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID 1)
(define VK_TIME_DOMAIN_DEVICE_EXT 0)
(define VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT 1)
(define VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT 2)
(define VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT 3)
(define VK_DEBUG_REPORT_INFORMATION_BIT_EXT 1)
(define VK_DEBUG_REPORT_WARNING_BIT_EXT 2)
(define VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT 4)
(define VK_DEBUG_REPORT_ERROR_BIT_EXT 8)
(define VK_DEBUG_REPORT_DEBUG_BIT_EXT 16)
(define VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT 0)
(define VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT 1)
(define VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT 2)
(define VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT 3)
(define VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT 4)
(define VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT 5)
(define VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT 6)
(define VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT 7)
(define VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT 8)
(define VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT 9)
(define VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT 10)
(define VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT 11)
(define VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT 12)
(define VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT 13)
(define VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT 14)
(define VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT 15)
(define VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT 16)
(define VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT 17)
(define VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT 18)
(define VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT 19)
(define VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT 20)
(define VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT 21)
(define VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT 22)
(define VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT 23)
(define VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT 24)
(define VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT 25)
(define VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT 26)
(define VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT 27)
(define VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT 28)
(define VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT 29)
(define VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT 30)
(define VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT 31)
(define VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT 32)
(define VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT 33)
(define VK_RASTERIZATION_ORDER_STRICT_AMD 0)
(define VK_RASTERIZATION_ORDER_RELAXED_AMD 1)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV 1)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV 2)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV 4)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV 8)
(define VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV 1)
(define VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV 2)
(define VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV 4)
(define VK_VALIDATION_CHECK_ALL_EXT 0)
(define VK_VALIDATION_CHECK_SHADERS_EXT 1)
(define VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT 0)
(define VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT 1)
(define VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT 2)
(define VK_VALIDATION_FEATURE_DISABLE_ALL_EXT 0)
(define VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT 1)
(define VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT 2)
(define VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT 3)
(define VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT 4)
(define VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT 5)
(define VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT 6)
(define VK_SUBGROUP_FEATURE_BASIC_BIT 1)
(define VK_SUBGROUP_FEATURE_VOTE_BIT 2)
(define VK_SUBGROUP_FEATURE_ARITHMETIC_BIT 4)
(define VK_SUBGROUP_FEATURE_BALLOT_BIT 8)
(define VK_SUBGROUP_FEATURE_SHUFFLE_BIT 16)
(define VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT 32)
(define VK_SUBGROUP_FEATURE_CLUSTERED_BIT 64)
(define VK_SUBGROUP_FEATURE_QUAD_BIT 128)
(define VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX 1)
(define VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX 2)
(define VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX 4)
(define VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX 8)
(define VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX 1)
(define VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX 2)
(define VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX 0)
(define VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX 1)
(define VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX 2)
(define VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX 3)
(define VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX 4)
(define VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX 5)
(define VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX 6)
(define VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX 7)
(define VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX 0)
(define VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX 1)
(define VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX 2)
(define VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX 3)
(define VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX 4)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT 1)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT 2)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT 4)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT 8)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT 16)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT 32)
(define VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT 64)
(define VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT 1)
(define VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT 2)
(define VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT 4)
(define VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT 1)
(define VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT 2)
(define VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT 4)
(define VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT 8)
(define VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT 16)
(define VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT 1)
(define VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT 2)
(define VK_SEMAPHORE_IMPORT_TEMPORARY_BIT 1)
(define VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT 1)
(define VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT 2)
(define VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT 4)
(define VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT 8)
(define VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT 1)
(define VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT 2)
(define VK_FENCE_IMPORT_TEMPORARY_BIT 1)
(define VK_SURFACE_COUNTER_VBLANK_EXT 1)
(define VK_DISPLAY_POWER_STATE_OFF_EXT 0)
(define VK_DISPLAY_POWER_STATE_SUSPEND_EXT 1)
(define VK_DISPLAY_POWER_STATE_ON_EXT 2)
(define VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT 0)
(define VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT 0)
(define VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT 1)
(define VK_PEER_MEMORY_FEATURE_COPY_DST_BIT 2)
(define VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT 4)
(define VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT 8)
(define VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT 1)
(define VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR 1)
(define VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR 2)
(define VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR 4)
(define VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR 8)
(define VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV 0)
(define VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV 1)
(define VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV 2)
(define VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV 3)
(define VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV 4)
(define VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV 5)
(define VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV 6)
(define VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV 7)
(define VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT 0)
(define VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT 1)
(define VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES 0)
(define VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY 1)
(define VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT 0)
(define VK_SAMPLER_REDUCTION_MODE_MIN_EXT 1)
(define VK_SAMPLER_REDUCTION_MODE_MAX_EXT 2)
(define VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT 0)
(define VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT 1)
(define VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY 0)
(define VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY 1)
(define VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 2)
(define VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 3)
(define VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 4)
(define VK_SAMPLER_YCBCR_RANGE_ITU_FULL 0)
(define VK_SAMPLER_YCBCR_RANGE_ITU_NARROW 1)
(define VK_CHROMA_LOCATION_COSITED_EVEN 0)
(define VK_CHROMA_LOCATION_MIDPOINT 1)
(define VK_BLEND_OVERLAP_UNCORRELATED_EXT 0)
(define VK_BLEND_OVERLAP_DISJOINT_EXT 1)
(define VK_BLEND_OVERLAP_CONJOINT_EXT 2)
(define VK_COVERAGE_MODULATION_MODE_NONE_NV 0)
(define VK_COVERAGE_MODULATION_MODE_RGB_NV 1)
(define VK_COVERAGE_MODULATION_MODE_ALPHA_NV 2)
(define VK_COVERAGE_MODULATION_MODE_RGBA_NV 3)
(define VK_COVERAGE_REDUCTION_MODE_MERGE_NV 0)
(define VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV 1)
(define VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT 1)
(define VK_SHADER_INFO_TYPE_STATISTICS_AMD 0)
(define VK_SHADER_INFO_TYPE_BINARY_AMD 1)
(define VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD 2)
(define VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT 128)
(define VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT 256)
(define VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT 512)
(define VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT 1024)
(define VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT 1)
(define VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT 16)
(define VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT 256)
(define VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT 4096)
(define VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT 1)
(define VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT 2)
(define VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT 4)
(define VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT 0)
(define VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT 1)
(define VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT 2)
(define VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT 1)
(define VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT 2)
(define VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT 4)
(define VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT 8)
(define VK_VENDOR_ID_VIV 65537)
(define VK_VENDOR_ID_VSI 65538)
(define VK_VENDOR_ID_KAZAN 65539)
(define VK_DRIVER_ID_AMD_PROPRIETARY_KHR 1)
(define VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR 2)
(define VK_DRIVER_ID_MESA_RADV_KHR 3)
(define VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR 4)
(define VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR 5)
(define VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR 6)
(define VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR 7)
(define VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR 8)
(define VK_DRIVER_ID_ARM_PROPRIETARY_KHR 9)
(define VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR 10)
(define VK_DRIVER_ID_GGP_PROPRIETARY_KHR 11)
(define VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR 12)
(define VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT 1)
(define VK_RESOLVE_MODE_NONE_KHR 0)
(define VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR 1)
(define VK_RESOLVE_MODE_AVERAGE_BIT_KHR 2)
(define VK_RESOLVE_MODE_MIN_BIT_KHR 4)
(define VK_RESOLVE_MODE_MAX_BIT_KHR 8)
(define VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV 0)
(define VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV 1)
(define VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV 2)
(define VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV 3)
(define VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV 4)
(define VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV 5)
(define VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV 6)
(define VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV 7)
(define VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV 8)
(define VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV 9)
(define VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV 10)
(define VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV 11)
(define VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV 0)
(define VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV 1)
(define VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV 2)
(define VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV 3)
(define VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV 1)
(define VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV 2)
(define VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV 4)
(define VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV 8)
(define VK_GEOMETRY_OPAQUE_BIT_NV 1)
(define VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV 2)
(define VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV 1)
(define VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV 2)
(define VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV 4)
(define VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV 8)
(define VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV 16)
(define VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV 0)
(define VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV 1)
(define VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV 0)
(define VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV 1)
(define VK_GEOMETRY_TYPE_TRIANGLES_NV 0)
(define VK_GEOMETRY_TYPE_AABBS_NV 1)
(define VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV 0)
(define VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV 1)
(define VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV 2)
(define VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV 0)
(define VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV 1)
(define VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV 2)
(define VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD 0)
(define VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD 1)
(define VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD 2)
(define VK_SCOPE_DEVICE_NV 1)
(define VK_SCOPE_WORKGROUP_NV 2)
(define VK_SCOPE_SUBGROUP_NV 3)
(define VK_SCOPE_QUEUE_FAMILY_NV 5)
(define VK_COMPONENT_TYPE_FLOAT16_NV 0)
(define VK_COMPONENT_TYPE_FLOAT32_NV 1)
(define VK_COMPONENT_TYPE_FLOAT64_NV 2)
(define VK_COMPONENT_TYPE_SINT8_NV 3)
(define VK_COMPONENT_TYPE_SINT16_NV 4)
(define VK_COMPONENT_TYPE_SINT32_NV 5)
(define VK_COMPONENT_TYPE_SINT64_NV 6)
(define VK_COMPONENT_TYPE_UINT8_NV 7)
(define VK_COMPONENT_TYPE_UINT16_NV 8)
(define VK_COMPONENT_TYPE_UINT32_NV 9)
(define VK_COMPONENT_TYPE_UINT64_NV 10)
(define VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT 1)
(define VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT 2)
(define VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT 4)
(define VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT 0)
(define VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT 1)
(define VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT 2)
(define VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT 3)
(define VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL
   0)
(define VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL 0)
(define VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL 0)
(define VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL 1)
(define VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL 0)
(define VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL 1)
(define VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL 0)
(define VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL 1)
(define VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL 2)
(define VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL 3)
(define VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL 4)
(define VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR 0)
(define VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR 1)
(define VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR 2)
(define VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR 3)
(define VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR 0)
(define VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR 1)
(define VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR 2)
(define VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT 0)
(define VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT 1)
(define VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT 2)
(define VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT 3)
(begin-ffi
   (float* float** void* void**)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type void* (pointer void))
   (c-define-type void** (pointer void*))
   (c-define-type float* (pointer float))
   (c-define-type float** (pointer float*)))
(begin-ffi
   (ptr->VkDebugUtilsMessengerEXT
      make-VkDebugUtilsMessengerEXT
      ptr->VkDebugReportCallbackEXT
      make-VkDebugReportCallbackEXT
      ptr->VkSwapchainKHR
      make-VkSwapchainKHR
      ptr->VkSurfaceKHR
      make-VkSurfaceKHR
      ptr->VkDisplayModeKHR
      make-VkDisplayModeKHR
      ptr->VkDisplayKHR
      make-VkDisplayKHR
      ptr->VkPerformanceConfigurationINTEL
      make-VkPerformanceConfigurationINTEL
      ptr->VkAccelerationStructureNV
      make-VkAccelerationStructureNV
      ptr->VkValidationCacheEXT
      make-VkValidationCacheEXT
      ptr->VkSamplerYcbcrConversion
      make-VkSamplerYcbcrConversion
      ptr->VkDescriptorUpdateTemplate
      make-VkDescriptorUpdateTemplate
      ptr->VkIndirectCommandsLayoutNVX
      make-VkIndirectCommandsLayoutNVX
      ptr->VkObjectTableNVX
      make-VkObjectTableNVX
      ptr->VkPipelineCache
      make-VkPipelineCache
      ptr->VkRenderPass
      make-VkRenderPass
      ptr->VkFramebuffer
      make-VkFramebuffer
      ptr->VkQueryPool
      make-VkQueryPool
      ptr->VkEvent
      make-VkEvent
      ptr->VkSemaphore
      make-VkSemaphore
      ptr->VkFence
      make-VkFence
      ptr->VkDescriptorPool
      make-VkDescriptorPool
      ptr->VkDescriptorSetLayout
      make-VkDescriptorSetLayout
      ptr->VkDescriptorSet
      make-VkDescriptorSet
      ptr->VkSampler
      make-VkSampler
      ptr->VkPipelineLayout
      make-VkPipelineLayout
      ptr->VkPipeline
      make-VkPipeline
      ptr->VkShaderModule
      make-VkShaderModule
      ptr->VkImageView
      make-VkImageView
      ptr->VkImage
      make-VkImage
      ptr->VkBufferView
      make-VkBufferView
      ptr->VkBuffer
      make-VkBuffer
      ptr->VkCommandPool
      make-VkCommandPool
      ptr->VkDeviceMemory
      make-VkDeviceMemory
      ptr->VkCommandBuffer
      make-VkCommandBuffer
      ptr->VkQueue
      make-VkQueue
      ptr->VkDevice
      make-VkDevice
      ptr->VkPhysicalDevice
      make-VkPhysicalDevice
      ptr->VkInstance
      make-VkInstance
      VkDebugUtilsMessengerEXT
      VkDebugUtilsMessengerEXT*
      VkDebugReportCallbackEXT
      VkDebugReportCallbackEXT*
      VkSwapchainKHR
      VkSwapchainKHR*
      VkSurfaceKHR
      VkSurfaceKHR*
      VkDisplayModeKHR
      VkDisplayModeKHR*
      VkDisplayKHR
      VkDisplayKHR*
      VkPerformanceConfigurationINTEL
      VkPerformanceConfigurationINTEL*
      VkAccelerationStructureNV
      VkAccelerationStructureNV*
      VkValidationCacheEXT
      VkValidationCacheEXT*
      VkSamplerYcbcrConversion
      VkSamplerYcbcrConversion*
      VkDescriptorUpdateTemplate
      VkDescriptorUpdateTemplate*
      VkIndirectCommandsLayoutNVX
      VkIndirectCommandsLayoutNVX*
      VkObjectTableNVX
      VkObjectTableNVX*
      VkPipelineCache
      VkPipelineCache*
      VkRenderPass
      VkRenderPass*
      VkFramebuffer
      VkFramebuffer*
      VkQueryPool
      VkQueryPool*
      VkEvent
      VkEvent*
      VkSemaphore
      VkSemaphore*
      VkFence
      VkFence*
      VkDescriptorPool
      VkDescriptorPool*
      VkDescriptorSetLayout
      VkDescriptorSetLayout*
      VkDescriptorSet
      VkDescriptorSet*
      VkSampler
      VkSampler*
      VkPipelineLayout
      VkPipelineLayout*
      VkPipeline
      VkPipeline*
      VkShaderModule
      VkShaderModule*
      VkImageView
      VkImageView*
      VkImage
      VkImage*
      VkBufferView
      VkBufferView*
      VkBuffer
      VkBuffer*
      VkCommandPool
      VkCommandPool*
      VkDeviceMemory
      VkDeviceMemory*
      VkCommandBuffer
      VkCommandBuffer*
      VkQueue
      VkQueue*
      VkDevice
      VkDevice*
      VkPhysicalDevice
      VkPhysicalDevice*
      VkInstance
      VkInstance*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkInstance (pointer (struct "VkInstance_T")))
   (c-define-type VkInstance* (pointer VkInstance))
   (c-define-type VkPhysicalDevice (pointer (struct "VkPhysicalDevice_T")))
   (c-define-type VkPhysicalDevice* (pointer VkPhysicalDevice))
   (c-define-type VkDevice (pointer (struct "VkDevice_T")))
   (c-define-type VkDevice* (pointer VkDevice))
   (c-define-type VkQueue (pointer (struct "VkQueue_T")))
   (c-define-type VkQueue* (pointer VkQueue))
   (c-define-type VkCommandBuffer (pointer (struct "VkCommandBuffer_T")))
   (c-define-type VkCommandBuffer* (pointer VkCommandBuffer))
   (c-define-type VkDeviceMemory (pointer (struct "VkDeviceMemory_T")))
   (c-define-type VkDeviceMemory* (pointer VkDeviceMemory))
   (c-define-type VkCommandPool (pointer (struct "VkCommandPool_T")))
   (c-define-type VkCommandPool* (pointer VkCommandPool))
   (c-define-type VkBuffer (pointer (struct "VkBuffer_T")))
   (c-define-type VkBuffer* (pointer VkBuffer))
   (c-define-type VkBufferView (pointer (struct "VkBufferView_T")))
   (c-define-type VkBufferView* (pointer VkBufferView))
   (c-define-type VkImage (pointer (struct "VkImage_T")))
   (c-define-type VkImage* (pointer VkImage))
   (c-define-type VkImageView (pointer (struct "VkImageView_T")))
   (c-define-type VkImageView* (pointer VkImageView))
   (c-define-type VkShaderModule (pointer (struct "VkShaderModule_T")))
   (c-define-type VkShaderModule* (pointer VkShaderModule))
   (c-define-type VkPipeline (pointer (struct "VkPipeline_T")))
   (c-define-type VkPipeline* (pointer VkPipeline))
   (c-define-type VkPipelineLayout (pointer (struct "VkPipelineLayout_T")))
   (c-define-type VkPipelineLayout* (pointer VkPipelineLayout))
   (c-define-type VkSampler (pointer (struct "VkSampler_T")))
   (c-define-type VkSampler* (pointer VkSampler))
   (c-define-type VkDescriptorSet (pointer (struct "VkDescriptorSet_T")))
   (c-define-type VkDescriptorSet* (pointer VkDescriptorSet))
   (c-define-type VkDescriptorSetLayout (pointer (struct "VkDescriptorSetLayout_T")))
   (c-define-type VkDescriptorSetLayout* (pointer VkDescriptorSetLayout))
   (c-define-type VkDescriptorPool (pointer (struct "VkDescriptorPool_T")))
   (c-define-type VkDescriptorPool* (pointer VkDescriptorPool))
   (c-define-type VkFence (pointer (struct "VkFence_T")))
   (c-define-type VkFence* (pointer VkFence))
   (c-define-type VkSemaphore (pointer (struct "VkSemaphore_T")))
   (c-define-type VkSemaphore* (pointer VkSemaphore))
   (c-define-type VkEvent (pointer (struct "VkEvent_T")))
   (c-define-type VkEvent* (pointer VkEvent))
   (c-define-type VkQueryPool (pointer (struct "VkQueryPool_T")))
   (c-define-type VkQueryPool* (pointer VkQueryPool))
   (c-define-type VkFramebuffer (pointer (struct "VkFramebuffer_T")))
   (c-define-type VkFramebuffer* (pointer VkFramebuffer))
   (c-define-type VkRenderPass (pointer (struct "VkRenderPass_T")))
   (c-define-type VkRenderPass* (pointer VkRenderPass))
   (c-define-type VkPipelineCache (pointer (struct "VkPipelineCache_T")))
   (c-define-type VkPipelineCache* (pointer VkPipelineCache))
   (c-define-type VkObjectTableNVX (pointer (struct "VkObjectTableNVX_T")))
   (c-define-type VkObjectTableNVX* (pointer VkObjectTableNVX))
   (c-define-type
      VkIndirectCommandsLayoutNVX
      (pointer (struct "VkIndirectCommandsLayoutNVX_T")))
   (c-define-type VkIndirectCommandsLayoutNVX* (pointer VkIndirectCommandsLayoutNVX))
   (c-define-type
      VkDescriptorUpdateTemplate
      (pointer (struct "VkDescriptorUpdateTemplate_T")))
   (c-define-type VkDescriptorUpdateTemplate* (pointer VkDescriptorUpdateTemplate))
   (c-define-type
      VkSamplerYcbcrConversion
      (pointer (struct "VkSamplerYcbcrConversion_T")))
   (c-define-type VkSamplerYcbcrConversion* (pointer VkSamplerYcbcrConversion))
   (c-define-type VkValidationCacheEXT (pointer (struct "VkValidationCacheEXT_T")))
   (c-define-type VkValidationCacheEXT* (pointer VkValidationCacheEXT))
   (c-define-type
      VkAccelerationStructureNV
      (pointer (struct "VkAccelerationStructureNV_T")))
   (c-define-type VkAccelerationStructureNV* (pointer VkAccelerationStructureNV))
   (c-define-type
      VkPerformanceConfigurationINTEL
      (pointer (struct "VkPerformanceConfigurationINTEL_T")))
   (c-define-type
      VkPerformanceConfigurationINTEL*
      (pointer VkPerformanceConfigurationINTEL))
   (c-define-type VkDisplayKHR (pointer (struct "VkDisplayKHR_T")))
   (c-define-type VkDisplayKHR* (pointer VkDisplayKHR))
   (c-define-type VkDisplayModeKHR (pointer (struct "VkDisplayModeKHR_T")))
   (c-define-type VkDisplayModeKHR* (pointer VkDisplayModeKHR))
   (c-define-type VkSurfaceKHR (pointer (struct "VkSurfaceKHR_T")))
   (c-define-type VkSurfaceKHR* (pointer VkSurfaceKHR))
   (c-define-type VkSwapchainKHR (pointer (struct "VkSwapchainKHR_T")))
   (c-define-type VkSwapchainKHR* (pointer VkSwapchainKHR))
   (c-define-type
      VkDebugReportCallbackEXT
      (pointer (struct "VkDebugReportCallbackEXT_T")))
   (c-define-type VkDebugReportCallbackEXT* (pointer VkDebugReportCallbackEXT))
   (c-define-type
      VkDebugUtilsMessengerEXT
      (pointer (struct "VkDebugUtilsMessengerEXT_T")))
   (c-define-type VkDebugUtilsMessengerEXT* (pointer VkDebugUtilsMessengerEXT))
   (define-c-lambda
      make-VkInstance
      ()
      (pointer VkInstance)
      "VkInstance* instance = malloc(sizeof(VkInstance));
___return(instance);")
   (define-c-lambda
      ptr->VkInstance
      ((pointer VkInstance))
      VkInstance
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDevice
      ()
      (pointer VkPhysicalDevice)
      "VkPhysicalDevice* physicaldevice = malloc(sizeof(VkPhysicalDevice));
___return(physicaldevice);")
   (define-c-lambda
      ptr->VkPhysicalDevice
      ((pointer VkPhysicalDevice))
      VkPhysicalDevice
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDevice
      ()
      (pointer VkDevice)
      "VkDevice* device = malloc(sizeof(VkDevice));
___return(device);")
   (define-c-lambda ptr->VkDevice ((pointer VkDevice)) VkDevice "___return(*___arg1);")
   (define-c-lambda
      make-VkQueue
      ()
      (pointer VkQueue)
      "VkQueue* queue = malloc(sizeof(VkQueue));
___return(queue);")
   (define-c-lambda ptr->VkQueue ((pointer VkQueue)) VkQueue "___return(*___arg1);")
   (define-c-lambda
      make-VkCommandBuffer
      ()
      (pointer VkCommandBuffer)
      "VkCommandBuffer* commandbuffer = malloc(sizeof(VkCommandBuffer));
___return(commandbuffer);")
   (define-c-lambda
      ptr->VkCommandBuffer
      ((pointer VkCommandBuffer))
      VkCommandBuffer
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceMemory
      ()
      (pointer VkDeviceMemory)
      "VkDeviceMemory* devicememory = malloc(sizeof(VkDeviceMemory));
___return(devicememory);")
   (define-c-lambda
      ptr->VkDeviceMemory
      ((pointer VkDeviceMemory))
      VkDeviceMemory
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCommandPool
      ()
      (pointer VkCommandPool)
      "VkCommandPool* commandpool = malloc(sizeof(VkCommandPool));
___return(commandpool);")
   (define-c-lambda
      ptr->VkCommandPool
      ((pointer VkCommandPool))
      VkCommandPool
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBuffer
      ()
      (pointer VkBuffer)
      "VkBuffer* buffer = malloc(sizeof(VkBuffer));
___return(buffer);")
   (define-c-lambda ptr->VkBuffer ((pointer VkBuffer)) VkBuffer "___return(*___arg1);")
   (define-c-lambda
      make-VkBufferView
      ()
      (pointer VkBufferView)
      "VkBufferView* bufferview = malloc(sizeof(VkBufferView));
___return(bufferview);")
   (define-c-lambda
      ptr->VkBufferView
      ((pointer VkBufferView))
      VkBufferView
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImage
      ()
      (pointer VkImage)
      "VkImage* image = malloc(sizeof(VkImage));
___return(image);")
   (define-c-lambda ptr->VkImage ((pointer VkImage)) VkImage "___return(*___arg1);")
   (define-c-lambda
      make-VkImageView
      ()
      (pointer VkImageView)
      "VkImageView* imageview = malloc(sizeof(VkImageView));
___return(imageview);")
   (define-c-lambda
      ptr->VkImageView
      ((pointer VkImageView))
      VkImageView
      "___return(*___arg1);")
   (define-c-lambda
      make-VkShaderModule
      ()
      (pointer VkShaderModule)
      "VkShaderModule* shadermodule = malloc(sizeof(VkShaderModule));
___return(shadermodule);")
   (define-c-lambda
      ptr->VkShaderModule
      ((pointer VkShaderModule))
      VkShaderModule
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipeline
      ()
      (pointer VkPipeline)
      "VkPipeline* pipeline = malloc(sizeof(VkPipeline));
___return(pipeline);")
   (define-c-lambda
      ptr->VkPipeline
      ((pointer VkPipeline))
      VkPipeline
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineLayout
      ()
      (pointer VkPipelineLayout)
      "VkPipelineLayout* pipelinelayout = malloc(sizeof(VkPipelineLayout));
___return(pipelinelayout);")
   (define-c-lambda
      ptr->VkPipelineLayout
      ((pointer VkPipelineLayout))
      VkPipelineLayout
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSampler
      ()
      (pointer VkSampler)
      "VkSampler* sampler = malloc(sizeof(VkSampler));
___return(sampler);")
   (define-c-lambda ptr->VkSampler ((pointer VkSampler)) VkSampler "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorSet
      ()
      (pointer VkDescriptorSet)
      "VkDescriptorSet* descriptorset = malloc(sizeof(VkDescriptorSet));
___return(descriptorset);")
   (define-c-lambda
      ptr->VkDescriptorSet
      ((pointer VkDescriptorSet))
      VkDescriptorSet
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorSetLayout
      ()
      (pointer VkDescriptorSetLayout)
      "VkDescriptorSetLayout* descriptorsetlayout = malloc(sizeof(VkDescriptorSetLayout));
___return(descriptorsetlayout);")
   (define-c-lambda
      ptr->VkDescriptorSetLayout
      ((pointer VkDescriptorSetLayout))
      VkDescriptorSetLayout
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorPool
      ()
      (pointer VkDescriptorPool)
      "VkDescriptorPool* descriptorpool = malloc(sizeof(VkDescriptorPool));
___return(descriptorpool);")
   (define-c-lambda
      ptr->VkDescriptorPool
      ((pointer VkDescriptorPool))
      VkDescriptorPool
      "___return(*___arg1);")
   (define-c-lambda
      make-VkFence
      ()
      (pointer VkFence)
      "VkFence* fence = malloc(sizeof(VkFence));
___return(fence);")
   (define-c-lambda ptr->VkFence ((pointer VkFence)) VkFence "___return(*___arg1);")
   (define-c-lambda
      make-VkSemaphore
      ()
      (pointer VkSemaphore)
      "VkSemaphore* semaphore = malloc(sizeof(VkSemaphore));
___return(semaphore);")
   (define-c-lambda
      ptr->VkSemaphore
      ((pointer VkSemaphore))
      VkSemaphore
      "___return(*___arg1);")
   (define-c-lambda
      make-VkEvent
      ()
      (pointer VkEvent)
      "VkEvent* event = malloc(sizeof(VkEvent));
___return(event);")
   (define-c-lambda ptr->VkEvent ((pointer VkEvent)) VkEvent "___return(*___arg1);")
   (define-c-lambda
      make-VkQueryPool
      ()
      (pointer VkQueryPool)
      "VkQueryPool* querypool = malloc(sizeof(VkQueryPool));
___return(querypool);")
   (define-c-lambda
      ptr->VkQueryPool
      ((pointer VkQueryPool))
      VkQueryPool
      "___return(*___arg1);")
   (define-c-lambda
      make-VkFramebuffer
      ()
      (pointer VkFramebuffer)
      "VkFramebuffer* framebuffer = malloc(sizeof(VkFramebuffer));
___return(framebuffer);")
   (define-c-lambda
      ptr->VkFramebuffer
      ((pointer VkFramebuffer))
      VkFramebuffer
      "___return(*___arg1);")
   (define-c-lambda
      make-VkRenderPass
      ()
      (pointer VkRenderPass)
      "VkRenderPass* renderpass = malloc(sizeof(VkRenderPass));
___return(renderpass);")
   (define-c-lambda
      ptr->VkRenderPass
      ((pointer VkRenderPass))
      VkRenderPass
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineCache
      ()
      (pointer VkPipelineCache)
      "VkPipelineCache* pipelinecache = malloc(sizeof(VkPipelineCache));
___return(pipelinecache);")
   (define-c-lambda
      ptr->VkPipelineCache
      ((pointer VkPipelineCache))
      VkPipelineCache
      "___return(*___arg1);")
   (define-c-lambda
      make-VkObjectTableNVX
      ()
      (pointer VkObjectTableNVX)
      "VkObjectTableNVX* objecttablenvx = malloc(sizeof(VkObjectTableNVX));
___return(objecttablenvx);")
   (define-c-lambda
      ptr->VkObjectTableNVX
      ((pointer VkObjectTableNVX))
      VkObjectTableNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkIndirectCommandsLayoutNVX
      ()
      (pointer VkIndirectCommandsLayoutNVX)
      "VkIndirectCommandsLayoutNVX* indirectcommandslayoutnvx = malloc(sizeof(VkIndirectCommandsLayoutNVX));
___return(indirectcommandslayoutnvx);")
   (define-c-lambda
      ptr->VkIndirectCommandsLayoutNVX
      ((pointer VkIndirectCommandsLayoutNVX))
      VkIndirectCommandsLayoutNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorUpdateTemplate
      ()
      (pointer VkDescriptorUpdateTemplate)
      "VkDescriptorUpdateTemplate* descriptorupdatetemplate = malloc(sizeof(VkDescriptorUpdateTemplate));
___return(descriptorupdatetemplate);")
   (define-c-lambda
      ptr->VkDescriptorUpdateTemplate
      ((pointer VkDescriptorUpdateTemplate))
      VkDescriptorUpdateTemplate
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSamplerYcbcrConversion
      ()
      (pointer VkSamplerYcbcrConversion)
      "VkSamplerYcbcrConversion* samplerycbcrconversion = malloc(sizeof(VkSamplerYcbcrConversion));
___return(samplerycbcrconversion);")
   (define-c-lambda
      ptr->VkSamplerYcbcrConversion
      ((pointer VkSamplerYcbcrConversion))
      VkSamplerYcbcrConversion
      "___return(*___arg1);")
   (define-c-lambda
      make-VkValidationCacheEXT
      ()
      (pointer VkValidationCacheEXT)
      "VkValidationCacheEXT* validationcacheext = malloc(sizeof(VkValidationCacheEXT));
___return(validationcacheext);")
   (define-c-lambda
      ptr->VkValidationCacheEXT
      ((pointer VkValidationCacheEXT))
      VkValidationCacheEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkAccelerationStructureNV
      ()
      (pointer VkAccelerationStructureNV)
      "VkAccelerationStructureNV* accelerationstructurenv = malloc(sizeof(VkAccelerationStructureNV));
___return(accelerationstructurenv);")
   (define-c-lambda
      ptr->VkAccelerationStructureNV
      ((pointer VkAccelerationStructureNV))
      VkAccelerationStructureNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPerformanceConfigurationINTEL
      ()
      (pointer VkPerformanceConfigurationINTEL)
      "VkPerformanceConfigurationINTEL* performanceconfigurationintel = malloc(sizeof(VkPerformanceConfigurationINTEL));
___return(performanceconfigurationintel);")
   (define-c-lambda
      ptr->VkPerformanceConfigurationINTEL
      ((pointer VkPerformanceConfigurationINTEL))
      VkPerformanceConfigurationINTEL
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDisplayKHR
      ()
      (pointer VkDisplayKHR)
      "VkDisplayKHR* displaykhr = malloc(sizeof(VkDisplayKHR));
___return(displaykhr);")
   (define-c-lambda
      ptr->VkDisplayKHR
      ((pointer VkDisplayKHR))
      VkDisplayKHR
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDisplayModeKHR
      ()
      (pointer VkDisplayModeKHR)
      "VkDisplayModeKHR* displaymodekhr = malloc(sizeof(VkDisplayModeKHR));
___return(displaymodekhr);")
   (define-c-lambda
      ptr->VkDisplayModeKHR
      ((pointer VkDisplayModeKHR))
      VkDisplayModeKHR
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSurfaceKHR
      ()
      (pointer VkSurfaceKHR)
      "VkSurfaceKHR* surfacekhr = malloc(sizeof(VkSurfaceKHR));
___return(surfacekhr);")
   (define-c-lambda
      ptr->VkSurfaceKHR
      ((pointer VkSurfaceKHR))
      VkSurfaceKHR
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSwapchainKHR
      ()
      (pointer VkSwapchainKHR)
      "VkSwapchainKHR* swapchainkhr = malloc(sizeof(VkSwapchainKHR));
___return(swapchainkhr);")
   (define-c-lambda
      ptr->VkSwapchainKHR
      ((pointer VkSwapchainKHR))
      VkSwapchainKHR
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugReportCallbackEXT
      ()
      (pointer VkDebugReportCallbackEXT)
      "VkDebugReportCallbackEXT* debugreportcallbackext = malloc(sizeof(VkDebugReportCallbackEXT));
___return(debugreportcallbackext);")
   (define-c-lambda
      ptr->VkDebugReportCallbackEXT
      ((pointer VkDebugReportCallbackEXT))
      VkDebugReportCallbackEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugUtilsMessengerEXT
      ()
      (pointer VkDebugUtilsMessengerEXT)
      "VkDebugUtilsMessengerEXT* debugutilsmessengerext = malloc(sizeof(VkDebugUtilsMessengerEXT));
___return(debugutilsmessengerext);")
   (define-c-lambda
      ptr->VkDebugUtilsMessengerEXT
      ((pointer VkDebugUtilsMessengerEXT))
      VkDebugUtilsMessengerEXT
      "___return(*___arg1);"))
(begin-ffi
   (VkDeviceAddress
      VkDeviceAddress*
      VkDeviceSize
      VkDeviceSize*
      VkFlags
      VkFlags*
      VkBool32
      VkBool32*
      VkSampleMask
      VkSampleMask*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSampleMask "uint32_t")
   (c-define-type VkSampleMask* (pointer VkSampleMask))
   (c-define-type VkBool32 "uint32_t")
   (c-define-type VkBool32* (pointer VkBool32))
   (c-define-type VkFlags "uint32_t")
   (c-define-type VkFlags* (pointer VkFlags))
   (c-define-type VkDeviceSize "uint64_t")
   (c-define-type VkDeviceSize* (pointer VkDeviceSize))
   (c-define-type VkDeviceAddress "uint64_t")
   (c-define-type VkDeviceAddress* (pointer VkDeviceAddress)))
(begin-ffi
   (VkSwapchainImageUsageFlagsANDROID
      VkSwapchainImageUsageFlagsANDROID*
      VkPipelineRasterizationDepthClipStateCreateFlagsEXT
      VkPipelineRasterizationDepthClipStateCreateFlagsEXT*
      VkPipelineRasterizationStateStreamCreateFlagsEXT
      VkPipelineRasterizationStateStreamCreateFlagsEXT*
      VkResolveModeFlagsKHR
      VkResolveModeFlagsKHR*
      VkConditionalRenderingFlagsEXT
      VkConditionalRenderingFlagsEXT*
      VkDescriptorBindingFlagsEXT
      VkDescriptorBindingFlagsEXT*
      VkPipelineRasterizationConservativeStateCreateFlagsEXT
      VkPipelineRasterizationConservativeStateCreateFlagsEXT*
      VkDebugUtilsMessengerCallbackDataFlagsEXT
      VkDebugUtilsMessengerCallbackDataFlagsEXT*
      VkDebugUtilsMessengerCreateFlagsEXT
      VkDebugUtilsMessengerCreateFlagsEXT*
      VkDebugUtilsMessageTypeFlagsEXT
      VkDebugUtilsMessageTypeFlagsEXT*
      VkDebugUtilsMessageSeverityFlagsEXT
      VkDebugUtilsMessageSeverityFlagsEXT*
      VkValidationCacheCreateFlagsEXT
      VkValidationCacheCreateFlagsEXT*
      VkPipelineCoverageReductionStateCreateFlagsNV
      VkPipelineCoverageReductionStateCreateFlagsNV*
      VkPipelineCoverageModulationStateCreateFlagsNV
      VkPipelineCoverageModulationStateCreateFlagsNV*
      VkPipelineCoverageToColorStateCreateFlagsNV
      VkPipelineCoverageToColorStateCreateFlagsNV*
      VkPipelineDiscardRectangleStateCreateFlagsEXT
      VkPipelineDiscardRectangleStateCreateFlagsEXT*
      VkPipelineViewportSwizzleStateCreateFlagsNV
      VkPipelineViewportSwizzleStateCreateFlagsNV*
      VkSurfaceCounterFlagsEXT
      VkSurfaceCounterFlagsEXT*
      VkFenceImportFlagsKHR
      VkFenceImportFlagsKHR*
      VkFenceImportFlags
      VkFenceImportFlags*
      VkExternalFenceFeatureFlagsKHR
      VkExternalFenceFeatureFlagsKHR*
      VkExternalFenceFeatureFlags
      VkExternalFenceFeatureFlags*
      VkExternalFenceHandleTypeFlagsKHR
      VkExternalFenceHandleTypeFlagsKHR*
      VkExternalFenceHandleTypeFlags
      VkExternalFenceHandleTypeFlags*
      VkSemaphoreImportFlagsKHR
      VkSemaphoreImportFlagsKHR*
      VkSemaphoreImportFlags
      VkSemaphoreImportFlags*
      VkExternalSemaphoreFeatureFlagsKHR
      VkExternalSemaphoreFeatureFlagsKHR*
      VkExternalSemaphoreFeatureFlags
      VkExternalSemaphoreFeatureFlags*
      VkExternalSemaphoreHandleTypeFlagsKHR
      VkExternalSemaphoreHandleTypeFlagsKHR*
      VkExternalSemaphoreHandleTypeFlags
      VkExternalSemaphoreHandleTypeFlags*
      VkExternalMemoryFeatureFlagsKHR
      VkExternalMemoryFeatureFlagsKHR*
      VkExternalMemoryFeatureFlags
      VkExternalMemoryFeatureFlags*
      VkExternalMemoryHandleTypeFlagsKHR
      VkExternalMemoryHandleTypeFlagsKHR*
      VkExternalMemoryHandleTypeFlags
      VkExternalMemoryHandleTypeFlags*
      VkExternalMemoryFeatureFlagsNV
      VkExternalMemoryFeatureFlagsNV*
      VkExternalMemoryHandleTypeFlagsNV
      VkExternalMemoryHandleTypeFlagsNV*
      VkCommandPoolTrimFlagsKHR
      VkCommandPoolTrimFlagsKHR*
      VkCommandPoolTrimFlags
      VkCommandPoolTrimFlags*
      VkDebugReportFlagsEXT
      VkDebugReportFlagsEXT*
      VkDeviceGroupPresentModeFlagsKHR
      VkDeviceGroupPresentModeFlagsKHR*
      VkMemoryAllocateFlagsKHR
      VkMemoryAllocateFlagsKHR*
      VkMemoryAllocateFlags
      VkMemoryAllocateFlags*
      VkPeerMemoryFeatureFlagsKHR
      VkPeerMemoryFeatureFlagsKHR*
      VkPeerMemoryFeatureFlags
      VkPeerMemoryFeatureFlags*
      VkHeadlessSurfaceCreateFlagsEXT
      VkHeadlessSurfaceCreateFlagsEXT*
      VkStreamDescriptorSurfaceCreateFlagsGGP
      VkStreamDescriptorSurfaceCreateFlagsGGP*
      VkImagePipeSurfaceCreateFlagsFUCHSIA
      VkImagePipeSurfaceCreateFlagsFUCHSIA*
      VkMetalSurfaceCreateFlagsEXT
      VkMetalSurfaceCreateFlagsEXT*
      VkMacOSSurfaceCreateFlagsMVK
      VkMacOSSurfaceCreateFlagsMVK*
      VkIOSSurfaceCreateFlagsMVK
      VkIOSSurfaceCreateFlagsMVK*
      VkXcbSurfaceCreateFlagsKHR
      VkXcbSurfaceCreateFlagsKHR*
      VkXlibSurfaceCreateFlagsKHR
      VkXlibSurfaceCreateFlagsKHR*
      VkWin32SurfaceCreateFlagsKHR
      VkWin32SurfaceCreateFlagsKHR*
      VkWaylandSurfaceCreateFlagsKHR
      VkWaylandSurfaceCreateFlagsKHR*
      VkViSurfaceCreateFlagsNN
      VkViSurfaceCreateFlagsNN*
      VkAndroidSurfaceCreateFlagsKHR
      VkAndroidSurfaceCreateFlagsKHR*
      VkDisplaySurfaceCreateFlagsKHR
      VkDisplaySurfaceCreateFlagsKHR*
      VkDisplayModeCreateFlagsKHR
      VkDisplayModeCreateFlagsKHR*
      VkSwapchainCreateFlagsKHR
      VkSwapchainCreateFlagsKHR*
      VkSurfaceTransformFlagsKHR
      VkSurfaceTransformFlagsKHR*
      VkDisplayPlaneAlphaFlagsKHR
      VkDisplayPlaneAlphaFlagsKHR*
      VkCompositeAlphaFlagsKHR
      VkCompositeAlphaFlagsKHR*
      VkShaderCorePropertiesFlagsAMD
      VkShaderCorePropertiesFlagsAMD*
      VkPipelineCompilerControlFlagsAMD
      VkPipelineCompilerControlFlagsAMD*
      VkPipelineCreationFeedbackFlagsEXT
      VkPipelineCreationFeedbackFlagsEXT*
      VkDescriptorUpdateTemplateCreateFlagsKHR
      VkDescriptorUpdateTemplateCreateFlagsKHR*
      VkDescriptorUpdateTemplateCreateFlags
      VkDescriptorUpdateTemplateCreateFlags*
      VkBuildAccelerationStructureFlagsNV
      VkBuildAccelerationStructureFlagsNV*
      VkGeometryInstanceFlagsNV
      VkGeometryInstanceFlagsNV*
      VkGeometryFlagsNV
      VkGeometryFlagsNV*
      VkObjectEntryUsageFlagsNVX
      VkObjectEntryUsageFlagsNVX*
      VkIndirectCommandsLayoutUsageFlagsNVX
      VkIndirectCommandsLayoutUsageFlagsNVX*
      VkSubgroupFeatureFlags
      VkSubgroupFeatureFlags*
      VkDependencyFlags
      VkDependencyFlags*
      VkDescriptorPoolResetFlags
      VkDescriptorPoolResetFlags*
      VkDescriptorPoolCreateFlags
      VkDescriptorPoolCreateFlags*
      VkCullModeFlags
      VkCullModeFlags*
      VkStencilFaceFlags
      VkStencilFaceFlags*
      VkAttachmentDescriptionFlags
      VkAttachmentDescriptionFlags*
      VkSampleCountFlags
      VkSampleCountFlags*
      VkPipelineStageFlags
      VkPipelineStageFlags*
      VkSubpassDescriptionFlags
      VkSubpassDescriptionFlags*
      VkSparseImageFormatFlags
      VkSparseImageFormatFlags*
      VkSparseMemoryBindFlags
      VkSparseMemoryBindFlags*
      VkImageAspectFlags
      VkImageAspectFlags*
      VkMemoryMapFlags
      VkMemoryMapFlags*
      VkQueryPipelineStatisticFlags
      VkQueryPipelineStatisticFlags*
      VkCommandBufferUsageFlags
      VkCommandBufferUsageFlags*
      VkCommandBufferResetFlags
      VkCommandBufferResetFlags*
      VkCommandPoolResetFlags
      VkCommandPoolResetFlags*
      VkCommandPoolCreateFlags
      VkCommandPoolCreateFlags*
      VkEventCreateFlags
      VkEventCreateFlags*
      VkShaderModuleCreateFlags
      VkShaderModuleCreateFlags*
      VkQueryResultFlags
      VkQueryResultFlags*
      VkQueryControlFlags
      VkQueryControlFlags*
      VkFormatFeatureFlags
      VkFormatFeatureFlags*
      VkSemaphoreCreateFlags
      VkSemaphoreCreateFlags*
      VkFenceCreateFlags
      VkFenceCreateFlags*
      VkColorComponentFlags
      VkColorComponentFlags*
      VkPipelineCreateFlags
      VkPipelineCreateFlags*
      VkImageViewCreateFlags
      VkImageViewCreateFlags*
      VkImageCreateFlags
      VkImageCreateFlags*
      VkImageUsageFlags
      VkImageUsageFlags*
      VkShaderStageFlags
      VkShaderStageFlags*
      VkBufferCreateFlags
      VkBufferCreateFlags*
      VkBufferUsageFlags
      VkBufferUsageFlags*
      VkAccessFlags
      VkAccessFlags*
      VkMemoryHeapFlags
      VkMemoryHeapFlags*
      VkMemoryPropertyFlags
      VkMemoryPropertyFlags*
      VkQueueFlags
      VkQueueFlags*
      VkDeviceQueueCreateFlags
      VkDeviceQueueCreateFlags*
      VkDeviceCreateFlags
      VkDeviceCreateFlags*
      VkInstanceCreateFlags
      VkInstanceCreateFlags*
      VkBufferViewCreateFlags
      VkBufferViewCreateFlags*
      VkDescriptorSetLayoutCreateFlags
      VkDescriptorSetLayoutCreateFlags*
      VkPipelineShaderStageCreateFlags
      VkPipelineShaderStageCreateFlags*
      VkPipelineVertexInputStateCreateFlags
      VkPipelineVertexInputStateCreateFlags*
      VkPipelineInputAssemblyStateCreateFlags
      VkPipelineInputAssemblyStateCreateFlags*
      VkPipelineTessellationStateCreateFlags
      VkPipelineTessellationStateCreateFlags*
      VkPipelineViewportStateCreateFlags
      VkPipelineViewportStateCreateFlags*
      VkPipelineRasterizationStateCreateFlags
      VkPipelineRasterizationStateCreateFlags*
      VkPipelineMultisampleStateCreateFlags
      VkPipelineMultisampleStateCreateFlags*
      VkPipelineColorBlendStateCreateFlags
      VkPipelineColorBlendStateCreateFlags*
      VkPipelineDynamicStateCreateFlags
      VkPipelineDynamicStateCreateFlags*
      VkPipelineDepthStencilStateCreateFlags
      VkPipelineDepthStencilStateCreateFlags*
      VkPipelineCacheCreateFlags
      VkPipelineCacheCreateFlags*
      VkPipelineLayoutCreateFlags
      VkPipelineLayoutCreateFlags*
      VkSamplerCreateFlags
      VkSamplerCreateFlags*
      VkRenderPassCreateFlags
      VkRenderPassCreateFlags*
      VkQueryPoolCreateFlags
      VkQueryPoolCreateFlags*
      VkFramebufferCreateFlags
      VkFramebufferCreateFlags*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkFramebufferCreateFlags int)
   (c-define-type VkFramebufferCreateFlags* (pointer VkFramebufferCreateFlags))
   (c-define-type VkQueryPoolCreateFlags int)
   (c-define-type VkQueryPoolCreateFlags* (pointer VkQueryPoolCreateFlags))
   (c-define-type VkRenderPassCreateFlags int)
   (c-define-type VkRenderPassCreateFlags* (pointer VkRenderPassCreateFlags))
   (c-define-type VkSamplerCreateFlags int)
   (c-define-type VkSamplerCreateFlags* (pointer VkSamplerCreateFlags))
   (c-define-type VkPipelineLayoutCreateFlags int)
   (c-define-type VkPipelineLayoutCreateFlags* (pointer VkPipelineLayoutCreateFlags))
   (c-define-type VkPipelineCacheCreateFlags int)
   (c-define-type VkPipelineCacheCreateFlags* (pointer VkPipelineCacheCreateFlags))
   (c-define-type VkPipelineDepthStencilStateCreateFlags int)
   (c-define-type
      VkPipelineDepthStencilStateCreateFlags*
      (pointer VkPipelineDepthStencilStateCreateFlags))
   (c-define-type VkPipelineDynamicStateCreateFlags int)
   (c-define-type
      VkPipelineDynamicStateCreateFlags*
      (pointer VkPipelineDynamicStateCreateFlags))
   (c-define-type VkPipelineColorBlendStateCreateFlags int)
   (c-define-type
      VkPipelineColorBlendStateCreateFlags*
      (pointer VkPipelineColorBlendStateCreateFlags))
   (c-define-type VkPipelineMultisampleStateCreateFlags int)
   (c-define-type
      VkPipelineMultisampleStateCreateFlags*
      (pointer VkPipelineMultisampleStateCreateFlags))
   (c-define-type VkPipelineRasterizationStateCreateFlags int)
   (c-define-type
      VkPipelineRasterizationStateCreateFlags*
      (pointer VkPipelineRasterizationStateCreateFlags))
   (c-define-type VkPipelineViewportStateCreateFlags int)
   (c-define-type
      VkPipelineViewportStateCreateFlags*
      (pointer VkPipelineViewportStateCreateFlags))
   (c-define-type VkPipelineTessellationStateCreateFlags int)
   (c-define-type
      VkPipelineTessellationStateCreateFlags*
      (pointer VkPipelineTessellationStateCreateFlags))
   (c-define-type VkPipelineInputAssemblyStateCreateFlags int)
   (c-define-type
      VkPipelineInputAssemblyStateCreateFlags*
      (pointer VkPipelineInputAssemblyStateCreateFlags))
   (c-define-type VkPipelineVertexInputStateCreateFlags int)
   (c-define-type
      VkPipelineVertexInputStateCreateFlags*
      (pointer VkPipelineVertexInputStateCreateFlags))
   (c-define-type VkPipelineShaderStageCreateFlags int)
   (c-define-type
      VkPipelineShaderStageCreateFlags*
      (pointer VkPipelineShaderStageCreateFlags))
   (c-define-type VkDescriptorSetLayoutCreateFlags int)
   (c-define-type
      VkDescriptorSetLayoutCreateFlags*
      (pointer VkDescriptorSetLayoutCreateFlags))
   (c-define-type VkBufferViewCreateFlags int)
   (c-define-type VkBufferViewCreateFlags* (pointer VkBufferViewCreateFlags))
   (c-define-type VkInstanceCreateFlags int)
   (c-define-type VkInstanceCreateFlags* (pointer VkInstanceCreateFlags))
   (c-define-type VkDeviceCreateFlags int)
   (c-define-type VkDeviceCreateFlags* (pointer VkDeviceCreateFlags))
   (c-define-type VkDeviceQueueCreateFlags int)
   (c-define-type VkDeviceQueueCreateFlags* (pointer VkDeviceQueueCreateFlags))
   (c-define-type VkQueueFlags int)
   (c-define-type VkQueueFlags* (pointer VkQueueFlags))
   (c-define-type VkMemoryPropertyFlags int)
   (c-define-type VkMemoryPropertyFlags* (pointer VkMemoryPropertyFlags))
   (c-define-type VkMemoryHeapFlags int)
   (c-define-type VkMemoryHeapFlags* (pointer VkMemoryHeapFlags))
   (c-define-type VkAccessFlags int)
   (c-define-type VkAccessFlags* (pointer VkAccessFlags))
   (c-define-type VkBufferUsageFlags int)
   (c-define-type VkBufferUsageFlags* (pointer VkBufferUsageFlags))
   (c-define-type VkBufferCreateFlags int)
   (c-define-type VkBufferCreateFlags* (pointer VkBufferCreateFlags))
   (c-define-type VkShaderStageFlags int)
   (c-define-type VkShaderStageFlags* (pointer VkShaderStageFlags))
   (c-define-type VkImageUsageFlags int)
   (c-define-type VkImageUsageFlags* (pointer VkImageUsageFlags))
   (c-define-type VkImageCreateFlags int)
   (c-define-type VkImageCreateFlags* (pointer VkImageCreateFlags))
   (c-define-type VkImageViewCreateFlags int)
   (c-define-type VkImageViewCreateFlags* (pointer VkImageViewCreateFlags))
   (c-define-type VkPipelineCreateFlags int)
   (c-define-type VkPipelineCreateFlags* (pointer VkPipelineCreateFlags))
   (c-define-type VkColorComponentFlags int)
   (c-define-type VkColorComponentFlags* (pointer VkColorComponentFlags))
   (c-define-type VkFenceCreateFlags int)
   (c-define-type VkFenceCreateFlags* (pointer VkFenceCreateFlags))
   (c-define-type VkSemaphoreCreateFlags int)
   (c-define-type VkSemaphoreCreateFlags* (pointer VkSemaphoreCreateFlags))
   (c-define-type VkFormatFeatureFlags int)
   (c-define-type VkFormatFeatureFlags* (pointer VkFormatFeatureFlags))
   (c-define-type VkQueryControlFlags int)
   (c-define-type VkQueryControlFlags* (pointer VkQueryControlFlags))
   (c-define-type VkQueryResultFlags int)
   (c-define-type VkQueryResultFlags* (pointer VkQueryResultFlags))
   (c-define-type VkShaderModuleCreateFlags int)
   (c-define-type VkShaderModuleCreateFlags* (pointer VkShaderModuleCreateFlags))
   (c-define-type VkEventCreateFlags int)
   (c-define-type VkEventCreateFlags* (pointer VkEventCreateFlags))
   (c-define-type VkCommandPoolCreateFlags int)
   (c-define-type VkCommandPoolCreateFlags* (pointer VkCommandPoolCreateFlags))
   (c-define-type VkCommandPoolResetFlags int)
   (c-define-type VkCommandPoolResetFlags* (pointer VkCommandPoolResetFlags))
   (c-define-type VkCommandBufferResetFlags int)
   (c-define-type VkCommandBufferResetFlags* (pointer VkCommandBufferResetFlags))
   (c-define-type VkCommandBufferUsageFlags int)
   (c-define-type VkCommandBufferUsageFlags* (pointer VkCommandBufferUsageFlags))
   (c-define-type VkQueryPipelineStatisticFlags int)
   (c-define-type VkQueryPipelineStatisticFlags* (pointer VkQueryPipelineStatisticFlags))
   (c-define-type VkMemoryMapFlags int)
   (c-define-type VkMemoryMapFlags* (pointer VkMemoryMapFlags))
   (c-define-type VkImageAspectFlags int)
   (c-define-type VkImageAspectFlags* (pointer VkImageAspectFlags))
   (c-define-type VkSparseMemoryBindFlags int)
   (c-define-type VkSparseMemoryBindFlags* (pointer VkSparseMemoryBindFlags))
   (c-define-type VkSparseImageFormatFlags int)
   (c-define-type VkSparseImageFormatFlags* (pointer VkSparseImageFormatFlags))
   (c-define-type VkSubpassDescriptionFlags int)
   (c-define-type VkSubpassDescriptionFlags* (pointer VkSubpassDescriptionFlags))
   (c-define-type VkPipelineStageFlags int)
   (c-define-type VkPipelineStageFlags* (pointer VkPipelineStageFlags))
   (c-define-type VkSampleCountFlags int)
   (c-define-type VkSampleCountFlags* (pointer VkSampleCountFlags))
   (c-define-type VkAttachmentDescriptionFlags int)
   (c-define-type VkAttachmentDescriptionFlags* (pointer VkAttachmentDescriptionFlags))
   (c-define-type VkStencilFaceFlags int)
   (c-define-type VkStencilFaceFlags* (pointer VkStencilFaceFlags))
   (c-define-type VkCullModeFlags int)
   (c-define-type VkCullModeFlags* (pointer VkCullModeFlags))
   (c-define-type VkDescriptorPoolCreateFlags int)
   (c-define-type VkDescriptorPoolCreateFlags* (pointer VkDescriptorPoolCreateFlags))
   (c-define-type VkDescriptorPoolResetFlags int)
   (c-define-type VkDescriptorPoolResetFlags* (pointer VkDescriptorPoolResetFlags))
   (c-define-type VkDependencyFlags int)
   (c-define-type VkDependencyFlags* (pointer VkDependencyFlags))
   (c-define-type VkSubgroupFeatureFlags int)
   (c-define-type VkSubgroupFeatureFlags* (pointer VkSubgroupFeatureFlags))
   (c-define-type VkIndirectCommandsLayoutUsageFlagsNVX int)
   (c-define-type
      VkIndirectCommandsLayoutUsageFlagsNVX*
      (pointer VkIndirectCommandsLayoutUsageFlagsNVX))
   (c-define-type VkObjectEntryUsageFlagsNVX int)
   (c-define-type VkObjectEntryUsageFlagsNVX* (pointer VkObjectEntryUsageFlagsNVX))
   (c-define-type VkGeometryFlagsNV int)
   (c-define-type VkGeometryFlagsNV* (pointer VkGeometryFlagsNV))
   (c-define-type VkGeometryInstanceFlagsNV int)
   (c-define-type VkGeometryInstanceFlagsNV* (pointer VkGeometryInstanceFlagsNV))
   (c-define-type VkBuildAccelerationStructureFlagsNV int)
   (c-define-type
      VkBuildAccelerationStructureFlagsNV*
      (pointer VkBuildAccelerationStructureFlagsNV))
   (c-define-type VkDescriptorUpdateTemplateCreateFlags int)
   (c-define-type
      VkDescriptorUpdateTemplateCreateFlags*
      (pointer VkDescriptorUpdateTemplateCreateFlags))
   (c-define-type VkDescriptorUpdateTemplateCreateFlagsKHR int)
   (c-define-type
      VkDescriptorUpdateTemplateCreateFlagsKHR*
      (pointer VkDescriptorUpdateTemplateCreateFlagsKHR))
   (c-define-type VkPipelineCreationFeedbackFlagsEXT int)
   (c-define-type
      VkPipelineCreationFeedbackFlagsEXT*
      (pointer VkPipelineCreationFeedbackFlagsEXT))
   (c-define-type VkPipelineCompilerControlFlagsAMD int)
   (c-define-type
      VkPipelineCompilerControlFlagsAMD*
      (pointer VkPipelineCompilerControlFlagsAMD))
   (c-define-type VkShaderCorePropertiesFlagsAMD int)
   (c-define-type
      VkShaderCorePropertiesFlagsAMD*
      (pointer VkShaderCorePropertiesFlagsAMD))
   (c-define-type VkCompositeAlphaFlagsKHR int)
   (c-define-type VkCompositeAlphaFlagsKHR* (pointer VkCompositeAlphaFlagsKHR))
   (c-define-type VkDisplayPlaneAlphaFlagsKHR int)
   (c-define-type VkDisplayPlaneAlphaFlagsKHR* (pointer VkDisplayPlaneAlphaFlagsKHR))
   (c-define-type VkSurfaceTransformFlagsKHR int)
   (c-define-type VkSurfaceTransformFlagsKHR* (pointer VkSurfaceTransformFlagsKHR))
   (c-define-type VkSwapchainCreateFlagsKHR int)
   (c-define-type VkSwapchainCreateFlagsKHR* (pointer VkSwapchainCreateFlagsKHR))
   (c-define-type VkDisplayModeCreateFlagsKHR int)
   (c-define-type VkDisplayModeCreateFlagsKHR* (pointer VkDisplayModeCreateFlagsKHR))
   (c-define-type VkDisplaySurfaceCreateFlagsKHR int)
   (c-define-type
      VkDisplaySurfaceCreateFlagsKHR*
      (pointer VkDisplaySurfaceCreateFlagsKHR))
   (c-define-type VkAndroidSurfaceCreateFlagsKHR int)
   (c-define-type
      VkAndroidSurfaceCreateFlagsKHR*
      (pointer VkAndroidSurfaceCreateFlagsKHR))
   (c-define-type VkViSurfaceCreateFlagsNN int)
   (c-define-type VkViSurfaceCreateFlagsNN* (pointer VkViSurfaceCreateFlagsNN))
   (c-define-type VkWaylandSurfaceCreateFlagsKHR int)
   (c-define-type
      VkWaylandSurfaceCreateFlagsKHR*
      (pointer VkWaylandSurfaceCreateFlagsKHR))
   (c-define-type VkWin32SurfaceCreateFlagsKHR int)
   (c-define-type VkWin32SurfaceCreateFlagsKHR* (pointer VkWin32SurfaceCreateFlagsKHR))
   (c-define-type VkXlibSurfaceCreateFlagsKHR int)
   (c-define-type VkXlibSurfaceCreateFlagsKHR* (pointer VkXlibSurfaceCreateFlagsKHR))
   (c-define-type VkXcbSurfaceCreateFlagsKHR int)
   (c-define-type VkXcbSurfaceCreateFlagsKHR* (pointer VkXcbSurfaceCreateFlagsKHR))
   (c-define-type VkIOSSurfaceCreateFlagsMVK int)
   (c-define-type VkIOSSurfaceCreateFlagsMVK* (pointer VkIOSSurfaceCreateFlagsMVK))
   (c-define-type VkMacOSSurfaceCreateFlagsMVK int)
   (c-define-type VkMacOSSurfaceCreateFlagsMVK* (pointer VkMacOSSurfaceCreateFlagsMVK))
   (c-define-type VkMetalSurfaceCreateFlagsEXT int)
   (c-define-type VkMetalSurfaceCreateFlagsEXT* (pointer VkMetalSurfaceCreateFlagsEXT))
   (c-define-type VkImagePipeSurfaceCreateFlagsFUCHSIA int)
   (c-define-type
      VkImagePipeSurfaceCreateFlagsFUCHSIA*
      (pointer VkImagePipeSurfaceCreateFlagsFUCHSIA))
   (c-define-type VkStreamDescriptorSurfaceCreateFlagsGGP int)
   (c-define-type
      VkStreamDescriptorSurfaceCreateFlagsGGP*
      (pointer VkStreamDescriptorSurfaceCreateFlagsGGP))
   (c-define-type VkHeadlessSurfaceCreateFlagsEXT int)
   (c-define-type
      VkHeadlessSurfaceCreateFlagsEXT*
      (pointer VkHeadlessSurfaceCreateFlagsEXT))
   (c-define-type VkPeerMemoryFeatureFlags int)
   (c-define-type VkPeerMemoryFeatureFlags* (pointer VkPeerMemoryFeatureFlags))
   (c-define-type VkPeerMemoryFeatureFlagsKHR int)
   (c-define-type VkPeerMemoryFeatureFlagsKHR* (pointer VkPeerMemoryFeatureFlagsKHR))
   (c-define-type VkMemoryAllocateFlags int)
   (c-define-type VkMemoryAllocateFlags* (pointer VkMemoryAllocateFlags))
   (c-define-type VkMemoryAllocateFlagsKHR int)
   (c-define-type VkMemoryAllocateFlagsKHR* (pointer VkMemoryAllocateFlagsKHR))
   (c-define-type VkDeviceGroupPresentModeFlagsKHR int)
   (c-define-type
      VkDeviceGroupPresentModeFlagsKHR*
      (pointer VkDeviceGroupPresentModeFlagsKHR))
   (c-define-type VkDebugReportFlagsEXT int)
   (c-define-type VkDebugReportFlagsEXT* (pointer VkDebugReportFlagsEXT))
   (c-define-type VkCommandPoolTrimFlags int)
   (c-define-type VkCommandPoolTrimFlags* (pointer VkCommandPoolTrimFlags))
   (c-define-type VkCommandPoolTrimFlagsKHR int)
   (c-define-type VkCommandPoolTrimFlagsKHR* (pointer VkCommandPoolTrimFlagsKHR))
   (c-define-type VkExternalMemoryHandleTypeFlagsNV int)
   (c-define-type
      VkExternalMemoryHandleTypeFlagsNV*
      (pointer VkExternalMemoryHandleTypeFlagsNV))
   (c-define-type VkExternalMemoryFeatureFlagsNV int)
   (c-define-type
      VkExternalMemoryFeatureFlagsNV*
      (pointer VkExternalMemoryFeatureFlagsNV))
   (c-define-type VkExternalMemoryHandleTypeFlags int)
   (c-define-type
      VkExternalMemoryHandleTypeFlags*
      (pointer VkExternalMemoryHandleTypeFlags))
   (c-define-type VkExternalMemoryHandleTypeFlagsKHR int)
   (c-define-type
      VkExternalMemoryHandleTypeFlagsKHR*
      (pointer VkExternalMemoryHandleTypeFlagsKHR))
   (c-define-type VkExternalMemoryFeatureFlags int)
   (c-define-type VkExternalMemoryFeatureFlags* (pointer VkExternalMemoryFeatureFlags))
   (c-define-type VkExternalMemoryFeatureFlagsKHR int)
   (c-define-type
      VkExternalMemoryFeatureFlagsKHR*
      (pointer VkExternalMemoryFeatureFlagsKHR))
   (c-define-type VkExternalSemaphoreHandleTypeFlags int)
   (c-define-type
      VkExternalSemaphoreHandleTypeFlags*
      (pointer VkExternalSemaphoreHandleTypeFlags))
   (c-define-type VkExternalSemaphoreHandleTypeFlagsKHR int)
   (c-define-type
      VkExternalSemaphoreHandleTypeFlagsKHR*
      (pointer VkExternalSemaphoreHandleTypeFlagsKHR))
   (c-define-type VkExternalSemaphoreFeatureFlags int)
   (c-define-type
      VkExternalSemaphoreFeatureFlags*
      (pointer VkExternalSemaphoreFeatureFlags))
   (c-define-type VkExternalSemaphoreFeatureFlagsKHR int)
   (c-define-type
      VkExternalSemaphoreFeatureFlagsKHR*
      (pointer VkExternalSemaphoreFeatureFlagsKHR))
   (c-define-type VkSemaphoreImportFlags int)
   (c-define-type VkSemaphoreImportFlags* (pointer VkSemaphoreImportFlags))
   (c-define-type VkSemaphoreImportFlagsKHR int)
   (c-define-type VkSemaphoreImportFlagsKHR* (pointer VkSemaphoreImportFlagsKHR))
   (c-define-type VkExternalFenceHandleTypeFlags int)
   (c-define-type
      VkExternalFenceHandleTypeFlags*
      (pointer VkExternalFenceHandleTypeFlags))
   (c-define-type VkExternalFenceHandleTypeFlagsKHR int)
   (c-define-type
      VkExternalFenceHandleTypeFlagsKHR*
      (pointer VkExternalFenceHandleTypeFlagsKHR))
   (c-define-type VkExternalFenceFeatureFlags int)
   (c-define-type VkExternalFenceFeatureFlags* (pointer VkExternalFenceFeatureFlags))
   (c-define-type VkExternalFenceFeatureFlagsKHR int)
   (c-define-type
      VkExternalFenceFeatureFlagsKHR*
      (pointer VkExternalFenceFeatureFlagsKHR))
   (c-define-type VkFenceImportFlags int)
   (c-define-type VkFenceImportFlags* (pointer VkFenceImportFlags))
   (c-define-type VkFenceImportFlagsKHR int)
   (c-define-type VkFenceImportFlagsKHR* (pointer VkFenceImportFlagsKHR))
   (c-define-type VkSurfaceCounterFlagsEXT int)
   (c-define-type VkSurfaceCounterFlagsEXT* (pointer VkSurfaceCounterFlagsEXT))
   (c-define-type VkPipelineViewportSwizzleStateCreateFlagsNV int)
   (c-define-type
      VkPipelineViewportSwizzleStateCreateFlagsNV*
      (pointer VkPipelineViewportSwizzleStateCreateFlagsNV))
   (c-define-type VkPipelineDiscardRectangleStateCreateFlagsEXT int)
   (c-define-type
      VkPipelineDiscardRectangleStateCreateFlagsEXT*
      (pointer VkPipelineDiscardRectangleStateCreateFlagsEXT))
   (c-define-type VkPipelineCoverageToColorStateCreateFlagsNV int)
   (c-define-type
      VkPipelineCoverageToColorStateCreateFlagsNV*
      (pointer VkPipelineCoverageToColorStateCreateFlagsNV))
   (c-define-type VkPipelineCoverageModulationStateCreateFlagsNV int)
   (c-define-type
      VkPipelineCoverageModulationStateCreateFlagsNV*
      (pointer VkPipelineCoverageModulationStateCreateFlagsNV))
   (c-define-type VkPipelineCoverageReductionStateCreateFlagsNV int)
   (c-define-type
      VkPipelineCoverageReductionStateCreateFlagsNV*
      (pointer VkPipelineCoverageReductionStateCreateFlagsNV))
   (c-define-type VkValidationCacheCreateFlagsEXT int)
   (c-define-type
      VkValidationCacheCreateFlagsEXT*
      (pointer VkValidationCacheCreateFlagsEXT))
   (c-define-type VkDebugUtilsMessageSeverityFlagsEXT int)
   (c-define-type
      VkDebugUtilsMessageSeverityFlagsEXT*
      (pointer VkDebugUtilsMessageSeverityFlagsEXT))
   (c-define-type VkDebugUtilsMessageTypeFlagsEXT int)
   (c-define-type
      VkDebugUtilsMessageTypeFlagsEXT*
      (pointer VkDebugUtilsMessageTypeFlagsEXT))
   (c-define-type VkDebugUtilsMessengerCreateFlagsEXT int)
   (c-define-type
      VkDebugUtilsMessengerCreateFlagsEXT*
      (pointer VkDebugUtilsMessengerCreateFlagsEXT))
   (c-define-type VkDebugUtilsMessengerCallbackDataFlagsEXT int)
   (c-define-type
      VkDebugUtilsMessengerCallbackDataFlagsEXT*
      (pointer VkDebugUtilsMessengerCallbackDataFlagsEXT))
   (c-define-type VkPipelineRasterizationConservativeStateCreateFlagsEXT int)
   (c-define-type
      VkPipelineRasterizationConservativeStateCreateFlagsEXT*
      (pointer VkPipelineRasterizationConservativeStateCreateFlagsEXT))
   (c-define-type VkDescriptorBindingFlagsEXT int)
   (c-define-type VkDescriptorBindingFlagsEXT* (pointer VkDescriptorBindingFlagsEXT))
   (c-define-type VkConditionalRenderingFlagsEXT int)
   (c-define-type
      VkConditionalRenderingFlagsEXT*
      (pointer VkConditionalRenderingFlagsEXT))
   (c-define-type VkResolveModeFlagsKHR int)
   (c-define-type VkResolveModeFlagsKHR* (pointer VkResolveModeFlagsKHR))
   (c-define-type VkPipelineRasterizationStateStreamCreateFlagsEXT int)
   (c-define-type
      VkPipelineRasterizationStateStreamCreateFlagsEXT*
      (pointer VkPipelineRasterizationStateStreamCreateFlagsEXT))
   (c-define-type VkPipelineRasterizationDepthClipStateCreateFlagsEXT int)
   (c-define-type
      VkPipelineRasterizationDepthClipStateCreateFlagsEXT*
      (pointer VkPipelineRasterizationDepthClipStateCreateFlagsEXT))
   (c-define-type VkSwapchainImageUsageFlagsANDROID int)
   (c-define-type
      VkSwapchainImageUsageFlagsANDROID*
      (pointer VkSwapchainImageUsageFlagsANDROID)))
(begin-ffi
   (uint16_t
      uint16_t*
      uint8_t
      uint8_t*
      uint32_t
      uint32_t*
      uint64_t
      uint64_t*
      int64_t
      int64_t*
      int32_t
      int32_t*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type int32_t int)
   (c-define-type int32_t* (pointer int32_t))
   (c-define-type int64_t int)
   (c-define-type int64_t* (pointer int64_t))
   (c-define-type uint64_t int)
   (c-define-type uint64_t* (pointer uint64_t))
   (c-define-type uint32_t int)
   (c-define-type uint32_t* (pointer uint32_t))
   (c-define-type uint8_t int)
   (c-define-type uint8_t* (pointer uint8_t))
   (c-define-type uint16_t int)
   (c-define-type uint16_t* (pointer uint16_t)))
(begin-ffi
   (char* char**)
   (c-define-type char* char-string)
   (c-define-type char** (pointer char-string)))
(begin-ffi
   (VkPipelineExecutableStatisticFormatKHR
      VkPipelineExecutableStatisticFormatKHR*
      VkCoarseSampleOrderTypeNV
      VkCoarseSampleOrderTypeNV*
      VkShadingRatePaletteEntryNV
      VkShadingRatePaletteEntryNV*
      VkDriverIdKHR
      VkDriverIdKHR*
      VkVendorId
      VkVendorId*
      VkSwapchainImageUsageFlagBitsANDROID
      VkSwapchainImageUsageFlagBitsANDROID*
      VkShaderFloatControlsIndependenceKHR
      VkShaderFloatControlsIndependenceKHR*
      VkFullScreenExclusiveEXT
      VkFullScreenExclusiveEXT*
      VkDebugUtilsMessageTypeFlagBitsEXT
      VkDebugUtilsMessageTypeFlagBitsEXT*
      VkDebugUtilsMessageSeverityFlagBitsEXT
      VkDebugUtilsMessageSeverityFlagBitsEXT*
      VkBlendOverlapEXT
      VkBlendOverlapEXT*
      VkSamplerReductionModeEXT
      VkSamplerReductionModeEXT*
      VkChromaLocationKHR
      VkChromaLocationKHR*
      VkChromaLocation
      VkChromaLocation*
      VkSamplerYcbcrRangeKHR
      VkSamplerYcbcrRangeKHR*
      VkSamplerYcbcrRange
      VkSamplerYcbcrRange*
      VkSamplerYcbcrModelConversionKHR
      VkSamplerYcbcrModelConversionKHR*
      VkSamplerYcbcrModelConversion
      VkSamplerYcbcrModelConversion*
      VkTessellationDomainOriginKHR
      VkTessellationDomainOriginKHR*
      VkTessellationDomainOrigin
      VkTessellationDomainOrigin*
      VkSubgroupFeatureFlagBits
      VkSubgroupFeatureFlagBits*
      VkSwapchainCreateFlagBitsKHR
      VkSwapchainCreateFlagBitsKHR*
      VkDeviceGroupPresentModeFlagBitsKHR
      VkDeviceGroupPresentModeFlagBitsKHR*
      VkMemoryAllocateFlagBitsKHR
      VkMemoryAllocateFlagBitsKHR*
      VkMemoryAllocateFlagBits
      VkMemoryAllocateFlagBits*
      VkPeerMemoryFeatureFlagBitsKHR
      VkPeerMemoryFeatureFlagBitsKHR*
      VkPeerMemoryFeatureFlagBits
      VkPeerMemoryFeatureFlagBits*
      VkDisplayEventTypeEXT
      VkDisplayEventTypeEXT*
      VkDeviceEventTypeEXT
      VkDeviceEventTypeEXT*
      VkDisplayPowerStateEXT
      VkDisplayPowerStateEXT*
      VkSurfaceCounterFlagBitsEXT
      VkSurfaceCounterFlagBitsEXT*
      VkFenceImportFlagBitsKHR
      VkFenceImportFlagBitsKHR*
      VkFenceImportFlagBits
      VkFenceImportFlagBits*
      VkExternalFenceFeatureFlagBitsKHR
      VkExternalFenceFeatureFlagBitsKHR*
      VkExternalFenceFeatureFlagBits
      VkExternalFenceFeatureFlagBits*
      VkExternalFenceHandleTypeFlagBitsKHR
      VkExternalFenceHandleTypeFlagBitsKHR*
      VkExternalFenceHandleTypeFlagBits
      VkExternalFenceHandleTypeFlagBits*
      VkSemaphoreImportFlagBitsKHR
      VkSemaphoreImportFlagBitsKHR*
      VkSemaphoreImportFlagBits
      VkSemaphoreImportFlagBits*
      VkExternalSemaphoreFeatureFlagBitsKHR
      VkExternalSemaphoreFeatureFlagBitsKHR*
      VkExternalSemaphoreFeatureFlagBits
      VkExternalSemaphoreFeatureFlagBits*
      VkExternalSemaphoreHandleTypeFlagBitsKHR
      VkExternalSemaphoreHandleTypeFlagBitsKHR*
      VkExternalSemaphoreHandleTypeFlagBits
      VkExternalSemaphoreHandleTypeFlagBits*
      VkExternalMemoryFeatureFlagBitsKHR
      VkExternalMemoryFeatureFlagBitsKHR*
      VkExternalMemoryFeatureFlagBits
      VkExternalMemoryFeatureFlagBits*
      VkExternalMemoryHandleTypeFlagBitsKHR
      VkExternalMemoryHandleTypeFlagBitsKHR*
      VkExternalMemoryHandleTypeFlagBits
      VkExternalMemoryHandleTypeFlagBits*
      VkValidationFeatureDisableEXT
      VkValidationFeatureDisableEXT*
      VkValidationFeatureEnableEXT
      VkValidationFeatureEnableEXT*
      VkValidationCheckEXT
      VkValidationCheckEXT*
      VkExternalMemoryFeatureFlagBitsNV
      VkExternalMemoryFeatureFlagBitsNV*
      VkExternalMemoryHandleTypeFlagBitsNV
      VkExternalMemoryHandleTypeFlagBitsNV*
      VkRasterizationOrderAMD
      VkRasterizationOrderAMD*
      VkDebugReportObjectTypeEXT
      VkDebugReportObjectTypeEXT*
      VkDebugReportFlagBitsEXT
      VkDebugReportFlagBitsEXT*
      VkSurfaceTransformFlagBitsKHR
      VkSurfaceTransformFlagBitsKHR*
      VkPresentModeKHR
      VkPresentModeKHR*
      VkDisplayPlaneAlphaFlagBitsKHR
      VkDisplayPlaneAlphaFlagBitsKHR*
      VkCompositeAlphaFlagBitsKHR
      VkCompositeAlphaFlagBitsKHR*
      VkColorSpaceKHR
      VkColorSpaceKHR*
      VkShaderCorePropertiesFlagBitsAMD
      VkShaderCorePropertiesFlagBitsAMD*
      VkPipelineCompilerControlFlagBitsAMD
      VkPipelineCompilerControlFlagBitsAMD*
      VkShaderModuleCreateFlagBits
      VkShaderModuleCreateFlagBits*
      VkLineRasterizationModeEXT
      VkLineRasterizationModeEXT*
      VkPerformanceValueTypeINTEL
      VkPerformanceValueTypeINTEL*
      VkPerformanceParameterTypeINTEL
      VkPerformanceParameterTypeINTEL*
      VkPerformanceOverrideTypeINTEL
      VkPerformanceOverrideTypeINTEL*
      VkQueryPoolSamplingModeINTEL
      VkQueryPoolSamplingModeINTEL*
      VkPerformanceConfigurationTypeINTEL
      VkPerformanceConfigurationTypeINTEL*
      VkPipelineCreationFeedbackFlagBitsEXT
      VkPipelineCreationFeedbackFlagBitsEXT*
      VkComponentTypeNV
      VkComponentTypeNV*
      VkScopeNV
      VkScopeNV*
      VkMemoryOverallocationBehaviorAMD
      VkMemoryOverallocationBehaviorAMD*
      VkAccelerationStructureMemoryRequirementsTypeNV
      VkAccelerationStructureMemoryRequirementsTypeNV*
      VkRayTracingShaderGroupTypeNV
      VkRayTracingShaderGroupTypeNV*
      VkGeometryTypeNV
      VkGeometryTypeNV*
      VkAccelerationStructureTypeNV
      VkAccelerationStructureTypeNV*
      VkCopyAccelerationStructureModeNV
      VkCopyAccelerationStructureModeNV*
      VkBuildAccelerationStructureFlagBitsNV
      VkBuildAccelerationStructureFlagBitsNV*
      VkGeometryInstanceFlagBitsNV
      VkGeometryInstanceFlagBitsNV*
      VkGeometryFlagBitsNV
      VkGeometryFlagBitsNV*
      VkResolveModeFlagBitsKHR
      VkResolveModeFlagBitsKHR*
      VkConservativeRasterizationModeEXT
      VkConservativeRasterizationModeEXT*
      VkTimeDomainEXT
      VkTimeDomainEXT*
      VkQueueGlobalPriorityEXT
      VkQueueGlobalPriorityEXT*
      VkShaderInfoTypeAMD
      VkShaderInfoTypeAMD*
      VkValidationCacheHeaderVersionEXT
      VkValidationCacheHeaderVersionEXT*
      VkCoverageReductionModeNV
      VkCoverageReductionModeNV*
      VkCoverageModulationModeNV
      VkCoverageModulationModeNV*
      VkPointClippingBehaviorKHR
      VkPointClippingBehaviorKHR*
      VkPointClippingBehavior
      VkPointClippingBehavior*
      VkSubpassDescriptionFlagBits
      VkSubpassDescriptionFlagBits*
      VkDiscardRectangleModeEXT
      VkDiscardRectangleModeEXT*
      VkViewportCoordinateSwizzleNV
      VkViewportCoordinateSwizzleNV*
      VkDescriptorUpdateTemplateTypeKHR
      VkDescriptorUpdateTemplateTypeKHR*
      VkDescriptorUpdateTemplateType
      VkDescriptorUpdateTemplateType*
      VkObjectEntryTypeNVX
      VkObjectEntryTypeNVX*
      VkObjectEntryUsageFlagBitsNVX
      VkObjectEntryUsageFlagBitsNVX*
      VkIndirectCommandsTokenTypeNVX
      VkIndirectCommandsTokenTypeNVX*
      VkIndirectCommandsLayoutUsageFlagBitsNVX
      VkIndirectCommandsLayoutUsageFlagBitsNVX*
      VkConditionalRenderingFlagBitsEXT
      VkConditionalRenderingFlagBitsEXT*
      VkDescriptorBindingFlagBitsEXT
      VkDescriptorBindingFlagBitsEXT*
      VkObjectType
      VkObjectType*
      VkDependencyFlagBits
      VkDependencyFlagBits*
      VkDescriptorPoolCreateFlagBits
      VkDescriptorPoolCreateFlagBits*
      VkAttachmentDescriptionFlagBits
      VkAttachmentDescriptionFlagBits*
      VkSampleCountFlagBits
      VkSampleCountFlagBits*
      VkSparseImageFormatFlagBits
      VkSparseImageFormatFlagBits*
      VkPipelineStageFlagBits
      VkPipelineStageFlagBits*
      VkVertexInputRate
      VkVertexInputRate*
      VkSamplerMipmapMode
      VkSamplerMipmapMode*
      VkFilter
      VkFilter*
      VkSamplerAddressMode
      VkSamplerAddressMode*
      VkInternalAllocationType
      VkInternalAllocationType*
      VkSystemAllocationScope
      VkSystemAllocationScope*
      VkStructureType
      VkStructureType*
      VkStencilOp
      VkStencilOp*
      VkStencilFaceFlagBits
      VkStencilFaceFlagBits*
      VkSparseMemoryBindFlagBits
      VkSparseMemoryBindFlagBits*
      VkShaderStageFlagBits
      VkShaderStageFlagBits*
      VkResult
      VkResult*
      VkSubpassContents
      VkSubpassContents*
      VkQueueFlagBits
      VkQueueFlagBits*
      VkQueryType
      VkQueryType*
      VkQueryResultFlagBits
      VkQueryResultFlagBits*
      VkQueryPipelineStatisticFlagBits
      VkQueryPipelineStatisticFlagBits*
      VkQueryControlFlagBits
      VkQueryControlFlagBits*
      VkPrimitiveTopology
      VkPrimitiveTopology*
      VkPipelineCreateFlagBits
      VkPipelineCreateFlagBits*
      VkPipelineBindPoint
      VkPipelineBindPoint*
      VkPhysicalDeviceType
      VkPhysicalDeviceType*
      VkMemoryPropertyFlagBits
      VkMemoryPropertyFlagBits*
      VkAccessFlagBits
      VkAccessFlagBits*
      VkMemoryHeapFlagBits
      VkMemoryHeapFlagBits*
      VkLogicOp
      VkLogicOp*
      VkIndexType
      VkIndexType*
      VkSharingMode
      VkSharingMode*
      VkImageViewType
      VkImageViewType*
      VkImageViewCreateFlagBits
      VkImageViewCreateFlagBits*
      VkImageUsageFlagBits
      VkImageUsageFlagBits*
      VkImageType
      VkImageType*
      VkImageTiling
      VkImageTiling*
      VkImageLayout
      VkImageLayout*
      VkImageCreateFlagBits
      VkImageCreateFlagBits*
      VkImageAspectFlagBits
      VkImageAspectFlagBits*
      VkFrontFace
      VkFrontFace*
      VkFormatFeatureFlagBits
      VkFormatFeatureFlagBits*
      VkFormat
      VkFormat*
      VkPolygonMode
      VkPolygonMode*
      VkFenceCreateFlagBits
      VkFenceCreateFlagBits*
      VkDynamicState
      VkDynamicState*
      VkDeviceCreateFlagBits
      VkDeviceCreateFlagBits*
      VkDescriptorType
      VkDescriptorType*
      VkCullModeFlagBits
      VkCullModeFlagBits*
      VkCompareOp
      VkCompareOp*
      VkCommandBufferUsageFlagBits
      VkCommandBufferUsageFlagBits*
      VkCommandBufferLevel
      VkCommandBufferLevel*
      VkCommandBufferResetFlagBits
      VkCommandBufferResetFlagBits*
      VkCommandPoolResetFlagBits
      VkCommandPoolResetFlagBits*
      VkCommandPoolCreateFlagBits
      VkCommandPoolCreateFlagBits*
      VkComponentSwizzle
      VkComponentSwizzle*
      VkColorComponentFlagBits
      VkColorComponentFlagBits*
      VkBufferUsageFlagBits
      VkBufferUsageFlagBits*
      VkBufferCreateFlagBits
      VkBufferCreateFlagBits*
      VkDeviceQueueCreateFlagBits
      VkDeviceQueueCreateFlagBits*
      VkInstanceCreateFlagBits
      VkInstanceCreateFlagBits*
      VkBufferViewCreateFlagBits
      VkBufferViewCreateFlagBits*
      VkDescriptorSetLayoutCreateFlagBits
      VkDescriptorSetLayoutCreateFlagBits*
      VkPipelineShaderStageCreateFlagBits
      VkPipelineShaderStageCreateFlagBits*
      VkPipelineVertexInputStateCreateFlagBits
      VkPipelineVertexInputStateCreateFlagBits*
      VkPipelineInputAssemblyStateCreateFlagBits
      VkPipelineInputAssemblyStateCreateFlagBits*
      VkPipelineTessellationStateCreateFlagBits
      VkPipelineTessellationStateCreateFlagBits*
      VkPipelineViewportStateCreateFlagBits
      VkPipelineViewportStateCreateFlagBits*
      VkPipelineRasterizationStateCreateFlagBits
      VkPipelineRasterizationStateCreateFlagBits*
      VkPipelineMultisampleStateCreateFlagBits
      VkPipelineMultisampleStateCreateFlagBits*
      VkPipelineColorBlendStateCreateFlagBits
      VkPipelineColorBlendStateCreateFlagBits*
      VkPipelineDynamicStateCreateFlagBits
      VkPipelineDynamicStateCreateFlagBits*
      VkPipelineDepthStencilStateCreateFlagBits
      VkPipelineDepthStencilStateCreateFlagBits*
      VkPipelineCacheCreateFlagBits
      VkPipelineCacheCreateFlagBits*
      VkPipelineLayoutCreateFlagBits
      VkPipelineLayoutCreateFlagBits*
      VkPipelineCacheHeaderVersion
      VkPipelineCacheHeaderVersion*
      VkSamplerCreateFlagBits
      VkSamplerCreateFlagBits*
      VkRenderPassCreateFlagBits
      VkRenderPassCreateFlagBits*
      VkQueryPoolCreateFlagBits
      VkQueryPoolCreateFlagBits*
      VkFramebufferCreateFlagBits
      VkFramebufferCreateFlagBits*
      VkBorderColor
      VkBorderColor*
      VkBlendOp
      VkBlendOp*
      VkBlendFactor
      VkBlendFactor*
      VkAttachmentStoreOp
      VkAttachmentStoreOp*
      VkAttachmentLoadOp
      VkAttachmentLoadOp*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkAttachmentLoadOp int)
   (c-define-type VkAttachmentLoadOp* (pointer VkAttachmentLoadOp))
   (c-define-type VkAttachmentStoreOp int)
   (c-define-type VkAttachmentStoreOp* (pointer VkAttachmentStoreOp))
   (c-define-type VkBlendFactor int)
   (c-define-type VkBlendFactor* (pointer VkBlendFactor))
   (c-define-type VkBlendOp int)
   (c-define-type VkBlendOp* (pointer VkBlendOp))
   (c-define-type VkBorderColor int)
   (c-define-type VkBorderColor* (pointer VkBorderColor))
   (c-define-type VkFramebufferCreateFlagBits int)
   (c-define-type VkFramebufferCreateFlagBits* (pointer VkFramebufferCreateFlagBits))
   (c-define-type VkQueryPoolCreateFlagBits int)
   (c-define-type VkQueryPoolCreateFlagBits* (pointer VkQueryPoolCreateFlagBits))
   (c-define-type VkRenderPassCreateFlagBits int)
   (c-define-type VkRenderPassCreateFlagBits* (pointer VkRenderPassCreateFlagBits))
   (c-define-type VkSamplerCreateFlagBits int)
   (c-define-type VkSamplerCreateFlagBits* (pointer VkSamplerCreateFlagBits))
   (c-define-type VkPipelineCacheHeaderVersion int)
   (c-define-type VkPipelineCacheHeaderVersion* (pointer VkPipelineCacheHeaderVersion))
   (c-define-type VkPipelineLayoutCreateFlagBits int)
   (c-define-type
      VkPipelineLayoutCreateFlagBits*
      (pointer VkPipelineLayoutCreateFlagBits))
   (c-define-type VkPipelineCacheCreateFlagBits int)
   (c-define-type VkPipelineCacheCreateFlagBits* (pointer VkPipelineCacheCreateFlagBits))
   (c-define-type VkPipelineDepthStencilStateCreateFlagBits int)
   (c-define-type
      VkPipelineDepthStencilStateCreateFlagBits*
      (pointer VkPipelineDepthStencilStateCreateFlagBits))
   (c-define-type VkPipelineDynamicStateCreateFlagBits int)
   (c-define-type
      VkPipelineDynamicStateCreateFlagBits*
      (pointer VkPipelineDynamicStateCreateFlagBits))
   (c-define-type VkPipelineColorBlendStateCreateFlagBits int)
   (c-define-type
      VkPipelineColorBlendStateCreateFlagBits*
      (pointer VkPipelineColorBlendStateCreateFlagBits))
   (c-define-type VkPipelineMultisampleStateCreateFlagBits int)
   (c-define-type
      VkPipelineMultisampleStateCreateFlagBits*
      (pointer VkPipelineMultisampleStateCreateFlagBits))
   (c-define-type VkPipelineRasterizationStateCreateFlagBits int)
   (c-define-type
      VkPipelineRasterizationStateCreateFlagBits*
      (pointer VkPipelineRasterizationStateCreateFlagBits))
   (c-define-type VkPipelineViewportStateCreateFlagBits int)
   (c-define-type
      VkPipelineViewportStateCreateFlagBits*
      (pointer VkPipelineViewportStateCreateFlagBits))
   (c-define-type VkPipelineTessellationStateCreateFlagBits int)
   (c-define-type
      VkPipelineTessellationStateCreateFlagBits*
      (pointer VkPipelineTessellationStateCreateFlagBits))
   (c-define-type VkPipelineInputAssemblyStateCreateFlagBits int)
   (c-define-type
      VkPipelineInputAssemblyStateCreateFlagBits*
      (pointer VkPipelineInputAssemblyStateCreateFlagBits))
   (c-define-type VkPipelineVertexInputStateCreateFlagBits int)
   (c-define-type
      VkPipelineVertexInputStateCreateFlagBits*
      (pointer VkPipelineVertexInputStateCreateFlagBits))
   (c-define-type VkPipelineShaderStageCreateFlagBits int)
   (c-define-type
      VkPipelineShaderStageCreateFlagBits*
      (pointer VkPipelineShaderStageCreateFlagBits))
   (c-define-type VkDescriptorSetLayoutCreateFlagBits int)
   (c-define-type
      VkDescriptorSetLayoutCreateFlagBits*
      (pointer VkDescriptorSetLayoutCreateFlagBits))
   (c-define-type VkBufferViewCreateFlagBits int)
   (c-define-type VkBufferViewCreateFlagBits* (pointer VkBufferViewCreateFlagBits))
   (c-define-type VkInstanceCreateFlagBits int)
   (c-define-type VkInstanceCreateFlagBits* (pointer VkInstanceCreateFlagBits))
   (c-define-type VkDeviceQueueCreateFlagBits int)
   (c-define-type VkDeviceQueueCreateFlagBits* (pointer VkDeviceQueueCreateFlagBits))
   (c-define-type VkBufferCreateFlagBits int)
   (c-define-type VkBufferCreateFlagBits* (pointer VkBufferCreateFlagBits))
   (c-define-type VkBufferUsageFlagBits int)
   (c-define-type VkBufferUsageFlagBits* (pointer VkBufferUsageFlagBits))
   (c-define-type VkColorComponentFlagBits int)
   (c-define-type VkColorComponentFlagBits* (pointer VkColorComponentFlagBits))
   (c-define-type VkComponentSwizzle int)
   (c-define-type VkComponentSwizzle* (pointer VkComponentSwizzle))
   (c-define-type VkCommandPoolCreateFlagBits int)
   (c-define-type VkCommandPoolCreateFlagBits* (pointer VkCommandPoolCreateFlagBits))
   (c-define-type VkCommandPoolResetFlagBits int)
   (c-define-type VkCommandPoolResetFlagBits* (pointer VkCommandPoolResetFlagBits))
   (c-define-type VkCommandBufferResetFlagBits int)
   (c-define-type VkCommandBufferResetFlagBits* (pointer VkCommandBufferResetFlagBits))
   (c-define-type VkCommandBufferLevel int)
   (c-define-type VkCommandBufferLevel* (pointer VkCommandBufferLevel))
   (c-define-type VkCommandBufferUsageFlagBits int)
   (c-define-type VkCommandBufferUsageFlagBits* (pointer VkCommandBufferUsageFlagBits))
   (c-define-type VkCompareOp int)
   (c-define-type VkCompareOp* (pointer VkCompareOp))
   (c-define-type VkCullModeFlagBits int)
   (c-define-type VkCullModeFlagBits* (pointer VkCullModeFlagBits))
   (c-define-type VkDescriptorType int)
   (c-define-type VkDescriptorType* (pointer VkDescriptorType))
   (c-define-type VkDeviceCreateFlagBits int)
   (c-define-type VkDeviceCreateFlagBits* (pointer VkDeviceCreateFlagBits))
   (c-define-type VkDynamicState int)
   (c-define-type VkDynamicState* (pointer VkDynamicState))
   (c-define-type VkFenceCreateFlagBits int)
   (c-define-type VkFenceCreateFlagBits* (pointer VkFenceCreateFlagBits))
   (c-define-type VkPolygonMode int)
   (c-define-type VkPolygonMode* (pointer VkPolygonMode))
   (c-define-type VkFormat int)
   (c-define-type VkFormat* (pointer VkFormat))
   (c-define-type VkFormatFeatureFlagBits int)
   (c-define-type VkFormatFeatureFlagBits* (pointer VkFormatFeatureFlagBits))
   (c-define-type VkFrontFace int)
   (c-define-type VkFrontFace* (pointer VkFrontFace))
   (c-define-type VkImageAspectFlagBits int)
   (c-define-type VkImageAspectFlagBits* (pointer VkImageAspectFlagBits))
   (c-define-type VkImageCreateFlagBits int)
   (c-define-type VkImageCreateFlagBits* (pointer VkImageCreateFlagBits))
   (c-define-type VkImageLayout int)
   (c-define-type VkImageLayout* (pointer VkImageLayout))
   (c-define-type VkImageTiling int)
   (c-define-type VkImageTiling* (pointer VkImageTiling))
   (c-define-type VkImageType int)
   (c-define-type VkImageType* (pointer VkImageType))
   (c-define-type VkImageUsageFlagBits int)
   (c-define-type VkImageUsageFlagBits* (pointer VkImageUsageFlagBits))
   (c-define-type VkImageViewCreateFlagBits int)
   (c-define-type VkImageViewCreateFlagBits* (pointer VkImageViewCreateFlagBits))
   (c-define-type VkImageViewType int)
   (c-define-type VkImageViewType* (pointer VkImageViewType))
   (c-define-type VkSharingMode int)
   (c-define-type VkSharingMode* (pointer VkSharingMode))
   (c-define-type VkIndexType int)
   (c-define-type VkIndexType* (pointer VkIndexType))
   (c-define-type VkLogicOp int)
   (c-define-type VkLogicOp* (pointer VkLogicOp))
   (c-define-type VkMemoryHeapFlagBits int)
   (c-define-type VkMemoryHeapFlagBits* (pointer VkMemoryHeapFlagBits))
   (c-define-type VkAccessFlagBits int)
   (c-define-type VkAccessFlagBits* (pointer VkAccessFlagBits))
   (c-define-type VkMemoryPropertyFlagBits int)
   (c-define-type VkMemoryPropertyFlagBits* (pointer VkMemoryPropertyFlagBits))
   (c-define-type VkPhysicalDeviceType int)
   (c-define-type VkPhysicalDeviceType* (pointer VkPhysicalDeviceType))
   (c-define-type VkPipelineBindPoint int)
   (c-define-type VkPipelineBindPoint* (pointer VkPipelineBindPoint))
   (c-define-type VkPipelineCreateFlagBits int)
   (c-define-type VkPipelineCreateFlagBits* (pointer VkPipelineCreateFlagBits))
   (c-define-type VkPrimitiveTopology int)
   (c-define-type VkPrimitiveTopology* (pointer VkPrimitiveTopology))
   (c-define-type VkQueryControlFlagBits int)
   (c-define-type VkQueryControlFlagBits* (pointer VkQueryControlFlagBits))
   (c-define-type VkQueryPipelineStatisticFlagBits int)
   (c-define-type
      VkQueryPipelineStatisticFlagBits*
      (pointer VkQueryPipelineStatisticFlagBits))
   (c-define-type VkQueryResultFlagBits int)
   (c-define-type VkQueryResultFlagBits* (pointer VkQueryResultFlagBits))
   (c-define-type VkQueryType int)
   (c-define-type VkQueryType* (pointer VkQueryType))
   (c-define-type VkQueueFlagBits int)
   (c-define-type VkQueueFlagBits* (pointer VkQueueFlagBits))
   (c-define-type VkSubpassContents int)
   (c-define-type VkSubpassContents* (pointer VkSubpassContents))
   (c-define-type VkResult int)
   (c-define-type VkResult* (pointer VkResult))
   (c-define-type VkShaderStageFlagBits int)
   (c-define-type VkShaderStageFlagBits* (pointer VkShaderStageFlagBits))
   (c-define-type VkSparseMemoryBindFlagBits int)
   (c-define-type VkSparseMemoryBindFlagBits* (pointer VkSparseMemoryBindFlagBits))
   (c-define-type VkStencilFaceFlagBits int)
   (c-define-type VkStencilFaceFlagBits* (pointer VkStencilFaceFlagBits))
   (c-define-type VkStencilOp int)
   (c-define-type VkStencilOp* (pointer VkStencilOp))
   (c-define-type VkStructureType int)
   (c-define-type VkStructureType* (pointer VkStructureType))
   (c-define-type VkSystemAllocationScope int)
   (c-define-type VkSystemAllocationScope* (pointer VkSystemAllocationScope))
   (c-define-type VkInternalAllocationType int)
   (c-define-type VkInternalAllocationType* (pointer VkInternalAllocationType))
   (c-define-type VkSamplerAddressMode int)
   (c-define-type VkSamplerAddressMode* (pointer VkSamplerAddressMode))
   (c-define-type VkFilter int)
   (c-define-type VkFilter* (pointer VkFilter))
   (c-define-type VkSamplerMipmapMode int)
   (c-define-type VkSamplerMipmapMode* (pointer VkSamplerMipmapMode))
   (c-define-type VkVertexInputRate int)
   (c-define-type VkVertexInputRate* (pointer VkVertexInputRate))
   (c-define-type VkPipelineStageFlagBits int)
   (c-define-type VkPipelineStageFlagBits* (pointer VkPipelineStageFlagBits))
   (c-define-type VkSparseImageFormatFlagBits int)
   (c-define-type VkSparseImageFormatFlagBits* (pointer VkSparseImageFormatFlagBits))
   (c-define-type VkSampleCountFlagBits int)
   (c-define-type VkSampleCountFlagBits* (pointer VkSampleCountFlagBits))
   (c-define-type VkAttachmentDescriptionFlagBits int)
   (c-define-type
      VkAttachmentDescriptionFlagBits*
      (pointer VkAttachmentDescriptionFlagBits))
   (c-define-type VkDescriptorPoolCreateFlagBits int)
   (c-define-type
      VkDescriptorPoolCreateFlagBits*
      (pointer VkDescriptorPoolCreateFlagBits))
   (c-define-type VkDependencyFlagBits int)
   (c-define-type VkDependencyFlagBits* (pointer VkDependencyFlagBits))
   (c-define-type VkObjectType int)
   (c-define-type VkObjectType* (pointer VkObjectType))
   (c-define-type VkDescriptorBindingFlagBitsEXT int)
   (c-define-type
      VkDescriptorBindingFlagBitsEXT*
      (pointer VkDescriptorBindingFlagBitsEXT))
   (c-define-type VkConditionalRenderingFlagBitsEXT int)
   (c-define-type
      VkConditionalRenderingFlagBitsEXT*
      (pointer VkConditionalRenderingFlagBitsEXT))
   (c-define-type VkIndirectCommandsLayoutUsageFlagBitsNVX int)
   (c-define-type
      VkIndirectCommandsLayoutUsageFlagBitsNVX*
      (pointer VkIndirectCommandsLayoutUsageFlagBitsNVX))
   (c-define-type VkIndirectCommandsTokenTypeNVX int)
   (c-define-type
      VkIndirectCommandsTokenTypeNVX*
      (pointer VkIndirectCommandsTokenTypeNVX))
   (c-define-type VkObjectEntryUsageFlagBitsNVX int)
   (c-define-type VkObjectEntryUsageFlagBitsNVX* (pointer VkObjectEntryUsageFlagBitsNVX))
   (c-define-type VkObjectEntryTypeNVX int)
   (c-define-type VkObjectEntryTypeNVX* (pointer VkObjectEntryTypeNVX))
   (c-define-type VkDescriptorUpdateTemplateType int)
   (c-define-type
      VkDescriptorUpdateTemplateType*
      (pointer VkDescriptorUpdateTemplateType))
   (c-define-type VkDescriptorUpdateTemplateTypeKHR int)
   (c-define-type
      VkDescriptorUpdateTemplateTypeKHR*
      (pointer VkDescriptorUpdateTemplateTypeKHR))
   (c-define-type VkViewportCoordinateSwizzleNV int)
   (c-define-type VkViewportCoordinateSwizzleNV* (pointer VkViewportCoordinateSwizzleNV))
   (c-define-type VkDiscardRectangleModeEXT int)
   (c-define-type VkDiscardRectangleModeEXT* (pointer VkDiscardRectangleModeEXT))
   (c-define-type VkSubpassDescriptionFlagBits int)
   (c-define-type VkSubpassDescriptionFlagBits* (pointer VkSubpassDescriptionFlagBits))
   (c-define-type VkPointClippingBehavior int)
   (c-define-type VkPointClippingBehavior* (pointer VkPointClippingBehavior))
   (c-define-type VkPointClippingBehaviorKHR int)
   (c-define-type VkPointClippingBehaviorKHR* (pointer VkPointClippingBehaviorKHR))
   (c-define-type VkCoverageModulationModeNV int)
   (c-define-type VkCoverageModulationModeNV* (pointer VkCoverageModulationModeNV))
   (c-define-type VkCoverageReductionModeNV int)
   (c-define-type VkCoverageReductionModeNV* (pointer VkCoverageReductionModeNV))
   (c-define-type VkValidationCacheHeaderVersionEXT int)
   (c-define-type
      VkValidationCacheHeaderVersionEXT*
      (pointer VkValidationCacheHeaderVersionEXT))
   (c-define-type VkShaderInfoTypeAMD int)
   (c-define-type VkShaderInfoTypeAMD* (pointer VkShaderInfoTypeAMD))
   (c-define-type VkQueueGlobalPriorityEXT int)
   (c-define-type VkQueueGlobalPriorityEXT* (pointer VkQueueGlobalPriorityEXT))
   (c-define-type VkTimeDomainEXT int)
   (c-define-type VkTimeDomainEXT* (pointer VkTimeDomainEXT))
   (c-define-type VkConservativeRasterizationModeEXT int)
   (c-define-type
      VkConservativeRasterizationModeEXT*
      (pointer VkConservativeRasterizationModeEXT))
   (c-define-type VkResolveModeFlagBitsKHR int)
   (c-define-type VkResolveModeFlagBitsKHR* (pointer VkResolveModeFlagBitsKHR))
   (c-define-type VkGeometryFlagBitsNV int)
   (c-define-type VkGeometryFlagBitsNV* (pointer VkGeometryFlagBitsNV))
   (c-define-type VkGeometryInstanceFlagBitsNV int)
   (c-define-type VkGeometryInstanceFlagBitsNV* (pointer VkGeometryInstanceFlagBitsNV))
   (c-define-type VkBuildAccelerationStructureFlagBitsNV int)
   (c-define-type
      VkBuildAccelerationStructureFlagBitsNV*
      (pointer VkBuildAccelerationStructureFlagBitsNV))
   (c-define-type VkCopyAccelerationStructureModeNV int)
   (c-define-type
      VkCopyAccelerationStructureModeNV*
      (pointer VkCopyAccelerationStructureModeNV))
   (c-define-type VkAccelerationStructureTypeNV int)
   (c-define-type VkAccelerationStructureTypeNV* (pointer VkAccelerationStructureTypeNV))
   (c-define-type VkGeometryTypeNV int)
   (c-define-type VkGeometryTypeNV* (pointer VkGeometryTypeNV))
   (c-define-type VkRayTracingShaderGroupTypeNV int)
   (c-define-type VkRayTracingShaderGroupTypeNV* (pointer VkRayTracingShaderGroupTypeNV))
   (c-define-type VkAccelerationStructureMemoryRequirementsTypeNV int)
   (c-define-type
      VkAccelerationStructureMemoryRequirementsTypeNV*
      (pointer VkAccelerationStructureMemoryRequirementsTypeNV))
   (c-define-type VkMemoryOverallocationBehaviorAMD int)
   (c-define-type
      VkMemoryOverallocationBehaviorAMD*
      (pointer VkMemoryOverallocationBehaviorAMD))
   (c-define-type VkScopeNV int)
   (c-define-type VkScopeNV* (pointer VkScopeNV))
   (c-define-type VkComponentTypeNV int)
   (c-define-type VkComponentTypeNV* (pointer VkComponentTypeNV))
   (c-define-type VkPipelineCreationFeedbackFlagBitsEXT int)
   (c-define-type
      VkPipelineCreationFeedbackFlagBitsEXT*
      (pointer VkPipelineCreationFeedbackFlagBitsEXT))
   (c-define-type VkPerformanceConfigurationTypeINTEL int)
   (c-define-type
      VkPerformanceConfigurationTypeINTEL*
      (pointer VkPerformanceConfigurationTypeINTEL))
   (c-define-type VkQueryPoolSamplingModeINTEL int)
   (c-define-type VkQueryPoolSamplingModeINTEL* (pointer VkQueryPoolSamplingModeINTEL))
   (c-define-type VkPerformanceOverrideTypeINTEL int)
   (c-define-type
      VkPerformanceOverrideTypeINTEL*
      (pointer VkPerformanceOverrideTypeINTEL))
   (c-define-type VkPerformanceParameterTypeINTEL int)
   (c-define-type
      VkPerformanceParameterTypeINTEL*
      (pointer VkPerformanceParameterTypeINTEL))
   (c-define-type VkPerformanceValueTypeINTEL int)
   (c-define-type VkPerformanceValueTypeINTEL* (pointer VkPerformanceValueTypeINTEL))
   (c-define-type VkLineRasterizationModeEXT int)
   (c-define-type VkLineRasterizationModeEXT* (pointer VkLineRasterizationModeEXT))
   (c-define-type VkShaderModuleCreateFlagBits int)
   (c-define-type VkShaderModuleCreateFlagBits* (pointer VkShaderModuleCreateFlagBits))
   (c-define-type VkPipelineCompilerControlFlagBitsAMD int)
   (c-define-type
      VkPipelineCompilerControlFlagBitsAMD*
      (pointer VkPipelineCompilerControlFlagBitsAMD))
   (c-define-type VkShaderCorePropertiesFlagBitsAMD int)
   (c-define-type
      VkShaderCorePropertiesFlagBitsAMD*
      (pointer VkShaderCorePropertiesFlagBitsAMD))
   (c-define-type VkColorSpaceKHR int)
   (c-define-type VkColorSpaceKHR* (pointer VkColorSpaceKHR))
   (c-define-type VkCompositeAlphaFlagBitsKHR int)
   (c-define-type VkCompositeAlphaFlagBitsKHR* (pointer VkCompositeAlphaFlagBitsKHR))
   (c-define-type VkDisplayPlaneAlphaFlagBitsKHR int)
   (c-define-type
      VkDisplayPlaneAlphaFlagBitsKHR*
      (pointer VkDisplayPlaneAlphaFlagBitsKHR))
   (c-define-type VkPresentModeKHR int)
   (c-define-type VkPresentModeKHR* (pointer VkPresentModeKHR))
   (c-define-type VkSurfaceTransformFlagBitsKHR int)
   (c-define-type VkSurfaceTransformFlagBitsKHR* (pointer VkSurfaceTransformFlagBitsKHR))
   (c-define-type VkDebugReportFlagBitsEXT int)
   (c-define-type VkDebugReportFlagBitsEXT* (pointer VkDebugReportFlagBitsEXT))
   (c-define-type VkDebugReportObjectTypeEXT int)
   (c-define-type VkDebugReportObjectTypeEXT* (pointer VkDebugReportObjectTypeEXT))
   (c-define-type VkRasterizationOrderAMD int)
   (c-define-type VkRasterizationOrderAMD* (pointer VkRasterizationOrderAMD))
   (c-define-type VkExternalMemoryHandleTypeFlagBitsNV int)
   (c-define-type
      VkExternalMemoryHandleTypeFlagBitsNV*
      (pointer VkExternalMemoryHandleTypeFlagBitsNV))
   (c-define-type VkExternalMemoryFeatureFlagBitsNV int)
   (c-define-type
      VkExternalMemoryFeatureFlagBitsNV*
      (pointer VkExternalMemoryFeatureFlagBitsNV))
   (c-define-type VkValidationCheckEXT int)
   (c-define-type VkValidationCheckEXT* (pointer VkValidationCheckEXT))
   (c-define-type VkValidationFeatureEnableEXT int)
   (c-define-type VkValidationFeatureEnableEXT* (pointer VkValidationFeatureEnableEXT))
   (c-define-type VkValidationFeatureDisableEXT int)
   (c-define-type VkValidationFeatureDisableEXT* (pointer VkValidationFeatureDisableEXT))
   (c-define-type VkExternalMemoryHandleTypeFlagBits int)
   (c-define-type
      VkExternalMemoryHandleTypeFlagBits*
      (pointer VkExternalMemoryHandleTypeFlagBits))
   (c-define-type VkExternalMemoryHandleTypeFlagBitsKHR int)
   (c-define-type
      VkExternalMemoryHandleTypeFlagBitsKHR*
      (pointer VkExternalMemoryHandleTypeFlagBitsKHR))
   (c-define-type VkExternalMemoryFeatureFlagBits int)
   (c-define-type
      VkExternalMemoryFeatureFlagBits*
      (pointer VkExternalMemoryFeatureFlagBits))
   (c-define-type VkExternalMemoryFeatureFlagBitsKHR int)
   (c-define-type
      VkExternalMemoryFeatureFlagBitsKHR*
      (pointer VkExternalMemoryFeatureFlagBitsKHR))
   (c-define-type VkExternalSemaphoreHandleTypeFlagBits int)
   (c-define-type
      VkExternalSemaphoreHandleTypeFlagBits*
      (pointer VkExternalSemaphoreHandleTypeFlagBits))
   (c-define-type VkExternalSemaphoreHandleTypeFlagBitsKHR int)
   (c-define-type
      VkExternalSemaphoreHandleTypeFlagBitsKHR*
      (pointer VkExternalSemaphoreHandleTypeFlagBitsKHR))
   (c-define-type VkExternalSemaphoreFeatureFlagBits int)
   (c-define-type
      VkExternalSemaphoreFeatureFlagBits*
      (pointer VkExternalSemaphoreFeatureFlagBits))
   (c-define-type VkExternalSemaphoreFeatureFlagBitsKHR int)
   (c-define-type
      VkExternalSemaphoreFeatureFlagBitsKHR*
      (pointer VkExternalSemaphoreFeatureFlagBitsKHR))
   (c-define-type VkSemaphoreImportFlagBits int)
   (c-define-type VkSemaphoreImportFlagBits* (pointer VkSemaphoreImportFlagBits))
   (c-define-type VkSemaphoreImportFlagBitsKHR int)
   (c-define-type VkSemaphoreImportFlagBitsKHR* (pointer VkSemaphoreImportFlagBitsKHR))
   (c-define-type VkExternalFenceHandleTypeFlagBits int)
   (c-define-type
      VkExternalFenceHandleTypeFlagBits*
      (pointer VkExternalFenceHandleTypeFlagBits))
   (c-define-type VkExternalFenceHandleTypeFlagBitsKHR int)
   (c-define-type
      VkExternalFenceHandleTypeFlagBitsKHR*
      (pointer VkExternalFenceHandleTypeFlagBitsKHR))
   (c-define-type VkExternalFenceFeatureFlagBits int)
   (c-define-type
      VkExternalFenceFeatureFlagBits*
      (pointer VkExternalFenceFeatureFlagBits))
   (c-define-type VkExternalFenceFeatureFlagBitsKHR int)
   (c-define-type
      VkExternalFenceFeatureFlagBitsKHR*
      (pointer VkExternalFenceFeatureFlagBitsKHR))
   (c-define-type VkFenceImportFlagBits int)
   (c-define-type VkFenceImportFlagBits* (pointer VkFenceImportFlagBits))
   (c-define-type VkFenceImportFlagBitsKHR int)
   (c-define-type VkFenceImportFlagBitsKHR* (pointer VkFenceImportFlagBitsKHR))
   (c-define-type VkSurfaceCounterFlagBitsEXT int)
   (c-define-type VkSurfaceCounterFlagBitsEXT* (pointer VkSurfaceCounterFlagBitsEXT))
   (c-define-type VkDisplayPowerStateEXT int)
   (c-define-type VkDisplayPowerStateEXT* (pointer VkDisplayPowerStateEXT))
   (c-define-type VkDeviceEventTypeEXT int)
   (c-define-type VkDeviceEventTypeEXT* (pointer VkDeviceEventTypeEXT))
   (c-define-type VkDisplayEventTypeEXT int)
   (c-define-type VkDisplayEventTypeEXT* (pointer VkDisplayEventTypeEXT))
   (c-define-type VkPeerMemoryFeatureFlagBits int)
   (c-define-type VkPeerMemoryFeatureFlagBits* (pointer VkPeerMemoryFeatureFlagBits))
   (c-define-type VkPeerMemoryFeatureFlagBitsKHR int)
   (c-define-type
      VkPeerMemoryFeatureFlagBitsKHR*
      (pointer VkPeerMemoryFeatureFlagBitsKHR))
   (c-define-type VkMemoryAllocateFlagBits int)
   (c-define-type VkMemoryAllocateFlagBits* (pointer VkMemoryAllocateFlagBits))
   (c-define-type VkMemoryAllocateFlagBitsKHR int)
   (c-define-type VkMemoryAllocateFlagBitsKHR* (pointer VkMemoryAllocateFlagBitsKHR))
   (c-define-type VkDeviceGroupPresentModeFlagBitsKHR int)
   (c-define-type
      VkDeviceGroupPresentModeFlagBitsKHR*
      (pointer VkDeviceGroupPresentModeFlagBitsKHR))
   (c-define-type VkSwapchainCreateFlagBitsKHR int)
   (c-define-type VkSwapchainCreateFlagBitsKHR* (pointer VkSwapchainCreateFlagBitsKHR))
   (c-define-type VkSubgroupFeatureFlagBits int)
   (c-define-type VkSubgroupFeatureFlagBits* (pointer VkSubgroupFeatureFlagBits))
   (c-define-type VkTessellationDomainOrigin int)
   (c-define-type VkTessellationDomainOrigin* (pointer VkTessellationDomainOrigin))
   (c-define-type VkTessellationDomainOriginKHR int)
   (c-define-type VkTessellationDomainOriginKHR* (pointer VkTessellationDomainOriginKHR))
   (c-define-type VkSamplerYcbcrModelConversion int)
   (c-define-type VkSamplerYcbcrModelConversion* (pointer VkSamplerYcbcrModelConversion))
   (c-define-type VkSamplerYcbcrModelConversionKHR int)
   (c-define-type
      VkSamplerYcbcrModelConversionKHR*
      (pointer VkSamplerYcbcrModelConversionKHR))
   (c-define-type VkSamplerYcbcrRange int)
   (c-define-type VkSamplerYcbcrRange* (pointer VkSamplerYcbcrRange))
   (c-define-type VkSamplerYcbcrRangeKHR int)
   (c-define-type VkSamplerYcbcrRangeKHR* (pointer VkSamplerYcbcrRangeKHR))
   (c-define-type VkChromaLocation int)
   (c-define-type VkChromaLocation* (pointer VkChromaLocation))
   (c-define-type VkChromaLocationKHR int)
   (c-define-type VkChromaLocationKHR* (pointer VkChromaLocationKHR))
   (c-define-type VkSamplerReductionModeEXT int)
   (c-define-type VkSamplerReductionModeEXT* (pointer VkSamplerReductionModeEXT))
   (c-define-type VkBlendOverlapEXT int)
   (c-define-type VkBlendOverlapEXT* (pointer VkBlendOverlapEXT))
   (c-define-type VkDebugUtilsMessageSeverityFlagBitsEXT int)
   (c-define-type
      VkDebugUtilsMessageSeverityFlagBitsEXT*
      (pointer VkDebugUtilsMessageSeverityFlagBitsEXT))
   (c-define-type VkDebugUtilsMessageTypeFlagBitsEXT int)
   (c-define-type
      VkDebugUtilsMessageTypeFlagBitsEXT*
      (pointer VkDebugUtilsMessageTypeFlagBitsEXT))
   (c-define-type VkFullScreenExclusiveEXT int)
   (c-define-type VkFullScreenExclusiveEXT* (pointer VkFullScreenExclusiveEXT))
   (c-define-type VkShaderFloatControlsIndependenceKHR int)
   (c-define-type
      VkShaderFloatControlsIndependenceKHR*
      (pointer VkShaderFloatControlsIndependenceKHR))
   (c-define-type VkSwapchainImageUsageFlagBitsANDROID int)
   (c-define-type
      VkSwapchainImageUsageFlagBitsANDROID*
      (pointer VkSwapchainImageUsageFlagBitsANDROID))
   (c-define-type VkVendorId int)
   (c-define-type VkVendorId* (pointer VkVendorId))
   (c-define-type VkDriverIdKHR int)
   (c-define-type VkDriverIdKHR* (pointer VkDriverIdKHR))
   (c-define-type VkShadingRatePaletteEntryNV int)
   (c-define-type VkShadingRatePaletteEntryNV* (pointer VkShadingRatePaletteEntryNV))
   (c-define-type VkCoarseSampleOrderTypeNV int)
   (c-define-type VkCoarseSampleOrderTypeNV* (pointer VkCoarseSampleOrderTypeNV))
   (c-define-type VkPipelineExecutableStatisticFormatKHR int)
   (c-define-type
      VkPipelineExecutableStatisticFormatKHR*
      (pointer VkPipelineExecutableStatisticFormatKHR)))
(begin-ffi
   (VkPipelineExecutableStatisticValueKHR
      VkPipelineExecutableStatisticValueKHR*
      VkPerformanceValueDataINTEL
      VkPerformanceValueDataINTEL*
      VkClearValue
      VkClearValue*
      VkClearColorValue
      VkClearColorValue*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkClearColorValue (union "VkClearColorValue"))
   (c-define-type VkClearColorValue* (pointer VkClearColorValue))
   (c-define-type VkClearValue (union "VkClearValue"))
   (c-define-type VkClearValue* (pointer VkClearValue))
   (c-define-type VkPerformanceValueDataINTEL (union "VkPerformanceValueDataINTEL"))
   (c-define-type VkPerformanceValueDataINTEL* (pointer VkPerformanceValueDataINTEL))
   (c-define-type
      VkPipelineExecutableStatisticValueKHR
      (union "VkPipelineExecutableStatisticValueKHR"))
   (c-define-type
      VkPipelineExecutableStatisticValueKHR*
      (pointer VkPipelineExecutableStatisticValueKHR)))
(begin-ffi
   (GgpFrameToken
      GgpFrameToken*
      GgpStreamDescriptor
      GgpStreamDescriptor*
      zx_handle_t
      zx_handle_t*
      xcb_window_t
      xcb_window_t*
      xcb_visualid_t
      xcb_visualid_t*
      xcb_connection_t
      xcb_connection_t*
      LPCWSTR
      LPCWSTR*
      DWORD
      DWORD*
      SECURITY_ATTRIBUTES
      SECURITY_ATTRIBUTES*
      HANDLE
      HANDLE*
      HMONITOR
      HMONITOR*
      HWND
      HWND*
      HINSTANCE
      HINSTANCE*
      wl_surface
      wl_surface*
      wl_display
      wl_display*
      RROutput
      RROutput*
      Window
      Window*
      VisualID
      VisualID*
      Display
      Display*
      CAMetalLayer
      CAMetalLayer*
      AHardwareBuffer
      AHardwareBuffer*
      ANativeWindow
      ANativeWindow*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type ANativeWindow (struct "ANativeWindow"))
   (c-define-type ANativeWindow* (pointer ANativeWindow))
   (c-define-type AHardwareBuffer (struct "AHardwareBuffer"))
   (c-define-type AHardwareBuffer* (pointer AHardwareBuffer))
   (c-define-type CAMetalLayer (struct "CAMetalLayer"))
   (c-define-type CAMetalLayer* (pointer CAMetalLayer))
   (c-define-type Display (struct "Display"))
   (c-define-type Display* (pointer Display))
   (c-define-type VisualID (struct "VisualID"))
   (c-define-type VisualID* (pointer VisualID))
   (c-define-type Window (struct "Window"))
   (c-define-type Window* (pointer Window))
   (c-define-type RROutput (struct "RROutput"))
   (c-define-type RROutput* (pointer RROutput))
   (c-define-type wl_display (struct "wl_display"))
   (c-define-type wl_display* (pointer wl_display))
   (c-define-type wl_surface (struct "wl_surface"))
   (c-define-type wl_surface* (pointer wl_surface))
   (c-define-type HINSTANCE (struct "HINSTANCE"))
   (c-define-type HINSTANCE* (pointer HINSTANCE))
   (c-define-type HWND (struct "HWND"))
   (c-define-type HWND* (pointer HWND))
   (c-define-type HMONITOR (struct "HMONITOR"))
   (c-define-type HMONITOR* (pointer HMONITOR))
   (c-define-type HANDLE (struct "HANDLE"))
   (c-define-type HANDLE* (pointer HANDLE))
   (c-define-type SECURITY_ATTRIBUTES (struct "SECURITY_ATTRIBUTES"))
   (c-define-type SECURITY_ATTRIBUTES* (pointer SECURITY_ATTRIBUTES))
   (c-define-type DWORD (struct "DWORD"))
   (c-define-type DWORD* (pointer DWORD))
   (c-define-type LPCWSTR (struct "LPCWSTR"))
   (c-define-type LPCWSTR* (pointer LPCWSTR))
   (c-define-type xcb_connection_t (struct "xcb_connection_t"))
   (c-define-type xcb_connection_t* (pointer xcb_connection_t))
   (c-define-type xcb_visualid_t (struct "xcb_visualid_t"))
   (c-define-type xcb_visualid_t* (pointer xcb_visualid_t))
   (c-define-type xcb_window_t (struct "xcb_window_t"))
   (c-define-type xcb_window_t* (pointer xcb_window_t))
   (c-define-type zx_handle_t (struct "zx_handle_t"))
   (c-define-type zx_handle_t* (pointer zx_handle_t))
   (c-define-type GgpStreamDescriptor (struct "GgpStreamDescriptor"))
   (c-define-type GgpStreamDescriptor* (pointer GgpStreamDescriptor))
   (c-define-type GgpFrameToken (struct "GgpFrameToken"))
   (c-define-type GgpFrameToken* (pointer GgpFrameToken)))
(begin-ffi
   (make-VkBaseOutStructure
      ptr->VkBaseOutStructure
      ref-VkBaseOutStructure
      make-VkBaseOutStructure*
      VkBaseOutStructurepNext
      VkBaseOutStructuresType
      VkBaseOutStructure
      VkBaseOutStructure*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBaseOutStructure (struct "VkBaseOutStructure"))
   (c-define-type VkBaseOutStructure* (pointer VkBaseOutStructure))
   (define-c-lambda
      VkBaseOutStructuresType
      (VkBaseOutStructure*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBaseOutStructurepNext
      (VkBaseOutStructure*)
      VkBaseOutStructure*
      "___return (___arg1->pNext);")
   (define-c-lambda
      make-VkBaseOutStructure*
      (int)
      VkBaseOutStructure*
      "VkBaseOutStructure* vkbaseoutstructure = malloc(___arg1 * sizeof(VkBaseOutStructure));
      ___return (vkbaseoutstructure);")
   (define-c-lambda
      ref-VkBaseOutStructure
      (VkBaseOutStructure* int)
      VkBaseOutStructure*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBaseOutStructure
      ((pointer VkBaseOutStructure))
      VkBaseOutStructure
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBaseOutStructure
      (VkStructureType VkBaseOutStructure*)
      VkBaseOutStructure*
      "VkBaseOutStructure *baseoutstructure = malloc(sizeof(VkBaseOutStructure));
baseoutstructure->sType=___arg1;
baseoutstructure->pNext=___arg2;
___return (baseoutstructure);"))
(begin-ffi
   (make-VkBaseInStructure
      ptr->VkBaseInStructure
      ref-VkBaseInStructure
      make-VkBaseInStructure*
      VkBaseInStructurepNext
      VkBaseInStructuresType
      VkBaseInStructure
      VkBaseInStructure*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBaseInStructure (struct "VkBaseInStructure"))
   (c-define-type VkBaseInStructure* (pointer VkBaseInStructure))
   (define-c-lambda
      VkBaseInStructuresType
      (VkBaseInStructure*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBaseInStructurepNext
      (VkBaseInStructure*)
      VkBaseInStructure*
      "___return (___arg1->pNext);")
   (define-c-lambda
      make-VkBaseInStructure*
      (int)
      VkBaseInStructure*
      "VkBaseInStructure* vkbaseinstructure = malloc(___arg1 * sizeof(VkBaseInStructure));
      ___return (vkbaseinstructure);")
   (define-c-lambda
      ref-VkBaseInStructure
      (VkBaseInStructure* int)
      VkBaseInStructure*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBaseInStructure
      ((pointer VkBaseInStructure))
      VkBaseInStructure
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBaseInStructure
      (VkStructureType VkBaseInStructure*)
      VkBaseInStructure*
      "VkBaseInStructure *baseinstructure = malloc(sizeof(VkBaseInStructure));
baseinstructure->sType=___arg1;
baseinstructure->pNext=___arg2;
___return (baseinstructure);"))
(begin-ffi
   (make-VkOffset2D
      ptr->VkOffset2D
      ref-VkOffset2D
      make-VkOffset2D*
      VkOffset2Dy
      VkOffset2Dx
      VkOffset2D
      VkOffset2D*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkOffset2D (struct "VkOffset2D"))
   (c-define-type VkOffset2D* (pointer VkOffset2D))
   (define-c-lambda VkOffset2Dx (VkOffset2D*) int32_t "___return (___arg1->x);")
   (define-c-lambda VkOffset2Dy (VkOffset2D*) int32_t "___return (___arg1->y);")
   (define-c-lambda
      make-VkOffset2D*
      (int)
      VkOffset2D*
      "VkOffset2D* vkoffset2d = malloc(___arg1 * sizeof(VkOffset2D));
      ___return (vkoffset2d);")
   (define-c-lambda
      ref-VkOffset2D
      (VkOffset2D* int)
      VkOffset2D*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkOffset2D
      ((pointer VkOffset2D))
      VkOffset2D
      "___return(*___arg1);")
   (define-c-lambda
      make-VkOffset2D
      (int32_t int32_t)
      VkOffset2D*
      "VkOffset2D *offset2d = malloc(sizeof(VkOffset2D));
offset2d->x=___arg1;
offset2d->y=___arg2;
___return (offset2d);"))
(begin-ffi
   (make-VkOffset3D
      ptr->VkOffset3D
      ref-VkOffset3D
      make-VkOffset3D*
      VkOffset3Dz
      VkOffset3Dy
      VkOffset3Dx
      VkOffset3D
      VkOffset3D*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkOffset3D (struct "VkOffset3D"))
   (c-define-type VkOffset3D* (pointer VkOffset3D))
   (define-c-lambda VkOffset3Dx (VkOffset3D*) int32_t "___return (___arg1->x);")
   (define-c-lambda VkOffset3Dy (VkOffset3D*) int32_t "___return (___arg1->y);")
   (define-c-lambda VkOffset3Dz (VkOffset3D*) int32_t "___return (___arg1->z);")
   (define-c-lambda
      make-VkOffset3D*
      (int)
      VkOffset3D*
      "VkOffset3D* vkoffset3d = malloc(___arg1 * sizeof(VkOffset3D));
      ___return (vkoffset3d);")
   (define-c-lambda
      ref-VkOffset3D
      (VkOffset3D* int)
      VkOffset3D*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkOffset3D
      ((pointer VkOffset3D))
      VkOffset3D
      "___return(*___arg1);")
   (define-c-lambda
      make-VkOffset3D
      (int32_t int32_t int32_t)
      VkOffset3D*
      "VkOffset3D *offset3d = malloc(sizeof(VkOffset3D));
offset3d->x=___arg1;
offset3d->y=___arg2;
offset3d->z=___arg3;
___return (offset3d);"))
(begin-ffi
   (make-VkExtent2D
      ptr->VkExtent2D
      ref-VkExtent2D
      make-VkExtent2D*
      VkExtent2Dheight
      VkExtent2Dwidth
      VkExtent2D
      VkExtent2D*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExtent2D (struct "VkExtent2D"))
   (c-define-type VkExtent2D* (pointer VkExtent2D))
   (define-c-lambda VkExtent2Dwidth (VkExtent2D*) uint32_t "___return (___arg1->width);")
   (define-c-lambda
      VkExtent2Dheight
      (VkExtent2D*)
      uint32_t
      "___return (___arg1->height);")
   (define-c-lambda
      make-VkExtent2D*
      (int)
      VkExtent2D*
      "VkExtent2D* vkextent2d = malloc(___arg1 * sizeof(VkExtent2D));
      ___return (vkextent2d);")
   (define-c-lambda
      ref-VkExtent2D
      (VkExtent2D* int)
      VkExtent2D*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExtent2D
      ((pointer VkExtent2D))
      VkExtent2D
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExtent2D
      (uint32_t uint32_t)
      VkExtent2D*
      "VkExtent2D *extent2d = malloc(sizeof(VkExtent2D));
extent2d->width=___arg1;
extent2d->height=___arg2;
___return (extent2d);"))
(begin-ffi
   (make-VkExtent3D
      ptr->VkExtent3D
      ref-VkExtent3D
      make-VkExtent3D*
      VkExtent3Ddepth
      VkExtent3Dheight
      VkExtent3Dwidth
      VkExtent3D
      VkExtent3D*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExtent3D (struct "VkExtent3D"))
   (c-define-type VkExtent3D* (pointer VkExtent3D))
   (define-c-lambda VkExtent3Dwidth (VkExtent3D*) uint32_t "___return (___arg1->width);")
   (define-c-lambda
      VkExtent3Dheight
      (VkExtent3D*)
      uint32_t
      "___return (___arg1->height);")
   (define-c-lambda VkExtent3Ddepth (VkExtent3D*) uint32_t "___return (___arg1->depth);")
   (define-c-lambda
      make-VkExtent3D*
      (int)
      VkExtent3D*
      "VkExtent3D* vkextent3d = malloc(___arg1 * sizeof(VkExtent3D));
      ___return (vkextent3d);")
   (define-c-lambda
      ref-VkExtent3D
      (VkExtent3D* int)
      VkExtent3D*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExtent3D
      ((pointer VkExtent3D))
      VkExtent3D
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExtent3D
      (uint32_t uint32_t uint32_t)
      VkExtent3D*
      "VkExtent3D *extent3d = malloc(sizeof(VkExtent3D));
extent3d->width=___arg1;
extent3d->height=___arg2;
extent3d->depth=___arg3;
___return (extent3d);"))
(begin-ffi
   (make-VkViewport
      ptr->VkViewport
      ref-VkViewport
      make-VkViewport*
      VkViewportmaxDepth
      VkViewportminDepth
      VkViewportheight
      VkViewportwidth
      VkViewporty
      VkViewportx
      VkViewport
      VkViewport*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkViewport (struct "VkViewport"))
   (c-define-type VkViewport* (pointer VkViewport))
   (define-c-lambda VkViewportx (VkViewport*) float "___return (___arg1->x);")
   (define-c-lambda VkViewporty (VkViewport*) float "___return (___arg1->y);")
   (define-c-lambda VkViewportwidth (VkViewport*) float "___return (___arg1->width);")
   (define-c-lambda VkViewportheight (VkViewport*) float "___return (___arg1->height);")
   (define-c-lambda
      VkViewportminDepth
      (VkViewport*)
      float
      "___return (___arg1->minDepth);")
   (define-c-lambda
      VkViewportmaxDepth
      (VkViewport*)
      float
      "___return (___arg1->maxDepth);")
   (define-c-lambda
      make-VkViewport*
      (int)
      VkViewport*
      "VkViewport* vkviewport = malloc(___arg1 * sizeof(VkViewport));
      ___return (vkviewport);")
   (define-c-lambda
      ref-VkViewport
      (VkViewport* int)
      VkViewport*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkViewport
      ((pointer VkViewport))
      VkViewport
      "___return(*___arg1);")
   (define-c-lambda
      make-VkViewport
      (float float float float float float)
      VkViewport*
      "VkViewport *viewport = malloc(sizeof(VkViewport));
viewport->x=___arg1;
viewport->y=___arg2;
viewport->width=___arg3;
viewport->height=___arg4;
viewport->minDepth=___arg5;
viewport->maxDepth=___arg6;
___return (viewport);"))
(begin-ffi
   (make-VkRect2D
      ptr->VkRect2D
      ref-VkRect2D
      make-VkRect2D*
      VkRect2Dextent
      VkRect2Doffset
      VkRect2D
      VkRect2D*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkRect2D (struct "VkRect2D"))
   (c-define-type VkRect2D* (pointer VkRect2D))
   (define-c-lambda VkRect2Doffset (VkRect2D*) VkOffset2D "___return (___arg1->offset);")
   (define-c-lambda VkRect2Dextent (VkRect2D*) VkExtent2D "___return (___arg1->extent);")
   (define-c-lambda
      make-VkRect2D*
      (int)
      VkRect2D*
      "VkRect2D* vkrect2d = malloc(___arg1 * sizeof(VkRect2D));
      ___return (vkrect2d);")
   (define-c-lambda
      ref-VkRect2D
      (VkRect2D* int)
      VkRect2D*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda ptr->VkRect2D ((pointer VkRect2D)) VkRect2D "___return(*___arg1);")
   (define-c-lambda
      make-VkRect2D
      (VkOffset2D VkExtent2D)
      VkRect2D*
      "VkRect2D *rect2d = malloc(sizeof(VkRect2D));
rect2d->offset=___arg1;
rect2d->extent=___arg2;
___return (rect2d);"))
(begin-ffi
   (make-VkClearRect
      ptr->VkClearRect
      ref-VkClearRect
      make-VkClearRect*
      VkClearRectlayerCount
      VkClearRectbaseArrayLayer
      VkClearRectrect
      VkClearRect
      VkClearRect*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkClearRect (struct "VkClearRect"))
   (c-define-type VkClearRect* (pointer VkClearRect))
   (define-c-lambda VkClearRectrect (VkClearRect*) VkRect2D "___return (___arg1->rect);")
   (define-c-lambda
      VkClearRectbaseArrayLayer
      (VkClearRect*)
      uint32_t
      "___return (___arg1->baseArrayLayer);")
   (define-c-lambda
      VkClearRectlayerCount
      (VkClearRect*)
      uint32_t
      "___return (___arg1->layerCount);")
   (define-c-lambda
      make-VkClearRect*
      (int)
      VkClearRect*
      "VkClearRect* vkclearrect = malloc(___arg1 * sizeof(VkClearRect));
      ___return (vkclearrect);")
   (define-c-lambda
      ref-VkClearRect
      (VkClearRect* int)
      VkClearRect*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkClearRect
      ((pointer VkClearRect))
      VkClearRect
      "___return(*___arg1);")
   (define-c-lambda
      make-VkClearRect
      (VkRect2D uint32_t uint32_t)
      VkClearRect*
      "VkClearRect *clearrect = malloc(sizeof(VkClearRect));
clearrect->rect=___arg1;
clearrect->baseArrayLayer=___arg2;
clearrect->layerCount=___arg3;
___return (clearrect);"))
(begin-ffi
   (make-VkComponentMapping
      ptr->VkComponentMapping
      ref-VkComponentMapping
      make-VkComponentMapping*
      VkComponentMappinga
      VkComponentMappingb
      VkComponentMappingg
      VkComponentMappingr
      VkComponentMapping
      VkComponentMapping*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkComponentMapping (struct "VkComponentMapping"))
   (c-define-type VkComponentMapping* (pointer VkComponentMapping))
   (define-c-lambda
      VkComponentMappingr
      (VkComponentMapping*)
      VkComponentSwizzle
      "___return (___arg1->r);")
   (define-c-lambda
      VkComponentMappingg
      (VkComponentMapping*)
      VkComponentSwizzle
      "___return (___arg1->g);")
   (define-c-lambda
      VkComponentMappingb
      (VkComponentMapping*)
      VkComponentSwizzle
      "___return (___arg1->b);")
   (define-c-lambda
      VkComponentMappinga
      (VkComponentMapping*)
      VkComponentSwizzle
      "___return (___arg1->a);")
   (define-c-lambda
      make-VkComponentMapping*
      (int)
      VkComponentMapping*
      "VkComponentMapping* vkcomponentmapping = malloc(___arg1 * sizeof(VkComponentMapping));
      ___return (vkcomponentmapping);")
   (define-c-lambda
      ref-VkComponentMapping
      (VkComponentMapping* int)
      VkComponentMapping*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkComponentMapping
      ((pointer VkComponentMapping))
      VkComponentMapping
      "___return(*___arg1);")
   (define-c-lambda
      make-VkComponentMapping
      (VkComponentSwizzle VkComponentSwizzle VkComponentSwizzle VkComponentSwizzle)
      VkComponentMapping*
      "VkComponentMapping *componentmapping = malloc(sizeof(VkComponentMapping));
componentmapping->r=___arg1;
componentmapping->g=___arg2;
componentmapping->b=___arg3;
componentmapping->a=___arg4;
___return (componentmapping);"))
(begin-ffi
   (make-VkPhysicalDeviceSparseProperties
      ptr->VkPhysicalDeviceSparseProperties
      ref-VkPhysicalDeviceSparseProperties
      make-VkPhysicalDeviceSparseProperties*
      VkPhysicalDeviceSparsePropertiesresidencyNonResidentStrict
      VkPhysicalDeviceSparsePropertiesresidencyAlignedMipSize
      VkPhysicalDeviceSparsePropertiesresidencyStandard3DBlockShape
      VkPhysicalDeviceSparsePropertiesresidencyStandard2DMultisampleBlockShape
      VkPhysicalDeviceSparsePropertiesresidencyStandard2DBlockShape
      VkPhysicalDeviceSparseProperties
      VkPhysicalDeviceSparseProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSparseProperties
      (struct "VkPhysicalDeviceSparseProperties"))
   (c-define-type
      VkPhysicalDeviceSparseProperties*
      (pointer VkPhysicalDeviceSparseProperties))
   (define-c-lambda
      VkPhysicalDeviceSparsePropertiesresidencyStandard2DBlockShape
      (VkPhysicalDeviceSparseProperties*)
      VkBool32
      "___return (___arg1->residencyStandard2DBlockShape);")
   (define-c-lambda
      VkPhysicalDeviceSparsePropertiesresidencyStandard2DMultisampleBlockShape
      (VkPhysicalDeviceSparseProperties*)
      VkBool32
      "___return (___arg1->residencyStandard2DMultisampleBlockShape);")
   (define-c-lambda
      VkPhysicalDeviceSparsePropertiesresidencyStandard3DBlockShape
      (VkPhysicalDeviceSparseProperties*)
      VkBool32
      "___return (___arg1->residencyStandard3DBlockShape);")
   (define-c-lambda
      VkPhysicalDeviceSparsePropertiesresidencyAlignedMipSize
      (VkPhysicalDeviceSparseProperties*)
      VkBool32
      "___return (___arg1->residencyAlignedMipSize);")
   (define-c-lambda
      VkPhysicalDeviceSparsePropertiesresidencyNonResidentStrict
      (VkPhysicalDeviceSparseProperties*)
      VkBool32
      "___return (___arg1->residencyNonResidentStrict);")
   (define-c-lambda
      make-VkPhysicalDeviceSparseProperties*
      (int)
      VkPhysicalDeviceSparseProperties*
      "VkPhysicalDeviceSparseProperties* vkphysicaldevicesparseproperties = malloc(___arg1 * sizeof(VkPhysicalDeviceSparseProperties));
      ___return (vkphysicaldevicesparseproperties);")
   (define-c-lambda
      ref-VkPhysicalDeviceSparseProperties
      (VkPhysicalDeviceSparseProperties* int)
      VkPhysicalDeviceSparseProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceSparseProperties
      ((pointer VkPhysicalDeviceSparseProperties))
      VkPhysicalDeviceSparseProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceSparseProperties
      (VkBool32 VkBool32 VkBool32 VkBool32 VkBool32)
      VkPhysicalDeviceSparseProperties*
      "VkPhysicalDeviceSparseProperties *physicaldevicesparseproperties = malloc(sizeof(VkPhysicalDeviceSparseProperties));
physicaldevicesparseproperties->residencyStandard2DBlockShape=___arg1;
physicaldevicesparseproperties->residencyStandard2DMultisampleBlockShape=___arg2;
physicaldevicesparseproperties->residencyStandard3DBlockShape=___arg3;
physicaldevicesparseproperties->residencyAlignedMipSize=___arg4;
physicaldevicesparseproperties->residencyNonResidentStrict=___arg5;
___return (physicaldevicesparseproperties);"))
(begin-ffi
   (make-VkPhysicalDeviceLimits
      ptr->VkPhysicalDeviceLimits
      ref-VkPhysicalDeviceLimits
      make-VkPhysicalDeviceLimits*
      VkPhysicalDeviceLimitsnonCoherentAtomSize
      VkPhysicalDeviceLimitsoptimalBufferCopyRowPitchAlignment
      VkPhysicalDeviceLimitsoptimalBufferCopyOffsetAlignment
      VkPhysicalDeviceLimitsstandardSampleLocations
      VkPhysicalDeviceLimitsstrictLines
      VkPhysicalDeviceLimitslineWidthGranularity
      VkPhysicalDeviceLimitspointSizeGranularity
      VkPhysicalDeviceLimitslineWidthRange
      VkPhysicalDeviceLimitspointSizeRange
      VkPhysicalDeviceLimitsdiscreteQueuePriorities
      VkPhysicalDeviceLimitsmaxCombinedClipAndCullDistances
      VkPhysicalDeviceLimitsmaxCullDistances
      VkPhysicalDeviceLimitsmaxClipDistances
      VkPhysicalDeviceLimitstimestampPeriod
      VkPhysicalDeviceLimitstimestampComputeAndGraphics
      VkPhysicalDeviceLimitsmaxSampleMaskWords
      VkPhysicalDeviceLimitsstorageImageSampleCounts
      VkPhysicalDeviceLimitssampledImageStencilSampleCounts
      VkPhysicalDeviceLimitssampledImageDepthSampleCounts
      VkPhysicalDeviceLimitssampledImageIntegerSampleCounts
      VkPhysicalDeviceLimitssampledImageColorSampleCounts
      VkPhysicalDeviceLimitsmaxColorAttachments
      VkPhysicalDeviceLimitsframebufferNoAttachmentsSampleCounts
      VkPhysicalDeviceLimitsframebufferStencilSampleCounts
      VkPhysicalDeviceLimitsframebufferDepthSampleCounts
      VkPhysicalDeviceLimitsframebufferColorSampleCounts
      VkPhysicalDeviceLimitsmaxFramebufferLayers
      VkPhysicalDeviceLimitsmaxFramebufferHeight
      VkPhysicalDeviceLimitsmaxFramebufferWidth
      VkPhysicalDeviceLimitssubPixelInterpolationOffsetBits
      VkPhysicalDeviceLimitsmaxInterpolationOffset
      VkPhysicalDeviceLimitsminInterpolationOffset
      VkPhysicalDeviceLimitsmaxTexelGatherOffset
      VkPhysicalDeviceLimitsminTexelGatherOffset
      VkPhysicalDeviceLimitsmaxTexelOffset
      VkPhysicalDeviceLimitsminTexelOffset
      VkPhysicalDeviceLimitsminStorageBufferOffsetAlignment
      VkPhysicalDeviceLimitsminUniformBufferOffsetAlignment
      VkPhysicalDeviceLimitsminTexelBufferOffsetAlignment
      VkPhysicalDeviceLimitsminMemoryMapAlignment
      VkPhysicalDeviceLimitsviewportSubPixelBits
      VkPhysicalDeviceLimitsviewportBoundsRange
      VkPhysicalDeviceLimitsmaxViewportDimensions
      VkPhysicalDeviceLimitsmaxViewports
      VkPhysicalDeviceLimitsmaxSamplerAnisotropy
      VkPhysicalDeviceLimitsmaxSamplerLodBias
      VkPhysicalDeviceLimitsmaxDrawIndirectCount
      VkPhysicalDeviceLimitsmaxDrawIndexedIndexValue
      VkPhysicalDeviceLimitsmipmapPrecisionBits
      VkPhysicalDeviceLimitssubTexelPrecisionBits
      VkPhysicalDeviceLimitssubPixelPrecisionBits
      VkPhysicalDeviceLimitsmaxComputeWorkGroupSize
      VkPhysicalDeviceLimitsmaxComputeWorkGroupInvocations
      VkPhysicalDeviceLimitsmaxComputeWorkGroupCount
      VkPhysicalDeviceLimitsmaxComputeSharedMemorySize
      VkPhysicalDeviceLimitsmaxFragmentCombinedOutputResources
      VkPhysicalDeviceLimitsmaxFragmentDualSrcAttachments
      VkPhysicalDeviceLimitsmaxFragmentOutputAttachments
      VkPhysicalDeviceLimitsmaxFragmentInputComponents
      VkPhysicalDeviceLimitsmaxGeometryTotalOutputComponents
      VkPhysicalDeviceLimitsmaxGeometryOutputVertices
      VkPhysicalDeviceLimitsmaxGeometryOutputComponents
      VkPhysicalDeviceLimitsmaxGeometryInputComponents
      VkPhysicalDeviceLimitsmaxGeometryShaderInvocations
      VkPhysicalDeviceLimitsmaxTessellationEvaluationOutputComponents
      VkPhysicalDeviceLimitsmaxTessellationEvaluationInputComponents
      VkPhysicalDeviceLimitsmaxTessellationControlTotalOutputComponents
      VkPhysicalDeviceLimitsmaxTessellationControlPerPatchOutputComponents
      VkPhysicalDeviceLimitsmaxTessellationControlPerVertexOutputComponents
      VkPhysicalDeviceLimitsmaxTessellationControlPerVertexInputComponents
      VkPhysicalDeviceLimitsmaxTessellationPatchSize
      VkPhysicalDeviceLimitsmaxTessellationGenerationLevel
      VkPhysicalDeviceLimitsmaxVertexOutputComponents
      VkPhysicalDeviceLimitsmaxVertexInputBindingStride
      VkPhysicalDeviceLimitsmaxVertexInputAttributeOffset
      VkPhysicalDeviceLimitsmaxVertexInputBindings
      VkPhysicalDeviceLimitsmaxVertexInputAttributes
      VkPhysicalDeviceLimitsmaxDescriptorSetInputAttachments
      VkPhysicalDeviceLimitsmaxDescriptorSetStorageImages
      VkPhysicalDeviceLimitsmaxDescriptorSetSampledImages
      VkPhysicalDeviceLimitsmaxDescriptorSetStorageBuffersDynamic
      VkPhysicalDeviceLimitsmaxDescriptorSetStorageBuffers
      VkPhysicalDeviceLimitsmaxDescriptorSetUniformBuffersDynamic
      VkPhysicalDeviceLimitsmaxDescriptorSetUniformBuffers
      VkPhysicalDeviceLimitsmaxDescriptorSetSamplers
      VkPhysicalDeviceLimitsmaxPerStageResources
      VkPhysicalDeviceLimitsmaxPerStageDescriptorInputAttachments
      VkPhysicalDeviceLimitsmaxPerStageDescriptorStorageImages
      VkPhysicalDeviceLimitsmaxPerStageDescriptorSampledImages
      VkPhysicalDeviceLimitsmaxPerStageDescriptorStorageBuffers
      VkPhysicalDeviceLimitsmaxPerStageDescriptorUniformBuffers
      VkPhysicalDeviceLimitsmaxPerStageDescriptorSamplers
      VkPhysicalDeviceLimitsmaxBoundDescriptorSets
      VkPhysicalDeviceLimitssparseAddressSpaceSize
      VkPhysicalDeviceLimitsbufferImageGranularity
      VkPhysicalDeviceLimitsmaxSamplerAllocationCount
      VkPhysicalDeviceLimitsmaxMemoryAllocationCount
      VkPhysicalDeviceLimitsmaxPushConstantsSize
      VkPhysicalDeviceLimitsmaxStorageBufferRange
      VkPhysicalDeviceLimitsmaxUniformBufferRange
      VkPhysicalDeviceLimitsmaxTexelBufferElements
      VkPhysicalDeviceLimitsmaxImageArrayLayers
      VkPhysicalDeviceLimitsmaxImageDimensionCube
      VkPhysicalDeviceLimitsmaxImageDimension3D
      VkPhysicalDeviceLimitsmaxImageDimension2D
      VkPhysicalDeviceLimitsmaxImageDimension1D
      VkPhysicalDeviceLimits
      VkPhysicalDeviceLimits*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPhysicalDeviceLimits (struct "VkPhysicalDeviceLimits"))
   (c-define-type VkPhysicalDeviceLimits* (pointer VkPhysicalDeviceLimits))
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxImageDimension1D
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxImageDimension1D);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxImageDimension2D
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxImageDimension2D);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxImageDimension3D
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxImageDimension3D);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxImageDimensionCube
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxImageDimensionCube);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxImageArrayLayers
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxImageArrayLayers);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTexelBufferElements
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTexelBufferElements);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxUniformBufferRange
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxUniformBufferRange);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxStorageBufferRange
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxStorageBufferRange);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxPushConstantsSize
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxPushConstantsSize);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxMemoryAllocationCount
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxMemoryAllocationCount);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxSamplerAllocationCount
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxSamplerAllocationCount);")
   (define-c-lambda
      VkPhysicalDeviceLimitsbufferImageGranularity
      (VkPhysicalDeviceLimits*)
      VkDeviceSize
      "___return (___arg1->bufferImageGranularity);")
   (define-c-lambda
      VkPhysicalDeviceLimitssparseAddressSpaceSize
      (VkPhysicalDeviceLimits*)
      VkDeviceSize
      "___return (___arg1->sparseAddressSpaceSize);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxBoundDescriptorSets
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxBoundDescriptorSets);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxPerStageDescriptorSamplers
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorSamplers);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxPerStageDescriptorUniformBuffers
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorUniformBuffers);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxPerStageDescriptorStorageBuffers
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorStorageBuffers);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxPerStageDescriptorSampledImages
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorSampledImages);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxPerStageDescriptorStorageImages
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorStorageImages);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxPerStageDescriptorInputAttachments
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorInputAttachments);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxPerStageResources
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxPerStageResources);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxDescriptorSetSamplers
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxDescriptorSetSamplers);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxDescriptorSetUniformBuffers
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUniformBuffers);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxDescriptorSetUniformBuffersDynamic
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUniformBuffersDynamic);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxDescriptorSetStorageBuffers
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxDescriptorSetStorageBuffers);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxDescriptorSetStorageBuffersDynamic
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxDescriptorSetStorageBuffersDynamic);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxDescriptorSetSampledImages
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxDescriptorSetSampledImages);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxDescriptorSetStorageImages
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxDescriptorSetStorageImages);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxDescriptorSetInputAttachments
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxDescriptorSetInputAttachments);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxVertexInputAttributes
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxVertexInputAttributes);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxVertexInputBindings
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxVertexInputBindings);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxVertexInputAttributeOffset
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxVertexInputAttributeOffset);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxVertexInputBindingStride
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxVertexInputBindingStride);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxVertexOutputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxVertexOutputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTessellationGenerationLevel
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTessellationGenerationLevel);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTessellationPatchSize
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTessellationPatchSize);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTessellationControlPerVertexInputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTessellationControlPerVertexInputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTessellationControlPerVertexOutputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTessellationControlPerVertexOutputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTessellationControlPerPatchOutputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTessellationControlPerPatchOutputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTessellationControlTotalOutputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTessellationControlTotalOutputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTessellationEvaluationInputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTessellationEvaluationInputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTessellationEvaluationOutputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTessellationEvaluationOutputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxGeometryShaderInvocations
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxGeometryShaderInvocations);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxGeometryInputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxGeometryInputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxGeometryOutputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxGeometryOutputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxGeometryOutputVertices
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxGeometryOutputVertices);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxGeometryTotalOutputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxGeometryTotalOutputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxFragmentInputComponents
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxFragmentInputComponents);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxFragmentOutputAttachments
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxFragmentOutputAttachments);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxFragmentDualSrcAttachments
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxFragmentDualSrcAttachments);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxFragmentCombinedOutputResources
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxFragmentCombinedOutputResources);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxComputeSharedMemorySize
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxComputeSharedMemorySize);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxComputeWorkGroupCount
      (VkPhysicalDeviceLimits*)
      uint32_t*
      "___return (___arg1->maxComputeWorkGroupCount);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxComputeWorkGroupInvocations
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxComputeWorkGroupInvocations);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxComputeWorkGroupSize
      (VkPhysicalDeviceLimits*)
      uint32_t*
      "___return (___arg1->maxComputeWorkGroupSize);")
   (define-c-lambda
      VkPhysicalDeviceLimitssubPixelPrecisionBits
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->subPixelPrecisionBits);")
   (define-c-lambda
      VkPhysicalDeviceLimitssubTexelPrecisionBits
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->subTexelPrecisionBits);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmipmapPrecisionBits
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->mipmapPrecisionBits);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxDrawIndexedIndexValue
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxDrawIndexedIndexValue);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxDrawIndirectCount
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxDrawIndirectCount);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxSamplerLodBias
      (VkPhysicalDeviceLimits*)
      float
      "___return (___arg1->maxSamplerLodBias);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxSamplerAnisotropy
      (VkPhysicalDeviceLimits*)
      float
      "___return (___arg1->maxSamplerAnisotropy);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxViewports
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxViewports);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxViewportDimensions
      (VkPhysicalDeviceLimits*)
      uint32_t*
      "___return (___arg1->maxViewportDimensions);")
   (define-c-lambda
      VkPhysicalDeviceLimitsviewportBoundsRange
      (VkPhysicalDeviceLimits*)
      float*
      "___return (___arg1->viewportBoundsRange);")
   (define-c-lambda
      VkPhysicalDeviceLimitsviewportSubPixelBits
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->viewportSubPixelBits);")
   (define-c-lambda
      VkPhysicalDeviceLimitsminMemoryMapAlignment
      (VkPhysicalDeviceLimits*)
      size_t
      "___return (___arg1->minMemoryMapAlignment);")
   (define-c-lambda
      VkPhysicalDeviceLimitsminTexelBufferOffsetAlignment
      (VkPhysicalDeviceLimits*)
      VkDeviceSize
      "___return (___arg1->minTexelBufferOffsetAlignment);")
   (define-c-lambda
      VkPhysicalDeviceLimitsminUniformBufferOffsetAlignment
      (VkPhysicalDeviceLimits*)
      VkDeviceSize
      "___return (___arg1->minUniformBufferOffsetAlignment);")
   (define-c-lambda
      VkPhysicalDeviceLimitsminStorageBufferOffsetAlignment
      (VkPhysicalDeviceLimits*)
      VkDeviceSize
      "___return (___arg1->minStorageBufferOffsetAlignment);")
   (define-c-lambda
      VkPhysicalDeviceLimitsminTexelOffset
      (VkPhysicalDeviceLimits*)
      int32_t
      "___return (___arg1->minTexelOffset);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTexelOffset
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTexelOffset);")
   (define-c-lambda
      VkPhysicalDeviceLimitsminTexelGatherOffset
      (VkPhysicalDeviceLimits*)
      int32_t
      "___return (___arg1->minTexelGatherOffset);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxTexelGatherOffset
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxTexelGatherOffset);")
   (define-c-lambda
      VkPhysicalDeviceLimitsminInterpolationOffset
      (VkPhysicalDeviceLimits*)
      float
      "___return (___arg1->minInterpolationOffset);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxInterpolationOffset
      (VkPhysicalDeviceLimits*)
      float
      "___return (___arg1->maxInterpolationOffset);")
   (define-c-lambda
      VkPhysicalDeviceLimitssubPixelInterpolationOffsetBits
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->subPixelInterpolationOffsetBits);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxFramebufferWidth
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxFramebufferWidth);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxFramebufferHeight
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxFramebufferHeight);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxFramebufferLayers
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxFramebufferLayers);")
   (define-c-lambda
      VkPhysicalDeviceLimitsframebufferColorSampleCounts
      (VkPhysicalDeviceLimits*)
      VkSampleCountFlags
      "___return (___arg1->framebufferColorSampleCounts);")
   (define-c-lambda
      VkPhysicalDeviceLimitsframebufferDepthSampleCounts
      (VkPhysicalDeviceLimits*)
      VkSampleCountFlags
      "___return (___arg1->framebufferDepthSampleCounts);")
   (define-c-lambda
      VkPhysicalDeviceLimitsframebufferStencilSampleCounts
      (VkPhysicalDeviceLimits*)
      VkSampleCountFlags
      "___return (___arg1->framebufferStencilSampleCounts);")
   (define-c-lambda
      VkPhysicalDeviceLimitsframebufferNoAttachmentsSampleCounts
      (VkPhysicalDeviceLimits*)
      VkSampleCountFlags
      "___return (___arg1->framebufferNoAttachmentsSampleCounts);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxColorAttachments
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxColorAttachments);")
   (define-c-lambda
      VkPhysicalDeviceLimitssampledImageColorSampleCounts
      (VkPhysicalDeviceLimits*)
      VkSampleCountFlags
      "___return (___arg1->sampledImageColorSampleCounts);")
   (define-c-lambda
      VkPhysicalDeviceLimitssampledImageIntegerSampleCounts
      (VkPhysicalDeviceLimits*)
      VkSampleCountFlags
      "___return (___arg1->sampledImageIntegerSampleCounts);")
   (define-c-lambda
      VkPhysicalDeviceLimitssampledImageDepthSampleCounts
      (VkPhysicalDeviceLimits*)
      VkSampleCountFlags
      "___return (___arg1->sampledImageDepthSampleCounts);")
   (define-c-lambda
      VkPhysicalDeviceLimitssampledImageStencilSampleCounts
      (VkPhysicalDeviceLimits*)
      VkSampleCountFlags
      "___return (___arg1->sampledImageStencilSampleCounts);")
   (define-c-lambda
      VkPhysicalDeviceLimitsstorageImageSampleCounts
      (VkPhysicalDeviceLimits*)
      VkSampleCountFlags
      "___return (___arg1->storageImageSampleCounts);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxSampleMaskWords
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxSampleMaskWords);")
   (define-c-lambda
      VkPhysicalDeviceLimitstimestampComputeAndGraphics
      (VkPhysicalDeviceLimits*)
      VkBool32
      "___return (___arg1->timestampComputeAndGraphics);")
   (define-c-lambda
      VkPhysicalDeviceLimitstimestampPeriod
      (VkPhysicalDeviceLimits*)
      float
      "___return (___arg1->timestampPeriod);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxClipDistances
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxClipDistances);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxCullDistances
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxCullDistances);")
   (define-c-lambda
      VkPhysicalDeviceLimitsmaxCombinedClipAndCullDistances
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->maxCombinedClipAndCullDistances);")
   (define-c-lambda
      VkPhysicalDeviceLimitsdiscreteQueuePriorities
      (VkPhysicalDeviceLimits*)
      uint32_t
      "___return (___arg1->discreteQueuePriorities);")
   (define-c-lambda
      VkPhysicalDeviceLimitspointSizeRange
      (VkPhysicalDeviceLimits*)
      float*
      "___return (___arg1->pointSizeRange);")
   (define-c-lambda
      VkPhysicalDeviceLimitslineWidthRange
      (VkPhysicalDeviceLimits*)
      float*
      "___return (___arg1->lineWidthRange);")
   (define-c-lambda
      VkPhysicalDeviceLimitspointSizeGranularity
      (VkPhysicalDeviceLimits*)
      float
      "___return (___arg1->pointSizeGranularity);")
   (define-c-lambda
      VkPhysicalDeviceLimitslineWidthGranularity
      (VkPhysicalDeviceLimits*)
      float
      "___return (___arg1->lineWidthGranularity);")
   (define-c-lambda
      VkPhysicalDeviceLimitsstrictLines
      (VkPhysicalDeviceLimits*)
      VkBool32
      "___return (___arg1->strictLines);")
   (define-c-lambda
      VkPhysicalDeviceLimitsstandardSampleLocations
      (VkPhysicalDeviceLimits*)
      VkBool32
      "___return (___arg1->standardSampleLocations);")
   (define-c-lambda
      VkPhysicalDeviceLimitsoptimalBufferCopyOffsetAlignment
      (VkPhysicalDeviceLimits*)
      VkDeviceSize
      "___return (___arg1->optimalBufferCopyOffsetAlignment);")
   (define-c-lambda
      VkPhysicalDeviceLimitsoptimalBufferCopyRowPitchAlignment
      (VkPhysicalDeviceLimits*)
      VkDeviceSize
      "___return (___arg1->optimalBufferCopyRowPitchAlignment);")
   (define-c-lambda
      VkPhysicalDeviceLimitsnonCoherentAtomSize
      (VkPhysicalDeviceLimits*)
      VkDeviceSize
      "___return (___arg1->nonCoherentAtomSize);")
   (define-c-lambda
      make-VkPhysicalDeviceLimits*
      (int)
      VkPhysicalDeviceLimits*
      "VkPhysicalDeviceLimits* vkphysicaldevicelimits = malloc(___arg1 * sizeof(VkPhysicalDeviceLimits));
      ___return (vkphysicaldevicelimits);")
   (define-c-lambda
      ref-VkPhysicalDeviceLimits
      (VkPhysicalDeviceLimits* int)
      VkPhysicalDeviceLimits*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceLimits
      ((pointer VkPhysicalDeviceLimits))
      VkPhysicalDeviceLimits
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceLimits
      (uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         VkDeviceSize
         VkDeviceSize
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t*
         uint32_t
         uint32_t*
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         float
         float
         uint32_t
         uint32_t*
         float*
         uint32_t
         size_t
         VkDeviceSize
         VkDeviceSize
         VkDeviceSize
         int32_t
         uint32_t
         int32_t
         uint32_t
         float
         float
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         VkSampleCountFlags
         VkSampleCountFlags
         VkSampleCountFlags
         VkSampleCountFlags
         uint32_t
         VkSampleCountFlags
         VkSampleCountFlags
         VkSampleCountFlags
         VkSampleCountFlags
         VkSampleCountFlags
         uint32_t
         VkBool32
         float
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         float*
         float*
         float
         float
         VkBool32
         VkBool32
         VkDeviceSize
         VkDeviceSize
         VkDeviceSize)
      VkPhysicalDeviceLimits*
      "VkPhysicalDeviceLimits *physicaldevicelimits = malloc(sizeof(VkPhysicalDeviceLimits));
physicaldevicelimits->maxImageDimension1D=___arg1;
physicaldevicelimits->maxImageDimension2D=___arg2;
physicaldevicelimits->maxImageDimension3D=___arg3;
physicaldevicelimits->maxImageDimensionCube=___arg4;
physicaldevicelimits->maxImageArrayLayers=___arg5;
physicaldevicelimits->maxTexelBufferElements=___arg6;
physicaldevicelimits->maxUniformBufferRange=___arg7;
physicaldevicelimits->maxStorageBufferRange=___arg8;
physicaldevicelimits->maxPushConstantsSize=___arg9;
physicaldevicelimits->maxMemoryAllocationCount=___arg10;
physicaldevicelimits->maxSamplerAllocationCount=___arg11;
physicaldevicelimits->bufferImageGranularity=___arg12;
physicaldevicelimits->sparseAddressSpaceSize=___arg13;
physicaldevicelimits->maxBoundDescriptorSets=___arg14;
physicaldevicelimits->maxPerStageDescriptorSamplers=___arg15;
physicaldevicelimits->maxPerStageDescriptorUniformBuffers=___arg16;
physicaldevicelimits->maxPerStageDescriptorStorageBuffers=___arg17;
physicaldevicelimits->maxPerStageDescriptorSampledImages=___arg18;
physicaldevicelimits->maxPerStageDescriptorStorageImages=___arg19;
physicaldevicelimits->maxPerStageDescriptorInputAttachments=___arg20;
physicaldevicelimits->maxPerStageResources=___arg21;
physicaldevicelimits->maxDescriptorSetSamplers=___arg22;
physicaldevicelimits->maxDescriptorSetUniformBuffers=___arg23;
physicaldevicelimits->maxDescriptorSetUniformBuffersDynamic=___arg24;
physicaldevicelimits->maxDescriptorSetStorageBuffers=___arg25;
physicaldevicelimits->maxDescriptorSetStorageBuffersDynamic=___arg26;
physicaldevicelimits->maxDescriptorSetSampledImages=___arg27;
physicaldevicelimits->maxDescriptorSetStorageImages=___arg28;
physicaldevicelimits->maxDescriptorSetInputAttachments=___arg29;
physicaldevicelimits->maxVertexInputAttributes=___arg30;
physicaldevicelimits->maxVertexInputBindings=___arg31;
physicaldevicelimits->maxVertexInputAttributeOffset=___arg32;
physicaldevicelimits->maxVertexInputBindingStride=___arg33;
physicaldevicelimits->maxVertexOutputComponents=___arg34;
physicaldevicelimits->maxTessellationGenerationLevel=___arg35;
physicaldevicelimits->maxTessellationPatchSize=___arg36;
physicaldevicelimits->maxTessellationControlPerVertexInputComponents=___arg37;
physicaldevicelimits->maxTessellationControlPerVertexOutputComponents=___arg38;
physicaldevicelimits->maxTessellationControlPerPatchOutputComponents=___arg39;
physicaldevicelimits->maxTessellationControlTotalOutputComponents=___arg40;
physicaldevicelimits->maxTessellationEvaluationInputComponents=___arg41;
physicaldevicelimits->maxTessellationEvaluationOutputComponents=___arg42;
physicaldevicelimits->maxGeometryShaderInvocations=___arg43;
physicaldevicelimits->maxGeometryInputComponents=___arg44;
physicaldevicelimits->maxGeometryOutputComponents=___arg45;
physicaldevicelimits->maxGeometryOutputVertices=___arg46;
physicaldevicelimits->maxGeometryTotalOutputComponents=___arg47;
physicaldevicelimits->maxFragmentInputComponents=___arg48;
physicaldevicelimits->maxFragmentOutputAttachments=___arg49;
physicaldevicelimits->maxFragmentDualSrcAttachments=___arg50;
physicaldevicelimits->maxFragmentCombinedOutputResources=___arg51;
physicaldevicelimits->maxComputeSharedMemorySize=___arg52;
memcpy(physicaldevicelimits->maxComputeWorkGroupCount,___arg53,sizeof(___arg53));
physicaldevicelimits->maxComputeWorkGroupInvocations=___arg54;
memcpy(physicaldevicelimits->maxComputeWorkGroupSize,___arg55,sizeof(___arg55));
physicaldevicelimits->subPixelPrecisionBits=___arg56;
physicaldevicelimits->subTexelPrecisionBits=___arg57;
physicaldevicelimits->mipmapPrecisionBits=___arg58;
physicaldevicelimits->maxDrawIndexedIndexValue=___arg59;
physicaldevicelimits->maxDrawIndirectCount=___arg60;
physicaldevicelimits->maxSamplerLodBias=___arg61;
physicaldevicelimits->maxSamplerAnisotropy=___arg62;
physicaldevicelimits->maxViewports=___arg63;
memcpy(physicaldevicelimits->maxViewportDimensions,___arg64,sizeof(___arg64));
memcpy(physicaldevicelimits->viewportBoundsRange,___arg65,sizeof(___arg65));
physicaldevicelimits->viewportSubPixelBits=___arg66;
physicaldevicelimits->minMemoryMapAlignment=___arg67;
physicaldevicelimits->minTexelBufferOffsetAlignment=___arg68;
physicaldevicelimits->minUniformBufferOffsetAlignment=___arg69;
physicaldevicelimits->minStorageBufferOffsetAlignment=___arg70;
physicaldevicelimits->minTexelOffset=___arg71;
physicaldevicelimits->maxTexelOffset=___arg72;
physicaldevicelimits->minTexelGatherOffset=___arg73;
physicaldevicelimits->maxTexelGatherOffset=___arg74;
physicaldevicelimits->minInterpolationOffset=___arg75;
physicaldevicelimits->maxInterpolationOffset=___arg76;
physicaldevicelimits->subPixelInterpolationOffsetBits=___arg77;
physicaldevicelimits->maxFramebufferWidth=___arg78;
physicaldevicelimits->maxFramebufferHeight=___arg79;
physicaldevicelimits->maxFramebufferLayers=___arg80;
physicaldevicelimits->framebufferColorSampleCounts=___arg81;
physicaldevicelimits->framebufferDepthSampleCounts=___arg82;
physicaldevicelimits->framebufferStencilSampleCounts=___arg83;
physicaldevicelimits->framebufferNoAttachmentsSampleCounts=___arg84;
physicaldevicelimits->maxColorAttachments=___arg85;
physicaldevicelimits->sampledImageColorSampleCounts=___arg86;
physicaldevicelimits->sampledImageIntegerSampleCounts=___arg87;
physicaldevicelimits->sampledImageDepthSampleCounts=___arg88;
physicaldevicelimits->sampledImageStencilSampleCounts=___arg89;
physicaldevicelimits->storageImageSampleCounts=___arg90;
physicaldevicelimits->maxSampleMaskWords=___arg91;
physicaldevicelimits->timestampComputeAndGraphics=___arg92;
physicaldevicelimits->timestampPeriod=___arg93;
physicaldevicelimits->maxClipDistances=___arg94;
physicaldevicelimits->maxCullDistances=___arg95;
physicaldevicelimits->maxCombinedClipAndCullDistances=___arg96;
physicaldevicelimits->discreteQueuePriorities=___arg97;
memcpy(physicaldevicelimits->pointSizeRange,___arg98,sizeof(___arg98));
memcpy(physicaldevicelimits->lineWidthRange,___arg99,sizeof(___arg99));
physicaldevicelimits->pointSizeGranularity=___arg100;
physicaldevicelimits->lineWidthGranularity=___arg101;
physicaldevicelimits->strictLines=___arg102;
physicaldevicelimits->standardSampleLocations=___arg103;
physicaldevicelimits->optimalBufferCopyOffsetAlignment=___arg104;
physicaldevicelimits->optimalBufferCopyRowPitchAlignment=___arg105;
physicaldevicelimits->nonCoherentAtomSize=___arg106;
___return (physicaldevicelimits);"))
(begin-ffi
   (make-VkPhysicalDeviceProperties
      ptr->VkPhysicalDeviceProperties
      ref-VkPhysicalDeviceProperties
      make-VkPhysicalDeviceProperties*
      VkPhysicalDevicePropertiessparseProperties
      VkPhysicalDevicePropertieslimits
      VkPhysicalDevicePropertiespipelineCacheUUID
      VkPhysicalDevicePropertiesdeviceName
      VkPhysicalDevicePropertiesdeviceType
      VkPhysicalDevicePropertiesdeviceID
      VkPhysicalDevicePropertiesvendorID
      VkPhysicalDevicePropertiesdriverVersion
      VkPhysicalDevicePropertiesapiVersion
      VkPhysicalDeviceProperties
      VkPhysicalDeviceProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPhysicalDeviceProperties (struct "VkPhysicalDeviceProperties"))
   (c-define-type VkPhysicalDeviceProperties* (pointer VkPhysicalDeviceProperties))
   (define-c-lambda
      VkPhysicalDevicePropertiesapiVersion
      (VkPhysicalDeviceProperties*)
      uint32_t
      "___return (___arg1->apiVersion);")
   (define-c-lambda
      VkPhysicalDevicePropertiesdriverVersion
      (VkPhysicalDeviceProperties*)
      uint32_t
      "___return (___arg1->driverVersion);")
   (define-c-lambda
      VkPhysicalDevicePropertiesvendorID
      (VkPhysicalDeviceProperties*)
      uint32_t
      "___return (___arg1->vendorID);")
   (define-c-lambda
      VkPhysicalDevicePropertiesdeviceID
      (VkPhysicalDeviceProperties*)
      uint32_t
      "___return (___arg1->deviceID);")
   (define-c-lambda
      VkPhysicalDevicePropertiesdeviceType
      (VkPhysicalDeviceProperties*)
      VkPhysicalDeviceType
      "___return (___arg1->deviceType);")
   (define-c-lambda
      VkPhysicalDevicePropertiesdeviceName
      (VkPhysicalDeviceProperties*)
      char*
      "___return (___arg1->deviceName);")
   (define-c-lambda
      VkPhysicalDevicePropertiespipelineCacheUUID
      (VkPhysicalDeviceProperties*)
      uint8_t*
      "___return (___arg1->pipelineCacheUUID);")
   (define-c-lambda
      VkPhysicalDevicePropertieslimits
      (VkPhysicalDeviceProperties*)
      VkPhysicalDeviceLimits
      "___return (___arg1->limits);")
   (define-c-lambda
      VkPhysicalDevicePropertiessparseProperties
      (VkPhysicalDeviceProperties*)
      VkPhysicalDeviceSparseProperties
      "___return (___arg1->sparseProperties);")
   (define-c-lambda
      make-VkPhysicalDeviceProperties*
      (int)
      VkPhysicalDeviceProperties*
      "VkPhysicalDeviceProperties* vkphysicaldeviceproperties = malloc(___arg1 * sizeof(VkPhysicalDeviceProperties));
      ___return (vkphysicaldeviceproperties);")
   (define-c-lambda
      ref-VkPhysicalDeviceProperties
      (VkPhysicalDeviceProperties* int)
      VkPhysicalDeviceProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceProperties
      ((pointer VkPhysicalDeviceProperties))
      VkPhysicalDeviceProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceProperties
      (uint32_t
         uint32_t
         uint32_t
         uint32_t
         VkPhysicalDeviceType
         char*
         uint8_t*
         VkPhysicalDeviceLimits
         VkPhysicalDeviceSparseProperties)
      VkPhysicalDeviceProperties*
      "VkPhysicalDeviceProperties *physicaldeviceproperties = malloc(sizeof(VkPhysicalDeviceProperties));
physicaldeviceproperties->apiVersion=___arg1;
physicaldeviceproperties->driverVersion=___arg2;
physicaldeviceproperties->vendorID=___arg3;
physicaldeviceproperties->deviceID=___arg4;
physicaldeviceproperties->deviceType=___arg5;
memcpy(physicaldeviceproperties->deviceName,___arg6,sizeof(___arg6));
memcpy(physicaldeviceproperties->pipelineCacheUUID,___arg7,sizeof(___arg7));
physicaldeviceproperties->limits=___arg8;
physicaldeviceproperties->sparseProperties=___arg9;
___return (physicaldeviceproperties);"))
(begin-ffi
   (make-VkExtensionProperties
      ptr->VkExtensionProperties
      ref-VkExtensionProperties
      make-VkExtensionProperties*
      VkExtensionPropertiesspecVersion
      VkExtensionPropertiesextensionName
      VkExtensionProperties
      VkExtensionProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExtensionProperties (struct "VkExtensionProperties"))
   (c-define-type VkExtensionProperties* (pointer VkExtensionProperties))
   (define-c-lambda
      VkExtensionPropertiesextensionName
      (VkExtensionProperties*)
      char*
      "___return (___arg1->extensionName);")
   (define-c-lambda
      VkExtensionPropertiesspecVersion
      (VkExtensionProperties*)
      uint32_t
      "___return (___arg1->specVersion);")
   (define-c-lambda
      make-VkExtensionProperties*
      (int)
      VkExtensionProperties*
      "VkExtensionProperties* vkextensionproperties = malloc(___arg1 * sizeof(VkExtensionProperties));
      ___return (vkextensionproperties);")
   (define-c-lambda
      ref-VkExtensionProperties
      (VkExtensionProperties* int)
      VkExtensionProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExtensionProperties
      ((pointer VkExtensionProperties))
      VkExtensionProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExtensionProperties
      (char* uint32_t)
      VkExtensionProperties*
      "VkExtensionProperties *extensionproperties = malloc(sizeof(VkExtensionProperties));
memcpy(extensionproperties->extensionName,___arg1,sizeof(___arg1));
extensionproperties->specVersion=___arg2;
___return (extensionproperties);"))
(begin-ffi
   (make-VkLayerProperties
      ptr->VkLayerProperties
      ref-VkLayerProperties
      make-VkLayerProperties*
      VkLayerPropertiesdescription
      VkLayerPropertiesimplementationVersion
      VkLayerPropertiesspecVersion
      VkLayerPropertieslayerName
      VkLayerProperties
      VkLayerProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkLayerProperties (struct "VkLayerProperties"))
   (c-define-type VkLayerProperties* (pointer VkLayerProperties))
   (define-c-lambda
      VkLayerPropertieslayerName
      (VkLayerProperties*)
      char*
      "___return (___arg1->layerName);")
   (define-c-lambda
      VkLayerPropertiesspecVersion
      (VkLayerProperties*)
      uint32_t
      "___return (___arg1->specVersion);")
   (define-c-lambda
      VkLayerPropertiesimplementationVersion
      (VkLayerProperties*)
      uint32_t
      "___return (___arg1->implementationVersion);")
   (define-c-lambda
      VkLayerPropertiesdescription
      (VkLayerProperties*)
      char*
      "___return (___arg1->description);")
   (define-c-lambda
      make-VkLayerProperties*
      (int)
      VkLayerProperties*
      "VkLayerProperties* vklayerproperties = malloc(___arg1 * sizeof(VkLayerProperties));
      ___return (vklayerproperties);")
   (define-c-lambda
      ref-VkLayerProperties
      (VkLayerProperties* int)
      VkLayerProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkLayerProperties
      ((pointer VkLayerProperties))
      VkLayerProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkLayerProperties
      (char* uint32_t uint32_t char*)
      VkLayerProperties*
      "VkLayerProperties *layerproperties = malloc(sizeof(VkLayerProperties));
memcpy(layerproperties->layerName,___arg1,sizeof(___arg1));
layerproperties->specVersion=___arg2;
layerproperties->implementationVersion=___arg3;
memcpy(layerproperties->description,___arg4,sizeof(___arg4));
___return (layerproperties);"))
(begin-ffi
   (make-VkApplicationInfo
      ptr->VkApplicationInfo
      ref-VkApplicationInfo
      make-VkApplicationInfo*
      VkApplicationInfoapiVersion
      VkApplicationInfoengineVersion
      VkApplicationInfopEngineName
      VkApplicationInfoapplicationVersion
      VkApplicationInfopApplicationName
      VkApplicationInfopNext
      VkApplicationInfosType
      VkApplicationInfo
      VkApplicationInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkApplicationInfo (struct "VkApplicationInfo"))
   (c-define-type VkApplicationInfo* (pointer VkApplicationInfo))
   (define-c-lambda
      VkApplicationInfosType
      (VkApplicationInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkApplicationInfopNext
      (VkApplicationInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkApplicationInfopApplicationName
      (VkApplicationInfo*)
      char*
      "___return (___arg1->pApplicationName);")
   (define-c-lambda
      VkApplicationInfoapplicationVersion
      (VkApplicationInfo*)
      uint32_t
      "___return (___arg1->applicationVersion);")
   (define-c-lambda
      VkApplicationInfopEngineName
      (VkApplicationInfo*)
      char*
      "___return (___arg1->pEngineName);")
   (define-c-lambda
      VkApplicationInfoengineVersion
      (VkApplicationInfo*)
      uint32_t
      "___return (___arg1->engineVersion);")
   (define-c-lambda
      VkApplicationInfoapiVersion
      (VkApplicationInfo*)
      uint32_t
      "___return (___arg1->apiVersion);")
   (define-c-lambda
      make-VkApplicationInfo*
      (int)
      VkApplicationInfo*
      "VkApplicationInfo* vkapplicationinfo = malloc(___arg1 * sizeof(VkApplicationInfo));
      ___return (vkapplicationinfo);")
   (define-c-lambda
      ref-VkApplicationInfo
      (VkApplicationInfo* int)
      VkApplicationInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkApplicationInfo
      ((pointer VkApplicationInfo))
      VkApplicationInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkApplicationInfo
      (void* char* uint32_t char* uint32_t uint32_t)
      VkApplicationInfo*
      "VkApplicationInfo *applicationinfo = malloc(sizeof(VkApplicationInfo));
applicationinfo->sType=VK_STRUCTURE_TYPE_APPLICATION_INFO;
applicationinfo->pNext=___arg1;
applicationinfo->pApplicationName=___arg2;
applicationinfo->applicationVersion=___arg3;
applicationinfo->pEngineName=___arg4;
applicationinfo->engineVersion=___arg5;
applicationinfo->apiVersion=___arg6;
___return (applicationinfo);"))
(begin-ffi
   (PFN_vkInternalFreeNotification PFN_vkInternalFreeNotification*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      PFN_vkInternalFreeNotification
      (function
         ((pointer void) size_t VkInternalAllocationType VkSystemAllocationScope)
         void))
   (c-define-type
      PFN_vkInternalFreeNotification*
      (pointer PFN_vkInternalFreeNotification)))
(begin-ffi
   (PFN_vkInternalAllocationNotification PFN_vkInternalAllocationNotification*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      PFN_vkInternalAllocationNotification
      (function
         ((pointer void) size_t VkInternalAllocationType VkSystemAllocationScope)
         void))
   (c-define-type
      PFN_vkInternalAllocationNotification*
      (pointer PFN_vkInternalAllocationNotification)))
(begin-ffi
   (PFN_vkFreeFunction PFN_vkFreeFunction*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type PFN_vkFreeFunction (function ((pointer void) (pointer void)) void))
   (c-define-type PFN_vkFreeFunction* (pointer PFN_vkFreeFunction)))
(begin-ffi
   (PFN_vkReallocationFunction PFN_vkReallocationFunction*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      PFN_vkReallocationFunction
      (function
         ((pointer void) (pointer void) size_t size_t VkSystemAllocationScope)
         (pointer void)))
   (c-define-type PFN_vkReallocationFunction* (pointer PFN_vkReallocationFunction)))
(begin-ffi
   (PFN_vkAllocationFunction PFN_vkAllocationFunction*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      PFN_vkAllocationFunction
      (function ((pointer void) size_t size_t VkSystemAllocationScope) (pointer void)))
   (c-define-type PFN_vkAllocationFunction* (pointer PFN_vkAllocationFunction)))
(begin-ffi
   (make-VkAllocationCallbacks
      ptr->VkAllocationCallbacks
      ref-VkAllocationCallbacks
      make-VkAllocationCallbacks*
      VkAllocationCallbackspfnInternalFree
      VkAllocationCallbackspfnInternalAllocation
      VkAllocationCallbackspfnFree
      VkAllocationCallbackspfnReallocation
      VkAllocationCallbackspfnAllocation
      VkAllocationCallbackspUserData
      VkAllocationCallbacks
      VkAllocationCallbacks*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkAllocationCallbacks (struct "VkAllocationCallbacks"))
   (c-define-type VkAllocationCallbacks* (pointer VkAllocationCallbacks))
   (define-c-lambda
      VkAllocationCallbackspUserData
      (VkAllocationCallbacks*)
      void*
      "___return (___arg1->pUserData);")
   (define-c-lambda
      VkAllocationCallbackspfnAllocation
      (VkAllocationCallbacks*)
      PFN_vkAllocationFunction
      "___return (___arg1->pfnAllocation);")
   (define-c-lambda
      VkAllocationCallbackspfnReallocation
      (VkAllocationCallbacks*)
      PFN_vkReallocationFunction
      "___return (___arg1->pfnReallocation);")
   (define-c-lambda
      VkAllocationCallbackspfnFree
      (VkAllocationCallbacks*)
      PFN_vkFreeFunction
      "___return (___arg1->pfnFree);")
   (define-c-lambda
      VkAllocationCallbackspfnInternalAllocation
      (VkAllocationCallbacks*)
      PFN_vkInternalAllocationNotification
      "___return (___arg1->pfnInternalAllocation);")
   (define-c-lambda
      VkAllocationCallbackspfnInternalFree
      (VkAllocationCallbacks*)
      PFN_vkInternalFreeNotification
      "___return (___arg1->pfnInternalFree);")
   (define-c-lambda
      make-VkAllocationCallbacks*
      (int)
      VkAllocationCallbacks*
      "VkAllocationCallbacks* vkallocationcallbacks = malloc(___arg1 * sizeof(VkAllocationCallbacks));
      ___return (vkallocationcallbacks);")
   (define-c-lambda
      ref-VkAllocationCallbacks
      (VkAllocationCallbacks* int)
      VkAllocationCallbacks*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkAllocationCallbacks
      ((pointer VkAllocationCallbacks))
      VkAllocationCallbacks
      "___return(*___arg1);")
   (define-c-lambda
      make-VkAllocationCallbacks
      (void*
         PFN_vkAllocationFunction
         PFN_vkReallocationFunction
         PFN_vkFreeFunction
         PFN_vkInternalAllocationNotification
         PFN_vkInternalFreeNotification)
      VkAllocationCallbacks*
      "VkAllocationCallbacks *allocationcallbacks = malloc(sizeof(VkAllocationCallbacks));
allocationcallbacks->pUserData=___arg1;
allocationcallbacks->pfnAllocation=___arg2;
allocationcallbacks->pfnReallocation=___arg3;
allocationcallbacks->pfnFree=___arg4;
allocationcallbacks->pfnInternalAllocation=___arg5;
allocationcallbacks->pfnInternalFree=___arg6;
___return (allocationcallbacks);"))
(begin-ffi
   (make-VkDeviceQueueCreateInfo
      ptr->VkDeviceQueueCreateInfo
      ref-VkDeviceQueueCreateInfo
      make-VkDeviceQueueCreateInfo*
      VkDeviceQueueCreateInfopQueuePriorities
      VkDeviceQueueCreateInfoqueueCount
      VkDeviceQueueCreateInfoqueueFamilyIndex
      VkDeviceQueueCreateInfoflags
      VkDeviceQueueCreateInfopNext
      VkDeviceQueueCreateInfosType
      VkDeviceQueueCreateInfo
      VkDeviceQueueCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDeviceQueueCreateInfo (struct "VkDeviceQueueCreateInfo"))
   (c-define-type VkDeviceQueueCreateInfo* (pointer VkDeviceQueueCreateInfo))
   (define-c-lambda
      VkDeviceQueueCreateInfosType
      (VkDeviceQueueCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceQueueCreateInfopNext
      (VkDeviceQueueCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceQueueCreateInfoflags
      (VkDeviceQueueCreateInfo*)
      VkDeviceQueueCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDeviceQueueCreateInfoqueueFamilyIndex
      (VkDeviceQueueCreateInfo*)
      uint32_t
      "___return (___arg1->queueFamilyIndex);")
   (define-c-lambda
      VkDeviceQueueCreateInfoqueueCount
      (VkDeviceQueueCreateInfo*)
      uint32_t
      "___return (___arg1->queueCount);")
   (define-c-lambda
      VkDeviceQueueCreateInfopQueuePriorities
      (VkDeviceQueueCreateInfo*)
      float*
      "___return (___arg1->pQueuePriorities);")
   (define-c-lambda
      make-VkDeviceQueueCreateInfo*
      (int)
      VkDeviceQueueCreateInfo*
      "VkDeviceQueueCreateInfo* vkdevicequeuecreateinfo = malloc(___arg1 * sizeof(VkDeviceQueueCreateInfo));
      ___return (vkdevicequeuecreateinfo);")
   (define-c-lambda
      ref-VkDeviceQueueCreateInfo
      (VkDeviceQueueCreateInfo* int)
      VkDeviceQueueCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceQueueCreateInfo
      ((pointer VkDeviceQueueCreateInfo))
      VkDeviceQueueCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceQueueCreateInfo
      (void* VkDeviceQueueCreateFlags uint32_t uint32_t float*)
      VkDeviceQueueCreateInfo*
      "VkDeviceQueueCreateInfo *devicequeuecreateinfo = malloc(sizeof(VkDeviceQueueCreateInfo));
devicequeuecreateinfo->sType=VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
devicequeuecreateinfo->pNext=___arg1;
devicequeuecreateinfo->flags=___arg2;
devicequeuecreateinfo->queueFamilyIndex=___arg3;
devicequeuecreateinfo->queueCount=___arg4;
devicequeuecreateinfo->pQueuePriorities=___arg5;
___return (devicequeuecreateinfo);"))
(begin-ffi
   (make-VkPhysicalDeviceFeatures
      ptr->VkPhysicalDeviceFeatures
      ref-VkPhysicalDeviceFeatures
      make-VkPhysicalDeviceFeatures*
      VkPhysicalDeviceFeaturesinheritedQueries
      VkPhysicalDeviceFeaturesvariableMultisampleRate
      VkPhysicalDeviceFeaturessparseResidencyAliased
      VkPhysicalDeviceFeaturessparseResidency16Samples
      VkPhysicalDeviceFeaturessparseResidency8Samples
      VkPhysicalDeviceFeaturessparseResidency4Samples
      VkPhysicalDeviceFeaturessparseResidency2Samples
      VkPhysicalDeviceFeaturessparseResidencyImage3D
      VkPhysicalDeviceFeaturessparseResidencyImage2D
      VkPhysicalDeviceFeaturessparseResidencyBuffer
      VkPhysicalDeviceFeaturessparseBinding
      VkPhysicalDeviceFeaturesshaderResourceMinLod
      VkPhysicalDeviceFeaturesshaderResourceResidency
      VkPhysicalDeviceFeaturesshaderInt16
      VkPhysicalDeviceFeaturesshaderInt64
      VkPhysicalDeviceFeaturesshaderFloat64
      VkPhysicalDeviceFeaturesshaderCullDistance
      VkPhysicalDeviceFeaturesshaderClipDistance
      VkPhysicalDeviceFeaturesshaderStorageImageArrayDynamicIndexing
      VkPhysicalDeviceFeaturesshaderStorageBufferArrayDynamicIndexing
      VkPhysicalDeviceFeaturesshaderSampledImageArrayDynamicIndexing
      VkPhysicalDeviceFeaturesshaderUniformBufferArrayDynamicIndexing
      VkPhysicalDeviceFeaturesshaderStorageImageWriteWithoutFormat
      VkPhysicalDeviceFeaturesshaderStorageImageReadWithoutFormat
      VkPhysicalDeviceFeaturesshaderStorageImageMultisample
      VkPhysicalDeviceFeaturesshaderStorageImageExtendedFormats
      VkPhysicalDeviceFeaturesshaderImageGatherExtended
      VkPhysicalDeviceFeaturesshaderTessellationAndGeometryPointSize
      VkPhysicalDeviceFeaturesfragmentStoresAndAtomics
      VkPhysicalDeviceFeaturesvertexPipelineStoresAndAtomics
      VkPhysicalDeviceFeaturespipelineStatisticsQuery
      VkPhysicalDeviceFeaturesocclusionQueryPrecise
      VkPhysicalDeviceFeaturestextureCompressionBC
      VkPhysicalDeviceFeaturestextureCompressionASTC_LDR
      VkPhysicalDeviceFeaturestextureCompressionETC2
      VkPhysicalDeviceFeaturessamplerAnisotropy
      VkPhysicalDeviceFeaturesmultiViewport
      VkPhysicalDeviceFeaturesalphaToOne
      VkPhysicalDeviceFeatureslargePoints
      VkPhysicalDeviceFeatureswideLines
      VkPhysicalDeviceFeaturesdepthBounds
      VkPhysicalDeviceFeaturesfillModeNonSolid
      VkPhysicalDeviceFeaturesdepthBiasClamp
      VkPhysicalDeviceFeaturesdepthClamp
      VkPhysicalDeviceFeaturesdrawIndirectFirstInstance
      VkPhysicalDeviceFeaturesmultiDrawIndirect
      VkPhysicalDeviceFeatureslogicOp
      VkPhysicalDeviceFeaturesdualSrcBlend
      VkPhysicalDeviceFeaturessampleRateShading
      VkPhysicalDeviceFeaturestessellationShader
      VkPhysicalDeviceFeaturesgeometryShader
      VkPhysicalDeviceFeaturesindependentBlend
      VkPhysicalDeviceFeaturesimageCubeArray
      VkPhysicalDeviceFeaturesfullDrawIndexUint32
      VkPhysicalDeviceFeaturesrobustBufferAccess
      VkPhysicalDeviceFeatures
      VkPhysicalDeviceFeatures*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPhysicalDeviceFeatures (struct "VkPhysicalDeviceFeatures"))
   (c-define-type VkPhysicalDeviceFeatures* (pointer VkPhysicalDeviceFeatures))
   (define-c-lambda
      VkPhysicalDeviceFeaturesrobustBufferAccess
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->robustBufferAccess);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesfullDrawIndexUint32
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->fullDrawIndexUint32);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesimageCubeArray
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->imageCubeArray);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesindependentBlend
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->independentBlend);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesgeometryShader
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->geometryShader);")
   (define-c-lambda
      VkPhysicalDeviceFeaturestessellationShader
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->tessellationShader);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessampleRateShading
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->sampleRateShading);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesdualSrcBlend
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->dualSrcBlend);")
   (define-c-lambda
      VkPhysicalDeviceFeatureslogicOp
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->logicOp);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesmultiDrawIndirect
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->multiDrawIndirect);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesdrawIndirectFirstInstance
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->drawIndirectFirstInstance);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesdepthClamp
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->depthClamp);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesdepthBiasClamp
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->depthBiasClamp);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesfillModeNonSolid
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->fillModeNonSolid);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesdepthBounds
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->depthBounds);")
   (define-c-lambda
      VkPhysicalDeviceFeatureswideLines
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->wideLines);")
   (define-c-lambda
      VkPhysicalDeviceFeatureslargePoints
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->largePoints);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesalphaToOne
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->alphaToOne);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesmultiViewport
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->multiViewport);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessamplerAnisotropy
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->samplerAnisotropy);")
   (define-c-lambda
      VkPhysicalDeviceFeaturestextureCompressionETC2
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->textureCompressionETC2);")
   (define-c-lambda
      VkPhysicalDeviceFeaturestextureCompressionASTC_LDR
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->textureCompressionASTC_LDR);")
   (define-c-lambda
      VkPhysicalDeviceFeaturestextureCompressionBC
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->textureCompressionBC);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesocclusionQueryPrecise
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->occlusionQueryPrecise);")
   (define-c-lambda
      VkPhysicalDeviceFeaturespipelineStatisticsQuery
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->pipelineStatisticsQuery);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesvertexPipelineStoresAndAtomics
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->vertexPipelineStoresAndAtomics);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesfragmentStoresAndAtomics
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->fragmentStoresAndAtomics);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderTessellationAndGeometryPointSize
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderTessellationAndGeometryPointSize);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderImageGatherExtended
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderImageGatherExtended);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderStorageImageExtendedFormats
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderStorageImageExtendedFormats);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderStorageImageMultisample
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderStorageImageMultisample);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderStorageImageReadWithoutFormat
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderStorageImageReadWithoutFormat);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderStorageImageWriteWithoutFormat
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderStorageImageWriteWithoutFormat);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderUniformBufferArrayDynamicIndexing
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderUniformBufferArrayDynamicIndexing);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderSampledImageArrayDynamicIndexing
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderSampledImageArrayDynamicIndexing);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderStorageBufferArrayDynamicIndexing
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderStorageBufferArrayDynamicIndexing);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderStorageImageArrayDynamicIndexing
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderStorageImageArrayDynamicIndexing);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderClipDistance
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderClipDistance);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderCullDistance
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderCullDistance);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderFloat64
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderFloat64);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderInt64
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderInt64);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderInt16
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderInt16);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderResourceResidency
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderResourceResidency);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesshaderResourceMinLod
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->shaderResourceMinLod);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessparseBinding
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->sparseBinding);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessparseResidencyBuffer
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->sparseResidencyBuffer);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessparseResidencyImage2D
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->sparseResidencyImage2D);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessparseResidencyImage3D
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->sparseResidencyImage3D);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessparseResidency2Samples
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->sparseResidency2Samples);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessparseResidency4Samples
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->sparseResidency4Samples);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessparseResidency8Samples
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->sparseResidency8Samples);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessparseResidency16Samples
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->sparseResidency16Samples);")
   (define-c-lambda
      VkPhysicalDeviceFeaturessparseResidencyAliased
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->sparseResidencyAliased);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesvariableMultisampleRate
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->variableMultisampleRate);")
   (define-c-lambda
      VkPhysicalDeviceFeaturesinheritedQueries
      (VkPhysicalDeviceFeatures*)
      VkBool32
      "___return (___arg1->inheritedQueries);")
   (define-c-lambda
      make-VkPhysicalDeviceFeatures*
      (int)
      VkPhysicalDeviceFeatures*
      "VkPhysicalDeviceFeatures* vkphysicaldevicefeatures = malloc(___arg1 * sizeof(VkPhysicalDeviceFeatures));
      ___return (vkphysicaldevicefeatures);")
   (define-c-lambda
      ref-VkPhysicalDeviceFeatures
      (VkPhysicalDeviceFeatures* int)
      VkPhysicalDeviceFeatures*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceFeatures
      ((pointer VkPhysicalDeviceFeatures))
      VkPhysicalDeviceFeatures
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceFeatures
      (VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32)
      VkPhysicalDeviceFeatures*
      "VkPhysicalDeviceFeatures *physicaldevicefeatures = malloc(sizeof(VkPhysicalDeviceFeatures));
physicaldevicefeatures->robustBufferAccess=___arg1;
physicaldevicefeatures->fullDrawIndexUint32=___arg2;
physicaldevicefeatures->imageCubeArray=___arg3;
physicaldevicefeatures->independentBlend=___arg4;
physicaldevicefeatures->geometryShader=___arg5;
physicaldevicefeatures->tessellationShader=___arg6;
physicaldevicefeatures->sampleRateShading=___arg7;
physicaldevicefeatures->dualSrcBlend=___arg8;
physicaldevicefeatures->logicOp=___arg9;
physicaldevicefeatures->multiDrawIndirect=___arg10;
physicaldevicefeatures->drawIndirectFirstInstance=___arg11;
physicaldevicefeatures->depthClamp=___arg12;
physicaldevicefeatures->depthBiasClamp=___arg13;
physicaldevicefeatures->fillModeNonSolid=___arg14;
physicaldevicefeatures->depthBounds=___arg15;
physicaldevicefeatures->wideLines=___arg16;
physicaldevicefeatures->largePoints=___arg17;
physicaldevicefeatures->alphaToOne=___arg18;
physicaldevicefeatures->multiViewport=___arg19;
physicaldevicefeatures->samplerAnisotropy=___arg20;
physicaldevicefeatures->textureCompressionETC2=___arg21;
physicaldevicefeatures->textureCompressionASTC_LDR=___arg22;
physicaldevicefeatures->textureCompressionBC=___arg23;
physicaldevicefeatures->occlusionQueryPrecise=___arg24;
physicaldevicefeatures->pipelineStatisticsQuery=___arg25;
physicaldevicefeatures->vertexPipelineStoresAndAtomics=___arg26;
physicaldevicefeatures->fragmentStoresAndAtomics=___arg27;
physicaldevicefeatures->shaderTessellationAndGeometryPointSize=___arg28;
physicaldevicefeatures->shaderImageGatherExtended=___arg29;
physicaldevicefeatures->shaderStorageImageExtendedFormats=___arg30;
physicaldevicefeatures->shaderStorageImageMultisample=___arg31;
physicaldevicefeatures->shaderStorageImageReadWithoutFormat=___arg32;
physicaldevicefeatures->shaderStorageImageWriteWithoutFormat=___arg33;
physicaldevicefeatures->shaderUniformBufferArrayDynamicIndexing=___arg34;
physicaldevicefeatures->shaderSampledImageArrayDynamicIndexing=___arg35;
physicaldevicefeatures->shaderStorageBufferArrayDynamicIndexing=___arg36;
physicaldevicefeatures->shaderStorageImageArrayDynamicIndexing=___arg37;
physicaldevicefeatures->shaderClipDistance=___arg38;
physicaldevicefeatures->shaderCullDistance=___arg39;
physicaldevicefeatures->shaderFloat64=___arg40;
physicaldevicefeatures->shaderInt64=___arg41;
physicaldevicefeatures->shaderInt16=___arg42;
physicaldevicefeatures->shaderResourceResidency=___arg43;
physicaldevicefeatures->shaderResourceMinLod=___arg44;
physicaldevicefeatures->sparseBinding=___arg45;
physicaldevicefeatures->sparseResidencyBuffer=___arg46;
physicaldevicefeatures->sparseResidencyImage2D=___arg47;
physicaldevicefeatures->sparseResidencyImage3D=___arg48;
physicaldevicefeatures->sparseResidency2Samples=___arg49;
physicaldevicefeatures->sparseResidency4Samples=___arg50;
physicaldevicefeatures->sparseResidency8Samples=___arg51;
physicaldevicefeatures->sparseResidency16Samples=___arg52;
physicaldevicefeatures->sparseResidencyAliased=___arg53;
physicaldevicefeatures->variableMultisampleRate=___arg54;
physicaldevicefeatures->inheritedQueries=___arg55;
___return (physicaldevicefeatures);"))
(begin-ffi
   (make-VkDeviceCreateInfo
      ptr->VkDeviceCreateInfo
      ref-VkDeviceCreateInfo
      make-VkDeviceCreateInfo*
      VkDeviceCreateInfopEnabledFeatures
      VkDeviceCreateInfoppEnabledExtensionNames
      VkDeviceCreateInfoenabledExtensionCount
      VkDeviceCreateInfoppEnabledLayerNames
      VkDeviceCreateInfoenabledLayerCount
      VkDeviceCreateInfopQueueCreateInfos
      VkDeviceCreateInfoqueueCreateInfoCount
      VkDeviceCreateInfoflags
      VkDeviceCreateInfopNext
      VkDeviceCreateInfosType
      VkDeviceCreateInfo
      VkDeviceCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDeviceCreateInfo (struct "VkDeviceCreateInfo"))
   (c-define-type VkDeviceCreateInfo* (pointer VkDeviceCreateInfo))
   (define-c-lambda
      VkDeviceCreateInfosType
      (VkDeviceCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceCreateInfopNext
      (VkDeviceCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceCreateInfoflags
      (VkDeviceCreateInfo*)
      VkDeviceCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDeviceCreateInfoqueueCreateInfoCount
      (VkDeviceCreateInfo*)
      uint32_t
      "___return (___arg1->queueCreateInfoCount);")
   (define-c-lambda
      VkDeviceCreateInfopQueueCreateInfos
      (VkDeviceCreateInfo*)
      VkDeviceQueueCreateInfo*
      "___return (___arg1->pQueueCreateInfos);")
   (define-c-lambda
      VkDeviceCreateInfoenabledLayerCount
      (VkDeviceCreateInfo*)
      uint32_t
      "___return (___arg1->enabledLayerCount);")
   (define-c-lambda
      VkDeviceCreateInfoppEnabledLayerNames
      (VkDeviceCreateInfo*)
      char**
      "___return (___arg1->ppEnabledLayerNames);")
   (define-c-lambda
      VkDeviceCreateInfoenabledExtensionCount
      (VkDeviceCreateInfo*)
      uint32_t
      "___return (___arg1->enabledExtensionCount);")
   (define-c-lambda
      VkDeviceCreateInfoppEnabledExtensionNames
      (VkDeviceCreateInfo*)
      char**
      "___return (___arg1->ppEnabledExtensionNames);")
   (define-c-lambda
      VkDeviceCreateInfopEnabledFeatures
      (VkDeviceCreateInfo*)
      VkPhysicalDeviceFeatures*
      "___return (___arg1->pEnabledFeatures);")
   (define-c-lambda
      make-VkDeviceCreateInfo*
      (int)
      VkDeviceCreateInfo*
      "VkDeviceCreateInfo* vkdevicecreateinfo = malloc(___arg1 * sizeof(VkDeviceCreateInfo));
      ___return (vkdevicecreateinfo);")
   (define-c-lambda
      ref-VkDeviceCreateInfo
      (VkDeviceCreateInfo* int)
      VkDeviceCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceCreateInfo
      ((pointer VkDeviceCreateInfo))
      VkDeviceCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceCreateInfo
      (void*
         VkDeviceCreateFlags
         uint32_t
         VkDeviceQueueCreateInfo*
         uint32_t
         char**
         uint32_t
         char**
         VkPhysicalDeviceFeatures*)
      VkDeviceCreateInfo*
      "VkDeviceCreateInfo *devicecreateinfo = malloc(sizeof(VkDeviceCreateInfo));
devicecreateinfo->sType=VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
devicecreateinfo->pNext=___arg1;
devicecreateinfo->flags=___arg2;
devicecreateinfo->queueCreateInfoCount=___arg3;
devicecreateinfo->pQueueCreateInfos=___arg4;
devicecreateinfo->enabledLayerCount=___arg5;
devicecreateinfo->ppEnabledLayerNames=___arg6;
devicecreateinfo->enabledExtensionCount=___arg7;
devicecreateinfo->ppEnabledExtensionNames=___arg8;
devicecreateinfo->pEnabledFeatures=___arg9;
___return (devicecreateinfo);"))
(begin-ffi
   (make-VkInstanceCreateInfo
      ptr->VkInstanceCreateInfo
      ref-VkInstanceCreateInfo
      make-VkInstanceCreateInfo*
      VkInstanceCreateInfoppEnabledExtensionNames
      VkInstanceCreateInfoenabledExtensionCount
      VkInstanceCreateInfoppEnabledLayerNames
      VkInstanceCreateInfoenabledLayerCount
      VkInstanceCreateInfopApplicationInfo
      VkInstanceCreateInfoflags
      VkInstanceCreateInfopNext
      VkInstanceCreateInfosType
      VkInstanceCreateInfo
      VkInstanceCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkInstanceCreateInfo (struct "VkInstanceCreateInfo"))
   (c-define-type VkInstanceCreateInfo* (pointer VkInstanceCreateInfo))
   (define-c-lambda
      VkInstanceCreateInfosType
      (VkInstanceCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkInstanceCreateInfopNext
      (VkInstanceCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkInstanceCreateInfoflags
      (VkInstanceCreateInfo*)
      VkInstanceCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkInstanceCreateInfopApplicationInfo
      (VkInstanceCreateInfo*)
      VkApplicationInfo*
      "___return (___arg1->pApplicationInfo);")
   (define-c-lambda
      VkInstanceCreateInfoenabledLayerCount
      (VkInstanceCreateInfo*)
      uint32_t
      "___return (___arg1->enabledLayerCount);")
   (define-c-lambda
      VkInstanceCreateInfoppEnabledLayerNames
      (VkInstanceCreateInfo*)
      char**
      "___return (___arg1->ppEnabledLayerNames);")
   (define-c-lambda
      VkInstanceCreateInfoenabledExtensionCount
      (VkInstanceCreateInfo*)
      uint32_t
      "___return (___arg1->enabledExtensionCount);")
   (define-c-lambda
      VkInstanceCreateInfoppEnabledExtensionNames
      (VkInstanceCreateInfo*)
      char**
      "___return (___arg1->ppEnabledExtensionNames);")
   (define-c-lambda
      make-VkInstanceCreateInfo*
      (int)
      VkInstanceCreateInfo*
      "VkInstanceCreateInfo* vkinstancecreateinfo = malloc(___arg1 * sizeof(VkInstanceCreateInfo));
      ___return (vkinstancecreateinfo);")
   (define-c-lambda
      ref-VkInstanceCreateInfo
      (VkInstanceCreateInfo* int)
      VkInstanceCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkInstanceCreateInfo
      ((pointer VkInstanceCreateInfo))
      VkInstanceCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkInstanceCreateInfo
      (void* VkInstanceCreateFlags VkApplicationInfo* uint32_t char** uint32_t char**)
      VkInstanceCreateInfo*
      "VkInstanceCreateInfo *instancecreateinfo = malloc(sizeof(VkInstanceCreateInfo));
instancecreateinfo->sType=VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
instancecreateinfo->pNext=___arg1;
instancecreateinfo->flags=___arg2;
instancecreateinfo->pApplicationInfo=___arg3;
instancecreateinfo->enabledLayerCount=___arg4;
instancecreateinfo->ppEnabledLayerNames=___arg5;
instancecreateinfo->enabledExtensionCount=___arg6;
instancecreateinfo->ppEnabledExtensionNames=___arg7;
___return (instancecreateinfo);"))
(begin-ffi
   (make-VkQueueFamilyProperties
      ptr->VkQueueFamilyProperties
      ref-VkQueueFamilyProperties
      make-VkQueueFamilyProperties*
      VkQueueFamilyPropertiesminImageTransferGranularity
      VkQueueFamilyPropertiestimestampValidBits
      VkQueueFamilyPropertiesqueueCount
      VkQueueFamilyPropertiesqueueFlags
      VkQueueFamilyProperties
      VkQueueFamilyProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkQueueFamilyProperties (struct "VkQueueFamilyProperties"))
   (c-define-type VkQueueFamilyProperties* (pointer VkQueueFamilyProperties))
   (define-c-lambda
      VkQueueFamilyPropertiesqueueFlags
      (VkQueueFamilyProperties*)
      VkQueueFlags
      "___return (___arg1->queueFlags);")
   (define-c-lambda
      VkQueueFamilyPropertiesqueueCount
      (VkQueueFamilyProperties*)
      uint32_t
      "___return (___arg1->queueCount);")
   (define-c-lambda
      VkQueueFamilyPropertiestimestampValidBits
      (VkQueueFamilyProperties*)
      uint32_t
      "___return (___arg1->timestampValidBits);")
   (define-c-lambda
      VkQueueFamilyPropertiesminImageTransferGranularity
      (VkQueueFamilyProperties*)
      VkExtent3D
      "___return (___arg1->minImageTransferGranularity);")
   (define-c-lambda
      make-VkQueueFamilyProperties*
      (int)
      VkQueueFamilyProperties*
      "VkQueueFamilyProperties* vkqueuefamilyproperties = malloc(___arg1 * sizeof(VkQueueFamilyProperties));
      ___return (vkqueuefamilyproperties);")
   (define-c-lambda
      ref-VkQueueFamilyProperties
      (VkQueueFamilyProperties* int)
      VkQueueFamilyProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkQueueFamilyProperties
      ((pointer VkQueueFamilyProperties))
      VkQueueFamilyProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkQueueFamilyProperties
      (VkQueueFlags uint32_t uint32_t VkExtent3D)
      VkQueueFamilyProperties*
      "VkQueueFamilyProperties *queuefamilyproperties = malloc(sizeof(VkQueueFamilyProperties));
queuefamilyproperties->queueFlags=___arg1;
queuefamilyproperties->queueCount=___arg2;
queuefamilyproperties->timestampValidBits=___arg3;
queuefamilyproperties->minImageTransferGranularity=___arg4;
___return (queuefamilyproperties);"))
(begin-ffi
   (make-VkMemoryHeap
      ptr->VkMemoryHeap
      ref-VkMemoryHeap
      make-VkMemoryHeap*
      VkMemoryHeapflags
      VkMemoryHeapsize
      VkMemoryHeap
      VkMemoryHeap*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryHeap (struct "VkMemoryHeap"))
   (c-define-type VkMemoryHeap* (pointer VkMemoryHeap))
   (define-c-lambda
      VkMemoryHeapsize
      (VkMemoryHeap*)
      VkDeviceSize
      "___return (___arg1->size);")
   (define-c-lambda
      VkMemoryHeapflags
      (VkMemoryHeap*)
      VkMemoryHeapFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkMemoryHeap*
      (int)
      VkMemoryHeap*
      "VkMemoryHeap* vkmemoryheap = malloc(___arg1 * sizeof(VkMemoryHeap));
      ___return (vkmemoryheap);")
   (define-c-lambda
      ref-VkMemoryHeap
      (VkMemoryHeap* int)
      VkMemoryHeap*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryHeap
      ((pointer VkMemoryHeap))
      VkMemoryHeap
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryHeap
      (VkDeviceSize VkMemoryHeapFlags)
      VkMemoryHeap*
      "VkMemoryHeap *memoryheap = malloc(sizeof(VkMemoryHeap));
memoryheap->size=___arg1;
memoryheap->flags=___arg2;
___return (memoryheap);"))
(begin-ffi
   (make-VkMemoryType
      ptr->VkMemoryType
      ref-VkMemoryType
      make-VkMemoryType*
      VkMemoryTypeheapIndex
      VkMemoryTypepropertyFlags
      VkMemoryType
      VkMemoryType*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryType (struct "VkMemoryType"))
   (c-define-type VkMemoryType* (pointer VkMemoryType))
   (define-c-lambda
      VkMemoryTypepropertyFlags
      (VkMemoryType*)
      VkMemoryPropertyFlags
      "___return (___arg1->propertyFlags);")
   (define-c-lambda
      VkMemoryTypeheapIndex
      (VkMemoryType*)
      uint32_t
      "___return (___arg1->heapIndex);")
   (define-c-lambda
      make-VkMemoryType*
      (int)
      VkMemoryType*
      "VkMemoryType* vkmemorytype = malloc(___arg1 * sizeof(VkMemoryType));
      ___return (vkmemorytype);")
   (define-c-lambda
      ref-VkMemoryType
      (VkMemoryType* int)
      VkMemoryType*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryType
      ((pointer VkMemoryType))
      VkMemoryType
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryType
      (VkMemoryPropertyFlags uint32_t)
      VkMemoryType*
      "VkMemoryType *memorytype = malloc(sizeof(VkMemoryType));
memorytype->propertyFlags=___arg1;
memorytype->heapIndex=___arg2;
___return (memorytype);"))
(begin-ffi
   (make-VkPhysicalDeviceMemoryProperties
      ptr->VkPhysicalDeviceMemoryProperties
      ref-VkPhysicalDeviceMemoryProperties
      make-VkPhysicalDeviceMemoryProperties*
      VkPhysicalDeviceMemoryPropertiesmemoryHeaps
      VkPhysicalDeviceMemoryPropertiesmemoryHeapCount
      VkPhysicalDeviceMemoryPropertiesmemoryTypes
      VkPhysicalDeviceMemoryPropertiesmemoryTypeCount
      VkPhysicalDeviceMemoryProperties
      VkPhysicalDeviceMemoryProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMemoryProperties
      (struct "VkPhysicalDeviceMemoryProperties"))
   (c-define-type
      VkPhysicalDeviceMemoryProperties*
      (pointer VkPhysicalDeviceMemoryProperties))
   (define-c-lambda
      VkPhysicalDeviceMemoryPropertiesmemoryTypeCount
      (VkPhysicalDeviceMemoryProperties*)
      uint32_t
      "___return (___arg1->memoryTypeCount);")
   (define-c-lambda
      VkPhysicalDeviceMemoryPropertiesmemoryTypes
      (VkPhysicalDeviceMemoryProperties*)
      VkMemoryType*
      "___return (___arg1->memoryTypes);")
   (define-c-lambda
      VkPhysicalDeviceMemoryPropertiesmemoryHeapCount
      (VkPhysicalDeviceMemoryProperties*)
      uint32_t
      "___return (___arg1->memoryHeapCount);")
   (define-c-lambda
      VkPhysicalDeviceMemoryPropertiesmemoryHeaps
      (VkPhysicalDeviceMemoryProperties*)
      VkMemoryHeap*
      "___return (___arg1->memoryHeaps);")
   (define-c-lambda
      make-VkPhysicalDeviceMemoryProperties*
      (int)
      VkPhysicalDeviceMemoryProperties*
      "VkPhysicalDeviceMemoryProperties* vkphysicaldevicememoryproperties = malloc(___arg1 * sizeof(VkPhysicalDeviceMemoryProperties));
      ___return (vkphysicaldevicememoryproperties);")
   (define-c-lambda
      ref-VkPhysicalDeviceMemoryProperties
      (VkPhysicalDeviceMemoryProperties* int)
      VkPhysicalDeviceMemoryProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceMemoryProperties
      ((pointer VkPhysicalDeviceMemoryProperties))
      VkPhysicalDeviceMemoryProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceMemoryProperties
      (uint32_t VkMemoryType* uint32_t VkMemoryHeap*)
      VkPhysicalDeviceMemoryProperties*
      "VkPhysicalDeviceMemoryProperties *physicaldevicememoryproperties = malloc(sizeof(VkPhysicalDeviceMemoryProperties));
physicaldevicememoryproperties->memoryTypeCount=___arg1;
memcpy(physicaldevicememoryproperties->memoryTypes,___arg2,sizeof(___arg2));
physicaldevicememoryproperties->memoryHeapCount=___arg3;
memcpy(physicaldevicememoryproperties->memoryHeaps,___arg4,sizeof(___arg4));
___return (physicaldevicememoryproperties);"))
(begin-ffi
   (make-VkMemoryAllocateInfo
      ptr->VkMemoryAllocateInfo
      ref-VkMemoryAllocateInfo
      make-VkMemoryAllocateInfo*
      VkMemoryAllocateInfomemoryTypeIndex
      VkMemoryAllocateInfoallocationSize
      VkMemoryAllocateInfopNext
      VkMemoryAllocateInfosType
      VkMemoryAllocateInfo
      VkMemoryAllocateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryAllocateInfo (struct "VkMemoryAllocateInfo"))
   (c-define-type VkMemoryAllocateInfo* (pointer VkMemoryAllocateInfo))
   (define-c-lambda
      VkMemoryAllocateInfosType
      (VkMemoryAllocateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMemoryAllocateInfopNext
      (VkMemoryAllocateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMemoryAllocateInfoallocationSize
      (VkMemoryAllocateInfo*)
      VkDeviceSize
      "___return (___arg1->allocationSize);")
   (define-c-lambda
      VkMemoryAllocateInfomemoryTypeIndex
      (VkMemoryAllocateInfo*)
      uint32_t
      "___return (___arg1->memoryTypeIndex);")
   (define-c-lambda
      make-VkMemoryAllocateInfo*
      (int)
      VkMemoryAllocateInfo*
      "VkMemoryAllocateInfo* vkmemoryallocateinfo = malloc(___arg1 * sizeof(VkMemoryAllocateInfo));
      ___return (vkmemoryallocateinfo);")
   (define-c-lambda
      ref-VkMemoryAllocateInfo
      (VkMemoryAllocateInfo* int)
      VkMemoryAllocateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryAllocateInfo
      ((pointer VkMemoryAllocateInfo))
      VkMemoryAllocateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryAllocateInfo
      (void* VkDeviceSize uint32_t)
      VkMemoryAllocateInfo*
      "VkMemoryAllocateInfo *memoryallocateinfo = malloc(sizeof(VkMemoryAllocateInfo));
memoryallocateinfo->sType=VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
memoryallocateinfo->pNext=___arg1;
memoryallocateinfo->allocationSize=___arg2;
memoryallocateinfo->memoryTypeIndex=___arg3;
___return (memoryallocateinfo);"))
(begin-ffi
   (make-VkMemoryRequirements
      ptr->VkMemoryRequirements
      ref-VkMemoryRequirements
      make-VkMemoryRequirements*
      VkMemoryRequirementsmemoryTypeBits
      VkMemoryRequirementsalignment
      VkMemoryRequirementssize
      VkMemoryRequirements
      VkMemoryRequirements*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryRequirements (struct "VkMemoryRequirements"))
   (c-define-type VkMemoryRequirements* (pointer VkMemoryRequirements))
   (define-c-lambda
      VkMemoryRequirementssize
      (VkMemoryRequirements*)
      VkDeviceSize
      "___return (___arg1->size);")
   (define-c-lambda
      VkMemoryRequirementsalignment
      (VkMemoryRequirements*)
      VkDeviceSize
      "___return (___arg1->alignment);")
   (define-c-lambda
      VkMemoryRequirementsmemoryTypeBits
      (VkMemoryRequirements*)
      uint32_t
      "___return (___arg1->memoryTypeBits);")
   (define-c-lambda
      make-VkMemoryRequirements*
      (int)
      VkMemoryRequirements*
      "VkMemoryRequirements* vkmemoryrequirements = malloc(___arg1 * sizeof(VkMemoryRequirements));
      ___return (vkmemoryrequirements);")
   (define-c-lambda
      ref-VkMemoryRequirements
      (VkMemoryRequirements* int)
      VkMemoryRequirements*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryRequirements
      ((pointer VkMemoryRequirements))
      VkMemoryRequirements
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryRequirements
      (VkDeviceSize VkDeviceSize uint32_t)
      VkMemoryRequirements*
      "VkMemoryRequirements *memoryrequirements = malloc(sizeof(VkMemoryRequirements));
memoryrequirements->size=___arg1;
memoryrequirements->alignment=___arg2;
memoryrequirements->memoryTypeBits=___arg3;
___return (memoryrequirements);"))
(begin-ffi
   (make-VkSparseImageFormatProperties
      ptr->VkSparseImageFormatProperties
      ref-VkSparseImageFormatProperties
      make-VkSparseImageFormatProperties*
      VkSparseImageFormatPropertiesflags
      VkSparseImageFormatPropertiesimageGranularity
      VkSparseImageFormatPropertiesaspectMask
      VkSparseImageFormatProperties
      VkSparseImageFormatProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSparseImageFormatProperties (struct "VkSparseImageFormatProperties"))
   (c-define-type VkSparseImageFormatProperties* (pointer VkSparseImageFormatProperties))
   (define-c-lambda
      VkSparseImageFormatPropertiesaspectMask
      (VkSparseImageFormatProperties*)
      VkImageAspectFlags
      "___return (___arg1->aspectMask);")
   (define-c-lambda
      VkSparseImageFormatPropertiesimageGranularity
      (VkSparseImageFormatProperties*)
      VkExtent3D
      "___return (___arg1->imageGranularity);")
   (define-c-lambda
      VkSparseImageFormatPropertiesflags
      (VkSparseImageFormatProperties*)
      VkSparseImageFormatFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkSparseImageFormatProperties*
      (int)
      VkSparseImageFormatProperties*
      "VkSparseImageFormatProperties* vksparseimageformatproperties = malloc(___arg1 * sizeof(VkSparseImageFormatProperties));
      ___return (vksparseimageformatproperties);")
   (define-c-lambda
      ref-VkSparseImageFormatProperties
      (VkSparseImageFormatProperties* int)
      VkSparseImageFormatProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSparseImageFormatProperties
      ((pointer VkSparseImageFormatProperties))
      VkSparseImageFormatProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSparseImageFormatProperties
      (VkImageAspectFlags VkExtent3D VkSparseImageFormatFlags)
      VkSparseImageFormatProperties*
      "VkSparseImageFormatProperties *sparseimageformatproperties = malloc(sizeof(VkSparseImageFormatProperties));
sparseimageformatproperties->aspectMask=___arg1;
sparseimageformatproperties->imageGranularity=___arg2;
sparseimageformatproperties->flags=___arg3;
___return (sparseimageformatproperties);"))
(begin-ffi
   (make-VkSparseImageMemoryRequirements
      ptr->VkSparseImageMemoryRequirements
      ref-VkSparseImageMemoryRequirements
      make-VkSparseImageMemoryRequirements*
      VkSparseImageMemoryRequirementsimageMipTailStride
      VkSparseImageMemoryRequirementsimageMipTailOffset
      VkSparseImageMemoryRequirementsimageMipTailSize
      VkSparseImageMemoryRequirementsimageMipTailFirstLod
      VkSparseImageMemoryRequirementsformatProperties
      VkSparseImageMemoryRequirements
      VkSparseImageMemoryRequirements*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSparseImageMemoryRequirements
      (struct "VkSparseImageMemoryRequirements"))
   (c-define-type
      VkSparseImageMemoryRequirements*
      (pointer VkSparseImageMemoryRequirements))
   (define-c-lambda
      VkSparseImageMemoryRequirementsformatProperties
      (VkSparseImageMemoryRequirements*)
      VkSparseImageFormatProperties
      "___return (___arg1->formatProperties);")
   (define-c-lambda
      VkSparseImageMemoryRequirementsimageMipTailFirstLod
      (VkSparseImageMemoryRequirements*)
      uint32_t
      "___return (___arg1->imageMipTailFirstLod);")
   (define-c-lambda
      VkSparseImageMemoryRequirementsimageMipTailSize
      (VkSparseImageMemoryRequirements*)
      VkDeviceSize
      "___return (___arg1->imageMipTailSize);")
   (define-c-lambda
      VkSparseImageMemoryRequirementsimageMipTailOffset
      (VkSparseImageMemoryRequirements*)
      VkDeviceSize
      "___return (___arg1->imageMipTailOffset);")
   (define-c-lambda
      VkSparseImageMemoryRequirementsimageMipTailStride
      (VkSparseImageMemoryRequirements*)
      VkDeviceSize
      "___return (___arg1->imageMipTailStride);")
   (define-c-lambda
      make-VkSparseImageMemoryRequirements*
      (int)
      VkSparseImageMemoryRequirements*
      "VkSparseImageMemoryRequirements* vksparseimagememoryrequirements = malloc(___arg1 * sizeof(VkSparseImageMemoryRequirements));
      ___return (vksparseimagememoryrequirements);")
   (define-c-lambda
      ref-VkSparseImageMemoryRequirements
      (VkSparseImageMemoryRequirements* int)
      VkSparseImageMemoryRequirements*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSparseImageMemoryRequirements
      ((pointer VkSparseImageMemoryRequirements))
      VkSparseImageMemoryRequirements
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSparseImageMemoryRequirements
      (VkSparseImageFormatProperties uint32_t VkDeviceSize VkDeviceSize VkDeviceSize)
      VkSparseImageMemoryRequirements*
      "VkSparseImageMemoryRequirements *sparseimagememoryrequirements = malloc(sizeof(VkSparseImageMemoryRequirements));
sparseimagememoryrequirements->formatProperties=___arg1;
sparseimagememoryrequirements->imageMipTailFirstLod=___arg2;
sparseimagememoryrequirements->imageMipTailSize=___arg3;
sparseimagememoryrequirements->imageMipTailOffset=___arg4;
sparseimagememoryrequirements->imageMipTailStride=___arg5;
___return (sparseimagememoryrequirements);"))
(begin-ffi
   (make-VkMappedMemoryRange
      ptr->VkMappedMemoryRange
      ref-VkMappedMemoryRange
      make-VkMappedMemoryRange*
      VkMappedMemoryRangesize
      VkMappedMemoryRangeoffset
      VkMappedMemoryRangememory
      VkMappedMemoryRangepNext
      VkMappedMemoryRangesType
      VkMappedMemoryRange
      VkMappedMemoryRange*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMappedMemoryRange (struct "VkMappedMemoryRange"))
   (c-define-type VkMappedMemoryRange* (pointer VkMappedMemoryRange))
   (define-c-lambda
      VkMappedMemoryRangesType
      (VkMappedMemoryRange*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMappedMemoryRangepNext
      (VkMappedMemoryRange*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMappedMemoryRangememory
      (VkMappedMemoryRange*)
      VkDeviceMemory
      "___return (___arg1->memory);")
   (define-c-lambda
      VkMappedMemoryRangeoffset
      (VkMappedMemoryRange*)
      VkDeviceSize
      "___return (___arg1->offset);")
   (define-c-lambda
      VkMappedMemoryRangesize
      (VkMappedMemoryRange*)
      VkDeviceSize
      "___return (___arg1->size);")
   (define-c-lambda
      make-VkMappedMemoryRange*
      (int)
      VkMappedMemoryRange*
      "VkMappedMemoryRange* vkmappedmemoryrange = malloc(___arg1 * sizeof(VkMappedMemoryRange));
      ___return (vkmappedmemoryrange);")
   (define-c-lambda
      ref-VkMappedMemoryRange
      (VkMappedMemoryRange* int)
      VkMappedMemoryRange*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMappedMemoryRange
      ((pointer VkMappedMemoryRange))
      VkMappedMemoryRange
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMappedMemoryRange
      (void* VkDeviceMemory VkDeviceSize VkDeviceSize)
      VkMappedMemoryRange*
      "VkMappedMemoryRange *mappedmemoryrange = malloc(sizeof(VkMappedMemoryRange));
mappedmemoryrange->sType=VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
mappedmemoryrange->pNext=___arg1;
mappedmemoryrange->memory=___arg2;
mappedmemoryrange->offset=___arg3;
mappedmemoryrange->size=___arg4;
___return (mappedmemoryrange);"))
(begin-ffi
   (make-VkFormatProperties
      ptr->VkFormatProperties
      ref-VkFormatProperties
      make-VkFormatProperties*
      VkFormatPropertiesbufferFeatures
      VkFormatPropertiesoptimalTilingFeatures
      VkFormatPropertieslinearTilingFeatures
      VkFormatProperties
      VkFormatProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkFormatProperties (struct "VkFormatProperties"))
   (c-define-type VkFormatProperties* (pointer VkFormatProperties))
   (define-c-lambda
      VkFormatPropertieslinearTilingFeatures
      (VkFormatProperties*)
      VkFormatFeatureFlags
      "___return (___arg1->linearTilingFeatures);")
   (define-c-lambda
      VkFormatPropertiesoptimalTilingFeatures
      (VkFormatProperties*)
      VkFormatFeatureFlags
      "___return (___arg1->optimalTilingFeatures);")
   (define-c-lambda
      VkFormatPropertiesbufferFeatures
      (VkFormatProperties*)
      VkFormatFeatureFlags
      "___return (___arg1->bufferFeatures);")
   (define-c-lambda
      make-VkFormatProperties*
      (int)
      VkFormatProperties*
      "VkFormatProperties* vkformatproperties = malloc(___arg1 * sizeof(VkFormatProperties));
      ___return (vkformatproperties);")
   (define-c-lambda
      ref-VkFormatProperties
      (VkFormatProperties* int)
      VkFormatProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkFormatProperties
      ((pointer VkFormatProperties))
      VkFormatProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkFormatProperties
      (VkFormatFeatureFlags VkFormatFeatureFlags VkFormatFeatureFlags)
      VkFormatProperties*
      "VkFormatProperties *formatproperties = malloc(sizeof(VkFormatProperties));
formatproperties->linearTilingFeatures=___arg1;
formatproperties->optimalTilingFeatures=___arg2;
formatproperties->bufferFeatures=___arg3;
___return (formatproperties);"))
(begin-ffi
   (make-VkImageFormatProperties
      ptr->VkImageFormatProperties
      ref-VkImageFormatProperties
      make-VkImageFormatProperties*
      VkImageFormatPropertiesmaxResourceSize
      VkImageFormatPropertiessampleCounts
      VkImageFormatPropertiesmaxArrayLayers
      VkImageFormatPropertiesmaxMipLevels
      VkImageFormatPropertiesmaxExtent
      VkImageFormatProperties
      VkImageFormatProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageFormatProperties (struct "VkImageFormatProperties"))
   (c-define-type VkImageFormatProperties* (pointer VkImageFormatProperties))
   (define-c-lambda
      VkImageFormatPropertiesmaxExtent
      (VkImageFormatProperties*)
      VkExtent3D
      "___return (___arg1->maxExtent);")
   (define-c-lambda
      VkImageFormatPropertiesmaxMipLevels
      (VkImageFormatProperties*)
      uint32_t
      "___return (___arg1->maxMipLevels);")
   (define-c-lambda
      VkImageFormatPropertiesmaxArrayLayers
      (VkImageFormatProperties*)
      uint32_t
      "___return (___arg1->maxArrayLayers);")
   (define-c-lambda
      VkImageFormatPropertiessampleCounts
      (VkImageFormatProperties*)
      VkSampleCountFlags
      "___return (___arg1->sampleCounts);")
   (define-c-lambda
      VkImageFormatPropertiesmaxResourceSize
      (VkImageFormatProperties*)
      VkDeviceSize
      "___return (___arg1->maxResourceSize);")
   (define-c-lambda
      make-VkImageFormatProperties*
      (int)
      VkImageFormatProperties*
      "VkImageFormatProperties* vkimageformatproperties = malloc(___arg1 * sizeof(VkImageFormatProperties));
      ___return (vkimageformatproperties);")
   (define-c-lambda
      ref-VkImageFormatProperties
      (VkImageFormatProperties* int)
      VkImageFormatProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageFormatProperties
      ((pointer VkImageFormatProperties))
      VkImageFormatProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageFormatProperties
      (VkExtent3D uint32_t uint32_t VkSampleCountFlags VkDeviceSize)
      VkImageFormatProperties*
      "VkImageFormatProperties *imageformatproperties = malloc(sizeof(VkImageFormatProperties));
imageformatproperties->maxExtent=___arg1;
imageformatproperties->maxMipLevels=___arg2;
imageformatproperties->maxArrayLayers=___arg3;
imageformatproperties->sampleCounts=___arg4;
imageformatproperties->maxResourceSize=___arg5;
___return (imageformatproperties);"))
(begin-ffi
   (make-VkDescriptorBufferInfo
      ptr->VkDescriptorBufferInfo
      ref-VkDescriptorBufferInfo
      make-VkDescriptorBufferInfo*
      VkDescriptorBufferInforange
      VkDescriptorBufferInfooffset
      VkDescriptorBufferInfobuffer
      VkDescriptorBufferInfo
      VkDescriptorBufferInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDescriptorBufferInfo (struct "VkDescriptorBufferInfo"))
   (c-define-type VkDescriptorBufferInfo* (pointer VkDescriptorBufferInfo))
   (define-c-lambda
      VkDescriptorBufferInfobuffer
      (VkDescriptorBufferInfo*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      VkDescriptorBufferInfooffset
      (VkDescriptorBufferInfo*)
      VkDeviceSize
      "___return (___arg1->offset);")
   (define-c-lambda
      VkDescriptorBufferInforange
      (VkDescriptorBufferInfo*)
      VkDeviceSize
      "___return (___arg1->range);")
   (define-c-lambda
      make-VkDescriptorBufferInfo*
      (int)
      VkDescriptorBufferInfo*
      "VkDescriptorBufferInfo* vkdescriptorbufferinfo = malloc(___arg1 * sizeof(VkDescriptorBufferInfo));
      ___return (vkdescriptorbufferinfo);")
   (define-c-lambda
      ref-VkDescriptorBufferInfo
      (VkDescriptorBufferInfo* int)
      VkDescriptorBufferInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorBufferInfo
      ((pointer VkDescriptorBufferInfo))
      VkDescriptorBufferInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorBufferInfo
      (VkBuffer VkDeviceSize VkDeviceSize)
      VkDescriptorBufferInfo*
      "VkDescriptorBufferInfo *descriptorbufferinfo = malloc(sizeof(VkDescriptorBufferInfo));
descriptorbufferinfo->buffer=___arg1;
descriptorbufferinfo->offset=___arg2;
descriptorbufferinfo->range=___arg3;
___return (descriptorbufferinfo);"))
(begin-ffi
   (make-VkDescriptorImageInfo
      ptr->VkDescriptorImageInfo
      ref-VkDescriptorImageInfo
      make-VkDescriptorImageInfo*
      VkDescriptorImageInfoimageLayout
      VkDescriptorImageInfoimageView
      VkDescriptorImageInfosampler
      VkDescriptorImageInfo
      VkDescriptorImageInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDescriptorImageInfo (struct "VkDescriptorImageInfo"))
   (c-define-type VkDescriptorImageInfo* (pointer VkDescriptorImageInfo))
   (define-c-lambda
      VkDescriptorImageInfosampler
      (VkDescriptorImageInfo*)
      VkSampler
      "___return (___arg1->sampler);")
   (define-c-lambda
      VkDescriptorImageInfoimageView
      (VkDescriptorImageInfo*)
      VkImageView
      "___return (___arg1->imageView);")
   (define-c-lambda
      VkDescriptorImageInfoimageLayout
      (VkDescriptorImageInfo*)
      VkImageLayout
      "___return (___arg1->imageLayout);")
   (define-c-lambda
      make-VkDescriptorImageInfo*
      (int)
      VkDescriptorImageInfo*
      "VkDescriptorImageInfo* vkdescriptorimageinfo = malloc(___arg1 * sizeof(VkDescriptorImageInfo));
      ___return (vkdescriptorimageinfo);")
   (define-c-lambda
      ref-VkDescriptorImageInfo
      (VkDescriptorImageInfo* int)
      VkDescriptorImageInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorImageInfo
      ((pointer VkDescriptorImageInfo))
      VkDescriptorImageInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorImageInfo
      (VkSampler VkImageView VkImageLayout)
      VkDescriptorImageInfo*
      "VkDescriptorImageInfo *descriptorimageinfo = malloc(sizeof(VkDescriptorImageInfo));
descriptorimageinfo->sampler=___arg1;
descriptorimageinfo->imageView=___arg2;
descriptorimageinfo->imageLayout=___arg3;
___return (descriptorimageinfo);"))
(begin-ffi
   (make-VkWriteDescriptorSet
      ptr->VkWriteDescriptorSet
      ref-VkWriteDescriptorSet
      make-VkWriteDescriptorSet*
      VkWriteDescriptorSetpTexelBufferView
      VkWriteDescriptorSetpBufferInfo
      VkWriteDescriptorSetpImageInfo
      VkWriteDescriptorSetdescriptorType
      VkWriteDescriptorSetdescriptorCount
      VkWriteDescriptorSetdstArrayElement
      VkWriteDescriptorSetdstBinding
      VkWriteDescriptorSetdstSet
      VkWriteDescriptorSetpNext
      VkWriteDescriptorSetsType
      VkWriteDescriptorSet
      VkWriteDescriptorSet*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkWriteDescriptorSet (struct "VkWriteDescriptorSet"))
   (c-define-type VkWriteDescriptorSet* (pointer VkWriteDescriptorSet))
   (define-c-lambda
      VkWriteDescriptorSetsType
      (VkWriteDescriptorSet*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkWriteDescriptorSetpNext
      (VkWriteDescriptorSet*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkWriteDescriptorSetdstSet
      (VkWriteDescriptorSet*)
      VkDescriptorSet
      "___return (___arg1->dstSet);")
   (define-c-lambda
      VkWriteDescriptorSetdstBinding
      (VkWriteDescriptorSet*)
      uint32_t
      "___return (___arg1->dstBinding);")
   (define-c-lambda
      VkWriteDescriptorSetdstArrayElement
      (VkWriteDescriptorSet*)
      uint32_t
      "___return (___arg1->dstArrayElement);")
   (define-c-lambda
      VkWriteDescriptorSetdescriptorCount
      (VkWriteDescriptorSet*)
      uint32_t
      "___return (___arg1->descriptorCount);")
   (define-c-lambda
      VkWriteDescriptorSetdescriptorType
      (VkWriteDescriptorSet*)
      VkDescriptorType
      "___return (___arg1->descriptorType);")
   (define-c-lambda
      VkWriteDescriptorSetpImageInfo
      (VkWriteDescriptorSet*)
      VkDescriptorImageInfo*
      "___return (___arg1->pImageInfo);")
   (define-c-lambda
      VkWriteDescriptorSetpBufferInfo
      (VkWriteDescriptorSet*)
      VkDescriptorBufferInfo*
      "___return (___arg1->pBufferInfo);")
   (define-c-lambda
      VkWriteDescriptorSetpTexelBufferView
      (VkWriteDescriptorSet*)
      VkBufferView*
      "___return (___arg1->pTexelBufferView);")
   (define-c-lambda
      make-VkWriteDescriptorSet*
      (int)
      VkWriteDescriptorSet*
      "VkWriteDescriptorSet* vkwritedescriptorset = malloc(___arg1 * sizeof(VkWriteDescriptorSet));
      ___return (vkwritedescriptorset);")
   (define-c-lambda
      ref-VkWriteDescriptorSet
      (VkWriteDescriptorSet* int)
      VkWriteDescriptorSet*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkWriteDescriptorSet
      ((pointer VkWriteDescriptorSet))
      VkWriteDescriptorSet
      "___return(*___arg1);")
   (define-c-lambda
      make-VkWriteDescriptorSet
      (void*
         VkDescriptorSet
         uint32_t
         uint32_t
         uint32_t
         VkDescriptorType
         VkDescriptorImageInfo*
         VkDescriptorBufferInfo*
         VkBufferView*)
      VkWriteDescriptorSet*
      "VkWriteDescriptorSet *writedescriptorset = malloc(sizeof(VkWriteDescriptorSet));
writedescriptorset->sType=VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
writedescriptorset->pNext=___arg1;
writedescriptorset->dstSet=___arg2;
writedescriptorset->dstBinding=___arg3;
writedescriptorset->dstArrayElement=___arg4;
writedescriptorset->descriptorCount=___arg5;
writedescriptorset->descriptorType=___arg6;
writedescriptorset->pImageInfo=___arg7;
writedescriptorset->pBufferInfo=___arg8;
writedescriptorset->pTexelBufferView=___arg9;
___return (writedescriptorset);"))
(begin-ffi
   (make-VkCopyDescriptorSet
      ptr->VkCopyDescriptorSet
      ref-VkCopyDescriptorSet
      make-VkCopyDescriptorSet*
      VkCopyDescriptorSetdescriptorCount
      VkCopyDescriptorSetdstArrayElement
      VkCopyDescriptorSetdstBinding
      VkCopyDescriptorSetdstSet
      VkCopyDescriptorSetsrcArrayElement
      VkCopyDescriptorSetsrcBinding
      VkCopyDescriptorSetsrcSet
      VkCopyDescriptorSetpNext
      VkCopyDescriptorSetsType
      VkCopyDescriptorSet
      VkCopyDescriptorSet*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkCopyDescriptorSet (struct "VkCopyDescriptorSet"))
   (c-define-type VkCopyDescriptorSet* (pointer VkCopyDescriptorSet))
   (define-c-lambda
      VkCopyDescriptorSetsType
      (VkCopyDescriptorSet*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCopyDescriptorSetpNext
      (VkCopyDescriptorSet*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCopyDescriptorSetsrcSet
      (VkCopyDescriptorSet*)
      VkDescriptorSet
      "___return (___arg1->srcSet);")
   (define-c-lambda
      VkCopyDescriptorSetsrcBinding
      (VkCopyDescriptorSet*)
      uint32_t
      "___return (___arg1->srcBinding);")
   (define-c-lambda
      VkCopyDescriptorSetsrcArrayElement
      (VkCopyDescriptorSet*)
      uint32_t
      "___return (___arg1->srcArrayElement);")
   (define-c-lambda
      VkCopyDescriptorSetdstSet
      (VkCopyDescriptorSet*)
      VkDescriptorSet
      "___return (___arg1->dstSet);")
   (define-c-lambda
      VkCopyDescriptorSetdstBinding
      (VkCopyDescriptorSet*)
      uint32_t
      "___return (___arg1->dstBinding);")
   (define-c-lambda
      VkCopyDescriptorSetdstArrayElement
      (VkCopyDescriptorSet*)
      uint32_t
      "___return (___arg1->dstArrayElement);")
   (define-c-lambda
      VkCopyDescriptorSetdescriptorCount
      (VkCopyDescriptorSet*)
      uint32_t
      "___return (___arg1->descriptorCount);")
   (define-c-lambda
      make-VkCopyDescriptorSet*
      (int)
      VkCopyDescriptorSet*
      "VkCopyDescriptorSet* vkcopydescriptorset = malloc(___arg1 * sizeof(VkCopyDescriptorSet));
      ___return (vkcopydescriptorset);")
   (define-c-lambda
      ref-VkCopyDescriptorSet
      (VkCopyDescriptorSet* int)
      VkCopyDescriptorSet*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCopyDescriptorSet
      ((pointer VkCopyDescriptorSet))
      VkCopyDescriptorSet
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCopyDescriptorSet
      (void* VkDescriptorSet uint32_t uint32_t VkDescriptorSet uint32_t uint32_t uint32_t)
      VkCopyDescriptorSet*
      "VkCopyDescriptorSet *copydescriptorset = malloc(sizeof(VkCopyDescriptorSet));
copydescriptorset->sType=VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
copydescriptorset->pNext=___arg1;
copydescriptorset->srcSet=___arg2;
copydescriptorset->srcBinding=___arg3;
copydescriptorset->srcArrayElement=___arg4;
copydescriptorset->dstSet=___arg5;
copydescriptorset->dstBinding=___arg6;
copydescriptorset->dstArrayElement=___arg7;
copydescriptorset->descriptorCount=___arg8;
___return (copydescriptorset);"))
(begin-ffi
   (make-VkBufferCreateInfo
      ptr->VkBufferCreateInfo
      ref-VkBufferCreateInfo
      make-VkBufferCreateInfo*
      VkBufferCreateInfopQueueFamilyIndices
      VkBufferCreateInfoqueueFamilyIndexCount
      VkBufferCreateInfosharingMode
      VkBufferCreateInfousage
      VkBufferCreateInfosize
      VkBufferCreateInfoflags
      VkBufferCreateInfopNext
      VkBufferCreateInfosType
      VkBufferCreateInfo
      VkBufferCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBufferCreateInfo (struct "VkBufferCreateInfo"))
   (c-define-type VkBufferCreateInfo* (pointer VkBufferCreateInfo))
   (define-c-lambda
      VkBufferCreateInfosType
      (VkBufferCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBufferCreateInfopNext
      (VkBufferCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBufferCreateInfoflags
      (VkBufferCreateInfo*)
      VkBufferCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkBufferCreateInfosize
      (VkBufferCreateInfo*)
      VkDeviceSize
      "___return (___arg1->size);")
   (define-c-lambda
      VkBufferCreateInfousage
      (VkBufferCreateInfo*)
      VkBufferUsageFlags
      "___return (___arg1->usage);")
   (define-c-lambda
      VkBufferCreateInfosharingMode
      (VkBufferCreateInfo*)
      VkSharingMode
      "___return (___arg1->sharingMode);")
   (define-c-lambda
      VkBufferCreateInfoqueueFamilyIndexCount
      (VkBufferCreateInfo*)
      uint32_t
      "___return (___arg1->queueFamilyIndexCount);")
   (define-c-lambda
      VkBufferCreateInfopQueueFamilyIndices
      (VkBufferCreateInfo*)
      uint32_t*
      "___return (___arg1->pQueueFamilyIndices);")
   (define-c-lambda
      make-VkBufferCreateInfo*
      (int)
      VkBufferCreateInfo*
      "VkBufferCreateInfo* vkbuffercreateinfo = malloc(___arg1 * sizeof(VkBufferCreateInfo));
      ___return (vkbuffercreateinfo);")
   (define-c-lambda
      ref-VkBufferCreateInfo
      (VkBufferCreateInfo* int)
      VkBufferCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBufferCreateInfo
      ((pointer VkBufferCreateInfo))
      VkBufferCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBufferCreateInfo
      (void*
         VkBufferCreateFlags
         VkDeviceSize
         VkBufferUsageFlags
         VkSharingMode
         uint32_t
         uint32_t*)
      VkBufferCreateInfo*
      "VkBufferCreateInfo *buffercreateinfo = malloc(sizeof(VkBufferCreateInfo));
buffercreateinfo->sType=VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
buffercreateinfo->pNext=___arg1;
buffercreateinfo->flags=___arg2;
buffercreateinfo->size=___arg3;
buffercreateinfo->usage=___arg4;
buffercreateinfo->sharingMode=___arg5;
buffercreateinfo->queueFamilyIndexCount=___arg6;
buffercreateinfo->pQueueFamilyIndices=___arg7;
___return (buffercreateinfo);"))
(begin-ffi
   (make-VkBufferViewCreateInfo
      ptr->VkBufferViewCreateInfo
      ref-VkBufferViewCreateInfo
      make-VkBufferViewCreateInfo*
      VkBufferViewCreateInforange
      VkBufferViewCreateInfooffset
      VkBufferViewCreateInfoformat
      VkBufferViewCreateInfobuffer
      VkBufferViewCreateInfoflags
      VkBufferViewCreateInfopNext
      VkBufferViewCreateInfosType
      VkBufferViewCreateInfo
      VkBufferViewCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBufferViewCreateInfo (struct "VkBufferViewCreateInfo"))
   (c-define-type VkBufferViewCreateInfo* (pointer VkBufferViewCreateInfo))
   (define-c-lambda
      VkBufferViewCreateInfosType
      (VkBufferViewCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBufferViewCreateInfopNext
      (VkBufferViewCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBufferViewCreateInfoflags
      (VkBufferViewCreateInfo*)
      VkBufferViewCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkBufferViewCreateInfobuffer
      (VkBufferViewCreateInfo*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      VkBufferViewCreateInfoformat
      (VkBufferViewCreateInfo*)
      VkFormat
      "___return (___arg1->format);")
   (define-c-lambda
      VkBufferViewCreateInfooffset
      (VkBufferViewCreateInfo*)
      VkDeviceSize
      "___return (___arg1->offset);")
   (define-c-lambda
      VkBufferViewCreateInforange
      (VkBufferViewCreateInfo*)
      VkDeviceSize
      "___return (___arg1->range);")
   (define-c-lambda
      make-VkBufferViewCreateInfo*
      (int)
      VkBufferViewCreateInfo*
      "VkBufferViewCreateInfo* vkbufferviewcreateinfo = malloc(___arg1 * sizeof(VkBufferViewCreateInfo));
      ___return (vkbufferviewcreateinfo);")
   (define-c-lambda
      ref-VkBufferViewCreateInfo
      (VkBufferViewCreateInfo* int)
      VkBufferViewCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBufferViewCreateInfo
      ((pointer VkBufferViewCreateInfo))
      VkBufferViewCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBufferViewCreateInfo
      (void* VkBufferViewCreateFlags VkBuffer VkFormat VkDeviceSize VkDeviceSize)
      VkBufferViewCreateInfo*
      "VkBufferViewCreateInfo *bufferviewcreateinfo = malloc(sizeof(VkBufferViewCreateInfo));
bufferviewcreateinfo->sType=VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
bufferviewcreateinfo->pNext=___arg1;
bufferviewcreateinfo->flags=___arg2;
bufferviewcreateinfo->buffer=___arg3;
bufferviewcreateinfo->format=___arg4;
bufferviewcreateinfo->offset=___arg5;
bufferviewcreateinfo->range=___arg6;
___return (bufferviewcreateinfo);"))
(begin-ffi
   (make-VkImageSubresource
      ptr->VkImageSubresource
      ref-VkImageSubresource
      make-VkImageSubresource*
      VkImageSubresourcearrayLayer
      VkImageSubresourcemipLevel
      VkImageSubresourceaspectMask
      VkImageSubresource
      VkImageSubresource*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageSubresource (struct "VkImageSubresource"))
   (c-define-type VkImageSubresource* (pointer VkImageSubresource))
   (define-c-lambda
      VkImageSubresourceaspectMask
      (VkImageSubresource*)
      VkImageAspectFlags
      "___return (___arg1->aspectMask);")
   (define-c-lambda
      VkImageSubresourcemipLevel
      (VkImageSubresource*)
      uint32_t
      "___return (___arg1->mipLevel);")
   (define-c-lambda
      VkImageSubresourcearrayLayer
      (VkImageSubresource*)
      uint32_t
      "___return (___arg1->arrayLayer);")
   (define-c-lambda
      make-VkImageSubresource*
      (int)
      VkImageSubresource*
      "VkImageSubresource* vkimagesubresource = malloc(___arg1 * sizeof(VkImageSubresource));
      ___return (vkimagesubresource);")
   (define-c-lambda
      ref-VkImageSubresource
      (VkImageSubresource* int)
      VkImageSubresource*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageSubresource
      ((pointer VkImageSubresource))
      VkImageSubresource
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageSubresource
      (VkImageAspectFlags uint32_t uint32_t)
      VkImageSubresource*
      "VkImageSubresource *imagesubresource = malloc(sizeof(VkImageSubresource));
imagesubresource->aspectMask=___arg1;
imagesubresource->mipLevel=___arg2;
imagesubresource->arrayLayer=___arg3;
___return (imagesubresource);"))
(begin-ffi
   (make-VkImageSubresourceLayers
      ptr->VkImageSubresourceLayers
      ref-VkImageSubresourceLayers
      make-VkImageSubresourceLayers*
      VkImageSubresourceLayerslayerCount
      VkImageSubresourceLayersbaseArrayLayer
      VkImageSubresourceLayersmipLevel
      VkImageSubresourceLayersaspectMask
      VkImageSubresourceLayers
      VkImageSubresourceLayers*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageSubresourceLayers (struct "VkImageSubresourceLayers"))
   (c-define-type VkImageSubresourceLayers* (pointer VkImageSubresourceLayers))
   (define-c-lambda
      VkImageSubresourceLayersaspectMask
      (VkImageSubresourceLayers*)
      VkImageAspectFlags
      "___return (___arg1->aspectMask);")
   (define-c-lambda
      VkImageSubresourceLayersmipLevel
      (VkImageSubresourceLayers*)
      uint32_t
      "___return (___arg1->mipLevel);")
   (define-c-lambda
      VkImageSubresourceLayersbaseArrayLayer
      (VkImageSubresourceLayers*)
      uint32_t
      "___return (___arg1->baseArrayLayer);")
   (define-c-lambda
      VkImageSubresourceLayerslayerCount
      (VkImageSubresourceLayers*)
      uint32_t
      "___return (___arg1->layerCount);")
   (define-c-lambda
      make-VkImageSubresourceLayers*
      (int)
      VkImageSubresourceLayers*
      "VkImageSubresourceLayers* vkimagesubresourcelayers = malloc(___arg1 * sizeof(VkImageSubresourceLayers));
      ___return (vkimagesubresourcelayers);")
   (define-c-lambda
      ref-VkImageSubresourceLayers
      (VkImageSubresourceLayers* int)
      VkImageSubresourceLayers*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageSubresourceLayers
      ((pointer VkImageSubresourceLayers))
      VkImageSubresourceLayers
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageSubresourceLayers
      (VkImageAspectFlags uint32_t uint32_t uint32_t)
      VkImageSubresourceLayers*
      "VkImageSubresourceLayers *imagesubresourcelayers = malloc(sizeof(VkImageSubresourceLayers));
imagesubresourcelayers->aspectMask=___arg1;
imagesubresourcelayers->mipLevel=___arg2;
imagesubresourcelayers->baseArrayLayer=___arg3;
imagesubresourcelayers->layerCount=___arg4;
___return (imagesubresourcelayers);"))
(begin-ffi
   (make-VkImageSubresourceRange
      ptr->VkImageSubresourceRange
      ref-VkImageSubresourceRange
      make-VkImageSubresourceRange*
      VkImageSubresourceRangelayerCount
      VkImageSubresourceRangebaseArrayLayer
      VkImageSubresourceRangelevelCount
      VkImageSubresourceRangebaseMipLevel
      VkImageSubresourceRangeaspectMask
      VkImageSubresourceRange
      VkImageSubresourceRange*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageSubresourceRange (struct "VkImageSubresourceRange"))
   (c-define-type VkImageSubresourceRange* (pointer VkImageSubresourceRange))
   (define-c-lambda
      VkImageSubresourceRangeaspectMask
      (VkImageSubresourceRange*)
      VkImageAspectFlags
      "___return (___arg1->aspectMask);")
   (define-c-lambda
      VkImageSubresourceRangebaseMipLevel
      (VkImageSubresourceRange*)
      uint32_t
      "___return (___arg1->baseMipLevel);")
   (define-c-lambda
      VkImageSubresourceRangelevelCount
      (VkImageSubresourceRange*)
      uint32_t
      "___return (___arg1->levelCount);")
   (define-c-lambda
      VkImageSubresourceRangebaseArrayLayer
      (VkImageSubresourceRange*)
      uint32_t
      "___return (___arg1->baseArrayLayer);")
   (define-c-lambda
      VkImageSubresourceRangelayerCount
      (VkImageSubresourceRange*)
      uint32_t
      "___return (___arg1->layerCount);")
   (define-c-lambda
      make-VkImageSubresourceRange*
      (int)
      VkImageSubresourceRange*
      "VkImageSubresourceRange* vkimagesubresourcerange = malloc(___arg1 * sizeof(VkImageSubresourceRange));
      ___return (vkimagesubresourcerange);")
   (define-c-lambda
      ref-VkImageSubresourceRange
      (VkImageSubresourceRange* int)
      VkImageSubresourceRange*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageSubresourceRange
      ((pointer VkImageSubresourceRange))
      VkImageSubresourceRange
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageSubresourceRange
      (VkImageAspectFlags uint32_t uint32_t uint32_t uint32_t)
      VkImageSubresourceRange*
      "VkImageSubresourceRange *imagesubresourcerange = malloc(sizeof(VkImageSubresourceRange));
imagesubresourcerange->aspectMask=___arg1;
imagesubresourcerange->baseMipLevel=___arg2;
imagesubresourcerange->levelCount=___arg3;
imagesubresourcerange->baseArrayLayer=___arg4;
imagesubresourcerange->layerCount=___arg5;
___return (imagesubresourcerange);"))
(begin-ffi
   (make-VkMemoryBarrier
      ptr->VkMemoryBarrier
      ref-VkMemoryBarrier
      make-VkMemoryBarrier*
      VkMemoryBarrierdstAccessMask
      VkMemoryBarriersrcAccessMask
      VkMemoryBarrierpNext
      VkMemoryBarriersType
      VkMemoryBarrier
      VkMemoryBarrier*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryBarrier (struct "VkMemoryBarrier"))
   (c-define-type VkMemoryBarrier* (pointer VkMemoryBarrier))
   (define-c-lambda
      VkMemoryBarriersType
      (VkMemoryBarrier*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMemoryBarrierpNext
      (VkMemoryBarrier*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMemoryBarriersrcAccessMask
      (VkMemoryBarrier*)
      VkAccessFlags
      "___return (___arg1->srcAccessMask);")
   (define-c-lambda
      VkMemoryBarrierdstAccessMask
      (VkMemoryBarrier*)
      VkAccessFlags
      "___return (___arg1->dstAccessMask);")
   (define-c-lambda
      make-VkMemoryBarrier*
      (int)
      VkMemoryBarrier*
      "VkMemoryBarrier* vkmemorybarrier = malloc(___arg1 * sizeof(VkMemoryBarrier));
      ___return (vkmemorybarrier);")
   (define-c-lambda
      ref-VkMemoryBarrier
      (VkMemoryBarrier* int)
      VkMemoryBarrier*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryBarrier
      ((pointer VkMemoryBarrier))
      VkMemoryBarrier
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryBarrier
      (void* VkAccessFlags VkAccessFlags)
      VkMemoryBarrier*
      "VkMemoryBarrier *memorybarrier = malloc(sizeof(VkMemoryBarrier));
memorybarrier->sType=VK_STRUCTURE_TYPE_MEMORY_BARRIER;
memorybarrier->pNext=___arg1;
memorybarrier->srcAccessMask=___arg2;
memorybarrier->dstAccessMask=___arg3;
___return (memorybarrier);"))
(begin-ffi
   (make-VkBufferMemoryBarrier
      ptr->VkBufferMemoryBarrier
      ref-VkBufferMemoryBarrier
      make-VkBufferMemoryBarrier*
      VkBufferMemoryBarriersize
      VkBufferMemoryBarrieroffset
      VkBufferMemoryBarrierbuffer
      VkBufferMemoryBarrierdstQueueFamilyIndex
      VkBufferMemoryBarriersrcQueueFamilyIndex
      VkBufferMemoryBarrierdstAccessMask
      VkBufferMemoryBarriersrcAccessMask
      VkBufferMemoryBarrierpNext
      VkBufferMemoryBarriersType
      VkBufferMemoryBarrier
      VkBufferMemoryBarrier*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBufferMemoryBarrier (struct "VkBufferMemoryBarrier"))
   (c-define-type VkBufferMemoryBarrier* (pointer VkBufferMemoryBarrier))
   (define-c-lambda
      VkBufferMemoryBarriersType
      (VkBufferMemoryBarrier*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBufferMemoryBarrierpNext
      (VkBufferMemoryBarrier*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBufferMemoryBarriersrcAccessMask
      (VkBufferMemoryBarrier*)
      VkAccessFlags
      "___return (___arg1->srcAccessMask);")
   (define-c-lambda
      VkBufferMemoryBarrierdstAccessMask
      (VkBufferMemoryBarrier*)
      VkAccessFlags
      "___return (___arg1->dstAccessMask);")
   (define-c-lambda
      VkBufferMemoryBarriersrcQueueFamilyIndex
      (VkBufferMemoryBarrier*)
      uint32_t
      "___return (___arg1->srcQueueFamilyIndex);")
   (define-c-lambda
      VkBufferMemoryBarrierdstQueueFamilyIndex
      (VkBufferMemoryBarrier*)
      uint32_t
      "___return (___arg1->dstQueueFamilyIndex);")
   (define-c-lambda
      VkBufferMemoryBarrierbuffer
      (VkBufferMemoryBarrier*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      VkBufferMemoryBarrieroffset
      (VkBufferMemoryBarrier*)
      VkDeviceSize
      "___return (___arg1->offset);")
   (define-c-lambda
      VkBufferMemoryBarriersize
      (VkBufferMemoryBarrier*)
      VkDeviceSize
      "___return (___arg1->size);")
   (define-c-lambda
      make-VkBufferMemoryBarrier*
      (int)
      VkBufferMemoryBarrier*
      "VkBufferMemoryBarrier* vkbuffermemorybarrier = malloc(___arg1 * sizeof(VkBufferMemoryBarrier));
      ___return (vkbuffermemorybarrier);")
   (define-c-lambda
      ref-VkBufferMemoryBarrier
      (VkBufferMemoryBarrier* int)
      VkBufferMemoryBarrier*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBufferMemoryBarrier
      ((pointer VkBufferMemoryBarrier))
      VkBufferMemoryBarrier
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBufferMemoryBarrier
      (void*
         VkAccessFlags
         VkAccessFlags
         uint32_t
         uint32_t
         VkBuffer
         VkDeviceSize
         VkDeviceSize)
      VkBufferMemoryBarrier*
      "VkBufferMemoryBarrier *buffermemorybarrier = malloc(sizeof(VkBufferMemoryBarrier));
buffermemorybarrier->sType=VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
buffermemorybarrier->pNext=___arg1;
buffermemorybarrier->srcAccessMask=___arg2;
buffermemorybarrier->dstAccessMask=___arg3;
buffermemorybarrier->srcQueueFamilyIndex=___arg4;
buffermemorybarrier->dstQueueFamilyIndex=___arg5;
buffermemorybarrier->buffer=___arg6;
buffermemorybarrier->offset=___arg7;
buffermemorybarrier->size=___arg8;
___return (buffermemorybarrier);"))
(begin-ffi
   (make-VkImageMemoryBarrier
      ptr->VkImageMemoryBarrier
      ref-VkImageMemoryBarrier
      make-VkImageMemoryBarrier*
      VkImageMemoryBarriersubresourceRange
      VkImageMemoryBarrierimage
      VkImageMemoryBarrierdstQueueFamilyIndex
      VkImageMemoryBarriersrcQueueFamilyIndex
      VkImageMemoryBarriernewLayout
      VkImageMemoryBarrieroldLayout
      VkImageMemoryBarrierdstAccessMask
      VkImageMemoryBarriersrcAccessMask
      VkImageMemoryBarrierpNext
      VkImageMemoryBarriersType
      VkImageMemoryBarrier
      VkImageMemoryBarrier*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageMemoryBarrier (struct "VkImageMemoryBarrier"))
   (c-define-type VkImageMemoryBarrier* (pointer VkImageMemoryBarrier))
   (define-c-lambda
      VkImageMemoryBarriersType
      (VkImageMemoryBarrier*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageMemoryBarrierpNext
      (VkImageMemoryBarrier*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageMemoryBarriersrcAccessMask
      (VkImageMemoryBarrier*)
      VkAccessFlags
      "___return (___arg1->srcAccessMask);")
   (define-c-lambda
      VkImageMemoryBarrierdstAccessMask
      (VkImageMemoryBarrier*)
      VkAccessFlags
      "___return (___arg1->dstAccessMask);")
   (define-c-lambda
      VkImageMemoryBarrieroldLayout
      (VkImageMemoryBarrier*)
      VkImageLayout
      "___return (___arg1->oldLayout);")
   (define-c-lambda
      VkImageMemoryBarriernewLayout
      (VkImageMemoryBarrier*)
      VkImageLayout
      "___return (___arg1->newLayout);")
   (define-c-lambda
      VkImageMemoryBarriersrcQueueFamilyIndex
      (VkImageMemoryBarrier*)
      uint32_t
      "___return (___arg1->srcQueueFamilyIndex);")
   (define-c-lambda
      VkImageMemoryBarrierdstQueueFamilyIndex
      (VkImageMemoryBarrier*)
      uint32_t
      "___return (___arg1->dstQueueFamilyIndex);")
   (define-c-lambda
      VkImageMemoryBarrierimage
      (VkImageMemoryBarrier*)
      VkImage
      "___return (___arg1->image);")
   (define-c-lambda
      VkImageMemoryBarriersubresourceRange
      (VkImageMemoryBarrier*)
      VkImageSubresourceRange
      "___return (___arg1->subresourceRange);")
   (define-c-lambda
      make-VkImageMemoryBarrier*
      (int)
      VkImageMemoryBarrier*
      "VkImageMemoryBarrier* vkimagememorybarrier = malloc(___arg1 * sizeof(VkImageMemoryBarrier));
      ___return (vkimagememorybarrier);")
   (define-c-lambda
      ref-VkImageMemoryBarrier
      (VkImageMemoryBarrier* int)
      VkImageMemoryBarrier*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageMemoryBarrier
      ((pointer VkImageMemoryBarrier))
      VkImageMemoryBarrier
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageMemoryBarrier
      (void*
         VkAccessFlags
         VkAccessFlags
         VkImageLayout
         VkImageLayout
         uint32_t
         uint32_t
         VkImage
         VkImageSubresourceRange)
      VkImageMemoryBarrier*
      "VkImageMemoryBarrier *imagememorybarrier = malloc(sizeof(VkImageMemoryBarrier));
imagememorybarrier->sType=VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
imagememorybarrier->pNext=___arg1;
imagememorybarrier->srcAccessMask=___arg2;
imagememorybarrier->dstAccessMask=___arg3;
imagememorybarrier->oldLayout=___arg4;
imagememorybarrier->newLayout=___arg5;
imagememorybarrier->srcQueueFamilyIndex=___arg6;
imagememorybarrier->dstQueueFamilyIndex=___arg7;
imagememorybarrier->image=___arg8;
imagememorybarrier->subresourceRange=___arg9;
___return (imagememorybarrier);"))
(begin-ffi
   (make-VkImageCreateInfo
      ptr->VkImageCreateInfo
      ref-VkImageCreateInfo
      make-VkImageCreateInfo*
      VkImageCreateInfoinitialLayout
      VkImageCreateInfopQueueFamilyIndices
      VkImageCreateInfoqueueFamilyIndexCount
      VkImageCreateInfosharingMode
      VkImageCreateInfousage
      VkImageCreateInfotiling
      VkImageCreateInfosamples
      VkImageCreateInfoarrayLayers
      VkImageCreateInfomipLevels
      VkImageCreateInfoextent
      VkImageCreateInfoformat
      VkImageCreateInfoimageType
      VkImageCreateInfoflags
      VkImageCreateInfopNext
      VkImageCreateInfosType
      VkImageCreateInfo
      VkImageCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageCreateInfo (struct "VkImageCreateInfo"))
   (c-define-type VkImageCreateInfo* (pointer VkImageCreateInfo))
   (define-c-lambda
      VkImageCreateInfosType
      (VkImageCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageCreateInfopNext
      (VkImageCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageCreateInfoflags
      (VkImageCreateInfo*)
      VkImageCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkImageCreateInfoimageType
      (VkImageCreateInfo*)
      VkImageType
      "___return (___arg1->imageType);")
   (define-c-lambda
      VkImageCreateInfoformat
      (VkImageCreateInfo*)
      VkFormat
      "___return (___arg1->format);")
   (define-c-lambda
      VkImageCreateInfoextent
      (VkImageCreateInfo*)
      VkExtent3D
      "___return (___arg1->extent);")
   (define-c-lambda
      VkImageCreateInfomipLevels
      (VkImageCreateInfo*)
      uint32_t
      "___return (___arg1->mipLevels);")
   (define-c-lambda
      VkImageCreateInfoarrayLayers
      (VkImageCreateInfo*)
      uint32_t
      "___return (___arg1->arrayLayers);")
   (define-c-lambda
      VkImageCreateInfosamples
      (VkImageCreateInfo*)
      VkSampleCountFlagBits
      "___return (___arg1->samples);")
   (define-c-lambda
      VkImageCreateInfotiling
      (VkImageCreateInfo*)
      VkImageTiling
      "___return (___arg1->tiling);")
   (define-c-lambda
      VkImageCreateInfousage
      (VkImageCreateInfo*)
      VkImageUsageFlags
      "___return (___arg1->usage);")
   (define-c-lambda
      VkImageCreateInfosharingMode
      (VkImageCreateInfo*)
      VkSharingMode
      "___return (___arg1->sharingMode);")
   (define-c-lambda
      VkImageCreateInfoqueueFamilyIndexCount
      (VkImageCreateInfo*)
      uint32_t
      "___return (___arg1->queueFamilyIndexCount);")
   (define-c-lambda
      VkImageCreateInfopQueueFamilyIndices
      (VkImageCreateInfo*)
      uint32_t*
      "___return (___arg1->pQueueFamilyIndices);")
   (define-c-lambda
      VkImageCreateInfoinitialLayout
      (VkImageCreateInfo*)
      VkImageLayout
      "___return (___arg1->initialLayout);")
   (define-c-lambda
      make-VkImageCreateInfo*
      (int)
      VkImageCreateInfo*
      "VkImageCreateInfo* vkimagecreateinfo = malloc(___arg1 * sizeof(VkImageCreateInfo));
      ___return (vkimagecreateinfo);")
   (define-c-lambda
      ref-VkImageCreateInfo
      (VkImageCreateInfo* int)
      VkImageCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageCreateInfo
      ((pointer VkImageCreateInfo))
      VkImageCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageCreateInfo
      (void*
         VkImageCreateFlags
         VkImageType
         VkFormat
         VkExtent3D
         uint32_t
         uint32_t
         VkSampleCountFlagBits
         VkImageTiling
         VkImageUsageFlags
         VkSharingMode
         uint32_t
         uint32_t*
         VkImageLayout)
      VkImageCreateInfo*
      "VkImageCreateInfo *imagecreateinfo = malloc(sizeof(VkImageCreateInfo));
imagecreateinfo->sType=VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
imagecreateinfo->pNext=___arg1;
imagecreateinfo->flags=___arg2;
imagecreateinfo->imageType=___arg3;
imagecreateinfo->format=___arg4;
imagecreateinfo->extent=___arg5;
imagecreateinfo->mipLevels=___arg6;
imagecreateinfo->arrayLayers=___arg7;
imagecreateinfo->samples=___arg8;
imagecreateinfo->tiling=___arg9;
imagecreateinfo->usage=___arg10;
imagecreateinfo->sharingMode=___arg11;
imagecreateinfo->queueFamilyIndexCount=___arg12;
imagecreateinfo->pQueueFamilyIndices=___arg13;
imagecreateinfo->initialLayout=___arg14;
___return (imagecreateinfo);"))
(begin-ffi
   (make-VkSubresourceLayout
      ptr->VkSubresourceLayout
      ref-VkSubresourceLayout
      make-VkSubresourceLayout*
      VkSubresourceLayoutdepthPitch
      VkSubresourceLayoutarrayPitch
      VkSubresourceLayoutrowPitch
      VkSubresourceLayoutsize
      VkSubresourceLayoutoffset
      VkSubresourceLayout
      VkSubresourceLayout*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSubresourceLayout (struct "VkSubresourceLayout"))
   (c-define-type VkSubresourceLayout* (pointer VkSubresourceLayout))
   (define-c-lambda
      VkSubresourceLayoutoffset
      (VkSubresourceLayout*)
      VkDeviceSize
      "___return (___arg1->offset);")
   (define-c-lambda
      VkSubresourceLayoutsize
      (VkSubresourceLayout*)
      VkDeviceSize
      "___return (___arg1->size);")
   (define-c-lambda
      VkSubresourceLayoutrowPitch
      (VkSubresourceLayout*)
      VkDeviceSize
      "___return (___arg1->rowPitch);")
   (define-c-lambda
      VkSubresourceLayoutarrayPitch
      (VkSubresourceLayout*)
      VkDeviceSize
      "___return (___arg1->arrayPitch);")
   (define-c-lambda
      VkSubresourceLayoutdepthPitch
      (VkSubresourceLayout*)
      VkDeviceSize
      "___return (___arg1->depthPitch);")
   (define-c-lambda
      make-VkSubresourceLayout*
      (int)
      VkSubresourceLayout*
      "VkSubresourceLayout* vksubresourcelayout = malloc(___arg1 * sizeof(VkSubresourceLayout));
      ___return (vksubresourcelayout);")
   (define-c-lambda
      ref-VkSubresourceLayout
      (VkSubresourceLayout* int)
      VkSubresourceLayout*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSubresourceLayout
      ((pointer VkSubresourceLayout))
      VkSubresourceLayout
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSubresourceLayout
      (VkDeviceSize VkDeviceSize VkDeviceSize VkDeviceSize VkDeviceSize)
      VkSubresourceLayout*
      "VkSubresourceLayout *subresourcelayout = malloc(sizeof(VkSubresourceLayout));
subresourcelayout->offset=___arg1;
subresourcelayout->size=___arg2;
subresourcelayout->rowPitch=___arg3;
subresourcelayout->arrayPitch=___arg4;
subresourcelayout->depthPitch=___arg5;
___return (subresourcelayout);"))
(begin-ffi
   (make-VkImageViewCreateInfo
      ptr->VkImageViewCreateInfo
      ref-VkImageViewCreateInfo
      make-VkImageViewCreateInfo*
      VkImageViewCreateInfosubresourceRange
      VkImageViewCreateInfocomponents
      VkImageViewCreateInfoformat
      VkImageViewCreateInfoviewType
      VkImageViewCreateInfoimage
      VkImageViewCreateInfoflags
      VkImageViewCreateInfopNext
      VkImageViewCreateInfosType
      VkImageViewCreateInfo
      VkImageViewCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageViewCreateInfo (struct "VkImageViewCreateInfo"))
   (c-define-type VkImageViewCreateInfo* (pointer VkImageViewCreateInfo))
   (define-c-lambda
      VkImageViewCreateInfosType
      (VkImageViewCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageViewCreateInfopNext
      (VkImageViewCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageViewCreateInfoflags
      (VkImageViewCreateInfo*)
      VkImageViewCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkImageViewCreateInfoimage
      (VkImageViewCreateInfo*)
      VkImage
      "___return (___arg1->image);")
   (define-c-lambda
      VkImageViewCreateInfoviewType
      (VkImageViewCreateInfo*)
      VkImageViewType
      "___return (___arg1->viewType);")
   (define-c-lambda
      VkImageViewCreateInfoformat
      (VkImageViewCreateInfo*)
      VkFormat
      "___return (___arg1->format);")
   (define-c-lambda
      VkImageViewCreateInfocomponents
      (VkImageViewCreateInfo*)
      VkComponentMapping
      "___return (___arg1->components);")
   (define-c-lambda
      VkImageViewCreateInfosubresourceRange
      (VkImageViewCreateInfo*)
      VkImageSubresourceRange
      "___return (___arg1->subresourceRange);")
   (define-c-lambda
      make-VkImageViewCreateInfo*
      (int)
      VkImageViewCreateInfo*
      "VkImageViewCreateInfo* vkimageviewcreateinfo = malloc(___arg1 * sizeof(VkImageViewCreateInfo));
      ___return (vkimageviewcreateinfo);")
   (define-c-lambda
      ref-VkImageViewCreateInfo
      (VkImageViewCreateInfo* int)
      VkImageViewCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageViewCreateInfo
      ((pointer VkImageViewCreateInfo))
      VkImageViewCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageViewCreateInfo
      (void*
         VkImageViewCreateFlags
         VkImage
         VkImageViewType
         VkFormat
         VkComponentMapping
         VkImageSubresourceRange)
      VkImageViewCreateInfo*
      "VkImageViewCreateInfo *imageviewcreateinfo = malloc(sizeof(VkImageViewCreateInfo));
imageviewcreateinfo->sType=VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
imageviewcreateinfo->pNext=___arg1;
imageviewcreateinfo->flags=___arg2;
imageviewcreateinfo->image=___arg3;
imageviewcreateinfo->viewType=___arg4;
imageviewcreateinfo->format=___arg5;
imageviewcreateinfo->components=___arg6;
imageviewcreateinfo->subresourceRange=___arg7;
___return (imageviewcreateinfo);"))
(begin-ffi
   (make-VkBufferCopy
      ptr->VkBufferCopy
      ref-VkBufferCopy
      make-VkBufferCopy*
      VkBufferCopysize
      VkBufferCopydstOffset
      VkBufferCopysrcOffset
      VkBufferCopy
      VkBufferCopy*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBufferCopy (struct "VkBufferCopy"))
   (c-define-type VkBufferCopy* (pointer VkBufferCopy))
   (define-c-lambda
      VkBufferCopysrcOffset
      (VkBufferCopy*)
      VkDeviceSize
      "___return (___arg1->srcOffset);")
   (define-c-lambda
      VkBufferCopydstOffset
      (VkBufferCopy*)
      VkDeviceSize
      "___return (___arg1->dstOffset);")
   (define-c-lambda
      VkBufferCopysize
      (VkBufferCopy*)
      VkDeviceSize
      "___return (___arg1->size);")
   (define-c-lambda
      make-VkBufferCopy*
      (int)
      VkBufferCopy*
      "VkBufferCopy* vkbuffercopy = malloc(___arg1 * sizeof(VkBufferCopy));
      ___return (vkbuffercopy);")
   (define-c-lambda
      ref-VkBufferCopy
      (VkBufferCopy* int)
      VkBufferCopy*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBufferCopy
      ((pointer VkBufferCopy))
      VkBufferCopy
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBufferCopy
      (VkDeviceSize VkDeviceSize VkDeviceSize)
      VkBufferCopy*
      "VkBufferCopy *buffercopy = malloc(sizeof(VkBufferCopy));
buffercopy->srcOffset=___arg1;
buffercopy->dstOffset=___arg2;
buffercopy->size=___arg3;
___return (buffercopy);"))
(begin-ffi
   (make-VkSparseMemoryBind
      ptr->VkSparseMemoryBind
      ref-VkSparseMemoryBind
      make-VkSparseMemoryBind*
      VkSparseMemoryBindflags
      VkSparseMemoryBindmemoryOffset
      VkSparseMemoryBindmemory
      VkSparseMemoryBindsize
      VkSparseMemoryBindresourceOffset
      VkSparseMemoryBind
      VkSparseMemoryBind*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSparseMemoryBind (struct "VkSparseMemoryBind"))
   (c-define-type VkSparseMemoryBind* (pointer VkSparseMemoryBind))
   (define-c-lambda
      VkSparseMemoryBindresourceOffset
      (VkSparseMemoryBind*)
      VkDeviceSize
      "___return (___arg1->resourceOffset);")
   (define-c-lambda
      VkSparseMemoryBindsize
      (VkSparseMemoryBind*)
      VkDeviceSize
      "___return (___arg1->size);")
   (define-c-lambda
      VkSparseMemoryBindmemory
      (VkSparseMemoryBind*)
      VkDeviceMemory
      "___return (___arg1->memory);")
   (define-c-lambda
      VkSparseMemoryBindmemoryOffset
      (VkSparseMemoryBind*)
      VkDeviceSize
      "___return (___arg1->memoryOffset);")
   (define-c-lambda
      VkSparseMemoryBindflags
      (VkSparseMemoryBind*)
      VkSparseMemoryBindFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkSparseMemoryBind*
      (int)
      VkSparseMemoryBind*
      "VkSparseMemoryBind* vksparsememorybind = malloc(___arg1 * sizeof(VkSparseMemoryBind));
      ___return (vksparsememorybind);")
   (define-c-lambda
      ref-VkSparseMemoryBind
      (VkSparseMemoryBind* int)
      VkSparseMemoryBind*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSparseMemoryBind
      ((pointer VkSparseMemoryBind))
      VkSparseMemoryBind
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSparseMemoryBind
      (VkDeviceSize VkDeviceSize VkDeviceMemory VkDeviceSize VkSparseMemoryBindFlags)
      VkSparseMemoryBind*
      "VkSparseMemoryBind *sparsememorybind = malloc(sizeof(VkSparseMemoryBind));
sparsememorybind->resourceOffset=___arg1;
sparsememorybind->size=___arg2;
sparsememorybind->memory=___arg3;
sparsememorybind->memoryOffset=___arg4;
sparsememorybind->flags=___arg5;
___return (sparsememorybind);"))
(begin-ffi
   (make-VkSparseImageMemoryBind
      ptr->VkSparseImageMemoryBind
      ref-VkSparseImageMemoryBind
      make-VkSparseImageMemoryBind*
      VkSparseImageMemoryBindflags
      VkSparseImageMemoryBindmemoryOffset
      VkSparseImageMemoryBindmemory
      VkSparseImageMemoryBindextent
      VkSparseImageMemoryBindoffset
      VkSparseImageMemoryBindsubresource
      VkSparseImageMemoryBind
      VkSparseImageMemoryBind*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSparseImageMemoryBind (struct "VkSparseImageMemoryBind"))
   (c-define-type VkSparseImageMemoryBind* (pointer VkSparseImageMemoryBind))
   (define-c-lambda
      VkSparseImageMemoryBindsubresource
      (VkSparseImageMemoryBind*)
      VkImageSubresource
      "___return (___arg1->subresource);")
   (define-c-lambda
      VkSparseImageMemoryBindoffset
      (VkSparseImageMemoryBind*)
      VkOffset3D
      "___return (___arg1->offset);")
   (define-c-lambda
      VkSparseImageMemoryBindextent
      (VkSparseImageMemoryBind*)
      VkExtent3D
      "___return (___arg1->extent);")
   (define-c-lambda
      VkSparseImageMemoryBindmemory
      (VkSparseImageMemoryBind*)
      VkDeviceMemory
      "___return (___arg1->memory);")
   (define-c-lambda
      VkSparseImageMemoryBindmemoryOffset
      (VkSparseImageMemoryBind*)
      VkDeviceSize
      "___return (___arg1->memoryOffset);")
   (define-c-lambda
      VkSparseImageMemoryBindflags
      (VkSparseImageMemoryBind*)
      VkSparseMemoryBindFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkSparseImageMemoryBind*
      (int)
      VkSparseImageMemoryBind*
      "VkSparseImageMemoryBind* vksparseimagememorybind = malloc(___arg1 * sizeof(VkSparseImageMemoryBind));
      ___return (vksparseimagememorybind);")
   (define-c-lambda
      ref-VkSparseImageMemoryBind
      (VkSparseImageMemoryBind* int)
      VkSparseImageMemoryBind*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSparseImageMemoryBind
      ((pointer VkSparseImageMemoryBind))
      VkSparseImageMemoryBind
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSparseImageMemoryBind
      (VkImageSubresource
         VkOffset3D
         VkExtent3D
         VkDeviceMemory
         VkDeviceSize
         VkSparseMemoryBindFlags)
      VkSparseImageMemoryBind*
      "VkSparseImageMemoryBind *sparseimagememorybind = malloc(sizeof(VkSparseImageMemoryBind));
sparseimagememorybind->subresource=___arg1;
sparseimagememorybind->offset=___arg2;
sparseimagememorybind->extent=___arg3;
sparseimagememorybind->memory=___arg4;
sparseimagememorybind->memoryOffset=___arg5;
sparseimagememorybind->flags=___arg6;
___return (sparseimagememorybind);"))
(begin-ffi
   (make-VkSparseBufferMemoryBindInfo
      ptr->VkSparseBufferMemoryBindInfo
      ref-VkSparseBufferMemoryBindInfo
      make-VkSparseBufferMemoryBindInfo*
      VkSparseBufferMemoryBindInfopBinds
      VkSparseBufferMemoryBindInfobindCount
      VkSparseBufferMemoryBindInfobuffer
      VkSparseBufferMemoryBindInfo
      VkSparseBufferMemoryBindInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSparseBufferMemoryBindInfo (struct "VkSparseBufferMemoryBindInfo"))
   (c-define-type VkSparseBufferMemoryBindInfo* (pointer VkSparseBufferMemoryBindInfo))
   (define-c-lambda
      VkSparseBufferMemoryBindInfobuffer
      (VkSparseBufferMemoryBindInfo*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      VkSparseBufferMemoryBindInfobindCount
      (VkSparseBufferMemoryBindInfo*)
      uint32_t
      "___return (___arg1->bindCount);")
   (define-c-lambda
      VkSparseBufferMemoryBindInfopBinds
      (VkSparseBufferMemoryBindInfo*)
      VkSparseMemoryBind*
      "___return (___arg1->pBinds);")
   (define-c-lambda
      make-VkSparseBufferMemoryBindInfo*
      (int)
      VkSparseBufferMemoryBindInfo*
      "VkSparseBufferMemoryBindInfo* vksparsebuffermemorybindinfo = malloc(___arg1 * sizeof(VkSparseBufferMemoryBindInfo));
      ___return (vksparsebuffermemorybindinfo);")
   (define-c-lambda
      ref-VkSparseBufferMemoryBindInfo
      (VkSparseBufferMemoryBindInfo* int)
      VkSparseBufferMemoryBindInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSparseBufferMemoryBindInfo
      ((pointer VkSparseBufferMemoryBindInfo))
      VkSparseBufferMemoryBindInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSparseBufferMemoryBindInfo
      (VkBuffer uint32_t VkSparseMemoryBind*)
      VkSparseBufferMemoryBindInfo*
      "VkSparseBufferMemoryBindInfo *sparsebuffermemorybindinfo = malloc(sizeof(VkSparseBufferMemoryBindInfo));
sparsebuffermemorybindinfo->buffer=___arg1;
sparsebuffermemorybindinfo->bindCount=___arg2;
sparsebuffermemorybindinfo->pBinds=___arg3;
___return (sparsebuffermemorybindinfo);"))
(begin-ffi
   (make-VkSparseImageOpaqueMemoryBindInfo
      ptr->VkSparseImageOpaqueMemoryBindInfo
      ref-VkSparseImageOpaqueMemoryBindInfo
      make-VkSparseImageOpaqueMemoryBindInfo*
      VkSparseImageOpaqueMemoryBindInfopBinds
      VkSparseImageOpaqueMemoryBindInfobindCount
      VkSparseImageOpaqueMemoryBindInfoimage
      VkSparseImageOpaqueMemoryBindInfo
      VkSparseImageOpaqueMemoryBindInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSparseImageOpaqueMemoryBindInfo
      (struct "VkSparseImageOpaqueMemoryBindInfo"))
   (c-define-type
      VkSparseImageOpaqueMemoryBindInfo*
      (pointer VkSparseImageOpaqueMemoryBindInfo))
   (define-c-lambda
      VkSparseImageOpaqueMemoryBindInfoimage
      (VkSparseImageOpaqueMemoryBindInfo*)
      VkImage
      "___return (___arg1->image);")
   (define-c-lambda
      VkSparseImageOpaqueMemoryBindInfobindCount
      (VkSparseImageOpaqueMemoryBindInfo*)
      uint32_t
      "___return (___arg1->bindCount);")
   (define-c-lambda
      VkSparseImageOpaqueMemoryBindInfopBinds
      (VkSparseImageOpaqueMemoryBindInfo*)
      VkSparseMemoryBind*
      "___return (___arg1->pBinds);")
   (define-c-lambda
      make-VkSparseImageOpaqueMemoryBindInfo*
      (int)
      VkSparseImageOpaqueMemoryBindInfo*
      "VkSparseImageOpaqueMemoryBindInfo* vksparseimageopaquememorybindinfo = malloc(___arg1 * sizeof(VkSparseImageOpaqueMemoryBindInfo));
      ___return (vksparseimageopaquememorybindinfo);")
   (define-c-lambda
      ref-VkSparseImageOpaqueMemoryBindInfo
      (VkSparseImageOpaqueMemoryBindInfo* int)
      VkSparseImageOpaqueMemoryBindInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSparseImageOpaqueMemoryBindInfo
      ((pointer VkSparseImageOpaqueMemoryBindInfo))
      VkSparseImageOpaqueMemoryBindInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSparseImageOpaqueMemoryBindInfo
      (VkImage uint32_t VkSparseMemoryBind*)
      VkSparseImageOpaqueMemoryBindInfo*
      "VkSparseImageOpaqueMemoryBindInfo *sparseimageopaquememorybindinfo = malloc(sizeof(VkSparseImageOpaqueMemoryBindInfo));
sparseimageopaquememorybindinfo->image=___arg1;
sparseimageopaquememorybindinfo->bindCount=___arg2;
sparseimageopaquememorybindinfo->pBinds=___arg3;
___return (sparseimageopaquememorybindinfo);"))
(begin-ffi
   (make-VkSparseImageMemoryBindInfo
      ptr->VkSparseImageMemoryBindInfo
      ref-VkSparseImageMemoryBindInfo
      make-VkSparseImageMemoryBindInfo*
      VkSparseImageMemoryBindInfopBinds
      VkSparseImageMemoryBindInfobindCount
      VkSparseImageMemoryBindInfoimage
      VkSparseImageMemoryBindInfo
      VkSparseImageMemoryBindInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSparseImageMemoryBindInfo (struct "VkSparseImageMemoryBindInfo"))
   (c-define-type VkSparseImageMemoryBindInfo* (pointer VkSparseImageMemoryBindInfo))
   (define-c-lambda
      VkSparseImageMemoryBindInfoimage
      (VkSparseImageMemoryBindInfo*)
      VkImage
      "___return (___arg1->image);")
   (define-c-lambda
      VkSparseImageMemoryBindInfobindCount
      (VkSparseImageMemoryBindInfo*)
      uint32_t
      "___return (___arg1->bindCount);")
   (define-c-lambda
      VkSparseImageMemoryBindInfopBinds
      (VkSparseImageMemoryBindInfo*)
      VkSparseImageMemoryBind*
      "___return (___arg1->pBinds);")
   (define-c-lambda
      make-VkSparseImageMemoryBindInfo*
      (int)
      VkSparseImageMemoryBindInfo*
      "VkSparseImageMemoryBindInfo* vksparseimagememorybindinfo = malloc(___arg1 * sizeof(VkSparseImageMemoryBindInfo));
      ___return (vksparseimagememorybindinfo);")
   (define-c-lambda
      ref-VkSparseImageMemoryBindInfo
      (VkSparseImageMemoryBindInfo* int)
      VkSparseImageMemoryBindInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSparseImageMemoryBindInfo
      ((pointer VkSparseImageMemoryBindInfo))
      VkSparseImageMemoryBindInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSparseImageMemoryBindInfo
      (VkImage uint32_t VkSparseImageMemoryBind*)
      VkSparseImageMemoryBindInfo*
      "VkSparseImageMemoryBindInfo *sparseimagememorybindinfo = malloc(sizeof(VkSparseImageMemoryBindInfo));
sparseimagememorybindinfo->image=___arg1;
sparseimagememorybindinfo->bindCount=___arg2;
sparseimagememorybindinfo->pBinds=___arg3;
___return (sparseimagememorybindinfo);"))
(begin-ffi
   (make-VkBindSparseInfo
      ptr->VkBindSparseInfo
      ref-VkBindSparseInfo
      make-VkBindSparseInfo*
      VkBindSparseInfopSignalSemaphores
      VkBindSparseInfosignalSemaphoreCount
      VkBindSparseInfopImageBinds
      VkBindSparseInfoimageBindCount
      VkBindSparseInfopImageOpaqueBinds
      VkBindSparseInfoimageOpaqueBindCount
      VkBindSparseInfopBufferBinds
      VkBindSparseInfobufferBindCount
      VkBindSparseInfopWaitSemaphores
      VkBindSparseInfowaitSemaphoreCount
      VkBindSparseInfopNext
      VkBindSparseInfosType
      VkBindSparseInfo
      VkBindSparseInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBindSparseInfo (struct "VkBindSparseInfo"))
   (c-define-type VkBindSparseInfo* (pointer VkBindSparseInfo))
   (define-c-lambda
      VkBindSparseInfosType
      (VkBindSparseInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBindSparseInfopNext
      (VkBindSparseInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBindSparseInfowaitSemaphoreCount
      (VkBindSparseInfo*)
      uint32_t
      "___return (___arg1->waitSemaphoreCount);")
   (define-c-lambda
      VkBindSparseInfopWaitSemaphores
      (VkBindSparseInfo*)
      VkSemaphore*
      "___return (___arg1->pWaitSemaphores);")
   (define-c-lambda
      VkBindSparseInfobufferBindCount
      (VkBindSparseInfo*)
      uint32_t
      "___return (___arg1->bufferBindCount);")
   (define-c-lambda
      VkBindSparseInfopBufferBinds
      (VkBindSparseInfo*)
      VkSparseBufferMemoryBindInfo*
      "___return (___arg1->pBufferBinds);")
   (define-c-lambda
      VkBindSparseInfoimageOpaqueBindCount
      (VkBindSparseInfo*)
      uint32_t
      "___return (___arg1->imageOpaqueBindCount);")
   (define-c-lambda
      VkBindSparseInfopImageOpaqueBinds
      (VkBindSparseInfo*)
      VkSparseImageOpaqueMemoryBindInfo*
      "___return (___arg1->pImageOpaqueBinds);")
   (define-c-lambda
      VkBindSparseInfoimageBindCount
      (VkBindSparseInfo*)
      uint32_t
      "___return (___arg1->imageBindCount);")
   (define-c-lambda
      VkBindSparseInfopImageBinds
      (VkBindSparseInfo*)
      VkSparseImageMemoryBindInfo*
      "___return (___arg1->pImageBinds);")
   (define-c-lambda
      VkBindSparseInfosignalSemaphoreCount
      (VkBindSparseInfo*)
      uint32_t
      "___return (___arg1->signalSemaphoreCount);")
   (define-c-lambda
      VkBindSparseInfopSignalSemaphores
      (VkBindSparseInfo*)
      VkSemaphore*
      "___return (___arg1->pSignalSemaphores);")
   (define-c-lambda
      make-VkBindSparseInfo*
      (int)
      VkBindSparseInfo*
      "VkBindSparseInfo* vkbindsparseinfo = malloc(___arg1 * sizeof(VkBindSparseInfo));
      ___return (vkbindsparseinfo);")
   (define-c-lambda
      ref-VkBindSparseInfo
      (VkBindSparseInfo* int)
      VkBindSparseInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBindSparseInfo
      ((pointer VkBindSparseInfo))
      VkBindSparseInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBindSparseInfo
      (void*
         uint32_t
         VkSemaphore*
         uint32_t
         VkSparseBufferMemoryBindInfo*
         uint32_t
         VkSparseImageOpaqueMemoryBindInfo*
         uint32_t
         VkSparseImageMemoryBindInfo*
         uint32_t
         VkSemaphore*)
      VkBindSparseInfo*
      "VkBindSparseInfo *bindsparseinfo = malloc(sizeof(VkBindSparseInfo));
bindsparseinfo->sType=VK_STRUCTURE_TYPE_BIND_SPARSE_INFO;
bindsparseinfo->pNext=___arg1;
bindsparseinfo->waitSemaphoreCount=___arg2;
bindsparseinfo->pWaitSemaphores=___arg3;
bindsparseinfo->bufferBindCount=___arg4;
bindsparseinfo->pBufferBinds=___arg5;
bindsparseinfo->imageOpaqueBindCount=___arg6;
bindsparseinfo->pImageOpaqueBinds=___arg7;
bindsparseinfo->imageBindCount=___arg8;
bindsparseinfo->pImageBinds=___arg9;
bindsparseinfo->signalSemaphoreCount=___arg10;
bindsparseinfo->pSignalSemaphores=___arg11;
___return (bindsparseinfo);"))
(begin-ffi
   (make-VkImageCopy
      ptr->VkImageCopy
      ref-VkImageCopy
      make-VkImageCopy*
      VkImageCopyextent
      VkImageCopydstOffset
      VkImageCopydstSubresource
      VkImageCopysrcOffset
      VkImageCopysrcSubresource
      VkImageCopy
      VkImageCopy*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageCopy (struct "VkImageCopy"))
   (c-define-type VkImageCopy* (pointer VkImageCopy))
   (define-c-lambda
      VkImageCopysrcSubresource
      (VkImageCopy*)
      VkImageSubresourceLayers
      "___return (___arg1->srcSubresource);")
   (define-c-lambda
      VkImageCopysrcOffset
      (VkImageCopy*)
      VkOffset3D
      "___return (___arg1->srcOffset);")
   (define-c-lambda
      VkImageCopydstSubresource
      (VkImageCopy*)
      VkImageSubresourceLayers
      "___return (___arg1->dstSubresource);")
   (define-c-lambda
      VkImageCopydstOffset
      (VkImageCopy*)
      VkOffset3D
      "___return (___arg1->dstOffset);")
   (define-c-lambda
      VkImageCopyextent
      (VkImageCopy*)
      VkExtent3D
      "___return (___arg1->extent);")
   (define-c-lambda
      make-VkImageCopy*
      (int)
      VkImageCopy*
      "VkImageCopy* vkimagecopy = malloc(___arg1 * sizeof(VkImageCopy));
      ___return (vkimagecopy);")
   (define-c-lambda
      ref-VkImageCopy
      (VkImageCopy* int)
      VkImageCopy*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageCopy
      ((pointer VkImageCopy))
      VkImageCopy
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageCopy
      (VkImageSubresourceLayers VkOffset3D VkImageSubresourceLayers VkOffset3D VkExtent3D)
      VkImageCopy*
      "VkImageCopy *imagecopy = malloc(sizeof(VkImageCopy));
imagecopy->srcSubresource=___arg1;
imagecopy->srcOffset=___arg2;
imagecopy->dstSubresource=___arg3;
imagecopy->dstOffset=___arg4;
imagecopy->extent=___arg5;
___return (imagecopy);"))
(begin-ffi
   (make-VkImageBlit
      ptr->VkImageBlit
      ref-VkImageBlit
      make-VkImageBlit*
      VkImageBlitdstOffsets
      VkImageBlitdstSubresource
      VkImageBlitsrcOffsets
      VkImageBlitsrcSubresource
      VkImageBlit
      VkImageBlit*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageBlit (struct "VkImageBlit"))
   (c-define-type VkImageBlit* (pointer VkImageBlit))
   (define-c-lambda
      VkImageBlitsrcSubresource
      (VkImageBlit*)
      VkImageSubresourceLayers
      "___return (___arg1->srcSubresource);")
   (define-c-lambda
      VkImageBlitsrcOffsets
      (VkImageBlit*)
      VkOffset3D*
      "___return (___arg1->srcOffsets);")
   (define-c-lambda
      VkImageBlitdstSubresource
      (VkImageBlit*)
      VkImageSubresourceLayers
      "___return (___arg1->dstSubresource);")
   (define-c-lambda
      VkImageBlitdstOffsets
      (VkImageBlit*)
      VkOffset3D*
      "___return (___arg1->dstOffsets);")
   (define-c-lambda
      make-VkImageBlit*
      (int)
      VkImageBlit*
      "VkImageBlit* vkimageblit = malloc(___arg1 * sizeof(VkImageBlit));
      ___return (vkimageblit);")
   (define-c-lambda
      ref-VkImageBlit
      (VkImageBlit* int)
      VkImageBlit*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageBlit
      ((pointer VkImageBlit))
      VkImageBlit
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageBlit
      (VkImageSubresourceLayers VkOffset3D* VkImageSubresourceLayers VkOffset3D*)
      VkImageBlit*
      "VkImageBlit *imageblit = malloc(sizeof(VkImageBlit));
imageblit->srcSubresource=___arg1;
memcpy(imageblit->srcOffsets,___arg2,sizeof(___arg2));
imageblit->dstSubresource=___arg3;
memcpy(imageblit->dstOffsets,___arg4,sizeof(___arg4));
___return (imageblit);"))
(begin-ffi
   (make-VkBufferImageCopy
      ptr->VkBufferImageCopy
      ref-VkBufferImageCopy
      make-VkBufferImageCopy*
      VkBufferImageCopyimageExtent
      VkBufferImageCopyimageOffset
      VkBufferImageCopyimageSubresource
      VkBufferImageCopybufferImageHeight
      VkBufferImageCopybufferRowLength
      VkBufferImageCopybufferOffset
      VkBufferImageCopy
      VkBufferImageCopy*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBufferImageCopy (struct "VkBufferImageCopy"))
   (c-define-type VkBufferImageCopy* (pointer VkBufferImageCopy))
   (define-c-lambda
      VkBufferImageCopybufferOffset
      (VkBufferImageCopy*)
      VkDeviceSize
      "___return (___arg1->bufferOffset);")
   (define-c-lambda
      VkBufferImageCopybufferRowLength
      (VkBufferImageCopy*)
      uint32_t
      "___return (___arg1->bufferRowLength);")
   (define-c-lambda
      VkBufferImageCopybufferImageHeight
      (VkBufferImageCopy*)
      uint32_t
      "___return (___arg1->bufferImageHeight);")
   (define-c-lambda
      VkBufferImageCopyimageSubresource
      (VkBufferImageCopy*)
      VkImageSubresourceLayers
      "___return (___arg1->imageSubresource);")
   (define-c-lambda
      VkBufferImageCopyimageOffset
      (VkBufferImageCopy*)
      VkOffset3D
      "___return (___arg1->imageOffset);")
   (define-c-lambda
      VkBufferImageCopyimageExtent
      (VkBufferImageCopy*)
      VkExtent3D
      "___return (___arg1->imageExtent);")
   (define-c-lambda
      make-VkBufferImageCopy*
      (int)
      VkBufferImageCopy*
      "VkBufferImageCopy* vkbufferimagecopy = malloc(___arg1 * sizeof(VkBufferImageCopy));
      ___return (vkbufferimagecopy);")
   (define-c-lambda
      ref-VkBufferImageCopy
      (VkBufferImageCopy* int)
      VkBufferImageCopy*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBufferImageCopy
      ((pointer VkBufferImageCopy))
      VkBufferImageCopy
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBufferImageCopy
      (VkDeviceSize uint32_t uint32_t VkImageSubresourceLayers VkOffset3D VkExtent3D)
      VkBufferImageCopy*
      "VkBufferImageCopy *bufferimagecopy = malloc(sizeof(VkBufferImageCopy));
bufferimagecopy->bufferOffset=___arg1;
bufferimagecopy->bufferRowLength=___arg2;
bufferimagecopy->bufferImageHeight=___arg3;
bufferimagecopy->imageSubresource=___arg4;
bufferimagecopy->imageOffset=___arg5;
bufferimagecopy->imageExtent=___arg6;
___return (bufferimagecopy);"))
(begin-ffi
   (make-VkImageResolve
      ptr->VkImageResolve
      ref-VkImageResolve
      make-VkImageResolve*
      VkImageResolveextent
      VkImageResolvedstOffset
      VkImageResolvedstSubresource
      VkImageResolvesrcOffset
      VkImageResolvesrcSubresource
      VkImageResolve
      VkImageResolve*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageResolve (struct "VkImageResolve"))
   (c-define-type VkImageResolve* (pointer VkImageResolve))
   (define-c-lambda
      VkImageResolvesrcSubresource
      (VkImageResolve*)
      VkImageSubresourceLayers
      "___return (___arg1->srcSubresource);")
   (define-c-lambda
      VkImageResolvesrcOffset
      (VkImageResolve*)
      VkOffset3D
      "___return (___arg1->srcOffset);")
   (define-c-lambda
      VkImageResolvedstSubresource
      (VkImageResolve*)
      VkImageSubresourceLayers
      "___return (___arg1->dstSubresource);")
   (define-c-lambda
      VkImageResolvedstOffset
      (VkImageResolve*)
      VkOffset3D
      "___return (___arg1->dstOffset);")
   (define-c-lambda
      VkImageResolveextent
      (VkImageResolve*)
      VkExtent3D
      "___return (___arg1->extent);")
   (define-c-lambda
      make-VkImageResolve*
      (int)
      VkImageResolve*
      "VkImageResolve* vkimageresolve = malloc(___arg1 * sizeof(VkImageResolve));
      ___return (vkimageresolve);")
   (define-c-lambda
      ref-VkImageResolve
      (VkImageResolve* int)
      VkImageResolve*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageResolve
      ((pointer VkImageResolve))
      VkImageResolve
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageResolve
      (VkImageSubresourceLayers VkOffset3D VkImageSubresourceLayers VkOffset3D VkExtent3D)
      VkImageResolve*
      "VkImageResolve *imageresolve = malloc(sizeof(VkImageResolve));
imageresolve->srcSubresource=___arg1;
imageresolve->srcOffset=___arg2;
imageresolve->dstSubresource=___arg3;
imageresolve->dstOffset=___arg4;
imageresolve->extent=___arg5;
___return (imageresolve);"))
(begin-ffi
   (make-VkShaderModuleCreateInfo
      ptr->VkShaderModuleCreateInfo
      ref-VkShaderModuleCreateInfo
      make-VkShaderModuleCreateInfo*
      VkShaderModuleCreateInfopCode
      VkShaderModuleCreateInfocodeSize
      VkShaderModuleCreateInfoflags
      VkShaderModuleCreateInfopNext
      VkShaderModuleCreateInfosType
      VkShaderModuleCreateInfo
      VkShaderModuleCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkShaderModuleCreateInfo (struct "VkShaderModuleCreateInfo"))
   (c-define-type VkShaderModuleCreateInfo* (pointer VkShaderModuleCreateInfo))
   (define-c-lambda
      VkShaderModuleCreateInfosType
      (VkShaderModuleCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkShaderModuleCreateInfopNext
      (VkShaderModuleCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkShaderModuleCreateInfoflags
      (VkShaderModuleCreateInfo*)
      VkShaderModuleCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkShaderModuleCreateInfocodeSize
      (VkShaderModuleCreateInfo*)
      size_t
      "___return (___arg1->codeSize);")
   (define-c-lambda
      VkShaderModuleCreateInfopCode
      (VkShaderModuleCreateInfo*)
      uint32_t*
      "___return (___arg1->pCode);")
   (define-c-lambda
      make-VkShaderModuleCreateInfo*
      (int)
      VkShaderModuleCreateInfo*
      "VkShaderModuleCreateInfo* vkshadermodulecreateinfo = malloc(___arg1 * sizeof(VkShaderModuleCreateInfo));
      ___return (vkshadermodulecreateinfo);")
   (define-c-lambda
      ref-VkShaderModuleCreateInfo
      (VkShaderModuleCreateInfo* int)
      VkShaderModuleCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkShaderModuleCreateInfo
      ((pointer VkShaderModuleCreateInfo))
      VkShaderModuleCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkShaderModuleCreateInfo
      (void* VkShaderModuleCreateFlags size_t uint32_t*)
      VkShaderModuleCreateInfo*
      "VkShaderModuleCreateInfo *shadermodulecreateinfo = malloc(sizeof(VkShaderModuleCreateInfo));
shadermodulecreateinfo->sType=VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
shadermodulecreateinfo->pNext=___arg1;
shadermodulecreateinfo->flags=___arg2;
shadermodulecreateinfo->codeSize=___arg3;
shadermodulecreateinfo->pCode=___arg4;
___return (shadermodulecreateinfo);"))
(begin-ffi
   (make-VkDescriptorSetLayoutBinding
      ptr->VkDescriptorSetLayoutBinding
      ref-VkDescriptorSetLayoutBinding
      make-VkDescriptorSetLayoutBinding*
      VkDescriptorSetLayoutBindingpImmutableSamplers
      VkDescriptorSetLayoutBindingstageFlags
      VkDescriptorSetLayoutBindingdescriptorCount
      VkDescriptorSetLayoutBindingdescriptorType
      VkDescriptorSetLayoutBindingbinding
      VkDescriptorSetLayoutBinding
      VkDescriptorSetLayoutBinding*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDescriptorSetLayoutBinding (struct "VkDescriptorSetLayoutBinding"))
   (c-define-type VkDescriptorSetLayoutBinding* (pointer VkDescriptorSetLayoutBinding))
   (define-c-lambda
      VkDescriptorSetLayoutBindingbinding
      (VkDescriptorSetLayoutBinding*)
      uint32_t
      "___return (___arg1->binding);")
   (define-c-lambda
      VkDescriptorSetLayoutBindingdescriptorType
      (VkDescriptorSetLayoutBinding*)
      VkDescriptorType
      "___return (___arg1->descriptorType);")
   (define-c-lambda
      VkDescriptorSetLayoutBindingdescriptorCount
      (VkDescriptorSetLayoutBinding*)
      uint32_t
      "___return (___arg1->descriptorCount);")
   (define-c-lambda
      VkDescriptorSetLayoutBindingstageFlags
      (VkDescriptorSetLayoutBinding*)
      VkShaderStageFlags
      "___return (___arg1->stageFlags);")
   (define-c-lambda
      VkDescriptorSetLayoutBindingpImmutableSamplers
      (VkDescriptorSetLayoutBinding*)
      VkSampler*
      "___return (___arg1->pImmutableSamplers);")
   (define-c-lambda
      make-VkDescriptorSetLayoutBinding*
      (int)
      VkDescriptorSetLayoutBinding*
      "VkDescriptorSetLayoutBinding* vkdescriptorsetlayoutbinding = malloc(___arg1 * sizeof(VkDescriptorSetLayoutBinding));
      ___return (vkdescriptorsetlayoutbinding);")
   (define-c-lambda
      ref-VkDescriptorSetLayoutBinding
      (VkDescriptorSetLayoutBinding* int)
      VkDescriptorSetLayoutBinding*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorSetLayoutBinding
      ((pointer VkDescriptorSetLayoutBinding))
      VkDescriptorSetLayoutBinding
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorSetLayoutBinding
      (uint32_t VkDescriptorType uint32_t VkShaderStageFlags VkSampler*)
      VkDescriptorSetLayoutBinding*
      "VkDescriptorSetLayoutBinding *descriptorsetlayoutbinding = malloc(sizeof(VkDescriptorSetLayoutBinding));
descriptorsetlayoutbinding->binding=___arg1;
descriptorsetlayoutbinding->descriptorType=___arg2;
descriptorsetlayoutbinding->descriptorCount=___arg3;
descriptorsetlayoutbinding->stageFlags=___arg4;
descriptorsetlayoutbinding->pImmutableSamplers=___arg5;
___return (descriptorsetlayoutbinding);"))
(begin-ffi
   (make-VkDescriptorSetLayoutCreateInfo
      ptr->VkDescriptorSetLayoutCreateInfo
      ref-VkDescriptorSetLayoutCreateInfo
      make-VkDescriptorSetLayoutCreateInfo*
      VkDescriptorSetLayoutCreateInfopBindings
      VkDescriptorSetLayoutCreateInfobindingCount
      VkDescriptorSetLayoutCreateInfoflags
      VkDescriptorSetLayoutCreateInfopNext
      VkDescriptorSetLayoutCreateInfosType
      VkDescriptorSetLayoutCreateInfo
      VkDescriptorSetLayoutCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDescriptorSetLayoutCreateInfo
      (struct "VkDescriptorSetLayoutCreateInfo"))
   (c-define-type
      VkDescriptorSetLayoutCreateInfo*
      (pointer VkDescriptorSetLayoutCreateInfo))
   (define-c-lambda
      VkDescriptorSetLayoutCreateInfosType
      (VkDescriptorSetLayoutCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDescriptorSetLayoutCreateInfopNext
      (VkDescriptorSetLayoutCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDescriptorSetLayoutCreateInfoflags
      (VkDescriptorSetLayoutCreateInfo*)
      VkDescriptorSetLayoutCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDescriptorSetLayoutCreateInfobindingCount
      (VkDescriptorSetLayoutCreateInfo*)
      uint32_t
      "___return (___arg1->bindingCount);")
   (define-c-lambda
      VkDescriptorSetLayoutCreateInfopBindings
      (VkDescriptorSetLayoutCreateInfo*)
      VkDescriptorSetLayoutBinding*
      "___return (___arg1->pBindings);")
   (define-c-lambda
      make-VkDescriptorSetLayoutCreateInfo*
      (int)
      VkDescriptorSetLayoutCreateInfo*
      "VkDescriptorSetLayoutCreateInfo* vkdescriptorsetlayoutcreateinfo = malloc(___arg1 * sizeof(VkDescriptorSetLayoutCreateInfo));
      ___return (vkdescriptorsetlayoutcreateinfo);")
   (define-c-lambda
      ref-VkDescriptorSetLayoutCreateInfo
      (VkDescriptorSetLayoutCreateInfo* int)
      VkDescriptorSetLayoutCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorSetLayoutCreateInfo
      ((pointer VkDescriptorSetLayoutCreateInfo))
      VkDescriptorSetLayoutCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorSetLayoutCreateInfo
      (void* VkDescriptorSetLayoutCreateFlags uint32_t VkDescriptorSetLayoutBinding*)
      VkDescriptorSetLayoutCreateInfo*
      "VkDescriptorSetLayoutCreateInfo *descriptorsetlayoutcreateinfo = malloc(sizeof(VkDescriptorSetLayoutCreateInfo));
descriptorsetlayoutcreateinfo->sType=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
descriptorsetlayoutcreateinfo->pNext=___arg1;
descriptorsetlayoutcreateinfo->flags=___arg2;
descriptorsetlayoutcreateinfo->bindingCount=___arg3;
descriptorsetlayoutcreateinfo->pBindings=___arg4;
___return (descriptorsetlayoutcreateinfo);"))
(begin-ffi
   (make-VkDescriptorPoolSize
      ptr->VkDescriptorPoolSize
      ref-VkDescriptorPoolSize
      make-VkDescriptorPoolSize*
      VkDescriptorPoolSizedescriptorCount
      VkDescriptorPoolSizetype
      VkDescriptorPoolSize
      VkDescriptorPoolSize*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDescriptorPoolSize (struct "VkDescriptorPoolSize"))
   (c-define-type VkDescriptorPoolSize* (pointer VkDescriptorPoolSize))
   (define-c-lambda
      VkDescriptorPoolSizetype
      (VkDescriptorPoolSize*)
      VkDescriptorType
      "___return (___arg1->type);")
   (define-c-lambda
      VkDescriptorPoolSizedescriptorCount
      (VkDescriptorPoolSize*)
      uint32_t
      "___return (___arg1->descriptorCount);")
   (define-c-lambda
      make-VkDescriptorPoolSize*
      (int)
      VkDescriptorPoolSize*
      "VkDescriptorPoolSize* vkdescriptorpoolsize = malloc(___arg1 * sizeof(VkDescriptorPoolSize));
      ___return (vkdescriptorpoolsize);")
   (define-c-lambda
      ref-VkDescriptorPoolSize
      (VkDescriptorPoolSize* int)
      VkDescriptorPoolSize*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorPoolSize
      ((pointer VkDescriptorPoolSize))
      VkDescriptorPoolSize
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorPoolSize
      (VkDescriptorType uint32_t)
      VkDescriptorPoolSize*
      "VkDescriptorPoolSize *descriptorpoolsize = malloc(sizeof(VkDescriptorPoolSize));
descriptorpoolsize->type=___arg1;
descriptorpoolsize->descriptorCount=___arg2;
___return (descriptorpoolsize);"))
(begin-ffi
   (make-VkDescriptorPoolCreateInfo
      ptr->VkDescriptorPoolCreateInfo
      ref-VkDescriptorPoolCreateInfo
      make-VkDescriptorPoolCreateInfo*
      VkDescriptorPoolCreateInfopPoolSizes
      VkDescriptorPoolCreateInfopoolSizeCount
      VkDescriptorPoolCreateInfomaxSets
      VkDescriptorPoolCreateInfoflags
      VkDescriptorPoolCreateInfopNext
      VkDescriptorPoolCreateInfosType
      VkDescriptorPoolCreateInfo
      VkDescriptorPoolCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDescriptorPoolCreateInfo (struct "VkDescriptorPoolCreateInfo"))
   (c-define-type VkDescriptorPoolCreateInfo* (pointer VkDescriptorPoolCreateInfo))
   (define-c-lambda
      VkDescriptorPoolCreateInfosType
      (VkDescriptorPoolCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDescriptorPoolCreateInfopNext
      (VkDescriptorPoolCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDescriptorPoolCreateInfoflags
      (VkDescriptorPoolCreateInfo*)
      VkDescriptorPoolCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDescriptorPoolCreateInfomaxSets
      (VkDescriptorPoolCreateInfo*)
      uint32_t
      "___return (___arg1->maxSets);")
   (define-c-lambda
      VkDescriptorPoolCreateInfopoolSizeCount
      (VkDescriptorPoolCreateInfo*)
      uint32_t
      "___return (___arg1->poolSizeCount);")
   (define-c-lambda
      VkDescriptorPoolCreateInfopPoolSizes
      (VkDescriptorPoolCreateInfo*)
      VkDescriptorPoolSize*
      "___return (___arg1->pPoolSizes);")
   (define-c-lambda
      make-VkDescriptorPoolCreateInfo*
      (int)
      VkDescriptorPoolCreateInfo*
      "VkDescriptorPoolCreateInfo* vkdescriptorpoolcreateinfo = malloc(___arg1 * sizeof(VkDescriptorPoolCreateInfo));
      ___return (vkdescriptorpoolcreateinfo);")
   (define-c-lambda
      ref-VkDescriptorPoolCreateInfo
      (VkDescriptorPoolCreateInfo* int)
      VkDescriptorPoolCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorPoolCreateInfo
      ((pointer VkDescriptorPoolCreateInfo))
      VkDescriptorPoolCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorPoolCreateInfo
      (void* VkDescriptorPoolCreateFlags uint32_t uint32_t VkDescriptorPoolSize*)
      VkDescriptorPoolCreateInfo*
      "VkDescriptorPoolCreateInfo *descriptorpoolcreateinfo = malloc(sizeof(VkDescriptorPoolCreateInfo));
descriptorpoolcreateinfo->sType=VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
descriptorpoolcreateinfo->pNext=___arg1;
descriptorpoolcreateinfo->flags=___arg2;
descriptorpoolcreateinfo->maxSets=___arg3;
descriptorpoolcreateinfo->poolSizeCount=___arg4;
descriptorpoolcreateinfo->pPoolSizes=___arg5;
___return (descriptorpoolcreateinfo);"))
(begin-ffi
   (make-VkDescriptorSetAllocateInfo
      ptr->VkDescriptorSetAllocateInfo
      ref-VkDescriptorSetAllocateInfo
      make-VkDescriptorSetAllocateInfo*
      VkDescriptorSetAllocateInfopSetLayouts
      VkDescriptorSetAllocateInfodescriptorSetCount
      VkDescriptorSetAllocateInfodescriptorPool
      VkDescriptorSetAllocateInfopNext
      VkDescriptorSetAllocateInfosType
      VkDescriptorSetAllocateInfo
      VkDescriptorSetAllocateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDescriptorSetAllocateInfo (struct "VkDescriptorSetAllocateInfo"))
   (c-define-type VkDescriptorSetAllocateInfo* (pointer VkDescriptorSetAllocateInfo))
   (define-c-lambda
      VkDescriptorSetAllocateInfosType
      (VkDescriptorSetAllocateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDescriptorSetAllocateInfopNext
      (VkDescriptorSetAllocateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDescriptorSetAllocateInfodescriptorPool
      (VkDescriptorSetAllocateInfo*)
      VkDescriptorPool
      "___return (___arg1->descriptorPool);")
   (define-c-lambda
      VkDescriptorSetAllocateInfodescriptorSetCount
      (VkDescriptorSetAllocateInfo*)
      uint32_t
      "___return (___arg1->descriptorSetCount);")
   (define-c-lambda
      VkDescriptorSetAllocateInfopSetLayouts
      (VkDescriptorSetAllocateInfo*)
      VkDescriptorSetLayout*
      "___return (___arg1->pSetLayouts);")
   (define-c-lambda
      make-VkDescriptorSetAllocateInfo*
      (int)
      VkDescriptorSetAllocateInfo*
      "VkDescriptorSetAllocateInfo* vkdescriptorsetallocateinfo = malloc(___arg1 * sizeof(VkDescriptorSetAllocateInfo));
      ___return (vkdescriptorsetallocateinfo);")
   (define-c-lambda
      ref-VkDescriptorSetAllocateInfo
      (VkDescriptorSetAllocateInfo* int)
      VkDescriptorSetAllocateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorSetAllocateInfo
      ((pointer VkDescriptorSetAllocateInfo))
      VkDescriptorSetAllocateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorSetAllocateInfo
      (void* VkDescriptorPool uint32_t VkDescriptorSetLayout*)
      VkDescriptorSetAllocateInfo*
      "VkDescriptorSetAllocateInfo *descriptorsetallocateinfo = malloc(sizeof(VkDescriptorSetAllocateInfo));
descriptorsetallocateinfo->sType=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
descriptorsetallocateinfo->pNext=___arg1;
descriptorsetallocateinfo->descriptorPool=___arg2;
descriptorsetallocateinfo->descriptorSetCount=___arg3;
descriptorsetallocateinfo->pSetLayouts=___arg4;
___return (descriptorsetallocateinfo);"))
(begin-ffi
   (make-VkSpecializationMapEntry
      ptr->VkSpecializationMapEntry
      ref-VkSpecializationMapEntry
      make-VkSpecializationMapEntry*
      VkSpecializationMapEntrysize
      VkSpecializationMapEntryoffset
      VkSpecializationMapEntryconstantID
      VkSpecializationMapEntry
      VkSpecializationMapEntry*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSpecializationMapEntry (struct "VkSpecializationMapEntry"))
   (c-define-type VkSpecializationMapEntry* (pointer VkSpecializationMapEntry))
   (define-c-lambda
      VkSpecializationMapEntryconstantID
      (VkSpecializationMapEntry*)
      uint32_t
      "___return (___arg1->constantID);")
   (define-c-lambda
      VkSpecializationMapEntryoffset
      (VkSpecializationMapEntry*)
      uint32_t
      "___return (___arg1->offset);")
   (define-c-lambda
      VkSpecializationMapEntrysize
      (VkSpecializationMapEntry*)
      size_t
      "___return (___arg1->size);")
   (define-c-lambda
      make-VkSpecializationMapEntry*
      (int)
      VkSpecializationMapEntry*
      "VkSpecializationMapEntry* vkspecializationmapentry = malloc(___arg1 * sizeof(VkSpecializationMapEntry));
      ___return (vkspecializationmapentry);")
   (define-c-lambda
      ref-VkSpecializationMapEntry
      (VkSpecializationMapEntry* int)
      VkSpecializationMapEntry*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSpecializationMapEntry
      ((pointer VkSpecializationMapEntry))
      VkSpecializationMapEntry
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSpecializationMapEntry
      (uint32_t uint32_t size_t)
      VkSpecializationMapEntry*
      "VkSpecializationMapEntry *specializationmapentry = malloc(sizeof(VkSpecializationMapEntry));
specializationmapentry->constantID=___arg1;
specializationmapentry->offset=___arg2;
specializationmapentry->size=___arg3;
___return (specializationmapentry);"))
(begin-ffi
   (make-VkSpecializationInfo
      ptr->VkSpecializationInfo
      ref-VkSpecializationInfo
      make-VkSpecializationInfo*
      VkSpecializationInfopData
      VkSpecializationInfodataSize
      VkSpecializationInfopMapEntries
      VkSpecializationInfomapEntryCount
      VkSpecializationInfo
      VkSpecializationInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSpecializationInfo (struct "VkSpecializationInfo"))
   (c-define-type VkSpecializationInfo* (pointer VkSpecializationInfo))
   (define-c-lambda
      VkSpecializationInfomapEntryCount
      (VkSpecializationInfo*)
      uint32_t
      "___return (___arg1->mapEntryCount);")
   (define-c-lambda
      VkSpecializationInfopMapEntries
      (VkSpecializationInfo*)
      VkSpecializationMapEntry*
      "___return (___arg1->pMapEntries);")
   (define-c-lambda
      VkSpecializationInfodataSize
      (VkSpecializationInfo*)
      size_t
      "___return (___arg1->dataSize);")
   (define-c-lambda
      VkSpecializationInfopData
      (VkSpecializationInfo*)
      void*
      "___return (___arg1->pData);")
   (define-c-lambda
      make-VkSpecializationInfo*
      (int)
      VkSpecializationInfo*
      "VkSpecializationInfo* vkspecializationinfo = malloc(___arg1 * sizeof(VkSpecializationInfo));
      ___return (vkspecializationinfo);")
   (define-c-lambda
      ref-VkSpecializationInfo
      (VkSpecializationInfo* int)
      VkSpecializationInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSpecializationInfo
      ((pointer VkSpecializationInfo))
      VkSpecializationInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSpecializationInfo
      (uint32_t VkSpecializationMapEntry* size_t void*)
      VkSpecializationInfo*
      "VkSpecializationInfo *specializationinfo = malloc(sizeof(VkSpecializationInfo));
specializationinfo->mapEntryCount=___arg1;
specializationinfo->pMapEntries=___arg2;
specializationinfo->dataSize=___arg3;
specializationinfo->pData=___arg4;
___return (specializationinfo);"))
(begin-ffi
   (make-VkPipelineShaderStageCreateInfo
      ptr->VkPipelineShaderStageCreateInfo
      ref-VkPipelineShaderStageCreateInfo
      make-VkPipelineShaderStageCreateInfo*
      VkPipelineShaderStageCreateInfopSpecializationInfo
      VkPipelineShaderStageCreateInfopName
      VkPipelineShaderStageCreateInfomodule
      VkPipelineShaderStageCreateInfostage
      VkPipelineShaderStageCreateInfoflags
      VkPipelineShaderStageCreateInfopNext
      VkPipelineShaderStageCreateInfosType
      VkPipelineShaderStageCreateInfo
      VkPipelineShaderStageCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineShaderStageCreateInfo
      (struct "VkPipelineShaderStageCreateInfo"))
   (c-define-type
      VkPipelineShaderStageCreateInfo*
      (pointer VkPipelineShaderStageCreateInfo))
   (define-c-lambda
      VkPipelineShaderStageCreateInfosType
      (VkPipelineShaderStageCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineShaderStageCreateInfopNext
      (VkPipelineShaderStageCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineShaderStageCreateInfoflags
      (VkPipelineShaderStageCreateInfo*)
      VkPipelineShaderStageCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineShaderStageCreateInfostage
      (VkPipelineShaderStageCreateInfo*)
      VkShaderStageFlagBits
      "___return (___arg1->stage);")
   (define-c-lambda
      VkPipelineShaderStageCreateInfomodule
      (VkPipelineShaderStageCreateInfo*)
      VkShaderModule
      "___return (___arg1->module);")
   (define-c-lambda
      VkPipelineShaderStageCreateInfopName
      (VkPipelineShaderStageCreateInfo*)
      char*
      "___return (___arg1->pName);")
   (define-c-lambda
      VkPipelineShaderStageCreateInfopSpecializationInfo
      (VkPipelineShaderStageCreateInfo*)
      VkSpecializationInfo*
      "___return (___arg1->pSpecializationInfo);")
   (define-c-lambda
      make-VkPipelineShaderStageCreateInfo*
      (int)
      VkPipelineShaderStageCreateInfo*
      "VkPipelineShaderStageCreateInfo* vkpipelineshaderstagecreateinfo = malloc(___arg1 * sizeof(VkPipelineShaderStageCreateInfo));
      ___return (vkpipelineshaderstagecreateinfo);")
   (define-c-lambda
      ref-VkPipelineShaderStageCreateInfo
      (VkPipelineShaderStageCreateInfo* int)
      VkPipelineShaderStageCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineShaderStageCreateInfo
      ((pointer VkPipelineShaderStageCreateInfo))
      VkPipelineShaderStageCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineShaderStageCreateInfo
      (void*
         VkPipelineShaderStageCreateFlags
         VkShaderStageFlagBits
         VkShaderModule
         char*
         VkSpecializationInfo*)
      VkPipelineShaderStageCreateInfo*
      "VkPipelineShaderStageCreateInfo *pipelineshaderstagecreateinfo = malloc(sizeof(VkPipelineShaderStageCreateInfo));
pipelineshaderstagecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
pipelineshaderstagecreateinfo->pNext=___arg1;
pipelineshaderstagecreateinfo->flags=___arg2;
pipelineshaderstagecreateinfo->stage=___arg3;
pipelineshaderstagecreateinfo->module=___arg4;
pipelineshaderstagecreateinfo->pName=___arg5;
pipelineshaderstagecreateinfo->pSpecializationInfo=___arg6;
___return (pipelineshaderstagecreateinfo);"))
(begin-ffi
   (make-VkComputePipelineCreateInfo
      ptr->VkComputePipelineCreateInfo
      ref-VkComputePipelineCreateInfo
      make-VkComputePipelineCreateInfo*
      VkComputePipelineCreateInfobasePipelineIndex
      VkComputePipelineCreateInfobasePipelineHandle
      VkComputePipelineCreateInfolayout
      VkComputePipelineCreateInfostage
      VkComputePipelineCreateInfoflags
      VkComputePipelineCreateInfopNext
      VkComputePipelineCreateInfosType
      VkComputePipelineCreateInfo
      VkComputePipelineCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkComputePipelineCreateInfo (struct "VkComputePipelineCreateInfo"))
   (c-define-type VkComputePipelineCreateInfo* (pointer VkComputePipelineCreateInfo))
   (define-c-lambda
      VkComputePipelineCreateInfosType
      (VkComputePipelineCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkComputePipelineCreateInfopNext
      (VkComputePipelineCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkComputePipelineCreateInfoflags
      (VkComputePipelineCreateInfo*)
      VkPipelineCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkComputePipelineCreateInfostage
      (VkComputePipelineCreateInfo*)
      VkPipelineShaderStageCreateInfo
      "___return (___arg1->stage);")
   (define-c-lambda
      VkComputePipelineCreateInfolayout
      (VkComputePipelineCreateInfo*)
      VkPipelineLayout
      "___return (___arg1->layout);")
   (define-c-lambda
      VkComputePipelineCreateInfobasePipelineHandle
      (VkComputePipelineCreateInfo*)
      VkPipeline
      "___return (___arg1->basePipelineHandle);")
   (define-c-lambda
      VkComputePipelineCreateInfobasePipelineIndex
      (VkComputePipelineCreateInfo*)
      int32_t
      "___return (___arg1->basePipelineIndex);")
   (define-c-lambda
      make-VkComputePipelineCreateInfo*
      (int)
      VkComputePipelineCreateInfo*
      "VkComputePipelineCreateInfo* vkcomputepipelinecreateinfo = malloc(___arg1 * sizeof(VkComputePipelineCreateInfo));
      ___return (vkcomputepipelinecreateinfo);")
   (define-c-lambda
      ref-VkComputePipelineCreateInfo
      (VkComputePipelineCreateInfo* int)
      VkComputePipelineCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkComputePipelineCreateInfo
      ((pointer VkComputePipelineCreateInfo))
      VkComputePipelineCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkComputePipelineCreateInfo
      (void*
         VkPipelineCreateFlags
         VkPipelineShaderStageCreateInfo
         VkPipelineLayout
         VkPipeline
         int32_t)
      VkComputePipelineCreateInfo*
      "VkComputePipelineCreateInfo *computepipelinecreateinfo = malloc(sizeof(VkComputePipelineCreateInfo));
computepipelinecreateinfo->sType=VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
computepipelinecreateinfo->pNext=___arg1;
computepipelinecreateinfo->flags=___arg2;
computepipelinecreateinfo->stage=___arg3;
computepipelinecreateinfo->layout=___arg4;
computepipelinecreateinfo->basePipelineHandle=___arg5;
computepipelinecreateinfo->basePipelineIndex=___arg6;
___return (computepipelinecreateinfo);"))
(begin-ffi
   (make-VkVertexInputBindingDescription
      ptr->VkVertexInputBindingDescription
      ref-VkVertexInputBindingDescription
      make-VkVertexInputBindingDescription*
      VkVertexInputBindingDescriptioninputRate
      VkVertexInputBindingDescriptionstride
      VkVertexInputBindingDescriptionbinding
      VkVertexInputBindingDescription
      VkVertexInputBindingDescription*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkVertexInputBindingDescription
      (struct "VkVertexInputBindingDescription"))
   (c-define-type
      VkVertexInputBindingDescription*
      (pointer VkVertexInputBindingDescription))
   (define-c-lambda
      VkVertexInputBindingDescriptionbinding
      (VkVertexInputBindingDescription*)
      uint32_t
      "___return (___arg1->binding);")
   (define-c-lambda
      VkVertexInputBindingDescriptionstride
      (VkVertexInputBindingDescription*)
      uint32_t
      "___return (___arg1->stride);")
   (define-c-lambda
      VkVertexInputBindingDescriptioninputRate
      (VkVertexInputBindingDescription*)
      VkVertexInputRate
      "___return (___arg1->inputRate);")
   (define-c-lambda
      make-VkVertexInputBindingDescription*
      (int)
      VkVertexInputBindingDescription*
      "VkVertexInputBindingDescription* vkvertexinputbindingdescription = malloc(___arg1 * sizeof(VkVertexInputBindingDescription));
      ___return (vkvertexinputbindingdescription);")
   (define-c-lambda
      ref-VkVertexInputBindingDescription
      (VkVertexInputBindingDescription* int)
      VkVertexInputBindingDescription*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkVertexInputBindingDescription
      ((pointer VkVertexInputBindingDescription))
      VkVertexInputBindingDescription
      "___return(*___arg1);")
   (define-c-lambda
      make-VkVertexInputBindingDescription
      (uint32_t uint32_t VkVertexInputRate)
      VkVertexInputBindingDescription*
      "VkVertexInputBindingDescription *vertexinputbindingdescription = malloc(sizeof(VkVertexInputBindingDescription));
vertexinputbindingdescription->binding=___arg1;
vertexinputbindingdescription->stride=___arg2;
vertexinputbindingdescription->inputRate=___arg3;
___return (vertexinputbindingdescription);"))
(begin-ffi
   (make-VkVertexInputAttributeDescription
      ptr->VkVertexInputAttributeDescription
      ref-VkVertexInputAttributeDescription
      make-VkVertexInputAttributeDescription*
      VkVertexInputAttributeDescriptionoffset
      VkVertexInputAttributeDescriptionformat
      VkVertexInputAttributeDescriptionbinding
      VkVertexInputAttributeDescriptionlocation
      VkVertexInputAttributeDescription
      VkVertexInputAttributeDescription*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkVertexInputAttributeDescription
      (struct "VkVertexInputAttributeDescription"))
   (c-define-type
      VkVertexInputAttributeDescription*
      (pointer VkVertexInputAttributeDescription))
   (define-c-lambda
      VkVertexInputAttributeDescriptionlocation
      (VkVertexInputAttributeDescription*)
      uint32_t
      "___return (___arg1->location);")
   (define-c-lambda
      VkVertexInputAttributeDescriptionbinding
      (VkVertexInputAttributeDescription*)
      uint32_t
      "___return (___arg1->binding);")
   (define-c-lambda
      VkVertexInputAttributeDescriptionformat
      (VkVertexInputAttributeDescription*)
      VkFormat
      "___return (___arg1->format);")
   (define-c-lambda
      VkVertexInputAttributeDescriptionoffset
      (VkVertexInputAttributeDescription*)
      uint32_t
      "___return (___arg1->offset);")
   (define-c-lambda
      make-VkVertexInputAttributeDescription*
      (int)
      VkVertexInputAttributeDescription*
      "VkVertexInputAttributeDescription* vkvertexinputattributedescription = malloc(___arg1 * sizeof(VkVertexInputAttributeDescription));
      ___return (vkvertexinputattributedescription);")
   (define-c-lambda
      ref-VkVertexInputAttributeDescription
      (VkVertexInputAttributeDescription* int)
      VkVertexInputAttributeDescription*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkVertexInputAttributeDescription
      ((pointer VkVertexInputAttributeDescription))
      VkVertexInputAttributeDescription
      "___return(*___arg1);")
   (define-c-lambda
      make-VkVertexInputAttributeDescription
      (uint32_t uint32_t VkFormat uint32_t)
      VkVertexInputAttributeDescription*
      "VkVertexInputAttributeDescription *vertexinputattributedescription = malloc(sizeof(VkVertexInputAttributeDescription));
vertexinputattributedescription->location=___arg1;
vertexinputattributedescription->binding=___arg2;
vertexinputattributedescription->format=___arg3;
vertexinputattributedescription->offset=___arg4;
___return (vertexinputattributedescription);"))
(begin-ffi
   (make-VkPipelineVertexInputStateCreateInfo
      ptr->VkPipelineVertexInputStateCreateInfo
      ref-VkPipelineVertexInputStateCreateInfo
      make-VkPipelineVertexInputStateCreateInfo*
      VkPipelineVertexInputStateCreateInfopVertexAttributeDescriptions
      VkPipelineVertexInputStateCreateInfovertexAttributeDescriptionCount
      VkPipelineVertexInputStateCreateInfopVertexBindingDescriptions
      VkPipelineVertexInputStateCreateInfovertexBindingDescriptionCount
      VkPipelineVertexInputStateCreateInfoflags
      VkPipelineVertexInputStateCreateInfopNext
      VkPipelineVertexInputStateCreateInfosType
      VkPipelineVertexInputStateCreateInfo
      VkPipelineVertexInputStateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineVertexInputStateCreateInfo
      (struct "VkPipelineVertexInputStateCreateInfo"))
   (c-define-type
      VkPipelineVertexInputStateCreateInfo*
      (pointer VkPipelineVertexInputStateCreateInfo))
   (define-c-lambda
      VkPipelineVertexInputStateCreateInfosType
      (VkPipelineVertexInputStateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineVertexInputStateCreateInfopNext
      (VkPipelineVertexInputStateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineVertexInputStateCreateInfoflags
      (VkPipelineVertexInputStateCreateInfo*)
      VkPipelineVertexInputStateCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineVertexInputStateCreateInfovertexBindingDescriptionCount
      (VkPipelineVertexInputStateCreateInfo*)
      uint32_t
      "___return (___arg1->vertexBindingDescriptionCount);")
   (define-c-lambda
      VkPipelineVertexInputStateCreateInfopVertexBindingDescriptions
      (VkPipelineVertexInputStateCreateInfo*)
      VkVertexInputBindingDescription*
      "___return (___arg1->pVertexBindingDescriptions);")
   (define-c-lambda
      VkPipelineVertexInputStateCreateInfovertexAttributeDescriptionCount
      (VkPipelineVertexInputStateCreateInfo*)
      uint32_t
      "___return (___arg1->vertexAttributeDescriptionCount);")
   (define-c-lambda
      VkPipelineVertexInputStateCreateInfopVertexAttributeDescriptions
      (VkPipelineVertexInputStateCreateInfo*)
      VkVertexInputAttributeDescription*
      "___return (___arg1->pVertexAttributeDescriptions);")
   (define-c-lambda
      make-VkPipelineVertexInputStateCreateInfo*
      (int)
      VkPipelineVertexInputStateCreateInfo*
      "VkPipelineVertexInputStateCreateInfo* vkpipelinevertexinputstatecreateinfo = malloc(___arg1 * sizeof(VkPipelineVertexInputStateCreateInfo));
      ___return (vkpipelinevertexinputstatecreateinfo);")
   (define-c-lambda
      ref-VkPipelineVertexInputStateCreateInfo
      (VkPipelineVertexInputStateCreateInfo* int)
      VkPipelineVertexInputStateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineVertexInputStateCreateInfo
      ((pointer VkPipelineVertexInputStateCreateInfo))
      VkPipelineVertexInputStateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineVertexInputStateCreateInfo
      (void*
         VkPipelineVertexInputStateCreateFlags
         uint32_t
         VkVertexInputBindingDescription*
         uint32_t
         VkVertexInputAttributeDescription*)
      VkPipelineVertexInputStateCreateInfo*
      "VkPipelineVertexInputStateCreateInfo *pipelinevertexinputstatecreateinfo = malloc(sizeof(VkPipelineVertexInputStateCreateInfo));
pipelinevertexinputstatecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
pipelinevertexinputstatecreateinfo->pNext=___arg1;
pipelinevertexinputstatecreateinfo->flags=___arg2;
pipelinevertexinputstatecreateinfo->vertexBindingDescriptionCount=___arg3;
pipelinevertexinputstatecreateinfo->pVertexBindingDescriptions=___arg4;
pipelinevertexinputstatecreateinfo->vertexAttributeDescriptionCount=___arg5;
pipelinevertexinputstatecreateinfo->pVertexAttributeDescriptions=___arg6;
___return (pipelinevertexinputstatecreateinfo);"))
(begin-ffi
   (make-VkPipelineInputAssemblyStateCreateInfo
      ptr->VkPipelineInputAssemblyStateCreateInfo
      ref-VkPipelineInputAssemblyStateCreateInfo
      make-VkPipelineInputAssemblyStateCreateInfo*
      VkPipelineInputAssemblyStateCreateInfoprimitiveRestartEnable
      VkPipelineInputAssemblyStateCreateInfotopology
      VkPipelineInputAssemblyStateCreateInfoflags
      VkPipelineInputAssemblyStateCreateInfopNext
      VkPipelineInputAssemblyStateCreateInfosType
      VkPipelineInputAssemblyStateCreateInfo
      VkPipelineInputAssemblyStateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineInputAssemblyStateCreateInfo
      (struct "VkPipelineInputAssemblyStateCreateInfo"))
   (c-define-type
      VkPipelineInputAssemblyStateCreateInfo*
      (pointer VkPipelineInputAssemblyStateCreateInfo))
   (define-c-lambda
      VkPipelineInputAssemblyStateCreateInfosType
      (VkPipelineInputAssemblyStateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineInputAssemblyStateCreateInfopNext
      (VkPipelineInputAssemblyStateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineInputAssemblyStateCreateInfoflags
      (VkPipelineInputAssemblyStateCreateInfo*)
      VkPipelineInputAssemblyStateCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineInputAssemblyStateCreateInfotopology
      (VkPipelineInputAssemblyStateCreateInfo*)
      VkPrimitiveTopology
      "___return (___arg1->topology);")
   (define-c-lambda
      VkPipelineInputAssemblyStateCreateInfoprimitiveRestartEnable
      (VkPipelineInputAssemblyStateCreateInfo*)
      VkBool32
      "___return (___arg1->primitiveRestartEnable);")
   (define-c-lambda
      make-VkPipelineInputAssemblyStateCreateInfo*
      (int)
      VkPipelineInputAssemblyStateCreateInfo*
      "VkPipelineInputAssemblyStateCreateInfo* vkpipelineinputassemblystatecreateinfo = malloc(___arg1 * sizeof(VkPipelineInputAssemblyStateCreateInfo));
      ___return (vkpipelineinputassemblystatecreateinfo);")
   (define-c-lambda
      ref-VkPipelineInputAssemblyStateCreateInfo
      (VkPipelineInputAssemblyStateCreateInfo* int)
      VkPipelineInputAssemblyStateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineInputAssemblyStateCreateInfo
      ((pointer VkPipelineInputAssemblyStateCreateInfo))
      VkPipelineInputAssemblyStateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineInputAssemblyStateCreateInfo
      (void* VkPipelineInputAssemblyStateCreateFlags VkPrimitiveTopology VkBool32)
      VkPipelineInputAssemblyStateCreateInfo*
      "VkPipelineInputAssemblyStateCreateInfo *pipelineinputassemblystatecreateinfo = malloc(sizeof(VkPipelineInputAssemblyStateCreateInfo));
pipelineinputassemblystatecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
pipelineinputassemblystatecreateinfo->pNext=___arg1;
pipelineinputassemblystatecreateinfo->flags=___arg2;
pipelineinputassemblystatecreateinfo->topology=___arg3;
pipelineinputassemblystatecreateinfo->primitiveRestartEnable=___arg4;
___return (pipelineinputassemblystatecreateinfo);"))
(begin-ffi
   (make-VkPipelineTessellationStateCreateInfo
      ptr->VkPipelineTessellationStateCreateInfo
      ref-VkPipelineTessellationStateCreateInfo
      make-VkPipelineTessellationStateCreateInfo*
      VkPipelineTessellationStateCreateInfopatchControlPoints
      VkPipelineTessellationStateCreateInfoflags
      VkPipelineTessellationStateCreateInfopNext
      VkPipelineTessellationStateCreateInfosType
      VkPipelineTessellationStateCreateInfo
      VkPipelineTessellationStateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineTessellationStateCreateInfo
      (struct "VkPipelineTessellationStateCreateInfo"))
   (c-define-type
      VkPipelineTessellationStateCreateInfo*
      (pointer VkPipelineTessellationStateCreateInfo))
   (define-c-lambda
      VkPipelineTessellationStateCreateInfosType
      (VkPipelineTessellationStateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineTessellationStateCreateInfopNext
      (VkPipelineTessellationStateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineTessellationStateCreateInfoflags
      (VkPipelineTessellationStateCreateInfo*)
      VkPipelineTessellationStateCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineTessellationStateCreateInfopatchControlPoints
      (VkPipelineTessellationStateCreateInfo*)
      uint32_t
      "___return (___arg1->patchControlPoints);")
   (define-c-lambda
      make-VkPipelineTessellationStateCreateInfo*
      (int)
      VkPipelineTessellationStateCreateInfo*
      "VkPipelineTessellationStateCreateInfo* vkpipelinetessellationstatecreateinfo = malloc(___arg1 * sizeof(VkPipelineTessellationStateCreateInfo));
      ___return (vkpipelinetessellationstatecreateinfo);")
   (define-c-lambda
      ref-VkPipelineTessellationStateCreateInfo
      (VkPipelineTessellationStateCreateInfo* int)
      VkPipelineTessellationStateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineTessellationStateCreateInfo
      ((pointer VkPipelineTessellationStateCreateInfo))
      VkPipelineTessellationStateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineTessellationStateCreateInfo
      (void* VkPipelineTessellationStateCreateFlags uint32_t)
      VkPipelineTessellationStateCreateInfo*
      "VkPipelineTessellationStateCreateInfo *pipelinetessellationstatecreateinfo = malloc(sizeof(VkPipelineTessellationStateCreateInfo));
pipelinetessellationstatecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
pipelinetessellationstatecreateinfo->pNext=___arg1;
pipelinetessellationstatecreateinfo->flags=___arg2;
pipelinetessellationstatecreateinfo->patchControlPoints=___arg3;
___return (pipelinetessellationstatecreateinfo);"))
(begin-ffi
   (make-VkPipelineViewportStateCreateInfo
      ptr->VkPipelineViewportStateCreateInfo
      ref-VkPipelineViewportStateCreateInfo
      make-VkPipelineViewportStateCreateInfo*
      VkPipelineViewportStateCreateInfopScissors
      VkPipelineViewportStateCreateInfoscissorCount
      VkPipelineViewportStateCreateInfopViewports
      VkPipelineViewportStateCreateInfoviewportCount
      VkPipelineViewportStateCreateInfoflags
      VkPipelineViewportStateCreateInfopNext
      VkPipelineViewportStateCreateInfosType
      VkPipelineViewportStateCreateInfo
      VkPipelineViewportStateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineViewportStateCreateInfo
      (struct "VkPipelineViewportStateCreateInfo"))
   (c-define-type
      VkPipelineViewportStateCreateInfo*
      (pointer VkPipelineViewportStateCreateInfo))
   (define-c-lambda
      VkPipelineViewportStateCreateInfosType
      (VkPipelineViewportStateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineViewportStateCreateInfopNext
      (VkPipelineViewportStateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineViewportStateCreateInfoflags
      (VkPipelineViewportStateCreateInfo*)
      VkPipelineViewportStateCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineViewportStateCreateInfoviewportCount
      (VkPipelineViewportStateCreateInfo*)
      uint32_t
      "___return (___arg1->viewportCount);")
   (define-c-lambda
      VkPipelineViewportStateCreateInfopViewports
      (VkPipelineViewportStateCreateInfo*)
      VkViewport*
      "___return (___arg1->pViewports);")
   (define-c-lambda
      VkPipelineViewportStateCreateInfoscissorCount
      (VkPipelineViewportStateCreateInfo*)
      uint32_t
      "___return (___arg1->scissorCount);")
   (define-c-lambda
      VkPipelineViewportStateCreateInfopScissors
      (VkPipelineViewportStateCreateInfo*)
      VkRect2D*
      "___return (___arg1->pScissors);")
   (define-c-lambda
      make-VkPipelineViewportStateCreateInfo*
      (int)
      VkPipelineViewportStateCreateInfo*
      "VkPipelineViewportStateCreateInfo* vkpipelineviewportstatecreateinfo = malloc(___arg1 * sizeof(VkPipelineViewportStateCreateInfo));
      ___return (vkpipelineviewportstatecreateinfo);")
   (define-c-lambda
      ref-VkPipelineViewportStateCreateInfo
      (VkPipelineViewportStateCreateInfo* int)
      VkPipelineViewportStateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineViewportStateCreateInfo
      ((pointer VkPipelineViewportStateCreateInfo))
      VkPipelineViewportStateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineViewportStateCreateInfo
      (void* VkPipelineViewportStateCreateFlags uint32_t VkViewport* uint32_t VkRect2D*)
      VkPipelineViewportStateCreateInfo*
      "VkPipelineViewportStateCreateInfo *pipelineviewportstatecreateinfo = malloc(sizeof(VkPipelineViewportStateCreateInfo));
pipelineviewportstatecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
pipelineviewportstatecreateinfo->pNext=___arg1;
pipelineviewportstatecreateinfo->flags=___arg2;
pipelineviewportstatecreateinfo->viewportCount=___arg3;
pipelineviewportstatecreateinfo->pViewports=___arg4;
pipelineviewportstatecreateinfo->scissorCount=___arg5;
pipelineviewportstatecreateinfo->pScissors=___arg6;
___return (pipelineviewportstatecreateinfo);"))
(begin-ffi
   (make-VkPipelineRasterizationStateCreateInfo
      ptr->VkPipelineRasterizationStateCreateInfo
      ref-VkPipelineRasterizationStateCreateInfo
      make-VkPipelineRasterizationStateCreateInfo*
      VkPipelineRasterizationStateCreateInfolineWidth
      VkPipelineRasterizationStateCreateInfodepthBiasSlopeFactor
      VkPipelineRasterizationStateCreateInfodepthBiasClamp
      VkPipelineRasterizationStateCreateInfodepthBiasConstantFactor
      VkPipelineRasterizationStateCreateInfodepthBiasEnable
      VkPipelineRasterizationStateCreateInfofrontFace
      VkPipelineRasterizationStateCreateInfocullMode
      VkPipelineRasterizationStateCreateInfopolygonMode
      VkPipelineRasterizationStateCreateInforasterizerDiscardEnable
      VkPipelineRasterizationStateCreateInfodepthClampEnable
      VkPipelineRasterizationStateCreateInfoflags
      VkPipelineRasterizationStateCreateInfopNext
      VkPipelineRasterizationStateCreateInfosType
      VkPipelineRasterizationStateCreateInfo
      VkPipelineRasterizationStateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineRasterizationStateCreateInfo
      (struct "VkPipelineRasterizationStateCreateInfo"))
   (c-define-type
      VkPipelineRasterizationStateCreateInfo*
      (pointer VkPipelineRasterizationStateCreateInfo))
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfosType
      (VkPipelineRasterizationStateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfopNext
      (VkPipelineRasterizationStateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfoflags
      (VkPipelineRasterizationStateCreateInfo*)
      VkPipelineRasterizationStateCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfodepthClampEnable
      (VkPipelineRasterizationStateCreateInfo*)
      VkBool32
      "___return (___arg1->depthClampEnable);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInforasterizerDiscardEnable
      (VkPipelineRasterizationStateCreateInfo*)
      VkBool32
      "___return (___arg1->rasterizerDiscardEnable);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfopolygonMode
      (VkPipelineRasterizationStateCreateInfo*)
      VkPolygonMode
      "___return (___arg1->polygonMode);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfocullMode
      (VkPipelineRasterizationStateCreateInfo*)
      VkCullModeFlags
      "___return (___arg1->cullMode);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfofrontFace
      (VkPipelineRasterizationStateCreateInfo*)
      VkFrontFace
      "___return (___arg1->frontFace);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfodepthBiasEnable
      (VkPipelineRasterizationStateCreateInfo*)
      VkBool32
      "___return (___arg1->depthBiasEnable);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfodepthBiasConstantFactor
      (VkPipelineRasterizationStateCreateInfo*)
      float
      "___return (___arg1->depthBiasConstantFactor);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfodepthBiasClamp
      (VkPipelineRasterizationStateCreateInfo*)
      float
      "___return (___arg1->depthBiasClamp);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfodepthBiasSlopeFactor
      (VkPipelineRasterizationStateCreateInfo*)
      float
      "___return (___arg1->depthBiasSlopeFactor);")
   (define-c-lambda
      VkPipelineRasterizationStateCreateInfolineWidth
      (VkPipelineRasterizationStateCreateInfo*)
      float
      "___return (___arg1->lineWidth);")
   (define-c-lambda
      make-VkPipelineRasterizationStateCreateInfo*
      (int)
      VkPipelineRasterizationStateCreateInfo*
      "VkPipelineRasterizationStateCreateInfo* vkpipelinerasterizationstatecreateinfo = malloc(___arg1 * sizeof(VkPipelineRasterizationStateCreateInfo));
      ___return (vkpipelinerasterizationstatecreateinfo);")
   (define-c-lambda
      ref-VkPipelineRasterizationStateCreateInfo
      (VkPipelineRasterizationStateCreateInfo* int)
      VkPipelineRasterizationStateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineRasterizationStateCreateInfo
      ((pointer VkPipelineRasterizationStateCreateInfo))
      VkPipelineRasterizationStateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineRasterizationStateCreateInfo
      (void*
         VkPipelineRasterizationStateCreateFlags
         VkBool32
         VkBool32
         VkPolygonMode
         VkCullModeFlags
         VkFrontFace
         VkBool32
         float
         float
         float
         float)
      VkPipelineRasterizationStateCreateInfo*
      "VkPipelineRasterizationStateCreateInfo *pipelinerasterizationstatecreateinfo = malloc(sizeof(VkPipelineRasterizationStateCreateInfo));
pipelinerasterizationstatecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
pipelinerasterizationstatecreateinfo->pNext=___arg1;
pipelinerasterizationstatecreateinfo->flags=___arg2;
pipelinerasterizationstatecreateinfo->depthClampEnable=___arg3;
pipelinerasterizationstatecreateinfo->rasterizerDiscardEnable=___arg4;
pipelinerasterizationstatecreateinfo->polygonMode=___arg5;
pipelinerasterizationstatecreateinfo->cullMode=___arg6;
pipelinerasterizationstatecreateinfo->frontFace=___arg7;
pipelinerasterizationstatecreateinfo->depthBiasEnable=___arg8;
pipelinerasterizationstatecreateinfo->depthBiasConstantFactor=___arg9;
pipelinerasterizationstatecreateinfo->depthBiasClamp=___arg10;
pipelinerasterizationstatecreateinfo->depthBiasSlopeFactor=___arg11;
pipelinerasterizationstatecreateinfo->lineWidth=___arg12;
___return (pipelinerasterizationstatecreateinfo);"))
(begin-ffi
   (make-VkPipelineMultisampleStateCreateInfo
      ptr->VkPipelineMultisampleStateCreateInfo
      ref-VkPipelineMultisampleStateCreateInfo
      make-VkPipelineMultisampleStateCreateInfo*
      VkPipelineMultisampleStateCreateInfoalphaToOneEnable
      VkPipelineMultisampleStateCreateInfoalphaToCoverageEnable
      VkPipelineMultisampleStateCreateInfopSampleMask
      VkPipelineMultisampleStateCreateInfominSampleShading
      VkPipelineMultisampleStateCreateInfosampleShadingEnable
      VkPipelineMultisampleStateCreateInforasterizationSamples
      VkPipelineMultisampleStateCreateInfoflags
      VkPipelineMultisampleStateCreateInfopNext
      VkPipelineMultisampleStateCreateInfosType
      VkPipelineMultisampleStateCreateInfo
      VkPipelineMultisampleStateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineMultisampleStateCreateInfo
      (struct "VkPipelineMultisampleStateCreateInfo"))
   (c-define-type
      VkPipelineMultisampleStateCreateInfo*
      (pointer VkPipelineMultisampleStateCreateInfo))
   (define-c-lambda
      VkPipelineMultisampleStateCreateInfosType
      (VkPipelineMultisampleStateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineMultisampleStateCreateInfopNext
      (VkPipelineMultisampleStateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineMultisampleStateCreateInfoflags
      (VkPipelineMultisampleStateCreateInfo*)
      VkPipelineMultisampleStateCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineMultisampleStateCreateInforasterizationSamples
      (VkPipelineMultisampleStateCreateInfo*)
      VkSampleCountFlagBits
      "___return (___arg1->rasterizationSamples);")
   (define-c-lambda
      VkPipelineMultisampleStateCreateInfosampleShadingEnable
      (VkPipelineMultisampleStateCreateInfo*)
      VkBool32
      "___return (___arg1->sampleShadingEnable);")
   (define-c-lambda
      VkPipelineMultisampleStateCreateInfominSampleShading
      (VkPipelineMultisampleStateCreateInfo*)
      float
      "___return (___arg1->minSampleShading);")
   (define-c-lambda
      VkPipelineMultisampleStateCreateInfopSampleMask
      (VkPipelineMultisampleStateCreateInfo*)
      VkSampleMask*
      "___return (___arg1->pSampleMask);")
   (define-c-lambda
      VkPipelineMultisampleStateCreateInfoalphaToCoverageEnable
      (VkPipelineMultisampleStateCreateInfo*)
      VkBool32
      "___return (___arg1->alphaToCoverageEnable);")
   (define-c-lambda
      VkPipelineMultisampleStateCreateInfoalphaToOneEnable
      (VkPipelineMultisampleStateCreateInfo*)
      VkBool32
      "___return (___arg1->alphaToOneEnable);")
   (define-c-lambda
      make-VkPipelineMultisampleStateCreateInfo*
      (int)
      VkPipelineMultisampleStateCreateInfo*
      "VkPipelineMultisampleStateCreateInfo* vkpipelinemultisamplestatecreateinfo = malloc(___arg1 * sizeof(VkPipelineMultisampleStateCreateInfo));
      ___return (vkpipelinemultisamplestatecreateinfo);")
   (define-c-lambda
      ref-VkPipelineMultisampleStateCreateInfo
      (VkPipelineMultisampleStateCreateInfo* int)
      VkPipelineMultisampleStateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineMultisampleStateCreateInfo
      ((pointer VkPipelineMultisampleStateCreateInfo))
      VkPipelineMultisampleStateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineMultisampleStateCreateInfo
      (void*
         VkPipelineMultisampleStateCreateFlags
         VkSampleCountFlagBits
         VkBool32
         float
         VkSampleMask*
         VkBool32
         VkBool32)
      VkPipelineMultisampleStateCreateInfo*
      "VkPipelineMultisampleStateCreateInfo *pipelinemultisamplestatecreateinfo = malloc(sizeof(VkPipelineMultisampleStateCreateInfo));
pipelinemultisamplestatecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
pipelinemultisamplestatecreateinfo->pNext=___arg1;
pipelinemultisamplestatecreateinfo->flags=___arg2;
pipelinemultisamplestatecreateinfo->rasterizationSamples=___arg3;
pipelinemultisamplestatecreateinfo->sampleShadingEnable=___arg4;
pipelinemultisamplestatecreateinfo->minSampleShading=___arg5;
pipelinemultisamplestatecreateinfo->pSampleMask=___arg6;
pipelinemultisamplestatecreateinfo->alphaToCoverageEnable=___arg7;
pipelinemultisamplestatecreateinfo->alphaToOneEnable=___arg8;
___return (pipelinemultisamplestatecreateinfo);"))
(begin-ffi
   (make-VkPipelineColorBlendAttachmentState
      ptr->VkPipelineColorBlendAttachmentState
      ref-VkPipelineColorBlendAttachmentState
      make-VkPipelineColorBlendAttachmentState*
      VkPipelineColorBlendAttachmentStatecolorWriteMask
      VkPipelineColorBlendAttachmentStatealphaBlendOp
      VkPipelineColorBlendAttachmentStatedstAlphaBlendFactor
      VkPipelineColorBlendAttachmentStatesrcAlphaBlendFactor
      VkPipelineColorBlendAttachmentStatecolorBlendOp
      VkPipelineColorBlendAttachmentStatedstColorBlendFactor
      VkPipelineColorBlendAttachmentStatesrcColorBlendFactor
      VkPipelineColorBlendAttachmentStateblendEnable
      VkPipelineColorBlendAttachmentState
      VkPipelineColorBlendAttachmentState*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineColorBlendAttachmentState
      (struct "VkPipelineColorBlendAttachmentState"))
   (c-define-type
      VkPipelineColorBlendAttachmentState*
      (pointer VkPipelineColorBlendAttachmentState))
   (define-c-lambda
      VkPipelineColorBlendAttachmentStateblendEnable
      (VkPipelineColorBlendAttachmentState*)
      VkBool32
      "___return (___arg1->blendEnable);")
   (define-c-lambda
      VkPipelineColorBlendAttachmentStatesrcColorBlendFactor
      (VkPipelineColorBlendAttachmentState*)
      VkBlendFactor
      "___return (___arg1->srcColorBlendFactor);")
   (define-c-lambda
      VkPipelineColorBlendAttachmentStatedstColorBlendFactor
      (VkPipelineColorBlendAttachmentState*)
      VkBlendFactor
      "___return (___arg1->dstColorBlendFactor);")
   (define-c-lambda
      VkPipelineColorBlendAttachmentStatecolorBlendOp
      (VkPipelineColorBlendAttachmentState*)
      VkBlendOp
      "___return (___arg1->colorBlendOp);")
   (define-c-lambda
      VkPipelineColorBlendAttachmentStatesrcAlphaBlendFactor
      (VkPipelineColorBlendAttachmentState*)
      VkBlendFactor
      "___return (___arg1->srcAlphaBlendFactor);")
   (define-c-lambda
      VkPipelineColorBlendAttachmentStatedstAlphaBlendFactor
      (VkPipelineColorBlendAttachmentState*)
      VkBlendFactor
      "___return (___arg1->dstAlphaBlendFactor);")
   (define-c-lambda
      VkPipelineColorBlendAttachmentStatealphaBlendOp
      (VkPipelineColorBlendAttachmentState*)
      VkBlendOp
      "___return (___arg1->alphaBlendOp);")
   (define-c-lambda
      VkPipelineColorBlendAttachmentStatecolorWriteMask
      (VkPipelineColorBlendAttachmentState*)
      VkColorComponentFlags
      "___return (___arg1->colorWriteMask);")
   (define-c-lambda
      make-VkPipelineColorBlendAttachmentState*
      (int)
      VkPipelineColorBlendAttachmentState*
      "VkPipelineColorBlendAttachmentState* vkpipelinecolorblendattachmentstate = malloc(___arg1 * sizeof(VkPipelineColorBlendAttachmentState));
      ___return (vkpipelinecolorblendattachmentstate);")
   (define-c-lambda
      ref-VkPipelineColorBlendAttachmentState
      (VkPipelineColorBlendAttachmentState* int)
      VkPipelineColorBlendAttachmentState*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineColorBlendAttachmentState
      ((pointer VkPipelineColorBlendAttachmentState))
      VkPipelineColorBlendAttachmentState
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineColorBlendAttachmentState
      (VkBool32
         VkBlendFactor
         VkBlendFactor
         VkBlendOp
         VkBlendFactor
         VkBlendFactor
         VkBlendOp
         VkColorComponentFlags)
      VkPipelineColorBlendAttachmentState*
      "VkPipelineColorBlendAttachmentState *pipelinecolorblendattachmentstate = malloc(sizeof(VkPipelineColorBlendAttachmentState));
pipelinecolorblendattachmentstate->blendEnable=___arg1;
pipelinecolorblendattachmentstate->srcColorBlendFactor=___arg2;
pipelinecolorblendattachmentstate->dstColorBlendFactor=___arg3;
pipelinecolorblendattachmentstate->colorBlendOp=___arg4;
pipelinecolorblendattachmentstate->srcAlphaBlendFactor=___arg5;
pipelinecolorblendattachmentstate->dstAlphaBlendFactor=___arg6;
pipelinecolorblendattachmentstate->alphaBlendOp=___arg7;
pipelinecolorblendattachmentstate->colorWriteMask=___arg8;
___return (pipelinecolorblendattachmentstate);"))
(begin-ffi
   (make-VkPipelineColorBlendStateCreateInfo
      ptr->VkPipelineColorBlendStateCreateInfo
      ref-VkPipelineColorBlendStateCreateInfo
      make-VkPipelineColorBlendStateCreateInfo*
      VkPipelineColorBlendStateCreateInfoblendConstants
      VkPipelineColorBlendStateCreateInfopAttachments
      VkPipelineColorBlendStateCreateInfoattachmentCount
      VkPipelineColorBlendStateCreateInfologicOp
      VkPipelineColorBlendStateCreateInfologicOpEnable
      VkPipelineColorBlendStateCreateInfoflags
      VkPipelineColorBlendStateCreateInfopNext
      VkPipelineColorBlendStateCreateInfosType
      VkPipelineColorBlendStateCreateInfo
      VkPipelineColorBlendStateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineColorBlendStateCreateInfo
      (struct "VkPipelineColorBlendStateCreateInfo"))
   (c-define-type
      VkPipelineColorBlendStateCreateInfo*
      (pointer VkPipelineColorBlendStateCreateInfo))
   (define-c-lambda
      VkPipelineColorBlendStateCreateInfosType
      (VkPipelineColorBlendStateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineColorBlendStateCreateInfopNext
      (VkPipelineColorBlendStateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineColorBlendStateCreateInfoflags
      (VkPipelineColorBlendStateCreateInfo*)
      VkPipelineColorBlendStateCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineColorBlendStateCreateInfologicOpEnable
      (VkPipelineColorBlendStateCreateInfo*)
      VkBool32
      "___return (___arg1->logicOpEnable);")
   (define-c-lambda
      VkPipelineColorBlendStateCreateInfologicOp
      (VkPipelineColorBlendStateCreateInfo*)
      VkLogicOp
      "___return (___arg1->logicOp);")
   (define-c-lambda
      VkPipelineColorBlendStateCreateInfoattachmentCount
      (VkPipelineColorBlendStateCreateInfo*)
      uint32_t
      "___return (___arg1->attachmentCount);")
   (define-c-lambda
      VkPipelineColorBlendStateCreateInfopAttachments
      (VkPipelineColorBlendStateCreateInfo*)
      VkPipelineColorBlendAttachmentState*
      "___return (___arg1->pAttachments);")
   (define-c-lambda
      VkPipelineColorBlendStateCreateInfoblendConstants
      (VkPipelineColorBlendStateCreateInfo*)
      float*
      "___return (___arg1->blendConstants);")
   (define-c-lambda
      make-VkPipelineColorBlendStateCreateInfo*
      (int)
      VkPipelineColorBlendStateCreateInfo*
      "VkPipelineColorBlendStateCreateInfo* vkpipelinecolorblendstatecreateinfo = malloc(___arg1 * sizeof(VkPipelineColorBlendStateCreateInfo));
      ___return (vkpipelinecolorblendstatecreateinfo);")
   (define-c-lambda
      ref-VkPipelineColorBlendStateCreateInfo
      (VkPipelineColorBlendStateCreateInfo* int)
      VkPipelineColorBlendStateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineColorBlendStateCreateInfo
      ((pointer VkPipelineColorBlendStateCreateInfo))
      VkPipelineColorBlendStateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineColorBlendStateCreateInfo
      (void*
         VkPipelineColorBlendStateCreateFlags
         VkBool32
         VkLogicOp
         uint32_t
         VkPipelineColorBlendAttachmentState*
         float*)
      VkPipelineColorBlendStateCreateInfo*
      "VkPipelineColorBlendStateCreateInfo *pipelinecolorblendstatecreateinfo = malloc(sizeof(VkPipelineColorBlendStateCreateInfo));
pipelinecolorblendstatecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
pipelinecolorblendstatecreateinfo->pNext=___arg1;
pipelinecolorblendstatecreateinfo->flags=___arg2;
pipelinecolorblendstatecreateinfo->logicOpEnable=___arg3;
pipelinecolorblendstatecreateinfo->logicOp=___arg4;
pipelinecolorblendstatecreateinfo->attachmentCount=___arg5;
pipelinecolorblendstatecreateinfo->pAttachments=___arg6;
memcpy(pipelinecolorblendstatecreateinfo->blendConstants,___arg7,sizeof(___arg7));
___return (pipelinecolorblendstatecreateinfo);"))
(begin-ffi
   (make-VkPipelineDynamicStateCreateInfo
      ptr->VkPipelineDynamicStateCreateInfo
      ref-VkPipelineDynamicStateCreateInfo
      make-VkPipelineDynamicStateCreateInfo*
      VkPipelineDynamicStateCreateInfopDynamicStates
      VkPipelineDynamicStateCreateInfodynamicStateCount
      VkPipelineDynamicStateCreateInfoflags
      VkPipelineDynamicStateCreateInfopNext
      VkPipelineDynamicStateCreateInfosType
      VkPipelineDynamicStateCreateInfo
      VkPipelineDynamicStateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineDynamicStateCreateInfo
      (struct "VkPipelineDynamicStateCreateInfo"))
   (c-define-type
      VkPipelineDynamicStateCreateInfo*
      (pointer VkPipelineDynamicStateCreateInfo))
   (define-c-lambda
      VkPipelineDynamicStateCreateInfosType
      (VkPipelineDynamicStateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineDynamicStateCreateInfopNext
      (VkPipelineDynamicStateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineDynamicStateCreateInfoflags
      (VkPipelineDynamicStateCreateInfo*)
      VkPipelineDynamicStateCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineDynamicStateCreateInfodynamicStateCount
      (VkPipelineDynamicStateCreateInfo*)
      uint32_t
      "___return (___arg1->dynamicStateCount);")
   (define-c-lambda
      VkPipelineDynamicStateCreateInfopDynamicStates
      (VkPipelineDynamicStateCreateInfo*)
      VkDynamicState*
      "___return (___arg1->pDynamicStates);")
   (define-c-lambda
      make-VkPipelineDynamicStateCreateInfo*
      (int)
      VkPipelineDynamicStateCreateInfo*
      "VkPipelineDynamicStateCreateInfo* vkpipelinedynamicstatecreateinfo = malloc(___arg1 * sizeof(VkPipelineDynamicStateCreateInfo));
      ___return (vkpipelinedynamicstatecreateinfo);")
   (define-c-lambda
      ref-VkPipelineDynamicStateCreateInfo
      (VkPipelineDynamicStateCreateInfo* int)
      VkPipelineDynamicStateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineDynamicStateCreateInfo
      ((pointer VkPipelineDynamicStateCreateInfo))
      VkPipelineDynamicStateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineDynamicStateCreateInfo
      (void* VkPipelineDynamicStateCreateFlags uint32_t VkDynamicState*)
      VkPipelineDynamicStateCreateInfo*
      "VkPipelineDynamicStateCreateInfo *pipelinedynamicstatecreateinfo = malloc(sizeof(VkPipelineDynamicStateCreateInfo));
pipelinedynamicstatecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
pipelinedynamicstatecreateinfo->pNext=___arg1;
pipelinedynamicstatecreateinfo->flags=___arg2;
pipelinedynamicstatecreateinfo->dynamicStateCount=___arg3;
pipelinedynamicstatecreateinfo->pDynamicStates=___arg4;
___return (pipelinedynamicstatecreateinfo);"))
(begin-ffi
   (make-VkStencilOpState
      ptr->VkStencilOpState
      ref-VkStencilOpState
      make-VkStencilOpState*
      VkStencilOpStatereference
      VkStencilOpStatewriteMask
      VkStencilOpStatecompareMask
      VkStencilOpStatecompareOp
      VkStencilOpStatedepthFailOp
      VkStencilOpStatepassOp
      VkStencilOpStatefailOp
      VkStencilOpState
      VkStencilOpState*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkStencilOpState (struct "VkStencilOpState"))
   (c-define-type VkStencilOpState* (pointer VkStencilOpState))
   (define-c-lambda
      VkStencilOpStatefailOp
      (VkStencilOpState*)
      VkStencilOp
      "___return (___arg1->failOp);")
   (define-c-lambda
      VkStencilOpStatepassOp
      (VkStencilOpState*)
      VkStencilOp
      "___return (___arg1->passOp);")
   (define-c-lambda
      VkStencilOpStatedepthFailOp
      (VkStencilOpState*)
      VkStencilOp
      "___return (___arg1->depthFailOp);")
   (define-c-lambda
      VkStencilOpStatecompareOp
      (VkStencilOpState*)
      VkCompareOp
      "___return (___arg1->compareOp);")
   (define-c-lambda
      VkStencilOpStatecompareMask
      (VkStencilOpState*)
      uint32_t
      "___return (___arg1->compareMask);")
   (define-c-lambda
      VkStencilOpStatewriteMask
      (VkStencilOpState*)
      uint32_t
      "___return (___arg1->writeMask);")
   (define-c-lambda
      VkStencilOpStatereference
      (VkStencilOpState*)
      uint32_t
      "___return (___arg1->reference);")
   (define-c-lambda
      make-VkStencilOpState*
      (int)
      VkStencilOpState*
      "VkStencilOpState* vkstencilopstate = malloc(___arg1 * sizeof(VkStencilOpState));
      ___return (vkstencilopstate);")
   (define-c-lambda
      ref-VkStencilOpState
      (VkStencilOpState* int)
      VkStencilOpState*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkStencilOpState
      ((pointer VkStencilOpState))
      VkStencilOpState
      "___return(*___arg1);")
   (define-c-lambda
      make-VkStencilOpState
      (VkStencilOp VkStencilOp VkStencilOp VkCompareOp uint32_t uint32_t uint32_t)
      VkStencilOpState*
      "VkStencilOpState *stencilopstate = malloc(sizeof(VkStencilOpState));
stencilopstate->failOp=___arg1;
stencilopstate->passOp=___arg2;
stencilopstate->depthFailOp=___arg3;
stencilopstate->compareOp=___arg4;
stencilopstate->compareMask=___arg5;
stencilopstate->writeMask=___arg6;
stencilopstate->reference=___arg7;
___return (stencilopstate);"))
(begin-ffi
   (make-VkPipelineDepthStencilStateCreateInfo
      ptr->VkPipelineDepthStencilStateCreateInfo
      ref-VkPipelineDepthStencilStateCreateInfo
      make-VkPipelineDepthStencilStateCreateInfo*
      VkPipelineDepthStencilStateCreateInfomaxDepthBounds
      VkPipelineDepthStencilStateCreateInfominDepthBounds
      VkPipelineDepthStencilStateCreateInfoback
      VkPipelineDepthStencilStateCreateInfofront
      VkPipelineDepthStencilStateCreateInfostencilTestEnable
      VkPipelineDepthStencilStateCreateInfodepthBoundsTestEnable
      VkPipelineDepthStencilStateCreateInfodepthCompareOp
      VkPipelineDepthStencilStateCreateInfodepthWriteEnable
      VkPipelineDepthStencilStateCreateInfodepthTestEnable
      VkPipelineDepthStencilStateCreateInfoflags
      VkPipelineDepthStencilStateCreateInfopNext
      VkPipelineDepthStencilStateCreateInfosType
      VkPipelineDepthStencilStateCreateInfo
      VkPipelineDepthStencilStateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineDepthStencilStateCreateInfo
      (struct "VkPipelineDepthStencilStateCreateInfo"))
   (c-define-type
      VkPipelineDepthStencilStateCreateInfo*
      (pointer VkPipelineDepthStencilStateCreateInfo))
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfosType
      (VkPipelineDepthStencilStateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfopNext
      (VkPipelineDepthStencilStateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfoflags
      (VkPipelineDepthStencilStateCreateInfo*)
      VkPipelineDepthStencilStateCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfodepthTestEnable
      (VkPipelineDepthStencilStateCreateInfo*)
      VkBool32
      "___return (___arg1->depthTestEnable);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfodepthWriteEnable
      (VkPipelineDepthStencilStateCreateInfo*)
      VkBool32
      "___return (___arg1->depthWriteEnable);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfodepthCompareOp
      (VkPipelineDepthStencilStateCreateInfo*)
      VkCompareOp
      "___return (___arg1->depthCompareOp);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfodepthBoundsTestEnable
      (VkPipelineDepthStencilStateCreateInfo*)
      VkBool32
      "___return (___arg1->depthBoundsTestEnable);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfostencilTestEnable
      (VkPipelineDepthStencilStateCreateInfo*)
      VkBool32
      "___return (___arg1->stencilTestEnable);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfofront
      (VkPipelineDepthStencilStateCreateInfo*)
      VkStencilOpState
      "___return (___arg1->front);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfoback
      (VkPipelineDepthStencilStateCreateInfo*)
      VkStencilOpState
      "___return (___arg1->back);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfominDepthBounds
      (VkPipelineDepthStencilStateCreateInfo*)
      float
      "___return (___arg1->minDepthBounds);")
   (define-c-lambda
      VkPipelineDepthStencilStateCreateInfomaxDepthBounds
      (VkPipelineDepthStencilStateCreateInfo*)
      float
      "___return (___arg1->maxDepthBounds);")
   (define-c-lambda
      make-VkPipelineDepthStencilStateCreateInfo*
      (int)
      VkPipelineDepthStencilStateCreateInfo*
      "VkPipelineDepthStencilStateCreateInfo* vkpipelinedepthstencilstatecreateinfo = malloc(___arg1 * sizeof(VkPipelineDepthStencilStateCreateInfo));
      ___return (vkpipelinedepthstencilstatecreateinfo);")
   (define-c-lambda
      ref-VkPipelineDepthStencilStateCreateInfo
      (VkPipelineDepthStencilStateCreateInfo* int)
      VkPipelineDepthStencilStateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineDepthStencilStateCreateInfo
      ((pointer VkPipelineDepthStencilStateCreateInfo))
      VkPipelineDepthStencilStateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineDepthStencilStateCreateInfo
      (void*
         VkPipelineDepthStencilStateCreateFlags
         VkBool32
         VkBool32
         VkCompareOp
         VkBool32
         VkBool32
         VkStencilOpState
         VkStencilOpState
         float
         float)
      VkPipelineDepthStencilStateCreateInfo*
      "VkPipelineDepthStencilStateCreateInfo *pipelinedepthstencilstatecreateinfo = malloc(sizeof(VkPipelineDepthStencilStateCreateInfo));
pipelinedepthstencilstatecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
pipelinedepthstencilstatecreateinfo->pNext=___arg1;
pipelinedepthstencilstatecreateinfo->flags=___arg2;
pipelinedepthstencilstatecreateinfo->depthTestEnable=___arg3;
pipelinedepthstencilstatecreateinfo->depthWriteEnable=___arg4;
pipelinedepthstencilstatecreateinfo->depthCompareOp=___arg5;
pipelinedepthstencilstatecreateinfo->depthBoundsTestEnable=___arg6;
pipelinedepthstencilstatecreateinfo->stencilTestEnable=___arg7;
pipelinedepthstencilstatecreateinfo->front=___arg8;
pipelinedepthstencilstatecreateinfo->back=___arg9;
pipelinedepthstencilstatecreateinfo->minDepthBounds=___arg10;
pipelinedepthstencilstatecreateinfo->maxDepthBounds=___arg11;
___return (pipelinedepthstencilstatecreateinfo);"))
(begin-ffi
   (make-VkGraphicsPipelineCreateInfo
      ptr->VkGraphicsPipelineCreateInfo
      ref-VkGraphicsPipelineCreateInfo
      make-VkGraphicsPipelineCreateInfo*
      VkGraphicsPipelineCreateInfobasePipelineIndex
      VkGraphicsPipelineCreateInfobasePipelineHandle
      VkGraphicsPipelineCreateInfosubpass
      VkGraphicsPipelineCreateInforenderPass
      VkGraphicsPipelineCreateInfolayout
      VkGraphicsPipelineCreateInfopDynamicState
      VkGraphicsPipelineCreateInfopColorBlendState
      VkGraphicsPipelineCreateInfopDepthStencilState
      VkGraphicsPipelineCreateInfopMultisampleState
      VkGraphicsPipelineCreateInfopRasterizationState
      VkGraphicsPipelineCreateInfopViewportState
      VkGraphicsPipelineCreateInfopTessellationState
      VkGraphicsPipelineCreateInfopInputAssemblyState
      VkGraphicsPipelineCreateInfopVertexInputState
      VkGraphicsPipelineCreateInfopStages
      VkGraphicsPipelineCreateInfostageCount
      VkGraphicsPipelineCreateInfoflags
      VkGraphicsPipelineCreateInfopNext
      VkGraphicsPipelineCreateInfosType
      VkGraphicsPipelineCreateInfo
      VkGraphicsPipelineCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkGraphicsPipelineCreateInfo (struct "VkGraphicsPipelineCreateInfo"))
   (c-define-type VkGraphicsPipelineCreateInfo* (pointer VkGraphicsPipelineCreateInfo))
   (define-c-lambda
      VkGraphicsPipelineCreateInfosType
      (VkGraphicsPipelineCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopNext
      (VkGraphicsPipelineCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfoflags
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfostageCount
      (VkGraphicsPipelineCreateInfo*)
      uint32_t
      "___return (___arg1->stageCount);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopStages
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineShaderStageCreateInfo*
      "___return (___arg1->pStages);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopVertexInputState
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineVertexInputStateCreateInfo*
      "___return (___arg1->pVertexInputState);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopInputAssemblyState
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineInputAssemblyStateCreateInfo*
      "___return (___arg1->pInputAssemblyState);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopTessellationState
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineTessellationStateCreateInfo*
      "___return (___arg1->pTessellationState);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopViewportState
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineViewportStateCreateInfo*
      "___return (___arg1->pViewportState);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopRasterizationState
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineRasterizationStateCreateInfo*
      "___return (___arg1->pRasterizationState);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopMultisampleState
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineMultisampleStateCreateInfo*
      "___return (___arg1->pMultisampleState);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopDepthStencilState
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineDepthStencilStateCreateInfo*
      "___return (___arg1->pDepthStencilState);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopColorBlendState
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineColorBlendStateCreateInfo*
      "___return (___arg1->pColorBlendState);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfopDynamicState
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineDynamicStateCreateInfo*
      "___return (___arg1->pDynamicState);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfolayout
      (VkGraphicsPipelineCreateInfo*)
      VkPipelineLayout
      "___return (___arg1->layout);")
   (define-c-lambda
      VkGraphicsPipelineCreateInforenderPass
      (VkGraphicsPipelineCreateInfo*)
      VkRenderPass
      "___return (___arg1->renderPass);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfosubpass
      (VkGraphicsPipelineCreateInfo*)
      uint32_t
      "___return (___arg1->subpass);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfobasePipelineHandle
      (VkGraphicsPipelineCreateInfo*)
      VkPipeline
      "___return (___arg1->basePipelineHandle);")
   (define-c-lambda
      VkGraphicsPipelineCreateInfobasePipelineIndex
      (VkGraphicsPipelineCreateInfo*)
      int32_t
      "___return (___arg1->basePipelineIndex);")
   (define-c-lambda
      make-VkGraphicsPipelineCreateInfo*
      (int)
      VkGraphicsPipelineCreateInfo*
      "VkGraphicsPipelineCreateInfo* vkgraphicspipelinecreateinfo = malloc(___arg1 * sizeof(VkGraphicsPipelineCreateInfo));
      ___return (vkgraphicspipelinecreateinfo);")
   (define-c-lambda
      ref-VkGraphicsPipelineCreateInfo
      (VkGraphicsPipelineCreateInfo* int)
      VkGraphicsPipelineCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkGraphicsPipelineCreateInfo
      ((pointer VkGraphicsPipelineCreateInfo))
      VkGraphicsPipelineCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkGraphicsPipelineCreateInfo
      (void*
         VkPipelineCreateFlags
         uint32_t
         VkPipelineShaderStageCreateInfo*
         VkPipelineVertexInputStateCreateInfo*
         VkPipelineInputAssemblyStateCreateInfo*
         VkPipelineTessellationStateCreateInfo*
         VkPipelineViewportStateCreateInfo*
         VkPipelineRasterizationStateCreateInfo*
         VkPipelineMultisampleStateCreateInfo*
         VkPipelineDepthStencilStateCreateInfo*
         VkPipelineColorBlendStateCreateInfo*
         VkPipelineDynamicStateCreateInfo*
         VkPipelineLayout
         VkRenderPass
         uint32_t
         VkPipeline
         int32_t)
      VkGraphicsPipelineCreateInfo*
      "VkGraphicsPipelineCreateInfo *graphicspipelinecreateinfo = malloc(sizeof(VkGraphicsPipelineCreateInfo));
graphicspipelinecreateinfo->sType=VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
graphicspipelinecreateinfo->pNext=___arg1;
graphicspipelinecreateinfo->flags=___arg2;
graphicspipelinecreateinfo->stageCount=___arg3;
graphicspipelinecreateinfo->pStages=___arg4;
graphicspipelinecreateinfo->pVertexInputState=___arg5;
graphicspipelinecreateinfo->pInputAssemblyState=___arg6;
graphicspipelinecreateinfo->pTessellationState=___arg7;
graphicspipelinecreateinfo->pViewportState=___arg8;
graphicspipelinecreateinfo->pRasterizationState=___arg9;
graphicspipelinecreateinfo->pMultisampleState=___arg10;
graphicspipelinecreateinfo->pDepthStencilState=___arg11;
graphicspipelinecreateinfo->pColorBlendState=___arg12;
graphicspipelinecreateinfo->pDynamicState=___arg13;
graphicspipelinecreateinfo->layout=___arg14;
graphicspipelinecreateinfo->renderPass=___arg15;
graphicspipelinecreateinfo->subpass=___arg16;
graphicspipelinecreateinfo->basePipelineHandle=___arg17;
graphicspipelinecreateinfo->basePipelineIndex=___arg18;
___return (graphicspipelinecreateinfo);"))
(begin-ffi
   (make-VkPipelineCacheCreateInfo
      ptr->VkPipelineCacheCreateInfo
      ref-VkPipelineCacheCreateInfo
      make-VkPipelineCacheCreateInfo*
      VkPipelineCacheCreateInfopInitialData
      VkPipelineCacheCreateInfoinitialDataSize
      VkPipelineCacheCreateInfoflags
      VkPipelineCacheCreateInfopNext
      VkPipelineCacheCreateInfosType
      VkPipelineCacheCreateInfo
      VkPipelineCacheCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPipelineCacheCreateInfo (struct "VkPipelineCacheCreateInfo"))
   (c-define-type VkPipelineCacheCreateInfo* (pointer VkPipelineCacheCreateInfo))
   (define-c-lambda
      VkPipelineCacheCreateInfosType
      (VkPipelineCacheCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineCacheCreateInfopNext
      (VkPipelineCacheCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineCacheCreateInfoflags
      (VkPipelineCacheCreateInfo*)
      VkPipelineCacheCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineCacheCreateInfoinitialDataSize
      (VkPipelineCacheCreateInfo*)
      size_t
      "___return (___arg1->initialDataSize);")
   (define-c-lambda
      VkPipelineCacheCreateInfopInitialData
      (VkPipelineCacheCreateInfo*)
      void*
      "___return (___arg1->pInitialData);")
   (define-c-lambda
      make-VkPipelineCacheCreateInfo*
      (int)
      VkPipelineCacheCreateInfo*
      "VkPipelineCacheCreateInfo* vkpipelinecachecreateinfo = malloc(___arg1 * sizeof(VkPipelineCacheCreateInfo));
      ___return (vkpipelinecachecreateinfo);")
   (define-c-lambda
      ref-VkPipelineCacheCreateInfo
      (VkPipelineCacheCreateInfo* int)
      VkPipelineCacheCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineCacheCreateInfo
      ((pointer VkPipelineCacheCreateInfo))
      VkPipelineCacheCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineCacheCreateInfo
      (void* VkPipelineCacheCreateFlags size_t void*)
      VkPipelineCacheCreateInfo*
      "VkPipelineCacheCreateInfo *pipelinecachecreateinfo = malloc(sizeof(VkPipelineCacheCreateInfo));
pipelinecachecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
pipelinecachecreateinfo->pNext=___arg1;
pipelinecachecreateinfo->flags=___arg2;
pipelinecachecreateinfo->initialDataSize=___arg3;
pipelinecachecreateinfo->pInitialData=___arg4;
___return (pipelinecachecreateinfo);"))
(begin-ffi
   (make-VkPushConstantRange
      ptr->VkPushConstantRange
      ref-VkPushConstantRange
      make-VkPushConstantRange*
      VkPushConstantRangesize
      VkPushConstantRangeoffset
      VkPushConstantRangestageFlags
      VkPushConstantRange
      VkPushConstantRange*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPushConstantRange (struct "VkPushConstantRange"))
   (c-define-type VkPushConstantRange* (pointer VkPushConstantRange))
   (define-c-lambda
      VkPushConstantRangestageFlags
      (VkPushConstantRange*)
      VkShaderStageFlags
      "___return (___arg1->stageFlags);")
   (define-c-lambda
      VkPushConstantRangeoffset
      (VkPushConstantRange*)
      uint32_t
      "___return (___arg1->offset);")
   (define-c-lambda
      VkPushConstantRangesize
      (VkPushConstantRange*)
      uint32_t
      "___return (___arg1->size);")
   (define-c-lambda
      make-VkPushConstantRange*
      (int)
      VkPushConstantRange*
      "VkPushConstantRange* vkpushconstantrange = malloc(___arg1 * sizeof(VkPushConstantRange));
      ___return (vkpushconstantrange);")
   (define-c-lambda
      ref-VkPushConstantRange
      (VkPushConstantRange* int)
      VkPushConstantRange*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPushConstantRange
      ((pointer VkPushConstantRange))
      VkPushConstantRange
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPushConstantRange
      (VkShaderStageFlags uint32_t uint32_t)
      VkPushConstantRange*
      "VkPushConstantRange *pushconstantrange = malloc(sizeof(VkPushConstantRange));
pushconstantrange->stageFlags=___arg1;
pushconstantrange->offset=___arg2;
pushconstantrange->size=___arg3;
___return (pushconstantrange);"))
(begin-ffi
   (make-VkPipelineLayoutCreateInfo
      ptr->VkPipelineLayoutCreateInfo
      ref-VkPipelineLayoutCreateInfo
      make-VkPipelineLayoutCreateInfo*
      VkPipelineLayoutCreateInfopPushConstantRanges
      VkPipelineLayoutCreateInfopushConstantRangeCount
      VkPipelineLayoutCreateInfopSetLayouts
      VkPipelineLayoutCreateInfosetLayoutCount
      VkPipelineLayoutCreateInfoflags
      VkPipelineLayoutCreateInfopNext
      VkPipelineLayoutCreateInfosType
      VkPipelineLayoutCreateInfo
      VkPipelineLayoutCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPipelineLayoutCreateInfo (struct "VkPipelineLayoutCreateInfo"))
   (c-define-type VkPipelineLayoutCreateInfo* (pointer VkPipelineLayoutCreateInfo))
   (define-c-lambda
      VkPipelineLayoutCreateInfosType
      (VkPipelineLayoutCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineLayoutCreateInfopNext
      (VkPipelineLayoutCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineLayoutCreateInfoflags
      (VkPipelineLayoutCreateInfo*)
      VkPipelineLayoutCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineLayoutCreateInfosetLayoutCount
      (VkPipelineLayoutCreateInfo*)
      uint32_t
      "___return (___arg1->setLayoutCount);")
   (define-c-lambda
      VkPipelineLayoutCreateInfopSetLayouts
      (VkPipelineLayoutCreateInfo*)
      VkDescriptorSetLayout*
      "___return (___arg1->pSetLayouts);")
   (define-c-lambda
      VkPipelineLayoutCreateInfopushConstantRangeCount
      (VkPipelineLayoutCreateInfo*)
      uint32_t
      "___return (___arg1->pushConstantRangeCount);")
   (define-c-lambda
      VkPipelineLayoutCreateInfopPushConstantRanges
      (VkPipelineLayoutCreateInfo*)
      VkPushConstantRange*
      "___return (___arg1->pPushConstantRanges);")
   (define-c-lambda
      make-VkPipelineLayoutCreateInfo*
      (int)
      VkPipelineLayoutCreateInfo*
      "VkPipelineLayoutCreateInfo* vkpipelinelayoutcreateinfo = malloc(___arg1 * sizeof(VkPipelineLayoutCreateInfo));
      ___return (vkpipelinelayoutcreateinfo);")
   (define-c-lambda
      ref-VkPipelineLayoutCreateInfo
      (VkPipelineLayoutCreateInfo* int)
      VkPipelineLayoutCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineLayoutCreateInfo
      ((pointer VkPipelineLayoutCreateInfo))
      VkPipelineLayoutCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineLayoutCreateInfo
      (void*
         VkPipelineLayoutCreateFlags
         uint32_t
         VkDescriptorSetLayout*
         uint32_t
         VkPushConstantRange*)
      VkPipelineLayoutCreateInfo*
      "VkPipelineLayoutCreateInfo *pipelinelayoutcreateinfo = malloc(sizeof(VkPipelineLayoutCreateInfo));
pipelinelayoutcreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
pipelinelayoutcreateinfo->pNext=___arg1;
pipelinelayoutcreateinfo->flags=___arg2;
pipelinelayoutcreateinfo->setLayoutCount=___arg3;
pipelinelayoutcreateinfo->pSetLayouts=___arg4;
pipelinelayoutcreateinfo->pushConstantRangeCount=___arg5;
pipelinelayoutcreateinfo->pPushConstantRanges=___arg6;
___return (pipelinelayoutcreateinfo);"))
(begin-ffi
   (make-VkSamplerCreateInfo
      ptr->VkSamplerCreateInfo
      ref-VkSamplerCreateInfo
      make-VkSamplerCreateInfo*
      VkSamplerCreateInfounnormalizedCoordinates
      VkSamplerCreateInfoborderColor
      VkSamplerCreateInfomaxLod
      VkSamplerCreateInfominLod
      VkSamplerCreateInfocompareOp
      VkSamplerCreateInfocompareEnable
      VkSamplerCreateInfomaxAnisotropy
      VkSamplerCreateInfoanisotropyEnable
      VkSamplerCreateInfomipLodBias
      VkSamplerCreateInfoaddressModeW
      VkSamplerCreateInfoaddressModeV
      VkSamplerCreateInfoaddressModeU
      VkSamplerCreateInfomipmapMode
      VkSamplerCreateInfominFilter
      VkSamplerCreateInfomagFilter
      VkSamplerCreateInfoflags
      VkSamplerCreateInfopNext
      VkSamplerCreateInfosType
      VkSamplerCreateInfo
      VkSamplerCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSamplerCreateInfo (struct "VkSamplerCreateInfo"))
   (c-define-type VkSamplerCreateInfo* (pointer VkSamplerCreateInfo))
   (define-c-lambda
      VkSamplerCreateInfosType
      (VkSamplerCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSamplerCreateInfopNext
      (VkSamplerCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSamplerCreateInfoflags
      (VkSamplerCreateInfo*)
      VkSamplerCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkSamplerCreateInfomagFilter
      (VkSamplerCreateInfo*)
      VkFilter
      "___return (___arg1->magFilter);")
   (define-c-lambda
      VkSamplerCreateInfominFilter
      (VkSamplerCreateInfo*)
      VkFilter
      "___return (___arg1->minFilter);")
   (define-c-lambda
      VkSamplerCreateInfomipmapMode
      (VkSamplerCreateInfo*)
      VkSamplerMipmapMode
      "___return (___arg1->mipmapMode);")
   (define-c-lambda
      VkSamplerCreateInfoaddressModeU
      (VkSamplerCreateInfo*)
      VkSamplerAddressMode
      "___return (___arg1->addressModeU);")
   (define-c-lambda
      VkSamplerCreateInfoaddressModeV
      (VkSamplerCreateInfo*)
      VkSamplerAddressMode
      "___return (___arg1->addressModeV);")
   (define-c-lambda
      VkSamplerCreateInfoaddressModeW
      (VkSamplerCreateInfo*)
      VkSamplerAddressMode
      "___return (___arg1->addressModeW);")
   (define-c-lambda
      VkSamplerCreateInfomipLodBias
      (VkSamplerCreateInfo*)
      float
      "___return (___arg1->mipLodBias);")
   (define-c-lambda
      VkSamplerCreateInfoanisotropyEnable
      (VkSamplerCreateInfo*)
      VkBool32
      "___return (___arg1->anisotropyEnable);")
   (define-c-lambda
      VkSamplerCreateInfomaxAnisotropy
      (VkSamplerCreateInfo*)
      float
      "___return (___arg1->maxAnisotropy);")
   (define-c-lambda
      VkSamplerCreateInfocompareEnable
      (VkSamplerCreateInfo*)
      VkBool32
      "___return (___arg1->compareEnable);")
   (define-c-lambda
      VkSamplerCreateInfocompareOp
      (VkSamplerCreateInfo*)
      VkCompareOp
      "___return (___arg1->compareOp);")
   (define-c-lambda
      VkSamplerCreateInfominLod
      (VkSamplerCreateInfo*)
      float
      "___return (___arg1->minLod);")
   (define-c-lambda
      VkSamplerCreateInfomaxLod
      (VkSamplerCreateInfo*)
      float
      "___return (___arg1->maxLod);")
   (define-c-lambda
      VkSamplerCreateInfoborderColor
      (VkSamplerCreateInfo*)
      VkBorderColor
      "___return (___arg1->borderColor);")
   (define-c-lambda
      VkSamplerCreateInfounnormalizedCoordinates
      (VkSamplerCreateInfo*)
      VkBool32
      "___return (___arg1->unnormalizedCoordinates);")
   (define-c-lambda
      make-VkSamplerCreateInfo*
      (int)
      VkSamplerCreateInfo*
      "VkSamplerCreateInfo* vksamplercreateinfo = malloc(___arg1 * sizeof(VkSamplerCreateInfo));
      ___return (vksamplercreateinfo);")
   (define-c-lambda
      ref-VkSamplerCreateInfo
      (VkSamplerCreateInfo* int)
      VkSamplerCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSamplerCreateInfo
      ((pointer VkSamplerCreateInfo))
      VkSamplerCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSamplerCreateInfo
      (void*
         VkSamplerCreateFlags
         VkFilter
         VkFilter
         VkSamplerMipmapMode
         VkSamplerAddressMode
         VkSamplerAddressMode
         VkSamplerAddressMode
         float
         VkBool32
         float
         VkBool32
         VkCompareOp
         float
         float
         VkBorderColor
         VkBool32)
      VkSamplerCreateInfo*
      "VkSamplerCreateInfo *samplercreateinfo = malloc(sizeof(VkSamplerCreateInfo));
samplercreateinfo->sType=VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
samplercreateinfo->pNext=___arg1;
samplercreateinfo->flags=___arg2;
samplercreateinfo->magFilter=___arg3;
samplercreateinfo->minFilter=___arg4;
samplercreateinfo->mipmapMode=___arg5;
samplercreateinfo->addressModeU=___arg6;
samplercreateinfo->addressModeV=___arg7;
samplercreateinfo->addressModeW=___arg8;
samplercreateinfo->mipLodBias=___arg9;
samplercreateinfo->anisotropyEnable=___arg10;
samplercreateinfo->maxAnisotropy=___arg11;
samplercreateinfo->compareEnable=___arg12;
samplercreateinfo->compareOp=___arg13;
samplercreateinfo->minLod=___arg14;
samplercreateinfo->maxLod=___arg15;
samplercreateinfo->borderColor=___arg16;
samplercreateinfo->unnormalizedCoordinates=___arg17;
___return (samplercreateinfo);"))
(begin-ffi
   (make-VkCommandPoolCreateInfo
      ptr->VkCommandPoolCreateInfo
      ref-VkCommandPoolCreateInfo
      make-VkCommandPoolCreateInfo*
      VkCommandPoolCreateInfoqueueFamilyIndex
      VkCommandPoolCreateInfoflags
      VkCommandPoolCreateInfopNext
      VkCommandPoolCreateInfosType
      VkCommandPoolCreateInfo
      VkCommandPoolCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkCommandPoolCreateInfo (struct "VkCommandPoolCreateInfo"))
   (c-define-type VkCommandPoolCreateInfo* (pointer VkCommandPoolCreateInfo))
   (define-c-lambda
      VkCommandPoolCreateInfosType
      (VkCommandPoolCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCommandPoolCreateInfopNext
      (VkCommandPoolCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCommandPoolCreateInfoflags
      (VkCommandPoolCreateInfo*)
      VkCommandPoolCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkCommandPoolCreateInfoqueueFamilyIndex
      (VkCommandPoolCreateInfo*)
      uint32_t
      "___return (___arg1->queueFamilyIndex);")
   (define-c-lambda
      make-VkCommandPoolCreateInfo*
      (int)
      VkCommandPoolCreateInfo*
      "VkCommandPoolCreateInfo* vkcommandpoolcreateinfo = malloc(___arg1 * sizeof(VkCommandPoolCreateInfo));
      ___return (vkcommandpoolcreateinfo);")
   (define-c-lambda
      ref-VkCommandPoolCreateInfo
      (VkCommandPoolCreateInfo* int)
      VkCommandPoolCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCommandPoolCreateInfo
      ((pointer VkCommandPoolCreateInfo))
      VkCommandPoolCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCommandPoolCreateInfo
      (void* VkCommandPoolCreateFlags uint32_t)
      VkCommandPoolCreateInfo*
      "VkCommandPoolCreateInfo *commandpoolcreateinfo = malloc(sizeof(VkCommandPoolCreateInfo));
commandpoolcreateinfo->sType=VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
commandpoolcreateinfo->pNext=___arg1;
commandpoolcreateinfo->flags=___arg2;
commandpoolcreateinfo->queueFamilyIndex=___arg3;
___return (commandpoolcreateinfo);"))
(begin-ffi
   (make-VkCommandBufferAllocateInfo
      ptr->VkCommandBufferAllocateInfo
      ref-VkCommandBufferAllocateInfo
      make-VkCommandBufferAllocateInfo*
      VkCommandBufferAllocateInfocommandBufferCount
      VkCommandBufferAllocateInfolevel
      VkCommandBufferAllocateInfocommandPool
      VkCommandBufferAllocateInfopNext
      VkCommandBufferAllocateInfosType
      VkCommandBufferAllocateInfo
      VkCommandBufferAllocateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkCommandBufferAllocateInfo (struct "VkCommandBufferAllocateInfo"))
   (c-define-type VkCommandBufferAllocateInfo* (pointer VkCommandBufferAllocateInfo))
   (define-c-lambda
      VkCommandBufferAllocateInfosType
      (VkCommandBufferAllocateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCommandBufferAllocateInfopNext
      (VkCommandBufferAllocateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCommandBufferAllocateInfocommandPool
      (VkCommandBufferAllocateInfo*)
      VkCommandPool
      "___return (___arg1->commandPool);")
   (define-c-lambda
      VkCommandBufferAllocateInfolevel
      (VkCommandBufferAllocateInfo*)
      VkCommandBufferLevel
      "___return (___arg1->level);")
   (define-c-lambda
      VkCommandBufferAllocateInfocommandBufferCount
      (VkCommandBufferAllocateInfo*)
      uint32_t
      "___return (___arg1->commandBufferCount);")
   (define-c-lambda
      make-VkCommandBufferAllocateInfo*
      (int)
      VkCommandBufferAllocateInfo*
      "VkCommandBufferAllocateInfo* vkcommandbufferallocateinfo = malloc(___arg1 * sizeof(VkCommandBufferAllocateInfo));
      ___return (vkcommandbufferallocateinfo);")
   (define-c-lambda
      ref-VkCommandBufferAllocateInfo
      (VkCommandBufferAllocateInfo* int)
      VkCommandBufferAllocateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCommandBufferAllocateInfo
      ((pointer VkCommandBufferAllocateInfo))
      VkCommandBufferAllocateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCommandBufferAllocateInfo
      (void* VkCommandPool VkCommandBufferLevel uint32_t)
      VkCommandBufferAllocateInfo*
      "VkCommandBufferAllocateInfo *commandbufferallocateinfo = malloc(sizeof(VkCommandBufferAllocateInfo));
commandbufferallocateinfo->sType=VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
commandbufferallocateinfo->pNext=___arg1;
commandbufferallocateinfo->commandPool=___arg2;
commandbufferallocateinfo->level=___arg3;
commandbufferallocateinfo->commandBufferCount=___arg4;
___return (commandbufferallocateinfo);"))
(begin-ffi
   (make-VkCommandBufferInheritanceInfo
      ptr->VkCommandBufferInheritanceInfo
      ref-VkCommandBufferInheritanceInfo
      make-VkCommandBufferInheritanceInfo*
      VkCommandBufferInheritanceInfopipelineStatistics
      VkCommandBufferInheritanceInfoqueryFlags
      VkCommandBufferInheritanceInfoocclusionQueryEnable
      VkCommandBufferInheritanceInfoframebuffer
      VkCommandBufferInheritanceInfosubpass
      VkCommandBufferInheritanceInforenderPass
      VkCommandBufferInheritanceInfopNext
      VkCommandBufferInheritanceInfosType
      VkCommandBufferInheritanceInfo
      VkCommandBufferInheritanceInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkCommandBufferInheritanceInfo
      (struct "VkCommandBufferInheritanceInfo"))
   (c-define-type
      VkCommandBufferInheritanceInfo*
      (pointer VkCommandBufferInheritanceInfo))
   (define-c-lambda
      VkCommandBufferInheritanceInfosType
      (VkCommandBufferInheritanceInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCommandBufferInheritanceInfopNext
      (VkCommandBufferInheritanceInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCommandBufferInheritanceInforenderPass
      (VkCommandBufferInheritanceInfo*)
      VkRenderPass
      "___return (___arg1->renderPass);")
   (define-c-lambda
      VkCommandBufferInheritanceInfosubpass
      (VkCommandBufferInheritanceInfo*)
      uint32_t
      "___return (___arg1->subpass);")
   (define-c-lambda
      VkCommandBufferInheritanceInfoframebuffer
      (VkCommandBufferInheritanceInfo*)
      VkFramebuffer
      "___return (___arg1->framebuffer);")
   (define-c-lambda
      VkCommandBufferInheritanceInfoocclusionQueryEnable
      (VkCommandBufferInheritanceInfo*)
      VkBool32
      "___return (___arg1->occlusionQueryEnable);")
   (define-c-lambda
      VkCommandBufferInheritanceInfoqueryFlags
      (VkCommandBufferInheritanceInfo*)
      VkQueryControlFlags
      "___return (___arg1->queryFlags);")
   (define-c-lambda
      VkCommandBufferInheritanceInfopipelineStatistics
      (VkCommandBufferInheritanceInfo*)
      VkQueryPipelineStatisticFlags
      "___return (___arg1->pipelineStatistics);")
   (define-c-lambda
      make-VkCommandBufferInheritanceInfo*
      (int)
      VkCommandBufferInheritanceInfo*
      "VkCommandBufferInheritanceInfo* vkcommandbufferinheritanceinfo = malloc(___arg1 * sizeof(VkCommandBufferInheritanceInfo));
      ___return (vkcommandbufferinheritanceinfo);")
   (define-c-lambda
      ref-VkCommandBufferInheritanceInfo
      (VkCommandBufferInheritanceInfo* int)
      VkCommandBufferInheritanceInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCommandBufferInheritanceInfo
      ((pointer VkCommandBufferInheritanceInfo))
      VkCommandBufferInheritanceInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCommandBufferInheritanceInfo
      (void*
         VkRenderPass
         uint32_t
         VkFramebuffer
         VkBool32
         VkQueryControlFlags
         VkQueryPipelineStatisticFlags)
      VkCommandBufferInheritanceInfo*
      "VkCommandBufferInheritanceInfo *commandbufferinheritanceinfo = malloc(sizeof(VkCommandBufferInheritanceInfo));
commandbufferinheritanceinfo->sType=VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
commandbufferinheritanceinfo->pNext=___arg1;
commandbufferinheritanceinfo->renderPass=___arg2;
commandbufferinheritanceinfo->subpass=___arg3;
commandbufferinheritanceinfo->framebuffer=___arg4;
commandbufferinheritanceinfo->occlusionQueryEnable=___arg5;
commandbufferinheritanceinfo->queryFlags=___arg6;
commandbufferinheritanceinfo->pipelineStatistics=___arg7;
___return (commandbufferinheritanceinfo);"))
(begin-ffi
   (make-VkCommandBufferBeginInfo
      ptr->VkCommandBufferBeginInfo
      ref-VkCommandBufferBeginInfo
      make-VkCommandBufferBeginInfo*
      VkCommandBufferBeginInfopInheritanceInfo
      VkCommandBufferBeginInfoflags
      VkCommandBufferBeginInfopNext
      VkCommandBufferBeginInfosType
      VkCommandBufferBeginInfo
      VkCommandBufferBeginInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkCommandBufferBeginInfo (struct "VkCommandBufferBeginInfo"))
   (c-define-type VkCommandBufferBeginInfo* (pointer VkCommandBufferBeginInfo))
   (define-c-lambda
      VkCommandBufferBeginInfosType
      (VkCommandBufferBeginInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCommandBufferBeginInfopNext
      (VkCommandBufferBeginInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCommandBufferBeginInfoflags
      (VkCommandBufferBeginInfo*)
      VkCommandBufferUsageFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkCommandBufferBeginInfopInheritanceInfo
      (VkCommandBufferBeginInfo*)
      VkCommandBufferInheritanceInfo*
      "___return (___arg1->pInheritanceInfo);")
   (define-c-lambda
      make-VkCommandBufferBeginInfo*
      (int)
      VkCommandBufferBeginInfo*
      "VkCommandBufferBeginInfo* vkcommandbufferbegininfo = malloc(___arg1 * sizeof(VkCommandBufferBeginInfo));
      ___return (vkcommandbufferbegininfo);")
   (define-c-lambda
      ref-VkCommandBufferBeginInfo
      (VkCommandBufferBeginInfo* int)
      VkCommandBufferBeginInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCommandBufferBeginInfo
      ((pointer VkCommandBufferBeginInfo))
      VkCommandBufferBeginInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCommandBufferBeginInfo
      (void* VkCommandBufferUsageFlags VkCommandBufferInheritanceInfo*)
      VkCommandBufferBeginInfo*
      "VkCommandBufferBeginInfo *commandbufferbegininfo = malloc(sizeof(VkCommandBufferBeginInfo));
commandbufferbegininfo->sType=VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
commandbufferbegininfo->pNext=___arg1;
commandbufferbegininfo->flags=___arg2;
commandbufferbegininfo->pInheritanceInfo=___arg3;
___return (commandbufferbegininfo);"))
(begin-ffi
   (make-VkRenderPassBeginInfo
      ptr->VkRenderPassBeginInfo
      ref-VkRenderPassBeginInfo
      make-VkRenderPassBeginInfo*
      VkRenderPassBeginInfopClearValues
      VkRenderPassBeginInfoclearValueCount
      VkRenderPassBeginInforenderArea
      VkRenderPassBeginInfoframebuffer
      VkRenderPassBeginInforenderPass
      VkRenderPassBeginInfopNext
      VkRenderPassBeginInfosType
      VkRenderPassBeginInfo
      VkRenderPassBeginInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkRenderPassBeginInfo (struct "VkRenderPassBeginInfo"))
   (c-define-type VkRenderPassBeginInfo* (pointer VkRenderPassBeginInfo))
   (define-c-lambda
      VkRenderPassBeginInfosType
      (VkRenderPassBeginInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkRenderPassBeginInfopNext
      (VkRenderPassBeginInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkRenderPassBeginInforenderPass
      (VkRenderPassBeginInfo*)
      VkRenderPass
      "___return (___arg1->renderPass);")
   (define-c-lambda
      VkRenderPassBeginInfoframebuffer
      (VkRenderPassBeginInfo*)
      VkFramebuffer
      "___return (___arg1->framebuffer);")
   (define-c-lambda
      VkRenderPassBeginInforenderArea
      (VkRenderPassBeginInfo*)
      VkRect2D
      "___return (___arg1->renderArea);")
   (define-c-lambda
      VkRenderPassBeginInfoclearValueCount
      (VkRenderPassBeginInfo*)
      uint32_t
      "___return (___arg1->clearValueCount);")
   (define-c-lambda
      VkRenderPassBeginInfopClearValues
      (VkRenderPassBeginInfo*)
      VkClearValue*
      "___return (___arg1->pClearValues);")
   (define-c-lambda
      make-VkRenderPassBeginInfo*
      (int)
      VkRenderPassBeginInfo*
      "VkRenderPassBeginInfo* vkrenderpassbegininfo = malloc(___arg1 * sizeof(VkRenderPassBeginInfo));
      ___return (vkrenderpassbegininfo);")
   (define-c-lambda
      ref-VkRenderPassBeginInfo
      (VkRenderPassBeginInfo* int)
      VkRenderPassBeginInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkRenderPassBeginInfo
      ((pointer VkRenderPassBeginInfo))
      VkRenderPassBeginInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkRenderPassBeginInfo
      (void* VkRenderPass VkFramebuffer VkRect2D uint32_t VkClearValue*)
      VkRenderPassBeginInfo*
      "VkRenderPassBeginInfo *renderpassbegininfo = malloc(sizeof(VkRenderPassBeginInfo));
renderpassbegininfo->sType=VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
renderpassbegininfo->pNext=___arg1;
renderpassbegininfo->renderPass=___arg2;
renderpassbegininfo->framebuffer=___arg3;
renderpassbegininfo->renderArea=___arg4;
renderpassbegininfo->clearValueCount=___arg5;
renderpassbegininfo->pClearValues=___arg6;
___return (renderpassbegininfo);"))
(begin-ffi
   (make-VkClearDepthStencilValue
      ptr->VkClearDepthStencilValue
      ref-VkClearDepthStencilValue
      make-VkClearDepthStencilValue*
      VkClearDepthStencilValuestencil
      VkClearDepthStencilValuedepth
      VkClearDepthStencilValue
      VkClearDepthStencilValue*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkClearDepthStencilValue (struct "VkClearDepthStencilValue"))
   (c-define-type VkClearDepthStencilValue* (pointer VkClearDepthStencilValue))
   (define-c-lambda
      VkClearDepthStencilValuedepth
      (VkClearDepthStencilValue*)
      float
      "___return (___arg1->depth);")
   (define-c-lambda
      VkClearDepthStencilValuestencil
      (VkClearDepthStencilValue*)
      uint32_t
      "___return (___arg1->stencil);")
   (define-c-lambda
      make-VkClearDepthStencilValue*
      (int)
      VkClearDepthStencilValue*
      "VkClearDepthStencilValue* vkcleardepthstencilvalue = malloc(___arg1 * sizeof(VkClearDepthStencilValue));
      ___return (vkcleardepthstencilvalue);")
   (define-c-lambda
      ref-VkClearDepthStencilValue
      (VkClearDepthStencilValue* int)
      VkClearDepthStencilValue*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkClearDepthStencilValue
      ((pointer VkClearDepthStencilValue))
      VkClearDepthStencilValue
      "___return(*___arg1);")
   (define-c-lambda
      make-VkClearDepthStencilValue
      (float uint32_t)
      VkClearDepthStencilValue*
      "VkClearDepthStencilValue *cleardepthstencilvalue = malloc(sizeof(VkClearDepthStencilValue));
cleardepthstencilvalue->depth=___arg1;
cleardepthstencilvalue->stencil=___arg2;
___return (cleardepthstencilvalue);"))
(begin-ffi
   (make-VkClearAttachment
      ptr->VkClearAttachment
      ref-VkClearAttachment
      make-VkClearAttachment*
      VkClearAttachmentclearValue
      VkClearAttachmentcolorAttachment
      VkClearAttachmentaspectMask
      VkClearAttachment
      VkClearAttachment*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkClearAttachment (struct "VkClearAttachment"))
   (c-define-type VkClearAttachment* (pointer VkClearAttachment))
   (define-c-lambda
      VkClearAttachmentaspectMask
      (VkClearAttachment*)
      VkImageAspectFlags
      "___return (___arg1->aspectMask);")
   (define-c-lambda
      VkClearAttachmentcolorAttachment
      (VkClearAttachment*)
      uint32_t
      "___return (___arg1->colorAttachment);")
   (define-c-lambda
      VkClearAttachmentclearValue
      (VkClearAttachment*)
      VkClearValue
      "___return (___arg1->clearValue);")
   (define-c-lambda
      make-VkClearAttachment*
      (int)
      VkClearAttachment*
      "VkClearAttachment* vkclearattachment = malloc(___arg1 * sizeof(VkClearAttachment));
      ___return (vkclearattachment);")
   (define-c-lambda
      ref-VkClearAttachment
      (VkClearAttachment* int)
      VkClearAttachment*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkClearAttachment
      ((pointer VkClearAttachment))
      VkClearAttachment
      "___return(*___arg1);")
   (define-c-lambda
      make-VkClearAttachment
      (VkImageAspectFlags uint32_t VkClearValue)
      VkClearAttachment*
      "VkClearAttachment *clearattachment = malloc(sizeof(VkClearAttachment));
clearattachment->aspectMask=___arg1;
clearattachment->colorAttachment=___arg2;
clearattachment->clearValue=___arg3;
___return (clearattachment);"))
(begin-ffi
   (make-VkAttachmentDescription
      ptr->VkAttachmentDescription
      ref-VkAttachmentDescription
      make-VkAttachmentDescription*
      VkAttachmentDescriptionfinalLayout
      VkAttachmentDescriptioninitialLayout
      VkAttachmentDescriptionstencilStoreOp
      VkAttachmentDescriptionstencilLoadOp
      VkAttachmentDescriptionstoreOp
      VkAttachmentDescriptionloadOp
      VkAttachmentDescriptionsamples
      VkAttachmentDescriptionformat
      VkAttachmentDescriptionflags
      VkAttachmentDescription
      VkAttachmentDescription*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkAttachmentDescription (struct "VkAttachmentDescription"))
   (c-define-type VkAttachmentDescription* (pointer VkAttachmentDescription))
   (define-c-lambda
      VkAttachmentDescriptionflags
      (VkAttachmentDescription*)
      VkAttachmentDescriptionFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkAttachmentDescriptionformat
      (VkAttachmentDescription*)
      VkFormat
      "___return (___arg1->format);")
   (define-c-lambda
      VkAttachmentDescriptionsamples
      (VkAttachmentDescription*)
      VkSampleCountFlagBits
      "___return (___arg1->samples);")
   (define-c-lambda
      VkAttachmentDescriptionloadOp
      (VkAttachmentDescription*)
      VkAttachmentLoadOp
      "___return (___arg1->loadOp);")
   (define-c-lambda
      VkAttachmentDescriptionstoreOp
      (VkAttachmentDescription*)
      VkAttachmentStoreOp
      "___return (___arg1->storeOp);")
   (define-c-lambda
      VkAttachmentDescriptionstencilLoadOp
      (VkAttachmentDescription*)
      VkAttachmentLoadOp
      "___return (___arg1->stencilLoadOp);")
   (define-c-lambda
      VkAttachmentDescriptionstencilStoreOp
      (VkAttachmentDescription*)
      VkAttachmentStoreOp
      "___return (___arg1->stencilStoreOp);")
   (define-c-lambda
      VkAttachmentDescriptioninitialLayout
      (VkAttachmentDescription*)
      VkImageLayout
      "___return (___arg1->initialLayout);")
   (define-c-lambda
      VkAttachmentDescriptionfinalLayout
      (VkAttachmentDescription*)
      VkImageLayout
      "___return (___arg1->finalLayout);")
   (define-c-lambda
      make-VkAttachmentDescription*
      (int)
      VkAttachmentDescription*
      "VkAttachmentDescription* vkattachmentdescription = malloc(___arg1 * sizeof(VkAttachmentDescription));
      ___return (vkattachmentdescription);")
   (define-c-lambda
      ref-VkAttachmentDescription
      (VkAttachmentDescription* int)
      VkAttachmentDescription*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkAttachmentDescription
      ((pointer VkAttachmentDescription))
      VkAttachmentDescription
      "___return(*___arg1);")
   (define-c-lambda
      make-VkAttachmentDescription
      (VkAttachmentDescriptionFlags
         VkFormat
         VkSampleCountFlagBits
         VkAttachmentLoadOp
         VkAttachmentStoreOp
         VkAttachmentLoadOp
         VkAttachmentStoreOp
         VkImageLayout
         VkImageLayout)
      VkAttachmentDescription*
      "VkAttachmentDescription *attachmentdescription = malloc(sizeof(VkAttachmentDescription));
attachmentdescription->flags=___arg1;
attachmentdescription->format=___arg2;
attachmentdescription->samples=___arg3;
attachmentdescription->loadOp=___arg4;
attachmentdescription->storeOp=___arg5;
attachmentdescription->stencilLoadOp=___arg6;
attachmentdescription->stencilStoreOp=___arg7;
attachmentdescription->initialLayout=___arg8;
attachmentdescription->finalLayout=___arg9;
___return (attachmentdescription);"))
(begin-ffi
   (make-VkAttachmentReference
      ptr->VkAttachmentReference
      ref-VkAttachmentReference
      make-VkAttachmentReference*
      VkAttachmentReferencelayout
      VkAttachmentReferenceattachment
      VkAttachmentReference
      VkAttachmentReference*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkAttachmentReference (struct "VkAttachmentReference"))
   (c-define-type VkAttachmentReference* (pointer VkAttachmentReference))
   (define-c-lambda
      VkAttachmentReferenceattachment
      (VkAttachmentReference*)
      uint32_t
      "___return (___arg1->attachment);")
   (define-c-lambda
      VkAttachmentReferencelayout
      (VkAttachmentReference*)
      VkImageLayout
      "___return (___arg1->layout);")
   (define-c-lambda
      make-VkAttachmentReference*
      (int)
      VkAttachmentReference*
      "VkAttachmentReference* vkattachmentreference = malloc(___arg1 * sizeof(VkAttachmentReference));
      ___return (vkattachmentreference);")
   (define-c-lambda
      ref-VkAttachmentReference
      (VkAttachmentReference* int)
      VkAttachmentReference*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkAttachmentReference
      ((pointer VkAttachmentReference))
      VkAttachmentReference
      "___return(*___arg1);")
   (define-c-lambda
      make-VkAttachmentReference
      (uint32_t VkImageLayout)
      VkAttachmentReference*
      "VkAttachmentReference *attachmentreference = malloc(sizeof(VkAttachmentReference));
attachmentreference->attachment=___arg1;
attachmentreference->layout=___arg2;
___return (attachmentreference);"))
(begin-ffi
   (make-VkSubpassDescription
      ptr->VkSubpassDescription
      ref-VkSubpassDescription
      make-VkSubpassDescription*
      VkSubpassDescriptionpPreserveAttachments
      VkSubpassDescriptionpreserveAttachmentCount
      VkSubpassDescriptionpDepthStencilAttachment
      VkSubpassDescriptionpResolveAttachments
      VkSubpassDescriptionpColorAttachments
      VkSubpassDescriptioncolorAttachmentCount
      VkSubpassDescriptionpInputAttachments
      VkSubpassDescriptioninputAttachmentCount
      VkSubpassDescriptionpipelineBindPoint
      VkSubpassDescriptionflags
      VkSubpassDescription
      VkSubpassDescription*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSubpassDescription (struct "VkSubpassDescription"))
   (c-define-type VkSubpassDescription* (pointer VkSubpassDescription))
   (define-c-lambda
      VkSubpassDescriptionflags
      (VkSubpassDescription*)
      VkSubpassDescriptionFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkSubpassDescriptionpipelineBindPoint
      (VkSubpassDescription*)
      VkPipelineBindPoint
      "___return (___arg1->pipelineBindPoint);")
   (define-c-lambda
      VkSubpassDescriptioninputAttachmentCount
      (VkSubpassDescription*)
      uint32_t
      "___return (___arg1->inputAttachmentCount);")
   (define-c-lambda
      VkSubpassDescriptionpInputAttachments
      (VkSubpassDescription*)
      VkAttachmentReference*
      "___return (___arg1->pInputAttachments);")
   (define-c-lambda
      VkSubpassDescriptioncolorAttachmentCount
      (VkSubpassDescription*)
      uint32_t
      "___return (___arg1->colorAttachmentCount);")
   (define-c-lambda
      VkSubpassDescriptionpColorAttachments
      (VkSubpassDescription*)
      VkAttachmentReference*
      "___return (___arg1->pColorAttachments);")
   (define-c-lambda
      VkSubpassDescriptionpResolveAttachments
      (VkSubpassDescription*)
      VkAttachmentReference*
      "___return (___arg1->pResolveAttachments);")
   (define-c-lambda
      VkSubpassDescriptionpDepthStencilAttachment
      (VkSubpassDescription*)
      VkAttachmentReference*
      "___return (___arg1->pDepthStencilAttachment);")
   (define-c-lambda
      VkSubpassDescriptionpreserveAttachmentCount
      (VkSubpassDescription*)
      uint32_t
      "___return (___arg1->preserveAttachmentCount);")
   (define-c-lambda
      VkSubpassDescriptionpPreserveAttachments
      (VkSubpassDescription*)
      uint32_t*
      "___return (___arg1->pPreserveAttachments);")
   (define-c-lambda
      make-VkSubpassDescription*
      (int)
      VkSubpassDescription*
      "VkSubpassDescription* vksubpassdescription = malloc(___arg1 * sizeof(VkSubpassDescription));
      ___return (vksubpassdescription);")
   (define-c-lambda
      ref-VkSubpassDescription
      (VkSubpassDescription* int)
      VkSubpassDescription*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSubpassDescription
      ((pointer VkSubpassDescription))
      VkSubpassDescription
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSubpassDescription
      (VkSubpassDescriptionFlags
         VkPipelineBindPoint
         uint32_t
         VkAttachmentReference*
         uint32_t
         VkAttachmentReference*
         VkAttachmentReference*
         VkAttachmentReference*
         uint32_t
         uint32_t*)
      VkSubpassDescription*
      "VkSubpassDescription *subpassdescription = malloc(sizeof(VkSubpassDescription));
subpassdescription->flags=___arg1;
subpassdescription->pipelineBindPoint=___arg2;
subpassdescription->inputAttachmentCount=___arg3;
subpassdescription->pInputAttachments=___arg4;
subpassdescription->colorAttachmentCount=___arg5;
subpassdescription->pColorAttachments=___arg6;
subpassdescription->pResolveAttachments=___arg7;
subpassdescription->pDepthStencilAttachment=___arg8;
subpassdescription->preserveAttachmentCount=___arg9;
subpassdescription->pPreserveAttachments=___arg10;
___return (subpassdescription);"))
(begin-ffi
   (make-VkSubpassDependency
      ptr->VkSubpassDependency
      ref-VkSubpassDependency
      make-VkSubpassDependency*
      VkSubpassDependencydependencyFlags
      VkSubpassDependencydstAccessMask
      VkSubpassDependencysrcAccessMask
      VkSubpassDependencydstStageMask
      VkSubpassDependencysrcStageMask
      VkSubpassDependencydstSubpass
      VkSubpassDependencysrcSubpass
      VkSubpassDependency
      VkSubpassDependency*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSubpassDependency (struct "VkSubpassDependency"))
   (c-define-type VkSubpassDependency* (pointer VkSubpassDependency))
   (define-c-lambda
      VkSubpassDependencysrcSubpass
      (VkSubpassDependency*)
      uint32_t
      "___return (___arg1->srcSubpass);")
   (define-c-lambda
      VkSubpassDependencydstSubpass
      (VkSubpassDependency*)
      uint32_t
      "___return (___arg1->dstSubpass);")
   (define-c-lambda
      VkSubpassDependencysrcStageMask
      (VkSubpassDependency*)
      VkPipelineStageFlags
      "___return (___arg1->srcStageMask);")
   (define-c-lambda
      VkSubpassDependencydstStageMask
      (VkSubpassDependency*)
      VkPipelineStageFlags
      "___return (___arg1->dstStageMask);")
   (define-c-lambda
      VkSubpassDependencysrcAccessMask
      (VkSubpassDependency*)
      VkAccessFlags
      "___return (___arg1->srcAccessMask);")
   (define-c-lambda
      VkSubpassDependencydstAccessMask
      (VkSubpassDependency*)
      VkAccessFlags
      "___return (___arg1->dstAccessMask);")
   (define-c-lambda
      VkSubpassDependencydependencyFlags
      (VkSubpassDependency*)
      VkDependencyFlags
      "___return (___arg1->dependencyFlags);")
   (define-c-lambda
      make-VkSubpassDependency*
      (int)
      VkSubpassDependency*
      "VkSubpassDependency* vksubpassdependency = malloc(___arg1 * sizeof(VkSubpassDependency));
      ___return (vksubpassdependency);")
   (define-c-lambda
      ref-VkSubpassDependency
      (VkSubpassDependency* int)
      VkSubpassDependency*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSubpassDependency
      ((pointer VkSubpassDependency))
      VkSubpassDependency
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSubpassDependency
      (uint32_t
         uint32_t
         VkPipelineStageFlags
         VkPipelineStageFlags
         VkAccessFlags
         VkAccessFlags
         VkDependencyFlags)
      VkSubpassDependency*
      "VkSubpassDependency *subpassdependency = malloc(sizeof(VkSubpassDependency));
subpassdependency->srcSubpass=___arg1;
subpassdependency->dstSubpass=___arg2;
subpassdependency->srcStageMask=___arg3;
subpassdependency->dstStageMask=___arg4;
subpassdependency->srcAccessMask=___arg5;
subpassdependency->dstAccessMask=___arg6;
subpassdependency->dependencyFlags=___arg7;
___return (subpassdependency);"))
(begin-ffi
   (make-VkRenderPassCreateInfo
      ptr->VkRenderPassCreateInfo
      ref-VkRenderPassCreateInfo
      make-VkRenderPassCreateInfo*
      VkRenderPassCreateInfopDependencies
      VkRenderPassCreateInfodependencyCount
      VkRenderPassCreateInfopSubpasses
      VkRenderPassCreateInfosubpassCount
      VkRenderPassCreateInfopAttachments
      VkRenderPassCreateInfoattachmentCount
      VkRenderPassCreateInfoflags
      VkRenderPassCreateInfopNext
      VkRenderPassCreateInfosType
      VkRenderPassCreateInfo
      VkRenderPassCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkRenderPassCreateInfo (struct "VkRenderPassCreateInfo"))
   (c-define-type VkRenderPassCreateInfo* (pointer VkRenderPassCreateInfo))
   (define-c-lambda
      VkRenderPassCreateInfosType
      (VkRenderPassCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkRenderPassCreateInfopNext
      (VkRenderPassCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkRenderPassCreateInfoflags
      (VkRenderPassCreateInfo*)
      VkRenderPassCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkRenderPassCreateInfoattachmentCount
      (VkRenderPassCreateInfo*)
      uint32_t
      "___return (___arg1->attachmentCount);")
   (define-c-lambda
      VkRenderPassCreateInfopAttachments
      (VkRenderPassCreateInfo*)
      VkAttachmentDescription*
      "___return (___arg1->pAttachments);")
   (define-c-lambda
      VkRenderPassCreateInfosubpassCount
      (VkRenderPassCreateInfo*)
      uint32_t
      "___return (___arg1->subpassCount);")
   (define-c-lambda
      VkRenderPassCreateInfopSubpasses
      (VkRenderPassCreateInfo*)
      VkSubpassDescription*
      "___return (___arg1->pSubpasses);")
   (define-c-lambda
      VkRenderPassCreateInfodependencyCount
      (VkRenderPassCreateInfo*)
      uint32_t
      "___return (___arg1->dependencyCount);")
   (define-c-lambda
      VkRenderPassCreateInfopDependencies
      (VkRenderPassCreateInfo*)
      VkSubpassDependency*
      "___return (___arg1->pDependencies);")
   (define-c-lambda
      make-VkRenderPassCreateInfo*
      (int)
      VkRenderPassCreateInfo*
      "VkRenderPassCreateInfo* vkrenderpasscreateinfo = malloc(___arg1 * sizeof(VkRenderPassCreateInfo));
      ___return (vkrenderpasscreateinfo);")
   (define-c-lambda
      ref-VkRenderPassCreateInfo
      (VkRenderPassCreateInfo* int)
      VkRenderPassCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkRenderPassCreateInfo
      ((pointer VkRenderPassCreateInfo))
      VkRenderPassCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkRenderPassCreateInfo
      (void*
         VkRenderPassCreateFlags
         uint32_t
         VkAttachmentDescription*
         uint32_t
         VkSubpassDescription*
         uint32_t
         VkSubpassDependency*)
      VkRenderPassCreateInfo*
      "VkRenderPassCreateInfo *renderpasscreateinfo = malloc(sizeof(VkRenderPassCreateInfo));
renderpasscreateinfo->sType=VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
renderpasscreateinfo->pNext=___arg1;
renderpasscreateinfo->flags=___arg2;
renderpasscreateinfo->attachmentCount=___arg3;
renderpasscreateinfo->pAttachments=___arg4;
renderpasscreateinfo->subpassCount=___arg5;
renderpasscreateinfo->pSubpasses=___arg6;
renderpasscreateinfo->dependencyCount=___arg7;
renderpasscreateinfo->pDependencies=___arg8;
___return (renderpasscreateinfo);"))
(begin-ffi
   (make-VkEventCreateInfo
      ptr->VkEventCreateInfo
      ref-VkEventCreateInfo
      make-VkEventCreateInfo*
      VkEventCreateInfoflags
      VkEventCreateInfopNext
      VkEventCreateInfosType
      VkEventCreateInfo
      VkEventCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkEventCreateInfo (struct "VkEventCreateInfo"))
   (c-define-type VkEventCreateInfo* (pointer VkEventCreateInfo))
   (define-c-lambda
      VkEventCreateInfosType
      (VkEventCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkEventCreateInfopNext
      (VkEventCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkEventCreateInfoflags
      (VkEventCreateInfo*)
      VkEventCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkEventCreateInfo*
      (int)
      VkEventCreateInfo*
      "VkEventCreateInfo* vkeventcreateinfo = malloc(___arg1 * sizeof(VkEventCreateInfo));
      ___return (vkeventcreateinfo);")
   (define-c-lambda
      ref-VkEventCreateInfo
      (VkEventCreateInfo* int)
      VkEventCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkEventCreateInfo
      ((pointer VkEventCreateInfo))
      VkEventCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkEventCreateInfo
      (void* VkEventCreateFlags)
      VkEventCreateInfo*
      "VkEventCreateInfo *eventcreateinfo = malloc(sizeof(VkEventCreateInfo));
eventcreateinfo->sType=VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
eventcreateinfo->pNext=___arg1;
eventcreateinfo->flags=___arg2;
___return (eventcreateinfo);"))
(begin-ffi
   (make-VkFenceCreateInfo
      ptr->VkFenceCreateInfo
      ref-VkFenceCreateInfo
      make-VkFenceCreateInfo*
      VkFenceCreateInfoflags
      VkFenceCreateInfopNext
      VkFenceCreateInfosType
      VkFenceCreateInfo
      VkFenceCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkFenceCreateInfo (struct "VkFenceCreateInfo"))
   (c-define-type VkFenceCreateInfo* (pointer VkFenceCreateInfo))
   (define-c-lambda
      VkFenceCreateInfosType
      (VkFenceCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkFenceCreateInfopNext
      (VkFenceCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkFenceCreateInfoflags
      (VkFenceCreateInfo*)
      VkFenceCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkFenceCreateInfo*
      (int)
      VkFenceCreateInfo*
      "VkFenceCreateInfo* vkfencecreateinfo = malloc(___arg1 * sizeof(VkFenceCreateInfo));
      ___return (vkfencecreateinfo);")
   (define-c-lambda
      ref-VkFenceCreateInfo
      (VkFenceCreateInfo* int)
      VkFenceCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkFenceCreateInfo
      ((pointer VkFenceCreateInfo))
      VkFenceCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkFenceCreateInfo
      (void* VkFenceCreateFlags)
      VkFenceCreateInfo*
      "VkFenceCreateInfo *fencecreateinfo = malloc(sizeof(VkFenceCreateInfo));
fencecreateinfo->sType=VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
fencecreateinfo->pNext=___arg1;
fencecreateinfo->flags=___arg2;
___return (fencecreateinfo);"))
(begin-ffi
   (make-VkSemaphoreCreateInfo
      ptr->VkSemaphoreCreateInfo
      ref-VkSemaphoreCreateInfo
      make-VkSemaphoreCreateInfo*
      VkSemaphoreCreateInfoflags
      VkSemaphoreCreateInfopNext
      VkSemaphoreCreateInfosType
      VkSemaphoreCreateInfo
      VkSemaphoreCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSemaphoreCreateInfo (struct "VkSemaphoreCreateInfo"))
   (c-define-type VkSemaphoreCreateInfo* (pointer VkSemaphoreCreateInfo))
   (define-c-lambda
      VkSemaphoreCreateInfosType
      (VkSemaphoreCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSemaphoreCreateInfopNext
      (VkSemaphoreCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSemaphoreCreateInfoflags
      (VkSemaphoreCreateInfo*)
      VkSemaphoreCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkSemaphoreCreateInfo*
      (int)
      VkSemaphoreCreateInfo*
      "VkSemaphoreCreateInfo* vksemaphorecreateinfo = malloc(___arg1 * sizeof(VkSemaphoreCreateInfo));
      ___return (vksemaphorecreateinfo);")
   (define-c-lambda
      ref-VkSemaphoreCreateInfo
      (VkSemaphoreCreateInfo* int)
      VkSemaphoreCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSemaphoreCreateInfo
      ((pointer VkSemaphoreCreateInfo))
      VkSemaphoreCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSemaphoreCreateInfo
      (void* VkSemaphoreCreateFlags)
      VkSemaphoreCreateInfo*
      "VkSemaphoreCreateInfo *semaphorecreateinfo = malloc(sizeof(VkSemaphoreCreateInfo));
semaphorecreateinfo->sType=VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
semaphorecreateinfo->pNext=___arg1;
semaphorecreateinfo->flags=___arg2;
___return (semaphorecreateinfo);"))
(begin-ffi
   (make-VkQueryPoolCreateInfo
      ptr->VkQueryPoolCreateInfo
      ref-VkQueryPoolCreateInfo
      make-VkQueryPoolCreateInfo*
      VkQueryPoolCreateInfopipelineStatistics
      VkQueryPoolCreateInfoqueryCount
      VkQueryPoolCreateInfoqueryType
      VkQueryPoolCreateInfoflags
      VkQueryPoolCreateInfopNext
      VkQueryPoolCreateInfosType
      VkQueryPoolCreateInfo
      VkQueryPoolCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkQueryPoolCreateInfo (struct "VkQueryPoolCreateInfo"))
   (c-define-type VkQueryPoolCreateInfo* (pointer VkQueryPoolCreateInfo))
   (define-c-lambda
      VkQueryPoolCreateInfosType
      (VkQueryPoolCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkQueryPoolCreateInfopNext
      (VkQueryPoolCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkQueryPoolCreateInfoflags
      (VkQueryPoolCreateInfo*)
      VkQueryPoolCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkQueryPoolCreateInfoqueryType
      (VkQueryPoolCreateInfo*)
      VkQueryType
      "___return (___arg1->queryType);")
   (define-c-lambda
      VkQueryPoolCreateInfoqueryCount
      (VkQueryPoolCreateInfo*)
      uint32_t
      "___return (___arg1->queryCount);")
   (define-c-lambda
      VkQueryPoolCreateInfopipelineStatistics
      (VkQueryPoolCreateInfo*)
      VkQueryPipelineStatisticFlags
      "___return (___arg1->pipelineStatistics);")
   (define-c-lambda
      make-VkQueryPoolCreateInfo*
      (int)
      VkQueryPoolCreateInfo*
      "VkQueryPoolCreateInfo* vkquerypoolcreateinfo = malloc(___arg1 * sizeof(VkQueryPoolCreateInfo));
      ___return (vkquerypoolcreateinfo);")
   (define-c-lambda
      ref-VkQueryPoolCreateInfo
      (VkQueryPoolCreateInfo* int)
      VkQueryPoolCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkQueryPoolCreateInfo
      ((pointer VkQueryPoolCreateInfo))
      VkQueryPoolCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkQueryPoolCreateInfo
      (void* VkQueryPoolCreateFlags VkQueryType uint32_t VkQueryPipelineStatisticFlags)
      VkQueryPoolCreateInfo*
      "VkQueryPoolCreateInfo *querypoolcreateinfo = malloc(sizeof(VkQueryPoolCreateInfo));
querypoolcreateinfo->sType=VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
querypoolcreateinfo->pNext=___arg1;
querypoolcreateinfo->flags=___arg2;
querypoolcreateinfo->queryType=___arg3;
querypoolcreateinfo->queryCount=___arg4;
querypoolcreateinfo->pipelineStatistics=___arg5;
___return (querypoolcreateinfo);"))
(begin-ffi
   (make-VkFramebufferCreateInfo
      ptr->VkFramebufferCreateInfo
      ref-VkFramebufferCreateInfo
      make-VkFramebufferCreateInfo*
      VkFramebufferCreateInfolayers
      VkFramebufferCreateInfoheight
      VkFramebufferCreateInfowidth
      VkFramebufferCreateInfopAttachments
      VkFramebufferCreateInfoattachmentCount
      VkFramebufferCreateInforenderPass
      VkFramebufferCreateInfoflags
      VkFramebufferCreateInfopNext
      VkFramebufferCreateInfosType
      VkFramebufferCreateInfo
      VkFramebufferCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkFramebufferCreateInfo (struct "VkFramebufferCreateInfo"))
   (c-define-type VkFramebufferCreateInfo* (pointer VkFramebufferCreateInfo))
   (define-c-lambda
      VkFramebufferCreateInfosType
      (VkFramebufferCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkFramebufferCreateInfopNext
      (VkFramebufferCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkFramebufferCreateInfoflags
      (VkFramebufferCreateInfo*)
      VkFramebufferCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkFramebufferCreateInforenderPass
      (VkFramebufferCreateInfo*)
      VkRenderPass
      "___return (___arg1->renderPass);")
   (define-c-lambda
      VkFramebufferCreateInfoattachmentCount
      (VkFramebufferCreateInfo*)
      uint32_t
      "___return (___arg1->attachmentCount);")
   (define-c-lambda
      VkFramebufferCreateInfopAttachments
      (VkFramebufferCreateInfo*)
      VkImageView*
      "___return (___arg1->pAttachments);")
   (define-c-lambda
      VkFramebufferCreateInfowidth
      (VkFramebufferCreateInfo*)
      uint32_t
      "___return (___arg1->width);")
   (define-c-lambda
      VkFramebufferCreateInfoheight
      (VkFramebufferCreateInfo*)
      uint32_t
      "___return (___arg1->height);")
   (define-c-lambda
      VkFramebufferCreateInfolayers
      (VkFramebufferCreateInfo*)
      uint32_t
      "___return (___arg1->layers);")
   (define-c-lambda
      make-VkFramebufferCreateInfo*
      (int)
      VkFramebufferCreateInfo*
      "VkFramebufferCreateInfo* vkframebuffercreateinfo = malloc(___arg1 * sizeof(VkFramebufferCreateInfo));
      ___return (vkframebuffercreateinfo);")
   (define-c-lambda
      ref-VkFramebufferCreateInfo
      (VkFramebufferCreateInfo* int)
      VkFramebufferCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkFramebufferCreateInfo
      ((pointer VkFramebufferCreateInfo))
      VkFramebufferCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkFramebufferCreateInfo
      (void*
         VkFramebufferCreateFlags
         VkRenderPass
         uint32_t
         VkImageView*
         uint32_t
         uint32_t
         uint32_t)
      VkFramebufferCreateInfo*
      "VkFramebufferCreateInfo *framebuffercreateinfo = malloc(sizeof(VkFramebufferCreateInfo));
framebuffercreateinfo->sType=VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
framebuffercreateinfo->pNext=___arg1;
framebuffercreateinfo->flags=___arg2;
framebuffercreateinfo->renderPass=___arg3;
framebuffercreateinfo->attachmentCount=___arg4;
framebuffercreateinfo->pAttachments=___arg5;
framebuffercreateinfo->width=___arg6;
framebuffercreateinfo->height=___arg7;
framebuffercreateinfo->layers=___arg8;
___return (framebuffercreateinfo);"))
(begin-ffi
   (make-VkDrawIndirectCommand
      ptr->VkDrawIndirectCommand
      ref-VkDrawIndirectCommand
      make-VkDrawIndirectCommand*
      VkDrawIndirectCommandfirstInstance
      VkDrawIndirectCommandfirstVertex
      VkDrawIndirectCommandinstanceCount
      VkDrawIndirectCommandvertexCount
      VkDrawIndirectCommand
      VkDrawIndirectCommand*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDrawIndirectCommand (struct "VkDrawIndirectCommand"))
   (c-define-type VkDrawIndirectCommand* (pointer VkDrawIndirectCommand))
   (define-c-lambda
      VkDrawIndirectCommandvertexCount
      (VkDrawIndirectCommand*)
      uint32_t
      "___return (___arg1->vertexCount);")
   (define-c-lambda
      VkDrawIndirectCommandinstanceCount
      (VkDrawIndirectCommand*)
      uint32_t
      "___return (___arg1->instanceCount);")
   (define-c-lambda
      VkDrawIndirectCommandfirstVertex
      (VkDrawIndirectCommand*)
      uint32_t
      "___return (___arg1->firstVertex);")
   (define-c-lambda
      VkDrawIndirectCommandfirstInstance
      (VkDrawIndirectCommand*)
      uint32_t
      "___return (___arg1->firstInstance);")
   (define-c-lambda
      make-VkDrawIndirectCommand*
      (int)
      VkDrawIndirectCommand*
      "VkDrawIndirectCommand* vkdrawindirectcommand = malloc(___arg1 * sizeof(VkDrawIndirectCommand));
      ___return (vkdrawindirectcommand);")
   (define-c-lambda
      ref-VkDrawIndirectCommand
      (VkDrawIndirectCommand* int)
      VkDrawIndirectCommand*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDrawIndirectCommand
      ((pointer VkDrawIndirectCommand))
      VkDrawIndirectCommand
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDrawIndirectCommand
      (uint32_t uint32_t uint32_t uint32_t)
      VkDrawIndirectCommand*
      "VkDrawIndirectCommand *drawindirectcommand = malloc(sizeof(VkDrawIndirectCommand));
drawindirectcommand->vertexCount=___arg1;
drawindirectcommand->instanceCount=___arg2;
drawindirectcommand->firstVertex=___arg3;
drawindirectcommand->firstInstance=___arg4;
___return (drawindirectcommand);"))
(begin-ffi
   (make-VkDrawIndexedIndirectCommand
      ptr->VkDrawIndexedIndirectCommand
      ref-VkDrawIndexedIndirectCommand
      make-VkDrawIndexedIndirectCommand*
      VkDrawIndexedIndirectCommandfirstInstance
      VkDrawIndexedIndirectCommandvertexOffset
      VkDrawIndexedIndirectCommandfirstIndex
      VkDrawIndexedIndirectCommandinstanceCount
      VkDrawIndexedIndirectCommandindexCount
      VkDrawIndexedIndirectCommand
      VkDrawIndexedIndirectCommand*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDrawIndexedIndirectCommand (struct "VkDrawIndexedIndirectCommand"))
   (c-define-type VkDrawIndexedIndirectCommand* (pointer VkDrawIndexedIndirectCommand))
   (define-c-lambda
      VkDrawIndexedIndirectCommandindexCount
      (VkDrawIndexedIndirectCommand*)
      uint32_t
      "___return (___arg1->indexCount);")
   (define-c-lambda
      VkDrawIndexedIndirectCommandinstanceCount
      (VkDrawIndexedIndirectCommand*)
      uint32_t
      "___return (___arg1->instanceCount);")
   (define-c-lambda
      VkDrawIndexedIndirectCommandfirstIndex
      (VkDrawIndexedIndirectCommand*)
      uint32_t
      "___return (___arg1->firstIndex);")
   (define-c-lambda
      VkDrawIndexedIndirectCommandvertexOffset
      (VkDrawIndexedIndirectCommand*)
      int32_t
      "___return (___arg1->vertexOffset);")
   (define-c-lambda
      VkDrawIndexedIndirectCommandfirstInstance
      (VkDrawIndexedIndirectCommand*)
      uint32_t
      "___return (___arg1->firstInstance);")
   (define-c-lambda
      make-VkDrawIndexedIndirectCommand*
      (int)
      VkDrawIndexedIndirectCommand*
      "VkDrawIndexedIndirectCommand* vkdrawindexedindirectcommand = malloc(___arg1 * sizeof(VkDrawIndexedIndirectCommand));
      ___return (vkdrawindexedindirectcommand);")
   (define-c-lambda
      ref-VkDrawIndexedIndirectCommand
      (VkDrawIndexedIndirectCommand* int)
      VkDrawIndexedIndirectCommand*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDrawIndexedIndirectCommand
      ((pointer VkDrawIndexedIndirectCommand))
      VkDrawIndexedIndirectCommand
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDrawIndexedIndirectCommand
      (uint32_t uint32_t uint32_t int32_t uint32_t)
      VkDrawIndexedIndirectCommand*
      "VkDrawIndexedIndirectCommand *drawindexedindirectcommand = malloc(sizeof(VkDrawIndexedIndirectCommand));
drawindexedindirectcommand->indexCount=___arg1;
drawindexedindirectcommand->instanceCount=___arg2;
drawindexedindirectcommand->firstIndex=___arg3;
drawindexedindirectcommand->vertexOffset=___arg4;
drawindexedindirectcommand->firstInstance=___arg5;
___return (drawindexedindirectcommand);"))
(begin-ffi
   (make-VkDispatchIndirectCommand
      ptr->VkDispatchIndirectCommand
      ref-VkDispatchIndirectCommand
      make-VkDispatchIndirectCommand*
      VkDispatchIndirectCommandz
      VkDispatchIndirectCommandy
      VkDispatchIndirectCommandx
      VkDispatchIndirectCommand
      VkDispatchIndirectCommand*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDispatchIndirectCommand (struct "VkDispatchIndirectCommand"))
   (c-define-type VkDispatchIndirectCommand* (pointer VkDispatchIndirectCommand))
   (define-c-lambda
      VkDispatchIndirectCommandx
      (VkDispatchIndirectCommand*)
      uint32_t
      "___return (___arg1->x);")
   (define-c-lambda
      VkDispatchIndirectCommandy
      (VkDispatchIndirectCommand*)
      uint32_t
      "___return (___arg1->y);")
   (define-c-lambda
      VkDispatchIndirectCommandz
      (VkDispatchIndirectCommand*)
      uint32_t
      "___return (___arg1->z);")
   (define-c-lambda
      make-VkDispatchIndirectCommand*
      (int)
      VkDispatchIndirectCommand*
      "VkDispatchIndirectCommand* vkdispatchindirectcommand = malloc(___arg1 * sizeof(VkDispatchIndirectCommand));
      ___return (vkdispatchindirectcommand);")
   (define-c-lambda
      ref-VkDispatchIndirectCommand
      (VkDispatchIndirectCommand* int)
      VkDispatchIndirectCommand*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDispatchIndirectCommand
      ((pointer VkDispatchIndirectCommand))
      VkDispatchIndirectCommand
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDispatchIndirectCommand
      (uint32_t uint32_t uint32_t)
      VkDispatchIndirectCommand*
      "VkDispatchIndirectCommand *dispatchindirectcommand = malloc(sizeof(VkDispatchIndirectCommand));
dispatchindirectcommand->x=___arg1;
dispatchindirectcommand->y=___arg2;
dispatchindirectcommand->z=___arg3;
___return (dispatchindirectcommand);"))
(begin-ffi
   (make-VkSubmitInfo
      ptr->VkSubmitInfo
      ref-VkSubmitInfo
      make-VkSubmitInfo*
      VkSubmitInfopSignalSemaphores
      VkSubmitInfosignalSemaphoreCount
      VkSubmitInfopCommandBuffers
      VkSubmitInfocommandBufferCount
      VkSubmitInfopWaitDstStageMask
      VkSubmitInfopWaitSemaphores
      VkSubmitInfowaitSemaphoreCount
      VkSubmitInfopNext
      VkSubmitInfosType
      VkSubmitInfo
      VkSubmitInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSubmitInfo (struct "VkSubmitInfo"))
   (c-define-type VkSubmitInfo* (pointer VkSubmitInfo))
   (define-c-lambda
      VkSubmitInfosType
      (VkSubmitInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda VkSubmitInfopNext (VkSubmitInfo*) void* "___return (___arg1->pNext);")
   (define-c-lambda
      VkSubmitInfowaitSemaphoreCount
      (VkSubmitInfo*)
      uint32_t
      "___return (___arg1->waitSemaphoreCount);")
   (define-c-lambda
      VkSubmitInfopWaitSemaphores
      (VkSubmitInfo*)
      VkSemaphore*
      "___return (___arg1->pWaitSemaphores);")
   (define-c-lambda
      VkSubmitInfopWaitDstStageMask
      (VkSubmitInfo*)
      VkPipelineStageFlags*
      "___return (___arg1->pWaitDstStageMask);")
   (define-c-lambda
      VkSubmitInfocommandBufferCount
      (VkSubmitInfo*)
      uint32_t
      "___return (___arg1->commandBufferCount);")
   (define-c-lambda
      VkSubmitInfopCommandBuffers
      (VkSubmitInfo*)
      VkCommandBuffer*
      "___return (___arg1->pCommandBuffers);")
   (define-c-lambda
      VkSubmitInfosignalSemaphoreCount
      (VkSubmitInfo*)
      uint32_t
      "___return (___arg1->signalSemaphoreCount);")
   (define-c-lambda
      VkSubmitInfopSignalSemaphores
      (VkSubmitInfo*)
      VkSemaphore*
      "___return (___arg1->pSignalSemaphores);")
   (define-c-lambda
      make-VkSubmitInfo*
      (int)
      VkSubmitInfo*
      "VkSubmitInfo* vksubmitinfo = malloc(___arg1 * sizeof(VkSubmitInfo));
      ___return (vksubmitinfo);")
   (define-c-lambda
      ref-VkSubmitInfo
      (VkSubmitInfo* int)
      VkSubmitInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSubmitInfo
      ((pointer VkSubmitInfo))
      VkSubmitInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSubmitInfo
      (void*
         uint32_t
         VkSemaphore*
         VkPipelineStageFlags*
         uint32_t
         VkCommandBuffer*
         uint32_t
         VkSemaphore*)
      VkSubmitInfo*
      "VkSubmitInfo *submitinfo = malloc(sizeof(VkSubmitInfo));
submitinfo->sType=VK_STRUCTURE_TYPE_SUBMIT_INFO;
submitinfo->pNext=___arg1;
submitinfo->waitSemaphoreCount=___arg2;
submitinfo->pWaitSemaphores=___arg3;
submitinfo->pWaitDstStageMask=___arg4;
submitinfo->commandBufferCount=___arg5;
submitinfo->pCommandBuffers=___arg6;
submitinfo->signalSemaphoreCount=___arg7;
submitinfo->pSignalSemaphores=___arg8;
___return (submitinfo);"))
(begin-ffi
   (make-VkDisplayPropertiesKHR
      ptr->VkDisplayPropertiesKHR
      ref-VkDisplayPropertiesKHR
      make-VkDisplayPropertiesKHR*
      VkDisplayPropertiesKHRpersistentContent
      VkDisplayPropertiesKHRplaneReorderPossible
      VkDisplayPropertiesKHRsupportedTransforms
      VkDisplayPropertiesKHRphysicalResolution
      VkDisplayPropertiesKHRphysicalDimensions
      VkDisplayPropertiesKHRdisplayName
      VkDisplayPropertiesKHRdisplay
      VkDisplayPropertiesKHR
      VkDisplayPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayPropertiesKHR (struct "VkDisplayPropertiesKHR"))
   (c-define-type VkDisplayPropertiesKHR* (pointer VkDisplayPropertiesKHR))
   (define-c-lambda
      VkDisplayPropertiesKHRdisplay
      (VkDisplayPropertiesKHR*)
      VkDisplayKHR
      "___return (___arg1->display);")
   (define-c-lambda
      VkDisplayPropertiesKHRdisplayName
      (VkDisplayPropertiesKHR*)
      char*
      "___return (___arg1->displayName);")
   (define-c-lambda
      VkDisplayPropertiesKHRphysicalDimensions
      (VkDisplayPropertiesKHR*)
      VkExtent2D
      "___return (___arg1->physicalDimensions);")
   (define-c-lambda
      VkDisplayPropertiesKHRphysicalResolution
      (VkDisplayPropertiesKHR*)
      VkExtent2D
      "___return (___arg1->physicalResolution);")
   (define-c-lambda
      VkDisplayPropertiesKHRsupportedTransforms
      (VkDisplayPropertiesKHR*)
      VkSurfaceTransformFlagsKHR
      "___return (___arg1->supportedTransforms);")
   (define-c-lambda
      VkDisplayPropertiesKHRplaneReorderPossible
      (VkDisplayPropertiesKHR*)
      VkBool32
      "___return (___arg1->planeReorderPossible);")
   (define-c-lambda
      VkDisplayPropertiesKHRpersistentContent
      (VkDisplayPropertiesKHR*)
      VkBool32
      "___return (___arg1->persistentContent);")
   (define-c-lambda
      make-VkDisplayPropertiesKHR*
      (int)
      VkDisplayPropertiesKHR*
      "VkDisplayPropertiesKHR* vkdisplaypropertieskhr = malloc(___arg1 * sizeof(VkDisplayPropertiesKHR));
      ___return (vkdisplaypropertieskhr);")
   (define-c-lambda
      ref-VkDisplayPropertiesKHR
      (VkDisplayPropertiesKHR* int)
      VkDisplayPropertiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayPropertiesKHR
      (VkDisplayKHR
         char*
         VkExtent2D
         VkExtent2D
         VkSurfaceTransformFlagsKHR
         VkBool32
         VkBool32)
      VkDisplayPropertiesKHR*
      "VkDisplayPropertiesKHR *displaypropertieskhr = malloc(sizeof(VkDisplayPropertiesKHR));
displaypropertieskhr->display=___arg1;
displaypropertieskhr->displayName=___arg2;
displaypropertieskhr->physicalDimensions=___arg3;
displaypropertieskhr->physicalResolution=___arg4;
displaypropertieskhr->supportedTransforms=___arg5;
displaypropertieskhr->planeReorderPossible=___arg6;
displaypropertieskhr->persistentContent=___arg7;
___return (displaypropertieskhr);"))
(begin-ffi
   (make-VkDisplayPlanePropertiesKHR
      ptr->VkDisplayPlanePropertiesKHR
      ref-VkDisplayPlanePropertiesKHR
      make-VkDisplayPlanePropertiesKHR*
      VkDisplayPlanePropertiesKHRcurrentStackIndex
      VkDisplayPlanePropertiesKHRcurrentDisplay
      VkDisplayPlanePropertiesKHR
      VkDisplayPlanePropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayPlanePropertiesKHR (struct "VkDisplayPlanePropertiesKHR"))
   (c-define-type VkDisplayPlanePropertiesKHR* (pointer VkDisplayPlanePropertiesKHR))
   (define-c-lambda
      VkDisplayPlanePropertiesKHRcurrentDisplay
      (VkDisplayPlanePropertiesKHR*)
      VkDisplayKHR
      "___return (___arg1->currentDisplay);")
   (define-c-lambda
      VkDisplayPlanePropertiesKHRcurrentStackIndex
      (VkDisplayPlanePropertiesKHR*)
      uint32_t
      "___return (___arg1->currentStackIndex);")
   (define-c-lambda
      make-VkDisplayPlanePropertiesKHR*
      (int)
      VkDisplayPlanePropertiesKHR*
      "VkDisplayPlanePropertiesKHR* vkdisplayplanepropertieskhr = malloc(___arg1 * sizeof(VkDisplayPlanePropertiesKHR));
      ___return (vkdisplayplanepropertieskhr);")
   (define-c-lambda
      ref-VkDisplayPlanePropertiesKHR
      (VkDisplayPlanePropertiesKHR* int)
      VkDisplayPlanePropertiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayPlanePropertiesKHR
      (VkDisplayKHR uint32_t)
      VkDisplayPlanePropertiesKHR*
      "VkDisplayPlanePropertiesKHR *displayplanepropertieskhr = malloc(sizeof(VkDisplayPlanePropertiesKHR));
displayplanepropertieskhr->currentDisplay=___arg1;
displayplanepropertieskhr->currentStackIndex=___arg2;
___return (displayplanepropertieskhr);"))
(begin-ffi
   (make-VkDisplayModeParametersKHR
      ptr->VkDisplayModeParametersKHR
      ref-VkDisplayModeParametersKHR
      make-VkDisplayModeParametersKHR*
      VkDisplayModeParametersKHRrefreshRate
      VkDisplayModeParametersKHRvisibleRegion
      VkDisplayModeParametersKHR
      VkDisplayModeParametersKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayModeParametersKHR (struct "VkDisplayModeParametersKHR"))
   (c-define-type VkDisplayModeParametersKHR* (pointer VkDisplayModeParametersKHR))
   (define-c-lambda
      VkDisplayModeParametersKHRvisibleRegion
      (VkDisplayModeParametersKHR*)
      VkExtent2D
      "___return (___arg1->visibleRegion);")
   (define-c-lambda
      VkDisplayModeParametersKHRrefreshRate
      (VkDisplayModeParametersKHR*)
      uint32_t
      "___return (___arg1->refreshRate);")
   (define-c-lambda
      make-VkDisplayModeParametersKHR*
      (int)
      VkDisplayModeParametersKHR*
      "VkDisplayModeParametersKHR* vkdisplaymodeparameterskhr = malloc(___arg1 * sizeof(VkDisplayModeParametersKHR));
      ___return (vkdisplaymodeparameterskhr);")
   (define-c-lambda
      ref-VkDisplayModeParametersKHR
      (VkDisplayModeParametersKHR* int)
      VkDisplayModeParametersKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayModeParametersKHR
      (VkExtent2D uint32_t)
      VkDisplayModeParametersKHR*
      "VkDisplayModeParametersKHR *displaymodeparameterskhr = malloc(sizeof(VkDisplayModeParametersKHR));
displaymodeparameterskhr->visibleRegion=___arg1;
displaymodeparameterskhr->refreshRate=___arg2;
___return (displaymodeparameterskhr);"))
(begin-ffi
   (make-VkDisplayModePropertiesKHR
      ptr->VkDisplayModePropertiesKHR
      ref-VkDisplayModePropertiesKHR
      make-VkDisplayModePropertiesKHR*
      VkDisplayModePropertiesKHRparameters
      VkDisplayModePropertiesKHRdisplayMode
      VkDisplayModePropertiesKHR
      VkDisplayModePropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayModePropertiesKHR (struct "VkDisplayModePropertiesKHR"))
   (c-define-type VkDisplayModePropertiesKHR* (pointer VkDisplayModePropertiesKHR))
   (define-c-lambda
      VkDisplayModePropertiesKHRdisplayMode
      (VkDisplayModePropertiesKHR*)
      VkDisplayModeKHR
      "___return (___arg1->displayMode);")
   (define-c-lambda
      VkDisplayModePropertiesKHRparameters
      (VkDisplayModePropertiesKHR*)
      VkDisplayModeParametersKHR
      "___return (___arg1->parameters);")
   (define-c-lambda
      make-VkDisplayModePropertiesKHR*
      (int)
      VkDisplayModePropertiesKHR*
      "VkDisplayModePropertiesKHR* vkdisplaymodepropertieskhr = malloc(___arg1 * sizeof(VkDisplayModePropertiesKHR));
      ___return (vkdisplaymodepropertieskhr);")
   (define-c-lambda
      ref-VkDisplayModePropertiesKHR
      (VkDisplayModePropertiesKHR* int)
      VkDisplayModePropertiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayModePropertiesKHR
      (VkDisplayModeKHR VkDisplayModeParametersKHR)
      VkDisplayModePropertiesKHR*
      "VkDisplayModePropertiesKHR *displaymodepropertieskhr = malloc(sizeof(VkDisplayModePropertiesKHR));
displaymodepropertieskhr->displayMode=___arg1;
displaymodepropertieskhr->parameters=___arg2;
___return (displaymodepropertieskhr);"))
(begin-ffi
   (make-VkDisplayModeCreateInfoKHR
      ptr->VkDisplayModeCreateInfoKHR
      ref-VkDisplayModeCreateInfoKHR
      make-VkDisplayModeCreateInfoKHR*
      VkDisplayModeCreateInfoKHRparameters
      VkDisplayModeCreateInfoKHRflags
      VkDisplayModeCreateInfoKHRpNext
      VkDisplayModeCreateInfoKHRsType
      VkDisplayModeCreateInfoKHR
      VkDisplayModeCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayModeCreateInfoKHR (struct "VkDisplayModeCreateInfoKHR"))
   (c-define-type VkDisplayModeCreateInfoKHR* (pointer VkDisplayModeCreateInfoKHR))
   (define-c-lambda
      VkDisplayModeCreateInfoKHRsType
      (VkDisplayModeCreateInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplayModeCreateInfoKHRpNext
      (VkDisplayModeCreateInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplayModeCreateInfoKHRflags
      (VkDisplayModeCreateInfoKHR*)
      VkDisplayModeCreateFlagsKHR
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDisplayModeCreateInfoKHRparameters
      (VkDisplayModeCreateInfoKHR*)
      VkDisplayModeParametersKHR
      "___return (___arg1->parameters);")
   (define-c-lambda
      make-VkDisplayModeCreateInfoKHR*
      (int)
      VkDisplayModeCreateInfoKHR*
      "VkDisplayModeCreateInfoKHR* vkdisplaymodecreateinfokhr = malloc(___arg1 * sizeof(VkDisplayModeCreateInfoKHR));
      ___return (vkdisplaymodecreateinfokhr);")
   (define-c-lambda
      ref-VkDisplayModeCreateInfoKHR
      (VkDisplayModeCreateInfoKHR* int)
      VkDisplayModeCreateInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayModeCreateInfoKHR
      (void* VkDisplayModeCreateFlagsKHR VkDisplayModeParametersKHR)
      VkDisplayModeCreateInfoKHR*
      "VkDisplayModeCreateInfoKHR *displaymodecreateinfokhr = malloc(sizeof(VkDisplayModeCreateInfoKHR));
displaymodecreateinfokhr->sType=VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
displaymodecreateinfokhr->pNext=___arg1;
displaymodecreateinfokhr->flags=___arg2;
displaymodecreateinfokhr->parameters=___arg3;
___return (displaymodecreateinfokhr);"))
(begin-ffi
   (make-VkDisplayPlaneCapabilitiesKHR
      ptr->VkDisplayPlaneCapabilitiesKHR
      ref-VkDisplayPlaneCapabilitiesKHR
      make-VkDisplayPlaneCapabilitiesKHR*
      VkDisplayPlaneCapabilitiesKHRmaxDstExtent
      VkDisplayPlaneCapabilitiesKHRminDstExtent
      VkDisplayPlaneCapabilitiesKHRmaxDstPosition
      VkDisplayPlaneCapabilitiesKHRminDstPosition
      VkDisplayPlaneCapabilitiesKHRmaxSrcExtent
      VkDisplayPlaneCapabilitiesKHRminSrcExtent
      VkDisplayPlaneCapabilitiesKHRmaxSrcPosition
      VkDisplayPlaneCapabilitiesKHRminSrcPosition
      VkDisplayPlaneCapabilitiesKHRsupportedAlpha
      VkDisplayPlaneCapabilitiesKHR
      VkDisplayPlaneCapabilitiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayPlaneCapabilitiesKHR (struct "VkDisplayPlaneCapabilitiesKHR"))
   (c-define-type VkDisplayPlaneCapabilitiesKHR* (pointer VkDisplayPlaneCapabilitiesKHR))
   (define-c-lambda
      VkDisplayPlaneCapabilitiesKHRsupportedAlpha
      (VkDisplayPlaneCapabilitiesKHR*)
      VkDisplayPlaneAlphaFlagsKHR
      "___return (___arg1->supportedAlpha);")
   (define-c-lambda
      VkDisplayPlaneCapabilitiesKHRminSrcPosition
      (VkDisplayPlaneCapabilitiesKHR*)
      VkOffset2D
      "___return (___arg1->minSrcPosition);")
   (define-c-lambda
      VkDisplayPlaneCapabilitiesKHRmaxSrcPosition
      (VkDisplayPlaneCapabilitiesKHR*)
      VkOffset2D
      "___return (___arg1->maxSrcPosition);")
   (define-c-lambda
      VkDisplayPlaneCapabilitiesKHRminSrcExtent
      (VkDisplayPlaneCapabilitiesKHR*)
      VkExtent2D
      "___return (___arg1->minSrcExtent);")
   (define-c-lambda
      VkDisplayPlaneCapabilitiesKHRmaxSrcExtent
      (VkDisplayPlaneCapabilitiesKHR*)
      VkExtent2D
      "___return (___arg1->maxSrcExtent);")
   (define-c-lambda
      VkDisplayPlaneCapabilitiesKHRminDstPosition
      (VkDisplayPlaneCapabilitiesKHR*)
      VkOffset2D
      "___return (___arg1->minDstPosition);")
   (define-c-lambda
      VkDisplayPlaneCapabilitiesKHRmaxDstPosition
      (VkDisplayPlaneCapabilitiesKHR*)
      VkOffset2D
      "___return (___arg1->maxDstPosition);")
   (define-c-lambda
      VkDisplayPlaneCapabilitiesKHRminDstExtent
      (VkDisplayPlaneCapabilitiesKHR*)
      VkExtent2D
      "___return (___arg1->minDstExtent);")
   (define-c-lambda
      VkDisplayPlaneCapabilitiesKHRmaxDstExtent
      (VkDisplayPlaneCapabilitiesKHR*)
      VkExtent2D
      "___return (___arg1->maxDstExtent);")
   (define-c-lambda
      make-VkDisplayPlaneCapabilitiesKHR*
      (int)
      VkDisplayPlaneCapabilitiesKHR*
      "VkDisplayPlaneCapabilitiesKHR* vkdisplayplanecapabilitieskhr = malloc(___arg1 * sizeof(VkDisplayPlaneCapabilitiesKHR));
      ___return (vkdisplayplanecapabilitieskhr);")
   (define-c-lambda
      ref-VkDisplayPlaneCapabilitiesKHR
      (VkDisplayPlaneCapabilitiesKHR* int)
      VkDisplayPlaneCapabilitiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayPlaneCapabilitiesKHR
      (VkDisplayPlaneAlphaFlagsKHR
         VkOffset2D
         VkOffset2D
         VkExtent2D
         VkExtent2D
         VkOffset2D
         VkOffset2D
         VkExtent2D
         VkExtent2D)
      VkDisplayPlaneCapabilitiesKHR*
      "VkDisplayPlaneCapabilitiesKHR *displayplanecapabilitieskhr = malloc(sizeof(VkDisplayPlaneCapabilitiesKHR));
displayplanecapabilitieskhr->supportedAlpha=___arg1;
displayplanecapabilitieskhr->minSrcPosition=___arg2;
displayplanecapabilitieskhr->maxSrcPosition=___arg3;
displayplanecapabilitieskhr->minSrcExtent=___arg4;
displayplanecapabilitieskhr->maxSrcExtent=___arg5;
displayplanecapabilitieskhr->minDstPosition=___arg6;
displayplanecapabilitieskhr->maxDstPosition=___arg7;
displayplanecapabilitieskhr->minDstExtent=___arg8;
displayplanecapabilitieskhr->maxDstExtent=___arg9;
___return (displayplanecapabilitieskhr);"))
(begin-ffi
   (make-VkDisplaySurfaceCreateInfoKHR
      ptr->VkDisplaySurfaceCreateInfoKHR
      ref-VkDisplaySurfaceCreateInfoKHR
      make-VkDisplaySurfaceCreateInfoKHR*
      VkDisplaySurfaceCreateInfoKHRimageExtent
      VkDisplaySurfaceCreateInfoKHRalphaMode
      VkDisplaySurfaceCreateInfoKHRglobalAlpha
      VkDisplaySurfaceCreateInfoKHRtransform
      VkDisplaySurfaceCreateInfoKHRplaneStackIndex
      VkDisplaySurfaceCreateInfoKHRplaneIndex
      VkDisplaySurfaceCreateInfoKHRdisplayMode
      VkDisplaySurfaceCreateInfoKHRflags
      VkDisplaySurfaceCreateInfoKHRpNext
      VkDisplaySurfaceCreateInfoKHRsType
      VkDisplaySurfaceCreateInfoKHR
      VkDisplaySurfaceCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplaySurfaceCreateInfoKHR (struct "VkDisplaySurfaceCreateInfoKHR"))
   (c-define-type VkDisplaySurfaceCreateInfoKHR* (pointer VkDisplaySurfaceCreateInfoKHR))
   (define-c-lambda
      VkDisplaySurfaceCreateInfoKHRsType
      (VkDisplaySurfaceCreateInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplaySurfaceCreateInfoKHRpNext
      (VkDisplaySurfaceCreateInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplaySurfaceCreateInfoKHRflags
      (VkDisplaySurfaceCreateInfoKHR*)
      VkDisplaySurfaceCreateFlagsKHR
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDisplaySurfaceCreateInfoKHRdisplayMode
      (VkDisplaySurfaceCreateInfoKHR*)
      VkDisplayModeKHR
      "___return (___arg1->displayMode);")
   (define-c-lambda
      VkDisplaySurfaceCreateInfoKHRplaneIndex
      (VkDisplaySurfaceCreateInfoKHR*)
      uint32_t
      "___return (___arg1->planeIndex);")
   (define-c-lambda
      VkDisplaySurfaceCreateInfoKHRplaneStackIndex
      (VkDisplaySurfaceCreateInfoKHR*)
      uint32_t
      "___return (___arg1->planeStackIndex);")
   (define-c-lambda
      VkDisplaySurfaceCreateInfoKHRtransform
      (VkDisplaySurfaceCreateInfoKHR*)
      VkSurfaceTransformFlagBitsKHR
      "___return (___arg1->transform);")
   (define-c-lambda
      VkDisplaySurfaceCreateInfoKHRglobalAlpha
      (VkDisplaySurfaceCreateInfoKHR*)
      float
      "___return (___arg1->globalAlpha);")
   (define-c-lambda
      VkDisplaySurfaceCreateInfoKHRalphaMode
      (VkDisplaySurfaceCreateInfoKHR*)
      VkDisplayPlaneAlphaFlagBitsKHR
      "___return (___arg1->alphaMode);")
   (define-c-lambda
      VkDisplaySurfaceCreateInfoKHRimageExtent
      (VkDisplaySurfaceCreateInfoKHR*)
      VkExtent2D
      "___return (___arg1->imageExtent);")
   (define-c-lambda
      make-VkDisplaySurfaceCreateInfoKHR*
      (int)
      VkDisplaySurfaceCreateInfoKHR*
      "VkDisplaySurfaceCreateInfoKHR* vkdisplaysurfacecreateinfokhr = malloc(___arg1 * sizeof(VkDisplaySurfaceCreateInfoKHR));
      ___return (vkdisplaysurfacecreateinfokhr);")
   (define-c-lambda
      ref-VkDisplaySurfaceCreateInfoKHR
      (VkDisplaySurfaceCreateInfoKHR* int)
      VkDisplaySurfaceCreateInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplaySurfaceCreateInfoKHR
      (void*
         VkDisplaySurfaceCreateFlagsKHR
         VkDisplayModeKHR
         uint32_t
         uint32_t
         VkSurfaceTransformFlagBitsKHR
         float
         VkDisplayPlaneAlphaFlagBitsKHR
         VkExtent2D)
      VkDisplaySurfaceCreateInfoKHR*
      "VkDisplaySurfaceCreateInfoKHR *displaysurfacecreateinfokhr = malloc(sizeof(VkDisplaySurfaceCreateInfoKHR));
displaysurfacecreateinfokhr->sType=VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
displaysurfacecreateinfokhr->pNext=___arg1;
displaysurfacecreateinfokhr->flags=___arg2;
displaysurfacecreateinfokhr->displayMode=___arg3;
displaysurfacecreateinfokhr->planeIndex=___arg4;
displaysurfacecreateinfokhr->planeStackIndex=___arg5;
displaysurfacecreateinfokhr->transform=___arg6;
displaysurfacecreateinfokhr->globalAlpha=___arg7;
displaysurfacecreateinfokhr->alphaMode=___arg8;
displaysurfacecreateinfokhr->imageExtent=___arg9;
___return (displaysurfacecreateinfokhr);"))
(begin-ffi
   (make-VkDisplayPresentInfoKHR
      ptr->VkDisplayPresentInfoKHR
      ref-VkDisplayPresentInfoKHR
      make-VkDisplayPresentInfoKHR*
      VkDisplayPresentInfoKHRpersistent
      VkDisplayPresentInfoKHRdstRect
      VkDisplayPresentInfoKHRsrcRect
      VkDisplayPresentInfoKHRpNext
      VkDisplayPresentInfoKHRsType
      VkDisplayPresentInfoKHR
      VkDisplayPresentInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayPresentInfoKHR (struct "VkDisplayPresentInfoKHR"))
   (c-define-type VkDisplayPresentInfoKHR* (pointer VkDisplayPresentInfoKHR))
   (define-c-lambda
      VkDisplayPresentInfoKHRsType
      (VkDisplayPresentInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplayPresentInfoKHRpNext
      (VkDisplayPresentInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplayPresentInfoKHRsrcRect
      (VkDisplayPresentInfoKHR*)
      VkRect2D
      "___return (___arg1->srcRect);")
   (define-c-lambda
      VkDisplayPresentInfoKHRdstRect
      (VkDisplayPresentInfoKHR*)
      VkRect2D
      "___return (___arg1->dstRect);")
   (define-c-lambda
      VkDisplayPresentInfoKHRpersistent
      (VkDisplayPresentInfoKHR*)
      VkBool32
      "___return (___arg1->persistent);")
   (define-c-lambda
      make-VkDisplayPresentInfoKHR*
      (int)
      VkDisplayPresentInfoKHR*
      "VkDisplayPresentInfoKHR* vkdisplaypresentinfokhr = malloc(___arg1 * sizeof(VkDisplayPresentInfoKHR));
      ___return (vkdisplaypresentinfokhr);")
   (define-c-lambda
      ref-VkDisplayPresentInfoKHR
      (VkDisplayPresentInfoKHR* int)
      VkDisplayPresentInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayPresentInfoKHR
      (void* VkRect2D VkRect2D VkBool32)
      VkDisplayPresentInfoKHR*
      "VkDisplayPresentInfoKHR *displaypresentinfokhr = malloc(sizeof(VkDisplayPresentInfoKHR));
displaypresentinfokhr->sType=VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
displaypresentinfokhr->pNext=___arg1;
displaypresentinfokhr->srcRect=___arg2;
displaypresentinfokhr->dstRect=___arg3;
displaypresentinfokhr->persistent=___arg4;
___return (displaypresentinfokhr);"))
(begin-ffi
   (make-VkSurfaceCapabilitiesKHR
      ptr->VkSurfaceCapabilitiesKHR
      ref-VkSurfaceCapabilitiesKHR
      make-VkSurfaceCapabilitiesKHR*
      VkSurfaceCapabilitiesKHRsupportedUsageFlags
      VkSurfaceCapabilitiesKHRsupportedCompositeAlpha
      VkSurfaceCapabilitiesKHRcurrentTransform
      VkSurfaceCapabilitiesKHRsupportedTransforms
      VkSurfaceCapabilitiesKHRmaxImageArrayLayers
      VkSurfaceCapabilitiesKHRmaxImageExtent
      VkSurfaceCapabilitiesKHRminImageExtent
      VkSurfaceCapabilitiesKHRcurrentExtent
      VkSurfaceCapabilitiesKHRmaxImageCount
      VkSurfaceCapabilitiesKHRminImageCount
      VkSurfaceCapabilitiesKHR
      VkSurfaceCapabilitiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSurfaceCapabilitiesKHR (struct "VkSurfaceCapabilitiesKHR"))
   (c-define-type VkSurfaceCapabilitiesKHR* (pointer VkSurfaceCapabilitiesKHR))
   (define-c-lambda
      VkSurfaceCapabilitiesKHRminImageCount
      (VkSurfaceCapabilitiesKHR*)
      uint32_t
      "___return (___arg1->minImageCount);")
   (define-c-lambda
      VkSurfaceCapabilitiesKHRmaxImageCount
      (VkSurfaceCapabilitiesKHR*)
      uint32_t
      "___return (___arg1->maxImageCount);")
   (define-c-lambda
      VkSurfaceCapabilitiesKHRcurrentExtent
      (VkSurfaceCapabilitiesKHR*)
      VkExtent2D
      "___return (___arg1->currentExtent);")
   (define-c-lambda
      VkSurfaceCapabilitiesKHRminImageExtent
      (VkSurfaceCapabilitiesKHR*)
      VkExtent2D
      "___return (___arg1->minImageExtent);")
   (define-c-lambda
      VkSurfaceCapabilitiesKHRmaxImageExtent
      (VkSurfaceCapabilitiesKHR*)
      VkExtent2D
      "___return (___arg1->maxImageExtent);")
   (define-c-lambda
      VkSurfaceCapabilitiesKHRmaxImageArrayLayers
      (VkSurfaceCapabilitiesKHR*)
      uint32_t
      "___return (___arg1->maxImageArrayLayers);")
   (define-c-lambda
      VkSurfaceCapabilitiesKHRsupportedTransforms
      (VkSurfaceCapabilitiesKHR*)
      VkSurfaceTransformFlagsKHR
      "___return (___arg1->supportedTransforms);")
   (define-c-lambda
      VkSurfaceCapabilitiesKHRcurrentTransform
      (VkSurfaceCapabilitiesKHR*)
      VkSurfaceTransformFlagBitsKHR
      "___return (___arg1->currentTransform);")
   (define-c-lambda
      VkSurfaceCapabilitiesKHRsupportedCompositeAlpha
      (VkSurfaceCapabilitiesKHR*)
      VkCompositeAlphaFlagsKHR
      "___return (___arg1->supportedCompositeAlpha);")
   (define-c-lambda
      VkSurfaceCapabilitiesKHRsupportedUsageFlags
      (VkSurfaceCapabilitiesKHR*)
      VkImageUsageFlags
      "___return (___arg1->supportedUsageFlags);")
   (define-c-lambda
      make-VkSurfaceCapabilitiesKHR*
      (int)
      VkSurfaceCapabilitiesKHR*
      "VkSurfaceCapabilitiesKHR* vksurfacecapabilitieskhr = malloc(___arg1 * sizeof(VkSurfaceCapabilitiesKHR));
      ___return (vksurfacecapabilitieskhr);")
   (define-c-lambda
      ref-VkSurfaceCapabilitiesKHR
      (VkSurfaceCapabilitiesKHR* int)
      VkSurfaceCapabilitiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSurfaceCapabilitiesKHR
      (uint32_t
         uint32_t
         VkExtent2D
         VkExtent2D
         VkExtent2D
         uint32_t
         VkSurfaceTransformFlagsKHR
         VkSurfaceTransformFlagBitsKHR
         VkCompositeAlphaFlagsKHR
         VkImageUsageFlags)
      VkSurfaceCapabilitiesKHR*
      "VkSurfaceCapabilitiesKHR *surfacecapabilitieskhr = malloc(sizeof(VkSurfaceCapabilitiesKHR));
surfacecapabilitieskhr->minImageCount=___arg1;
surfacecapabilitieskhr->maxImageCount=___arg2;
surfacecapabilitieskhr->currentExtent=___arg3;
surfacecapabilitieskhr->minImageExtent=___arg4;
surfacecapabilitieskhr->maxImageExtent=___arg5;
surfacecapabilitieskhr->maxImageArrayLayers=___arg6;
surfacecapabilitieskhr->supportedTransforms=___arg7;
surfacecapabilitieskhr->currentTransform=___arg8;
surfacecapabilitieskhr->supportedCompositeAlpha=___arg9;
surfacecapabilitieskhr->supportedUsageFlags=___arg10;
___return (surfacecapabilitieskhr);"))
(begin-ffi
   (make-VkSurfaceFormatKHR
      ptr->VkSurfaceFormatKHR
      ref-VkSurfaceFormatKHR
      make-VkSurfaceFormatKHR*
      VkSurfaceFormatKHRcolorSpace
      VkSurfaceFormatKHRformat
      VkSurfaceFormatKHR
      VkSurfaceFormatKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSurfaceFormatKHR (struct "VkSurfaceFormatKHR"))
   (c-define-type VkSurfaceFormatKHR* (pointer VkSurfaceFormatKHR))
   (define-c-lambda
      VkSurfaceFormatKHRformat
      (VkSurfaceFormatKHR*)
      VkFormat
      "___return (___arg1->format);")
   (define-c-lambda
      VkSurfaceFormatKHRcolorSpace
      (VkSurfaceFormatKHR*)
      VkColorSpaceKHR
      "___return (___arg1->colorSpace);")
   (define-c-lambda
      make-VkSurfaceFormatKHR*
      (int)
      VkSurfaceFormatKHR*
      "VkSurfaceFormatKHR* vksurfaceformatkhr = malloc(___arg1 * sizeof(VkSurfaceFormatKHR));
      ___return (vksurfaceformatkhr);")
   (define-c-lambda
      ref-VkSurfaceFormatKHR
      (VkSurfaceFormatKHR* int)
      VkSurfaceFormatKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSurfaceFormatKHR
      (VkFormat VkColorSpaceKHR)
      VkSurfaceFormatKHR*
      "VkSurfaceFormatKHR *surfaceformatkhr = malloc(sizeof(VkSurfaceFormatKHR));
surfaceformatkhr->format=___arg1;
surfaceformatkhr->colorSpace=___arg2;
___return (surfaceformatkhr);"))
(begin-ffi
   (make-VkSwapchainCreateInfoKHR
      ptr->VkSwapchainCreateInfoKHR
      ref-VkSwapchainCreateInfoKHR
      make-VkSwapchainCreateInfoKHR*
      VkSwapchainCreateInfoKHRoldSwapchain
      VkSwapchainCreateInfoKHRclipped
      VkSwapchainCreateInfoKHRpresentMode
      VkSwapchainCreateInfoKHRcompositeAlpha
      VkSwapchainCreateInfoKHRpreTransform
      VkSwapchainCreateInfoKHRpQueueFamilyIndices
      VkSwapchainCreateInfoKHRqueueFamilyIndexCount
      VkSwapchainCreateInfoKHRimageSharingMode
      VkSwapchainCreateInfoKHRimageUsage
      VkSwapchainCreateInfoKHRimageArrayLayers
      VkSwapchainCreateInfoKHRimageExtent
      VkSwapchainCreateInfoKHRimageColorSpace
      VkSwapchainCreateInfoKHRimageFormat
      VkSwapchainCreateInfoKHRminImageCount
      VkSwapchainCreateInfoKHRsurface
      VkSwapchainCreateInfoKHRflags
      VkSwapchainCreateInfoKHRpNext
      VkSwapchainCreateInfoKHRsType
      VkSwapchainCreateInfoKHR
      VkSwapchainCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSwapchainCreateInfoKHR (struct "VkSwapchainCreateInfoKHR"))
   (c-define-type VkSwapchainCreateInfoKHR* (pointer VkSwapchainCreateInfoKHR))
   (define-c-lambda
      VkSwapchainCreateInfoKHRsType
      (VkSwapchainCreateInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRpNext
      (VkSwapchainCreateInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRflags
      (VkSwapchainCreateInfoKHR*)
      VkSwapchainCreateFlagsKHR
      "___return (___arg1->flags);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRsurface
      (VkSwapchainCreateInfoKHR*)
      VkSurfaceKHR
      "___return (___arg1->surface);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRminImageCount
      (VkSwapchainCreateInfoKHR*)
      uint32_t
      "___return (___arg1->minImageCount);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRimageFormat
      (VkSwapchainCreateInfoKHR*)
      VkFormat
      "___return (___arg1->imageFormat);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRimageColorSpace
      (VkSwapchainCreateInfoKHR*)
      VkColorSpaceKHR
      "___return (___arg1->imageColorSpace);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRimageExtent
      (VkSwapchainCreateInfoKHR*)
      VkExtent2D
      "___return (___arg1->imageExtent);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRimageArrayLayers
      (VkSwapchainCreateInfoKHR*)
      uint32_t
      "___return (___arg1->imageArrayLayers);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRimageUsage
      (VkSwapchainCreateInfoKHR*)
      VkImageUsageFlags
      "___return (___arg1->imageUsage);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRimageSharingMode
      (VkSwapchainCreateInfoKHR*)
      VkSharingMode
      "___return (___arg1->imageSharingMode);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRqueueFamilyIndexCount
      (VkSwapchainCreateInfoKHR*)
      uint32_t
      "___return (___arg1->queueFamilyIndexCount);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRpQueueFamilyIndices
      (VkSwapchainCreateInfoKHR*)
      uint32_t*
      "___return (___arg1->pQueueFamilyIndices);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRpreTransform
      (VkSwapchainCreateInfoKHR*)
      VkSurfaceTransformFlagBitsKHR
      "___return (___arg1->preTransform);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRcompositeAlpha
      (VkSwapchainCreateInfoKHR*)
      VkCompositeAlphaFlagBitsKHR
      "___return (___arg1->compositeAlpha);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRpresentMode
      (VkSwapchainCreateInfoKHR*)
      VkPresentModeKHR
      "___return (___arg1->presentMode);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRclipped
      (VkSwapchainCreateInfoKHR*)
      VkBool32
      "___return (___arg1->clipped);")
   (define-c-lambda
      VkSwapchainCreateInfoKHRoldSwapchain
      (VkSwapchainCreateInfoKHR*)
      VkSwapchainKHR
      "___return (___arg1->oldSwapchain);")
   (define-c-lambda
      make-VkSwapchainCreateInfoKHR*
      (int)
      VkSwapchainCreateInfoKHR*
      "VkSwapchainCreateInfoKHR* vkswapchaincreateinfokhr = malloc(___arg1 * sizeof(VkSwapchainCreateInfoKHR));
      ___return (vkswapchaincreateinfokhr);")
   (define-c-lambda
      ref-VkSwapchainCreateInfoKHR
      (VkSwapchainCreateInfoKHR* int)
      VkSwapchainCreateInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSwapchainCreateInfoKHR
      (void*
         VkSwapchainCreateFlagsKHR
         VkSurfaceKHR
         uint32_t
         VkFormat
         VkColorSpaceKHR
         VkExtent2D
         uint32_t
         VkImageUsageFlags
         VkSharingMode
         uint32_t
         uint32_t*
         VkSurfaceTransformFlagBitsKHR
         VkCompositeAlphaFlagBitsKHR
         VkPresentModeKHR
         VkBool32
         VkSwapchainKHR)
      VkSwapchainCreateInfoKHR*
      "VkSwapchainCreateInfoKHR *swapchaincreateinfokhr = malloc(sizeof(VkSwapchainCreateInfoKHR));
swapchaincreateinfokhr->sType=VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
swapchaincreateinfokhr->pNext=___arg1;
swapchaincreateinfokhr->flags=___arg2;
swapchaincreateinfokhr->surface=___arg3;
swapchaincreateinfokhr->minImageCount=___arg4;
swapchaincreateinfokhr->imageFormat=___arg5;
swapchaincreateinfokhr->imageColorSpace=___arg6;
swapchaincreateinfokhr->imageExtent=___arg7;
swapchaincreateinfokhr->imageArrayLayers=___arg8;
swapchaincreateinfokhr->imageUsage=___arg9;
swapchaincreateinfokhr->imageSharingMode=___arg10;
swapchaincreateinfokhr->queueFamilyIndexCount=___arg11;
swapchaincreateinfokhr->pQueueFamilyIndices=___arg12;
swapchaincreateinfokhr->preTransform=___arg13;
swapchaincreateinfokhr->compositeAlpha=___arg14;
swapchaincreateinfokhr->presentMode=___arg15;
swapchaincreateinfokhr->clipped=___arg16;
swapchaincreateinfokhr->oldSwapchain=___arg17;
___return (swapchaincreateinfokhr);"))
(begin-ffi
   (make-VkPresentInfoKHR
      ptr->VkPresentInfoKHR
      ref-VkPresentInfoKHR
      make-VkPresentInfoKHR*
      VkPresentInfoKHRpResults
      VkPresentInfoKHRpImageIndices
      VkPresentInfoKHRpSwapchains
      VkPresentInfoKHRswapchainCount
      VkPresentInfoKHRpWaitSemaphores
      VkPresentInfoKHRwaitSemaphoreCount
      VkPresentInfoKHRpNext
      VkPresentInfoKHRsType
      VkPresentInfoKHR
      VkPresentInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPresentInfoKHR (struct "VkPresentInfoKHR"))
   (c-define-type VkPresentInfoKHR* (pointer VkPresentInfoKHR))
   (define-c-lambda
      VkPresentInfoKHRsType
      (VkPresentInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPresentInfoKHRpNext
      (VkPresentInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPresentInfoKHRwaitSemaphoreCount
      (VkPresentInfoKHR*)
      uint32_t
      "___return (___arg1->waitSemaphoreCount);")
   (define-c-lambda
      VkPresentInfoKHRpWaitSemaphores
      (VkPresentInfoKHR*)
      VkSemaphore*
      "___return (___arg1->pWaitSemaphores);")
   (define-c-lambda
      VkPresentInfoKHRswapchainCount
      (VkPresentInfoKHR*)
      uint32_t
      "___return (___arg1->swapchainCount);")
   (define-c-lambda
      VkPresentInfoKHRpSwapchains
      (VkPresentInfoKHR*)
      VkSwapchainKHR*
      "___return (___arg1->pSwapchains);")
   (define-c-lambda
      VkPresentInfoKHRpImageIndices
      (VkPresentInfoKHR*)
      uint32_t*
      "___return (___arg1->pImageIndices);")
   (define-c-lambda
      VkPresentInfoKHRpResults
      (VkPresentInfoKHR*)
      VkResult*
      "___return (___arg1->pResults);")
   (define-c-lambda
      make-VkPresentInfoKHR*
      (int)
      VkPresentInfoKHR*
      "VkPresentInfoKHR* vkpresentinfokhr = malloc(___arg1 * sizeof(VkPresentInfoKHR));
      ___return (vkpresentinfokhr);")
   (define-c-lambda
      ref-VkPresentInfoKHR
      (VkPresentInfoKHR* int)
      VkPresentInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPresentInfoKHR
      (void* uint32_t VkSemaphore* uint32_t VkSwapchainKHR* uint32_t* VkResult*)
      VkPresentInfoKHR*
      "VkPresentInfoKHR *presentinfokhr = malloc(sizeof(VkPresentInfoKHR));
presentinfokhr->sType=VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
presentinfokhr->pNext=___arg1;
presentinfokhr->waitSemaphoreCount=___arg2;
presentinfokhr->pWaitSemaphores=___arg3;
presentinfokhr->swapchainCount=___arg4;
presentinfokhr->pSwapchains=___arg5;
presentinfokhr->pImageIndices=___arg6;
presentinfokhr->pResults=___arg7;
___return (presentinfokhr);"))
(begin-ffi
   (PFN_vkDebugReportCallbackEXT PFN_vkDebugReportCallbackEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      PFN_vkDebugReportCallbackEXT
      (function
         (VkDebugReportFlagsEXT
            VkDebugReportObjectTypeEXT
            uint64_t
            size_t
            int32_t
            char
            char
            (pointer void))
         VkBool32))
   (c-define-type PFN_vkDebugReportCallbackEXT* (pointer PFN_vkDebugReportCallbackEXT)))
(begin-ffi
   (make-VkDebugReportCallbackCreateInfoEXT
      ptr->VkDebugReportCallbackCreateInfoEXT
      ref-VkDebugReportCallbackCreateInfoEXT
      make-VkDebugReportCallbackCreateInfoEXT*
      VkDebugReportCallbackCreateInfoEXTpUserData
      VkDebugReportCallbackCreateInfoEXTpfnCallback
      VkDebugReportCallbackCreateInfoEXTflags
      VkDebugReportCallbackCreateInfoEXTpNext
      VkDebugReportCallbackCreateInfoEXTsType
      VkDebugReportCallbackCreateInfoEXT
      VkDebugReportCallbackCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDebugReportCallbackCreateInfoEXT
      (struct "VkDebugReportCallbackCreateInfoEXT"))
   (c-define-type
      VkDebugReportCallbackCreateInfoEXT*
      (pointer VkDebugReportCallbackCreateInfoEXT))
   (define-c-lambda
      VkDebugReportCallbackCreateInfoEXTsType
      (VkDebugReportCallbackCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDebugReportCallbackCreateInfoEXTpNext
      (VkDebugReportCallbackCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDebugReportCallbackCreateInfoEXTflags
      (VkDebugReportCallbackCreateInfoEXT*)
      VkDebugReportFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDebugReportCallbackCreateInfoEXTpfnCallback
      (VkDebugReportCallbackCreateInfoEXT*)
      PFN_vkDebugReportCallbackEXT
      "___return (___arg1->pfnCallback);")
   (define-c-lambda
      VkDebugReportCallbackCreateInfoEXTpUserData
      (VkDebugReportCallbackCreateInfoEXT*)
      void*
      "___return (___arg1->pUserData);")
   (define-c-lambda
      make-VkDebugReportCallbackCreateInfoEXT*
      (int)
      VkDebugReportCallbackCreateInfoEXT*
      "VkDebugReportCallbackCreateInfoEXT* vkdebugreportcallbackcreateinfoext = malloc(___arg1 * sizeof(VkDebugReportCallbackCreateInfoEXT));
      ___return (vkdebugreportcallbackcreateinfoext);")
   (define-c-lambda
      ref-VkDebugReportCallbackCreateInfoEXT
      (VkDebugReportCallbackCreateInfoEXT* int)
      VkDebugReportCallbackCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDebugReportCallbackCreateInfoEXT
      ((pointer VkDebugReportCallbackCreateInfoEXT))
      VkDebugReportCallbackCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugReportCallbackCreateInfoEXT
      (void* VkDebugReportFlagsEXT PFN_vkDebugReportCallbackEXT void*)
      VkDebugReportCallbackCreateInfoEXT*
      "VkDebugReportCallbackCreateInfoEXT *debugreportcallbackcreateinfoext = malloc(sizeof(VkDebugReportCallbackCreateInfoEXT));
debugreportcallbackcreateinfoext->sType=VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
debugreportcallbackcreateinfoext->pNext=___arg1;
debugreportcallbackcreateinfoext->flags=___arg2;
debugreportcallbackcreateinfoext->pfnCallback=___arg3;
debugreportcallbackcreateinfoext->pUserData=___arg4;
___return (debugreportcallbackcreateinfoext);"))
(begin-ffi
   (make-VkValidationFlagsEXT
      ptr->VkValidationFlagsEXT
      ref-VkValidationFlagsEXT
      make-VkValidationFlagsEXT*
      VkValidationFlagsEXTpDisabledValidationChecks
      VkValidationFlagsEXTdisabledValidationCheckCount
      VkValidationFlagsEXTpNext
      VkValidationFlagsEXTsType
      VkValidationFlagsEXT
      VkValidationFlagsEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkValidationFlagsEXT (struct "VkValidationFlagsEXT"))
   (c-define-type VkValidationFlagsEXT* (pointer VkValidationFlagsEXT))
   (define-c-lambda
      VkValidationFlagsEXTsType
      (VkValidationFlagsEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkValidationFlagsEXTpNext
      (VkValidationFlagsEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkValidationFlagsEXTdisabledValidationCheckCount
      (VkValidationFlagsEXT*)
      uint32_t
      "___return (___arg1->disabledValidationCheckCount);")
   (define-c-lambda
      VkValidationFlagsEXTpDisabledValidationChecks
      (VkValidationFlagsEXT*)
      VkValidationCheckEXT*
      "___return (___arg1->pDisabledValidationChecks);")
   (define-c-lambda
      make-VkValidationFlagsEXT*
      (int)
      VkValidationFlagsEXT*
      "VkValidationFlagsEXT* vkvalidationflagsext = malloc(___arg1 * sizeof(VkValidationFlagsEXT));
      ___return (vkvalidationflagsext);")
   (define-c-lambda
      ref-VkValidationFlagsEXT
      (VkValidationFlagsEXT* int)
      VkValidationFlagsEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkValidationFlagsEXT
      ((pointer VkValidationFlagsEXT))
      VkValidationFlagsEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkValidationFlagsEXT
      (void* uint32_t VkValidationCheckEXT*)
      VkValidationFlagsEXT*
      "VkValidationFlagsEXT *validationflagsext = malloc(sizeof(VkValidationFlagsEXT));
validationflagsext->sType=VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT;
validationflagsext->pNext=___arg1;
validationflagsext->disabledValidationCheckCount=___arg2;
validationflagsext->pDisabledValidationChecks=___arg3;
___return (validationflagsext);"))
(begin-ffi
   (make-VkValidationFeaturesEXT
      ptr->VkValidationFeaturesEXT
      ref-VkValidationFeaturesEXT
      make-VkValidationFeaturesEXT*
      VkValidationFeaturesEXTpDisabledValidationFeatures
      VkValidationFeaturesEXTdisabledValidationFeatureCount
      VkValidationFeaturesEXTpEnabledValidationFeatures
      VkValidationFeaturesEXTenabledValidationFeatureCount
      VkValidationFeaturesEXTpNext
      VkValidationFeaturesEXTsType
      VkValidationFeaturesEXT
      VkValidationFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkValidationFeaturesEXT (struct "VkValidationFeaturesEXT"))
   (c-define-type VkValidationFeaturesEXT* (pointer VkValidationFeaturesEXT))
   (define-c-lambda
      VkValidationFeaturesEXTsType
      (VkValidationFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkValidationFeaturesEXTpNext
      (VkValidationFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkValidationFeaturesEXTenabledValidationFeatureCount
      (VkValidationFeaturesEXT*)
      uint32_t
      "___return (___arg1->enabledValidationFeatureCount);")
   (define-c-lambda
      VkValidationFeaturesEXTpEnabledValidationFeatures
      (VkValidationFeaturesEXT*)
      VkValidationFeatureEnableEXT*
      "___return (___arg1->pEnabledValidationFeatures);")
   (define-c-lambda
      VkValidationFeaturesEXTdisabledValidationFeatureCount
      (VkValidationFeaturesEXT*)
      uint32_t
      "___return (___arg1->disabledValidationFeatureCount);")
   (define-c-lambda
      VkValidationFeaturesEXTpDisabledValidationFeatures
      (VkValidationFeaturesEXT*)
      VkValidationFeatureDisableEXT*
      "___return (___arg1->pDisabledValidationFeatures);")
   (define-c-lambda
      make-VkValidationFeaturesEXT*
      (int)
      VkValidationFeaturesEXT*
      "VkValidationFeaturesEXT* vkvalidationfeaturesext = malloc(___arg1 * sizeof(VkValidationFeaturesEXT));
      ___return (vkvalidationfeaturesext);")
   (define-c-lambda
      ref-VkValidationFeaturesEXT
      (VkValidationFeaturesEXT* int)
      VkValidationFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkValidationFeaturesEXT
      ((pointer VkValidationFeaturesEXT))
      VkValidationFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkValidationFeaturesEXT
      (void*
         uint32_t
         VkValidationFeatureEnableEXT*
         uint32_t
         VkValidationFeatureDisableEXT*)
      VkValidationFeaturesEXT*
      "VkValidationFeaturesEXT *validationfeaturesext = malloc(sizeof(VkValidationFeaturesEXT));
validationfeaturesext->sType=VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT;
validationfeaturesext->pNext=___arg1;
validationfeaturesext->enabledValidationFeatureCount=___arg2;
validationfeaturesext->pEnabledValidationFeatures=___arg3;
validationfeaturesext->disabledValidationFeatureCount=___arg4;
validationfeaturesext->pDisabledValidationFeatures=___arg5;
___return (validationfeaturesext);"))
(begin-ffi
   (make-VkPipelineRasterizationStateRasterizationOrderAMD
      ptr->VkPipelineRasterizationStateRasterizationOrderAMD
      ref-VkPipelineRasterizationStateRasterizationOrderAMD
      make-VkPipelineRasterizationStateRasterizationOrderAMD*
      VkPipelineRasterizationStateRasterizationOrderAMDrasterizationOrder
      VkPipelineRasterizationStateRasterizationOrderAMDpNext
      VkPipelineRasterizationStateRasterizationOrderAMDsType
      VkPipelineRasterizationStateRasterizationOrderAMD
      VkPipelineRasterizationStateRasterizationOrderAMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineRasterizationStateRasterizationOrderAMD
      (struct "VkPipelineRasterizationStateRasterizationOrderAMD"))
   (c-define-type
      VkPipelineRasterizationStateRasterizationOrderAMD*
      (pointer VkPipelineRasterizationStateRasterizationOrderAMD))
   (define-c-lambda
      VkPipelineRasterizationStateRasterizationOrderAMDsType
      (VkPipelineRasterizationStateRasterizationOrderAMD*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineRasterizationStateRasterizationOrderAMDpNext
      (VkPipelineRasterizationStateRasterizationOrderAMD*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineRasterizationStateRasterizationOrderAMDrasterizationOrder
      (VkPipelineRasterizationStateRasterizationOrderAMD*)
      VkRasterizationOrderAMD
      "___return (___arg1->rasterizationOrder);")
   (define-c-lambda
      make-VkPipelineRasterizationStateRasterizationOrderAMD*
      (int)
      VkPipelineRasterizationStateRasterizationOrderAMD*
      "VkPipelineRasterizationStateRasterizationOrderAMD* vkpipelinerasterizationstaterasterizationorderamd = malloc(___arg1 * sizeof(VkPipelineRasterizationStateRasterizationOrderAMD));
      ___return (vkpipelinerasterizationstaterasterizationorderamd);")
   (define-c-lambda
      ref-VkPipelineRasterizationStateRasterizationOrderAMD
      (VkPipelineRasterizationStateRasterizationOrderAMD* int)
      VkPipelineRasterizationStateRasterizationOrderAMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineRasterizationStateRasterizationOrderAMD
      ((pointer VkPipelineRasterizationStateRasterizationOrderAMD))
      VkPipelineRasterizationStateRasterizationOrderAMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineRasterizationStateRasterizationOrderAMD
      (void* VkRasterizationOrderAMD)
      VkPipelineRasterizationStateRasterizationOrderAMD*
      "VkPipelineRasterizationStateRasterizationOrderAMD *pipelinerasterizationstaterasterizationorderamd = malloc(sizeof(VkPipelineRasterizationStateRasterizationOrderAMD));
pipelinerasterizationstaterasterizationorderamd->sType=VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
pipelinerasterizationstaterasterizationorderamd->pNext=___arg1;
pipelinerasterizationstaterasterizationorderamd->rasterizationOrder=___arg2;
___return (pipelinerasterizationstaterasterizationorderamd);"))
(begin-ffi
   (make-VkDebugMarkerObjectNameInfoEXT
      ptr->VkDebugMarkerObjectNameInfoEXT
      ref-VkDebugMarkerObjectNameInfoEXT
      make-VkDebugMarkerObjectNameInfoEXT*
      VkDebugMarkerObjectNameInfoEXTpObjectName
      VkDebugMarkerObjectNameInfoEXTobject
      VkDebugMarkerObjectNameInfoEXTobjectType
      VkDebugMarkerObjectNameInfoEXTpNext
      VkDebugMarkerObjectNameInfoEXTsType
      VkDebugMarkerObjectNameInfoEXT
      VkDebugMarkerObjectNameInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDebugMarkerObjectNameInfoEXT
      (struct "VkDebugMarkerObjectNameInfoEXT"))
   (c-define-type
      VkDebugMarkerObjectNameInfoEXT*
      (pointer VkDebugMarkerObjectNameInfoEXT))
   (define-c-lambda
      VkDebugMarkerObjectNameInfoEXTsType
      (VkDebugMarkerObjectNameInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDebugMarkerObjectNameInfoEXTpNext
      (VkDebugMarkerObjectNameInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDebugMarkerObjectNameInfoEXTobjectType
      (VkDebugMarkerObjectNameInfoEXT*)
      VkDebugReportObjectTypeEXT
      "___return (___arg1->objectType);")
   (define-c-lambda
      VkDebugMarkerObjectNameInfoEXTobject
      (VkDebugMarkerObjectNameInfoEXT*)
      uint64_t
      "___return (___arg1->object);")
   (define-c-lambda
      VkDebugMarkerObjectNameInfoEXTpObjectName
      (VkDebugMarkerObjectNameInfoEXT*)
      char*
      "___return (___arg1->pObjectName);")
   (define-c-lambda
      make-VkDebugMarkerObjectNameInfoEXT*
      (int)
      VkDebugMarkerObjectNameInfoEXT*
      "VkDebugMarkerObjectNameInfoEXT* vkdebugmarkerobjectnameinfoext = malloc(___arg1 * sizeof(VkDebugMarkerObjectNameInfoEXT));
      ___return (vkdebugmarkerobjectnameinfoext);")
   (define-c-lambda
      ref-VkDebugMarkerObjectNameInfoEXT
      (VkDebugMarkerObjectNameInfoEXT* int)
      VkDebugMarkerObjectNameInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDebugMarkerObjectNameInfoEXT
      ((pointer VkDebugMarkerObjectNameInfoEXT))
      VkDebugMarkerObjectNameInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugMarkerObjectNameInfoEXT
      (void* VkDebugReportObjectTypeEXT uint64_t char*)
      VkDebugMarkerObjectNameInfoEXT*
      "VkDebugMarkerObjectNameInfoEXT *debugmarkerobjectnameinfoext = malloc(sizeof(VkDebugMarkerObjectNameInfoEXT));
debugmarkerobjectnameinfoext->sType=VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
debugmarkerobjectnameinfoext->pNext=___arg1;
debugmarkerobjectnameinfoext->objectType=___arg2;
debugmarkerobjectnameinfoext->object=___arg3;
debugmarkerobjectnameinfoext->pObjectName=___arg4;
___return (debugmarkerobjectnameinfoext);"))
(begin-ffi
   (make-VkDebugMarkerObjectTagInfoEXT
      ptr->VkDebugMarkerObjectTagInfoEXT
      ref-VkDebugMarkerObjectTagInfoEXT
      make-VkDebugMarkerObjectTagInfoEXT*
      VkDebugMarkerObjectTagInfoEXTpTag
      VkDebugMarkerObjectTagInfoEXTtagSize
      VkDebugMarkerObjectTagInfoEXTtagName
      VkDebugMarkerObjectTagInfoEXTobject
      VkDebugMarkerObjectTagInfoEXTobjectType
      VkDebugMarkerObjectTagInfoEXTpNext
      VkDebugMarkerObjectTagInfoEXTsType
      VkDebugMarkerObjectTagInfoEXT
      VkDebugMarkerObjectTagInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDebugMarkerObjectTagInfoEXT (struct "VkDebugMarkerObjectTagInfoEXT"))
   (c-define-type VkDebugMarkerObjectTagInfoEXT* (pointer VkDebugMarkerObjectTagInfoEXT))
   (define-c-lambda
      VkDebugMarkerObjectTagInfoEXTsType
      (VkDebugMarkerObjectTagInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDebugMarkerObjectTagInfoEXTpNext
      (VkDebugMarkerObjectTagInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDebugMarkerObjectTagInfoEXTobjectType
      (VkDebugMarkerObjectTagInfoEXT*)
      VkDebugReportObjectTypeEXT
      "___return (___arg1->objectType);")
   (define-c-lambda
      VkDebugMarkerObjectTagInfoEXTobject
      (VkDebugMarkerObjectTagInfoEXT*)
      uint64_t
      "___return (___arg1->object);")
   (define-c-lambda
      VkDebugMarkerObjectTagInfoEXTtagName
      (VkDebugMarkerObjectTagInfoEXT*)
      uint64_t
      "___return (___arg1->tagName);")
   (define-c-lambda
      VkDebugMarkerObjectTagInfoEXTtagSize
      (VkDebugMarkerObjectTagInfoEXT*)
      size_t
      "___return (___arg1->tagSize);")
   (define-c-lambda
      VkDebugMarkerObjectTagInfoEXTpTag
      (VkDebugMarkerObjectTagInfoEXT*)
      void*
      "___return (___arg1->pTag);")
   (define-c-lambda
      make-VkDebugMarkerObjectTagInfoEXT*
      (int)
      VkDebugMarkerObjectTagInfoEXT*
      "VkDebugMarkerObjectTagInfoEXT* vkdebugmarkerobjecttaginfoext = malloc(___arg1 * sizeof(VkDebugMarkerObjectTagInfoEXT));
      ___return (vkdebugmarkerobjecttaginfoext);")
   (define-c-lambda
      ref-VkDebugMarkerObjectTagInfoEXT
      (VkDebugMarkerObjectTagInfoEXT* int)
      VkDebugMarkerObjectTagInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDebugMarkerObjectTagInfoEXT
      ((pointer VkDebugMarkerObjectTagInfoEXT))
      VkDebugMarkerObjectTagInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugMarkerObjectTagInfoEXT
      (void* VkDebugReportObjectTypeEXT uint64_t uint64_t size_t void*)
      VkDebugMarkerObjectTagInfoEXT*
      "VkDebugMarkerObjectTagInfoEXT *debugmarkerobjecttaginfoext = malloc(sizeof(VkDebugMarkerObjectTagInfoEXT));
debugmarkerobjecttaginfoext->sType=VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
debugmarkerobjecttaginfoext->pNext=___arg1;
debugmarkerobjecttaginfoext->objectType=___arg2;
debugmarkerobjecttaginfoext->object=___arg3;
debugmarkerobjecttaginfoext->tagName=___arg4;
debugmarkerobjecttaginfoext->tagSize=___arg5;
debugmarkerobjecttaginfoext->pTag=___arg6;
___return (debugmarkerobjecttaginfoext);"))
(begin-ffi
   (make-VkDebugMarkerMarkerInfoEXT
      ptr->VkDebugMarkerMarkerInfoEXT
      ref-VkDebugMarkerMarkerInfoEXT
      make-VkDebugMarkerMarkerInfoEXT*
      VkDebugMarkerMarkerInfoEXTcolor
      VkDebugMarkerMarkerInfoEXTpMarkerName
      VkDebugMarkerMarkerInfoEXTpNext
      VkDebugMarkerMarkerInfoEXTsType
      VkDebugMarkerMarkerInfoEXT
      VkDebugMarkerMarkerInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDebugMarkerMarkerInfoEXT (struct "VkDebugMarkerMarkerInfoEXT"))
   (c-define-type VkDebugMarkerMarkerInfoEXT* (pointer VkDebugMarkerMarkerInfoEXT))
   (define-c-lambda
      VkDebugMarkerMarkerInfoEXTsType
      (VkDebugMarkerMarkerInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDebugMarkerMarkerInfoEXTpNext
      (VkDebugMarkerMarkerInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDebugMarkerMarkerInfoEXTpMarkerName
      (VkDebugMarkerMarkerInfoEXT*)
      char*
      "___return (___arg1->pMarkerName);")
   (define-c-lambda
      VkDebugMarkerMarkerInfoEXTcolor
      (VkDebugMarkerMarkerInfoEXT*)
      float*
      "___return (___arg1->color);")
   (define-c-lambda
      make-VkDebugMarkerMarkerInfoEXT*
      (int)
      VkDebugMarkerMarkerInfoEXT*
      "VkDebugMarkerMarkerInfoEXT* vkdebugmarkermarkerinfoext = malloc(___arg1 * sizeof(VkDebugMarkerMarkerInfoEXT));
      ___return (vkdebugmarkermarkerinfoext);")
   (define-c-lambda
      ref-VkDebugMarkerMarkerInfoEXT
      (VkDebugMarkerMarkerInfoEXT* int)
      VkDebugMarkerMarkerInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDebugMarkerMarkerInfoEXT
      ((pointer VkDebugMarkerMarkerInfoEXT))
      VkDebugMarkerMarkerInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugMarkerMarkerInfoEXT
      (void* char* float*)
      VkDebugMarkerMarkerInfoEXT*
      "VkDebugMarkerMarkerInfoEXT *debugmarkermarkerinfoext = malloc(sizeof(VkDebugMarkerMarkerInfoEXT));
debugmarkermarkerinfoext->sType=VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT;
debugmarkermarkerinfoext->pNext=___arg1;
debugmarkermarkerinfoext->pMarkerName=___arg2;
memcpy(debugmarkermarkerinfoext->color,___arg3,sizeof(___arg3));
___return (debugmarkermarkerinfoext);"))
(begin-ffi
   (make-VkDedicatedAllocationImageCreateInfoNV
      ptr->VkDedicatedAllocationImageCreateInfoNV
      ref-VkDedicatedAllocationImageCreateInfoNV
      make-VkDedicatedAllocationImageCreateInfoNV*
      VkDedicatedAllocationImageCreateInfoNVdedicatedAllocation
      VkDedicatedAllocationImageCreateInfoNVpNext
      VkDedicatedAllocationImageCreateInfoNVsType
      VkDedicatedAllocationImageCreateInfoNV
      VkDedicatedAllocationImageCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDedicatedAllocationImageCreateInfoNV
      (struct "VkDedicatedAllocationImageCreateInfoNV"))
   (c-define-type
      VkDedicatedAllocationImageCreateInfoNV*
      (pointer VkDedicatedAllocationImageCreateInfoNV))
   (define-c-lambda
      VkDedicatedAllocationImageCreateInfoNVsType
      (VkDedicatedAllocationImageCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDedicatedAllocationImageCreateInfoNVpNext
      (VkDedicatedAllocationImageCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDedicatedAllocationImageCreateInfoNVdedicatedAllocation
      (VkDedicatedAllocationImageCreateInfoNV*)
      VkBool32
      "___return (___arg1->dedicatedAllocation);")
   (define-c-lambda
      make-VkDedicatedAllocationImageCreateInfoNV*
      (int)
      VkDedicatedAllocationImageCreateInfoNV*
      "VkDedicatedAllocationImageCreateInfoNV* vkdedicatedallocationimagecreateinfonv = malloc(___arg1 * sizeof(VkDedicatedAllocationImageCreateInfoNV));
      ___return (vkdedicatedallocationimagecreateinfonv);")
   (define-c-lambda
      ref-VkDedicatedAllocationImageCreateInfoNV
      (VkDedicatedAllocationImageCreateInfoNV* int)
      VkDedicatedAllocationImageCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDedicatedAllocationImageCreateInfoNV
      ((pointer VkDedicatedAllocationImageCreateInfoNV))
      VkDedicatedAllocationImageCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDedicatedAllocationImageCreateInfoNV
      (void* VkBool32)
      VkDedicatedAllocationImageCreateInfoNV*
      "VkDedicatedAllocationImageCreateInfoNV *dedicatedallocationimagecreateinfonv = malloc(sizeof(VkDedicatedAllocationImageCreateInfoNV));
dedicatedallocationimagecreateinfonv->sType=VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
dedicatedallocationimagecreateinfonv->pNext=___arg1;
dedicatedallocationimagecreateinfonv->dedicatedAllocation=___arg2;
___return (dedicatedallocationimagecreateinfonv);"))
(begin-ffi
   (make-VkDedicatedAllocationBufferCreateInfoNV
      ptr->VkDedicatedAllocationBufferCreateInfoNV
      ref-VkDedicatedAllocationBufferCreateInfoNV
      make-VkDedicatedAllocationBufferCreateInfoNV*
      VkDedicatedAllocationBufferCreateInfoNVdedicatedAllocation
      VkDedicatedAllocationBufferCreateInfoNVpNext
      VkDedicatedAllocationBufferCreateInfoNVsType
      VkDedicatedAllocationBufferCreateInfoNV
      VkDedicatedAllocationBufferCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDedicatedAllocationBufferCreateInfoNV
      (struct "VkDedicatedAllocationBufferCreateInfoNV"))
   (c-define-type
      VkDedicatedAllocationBufferCreateInfoNV*
      (pointer VkDedicatedAllocationBufferCreateInfoNV))
   (define-c-lambda
      VkDedicatedAllocationBufferCreateInfoNVsType
      (VkDedicatedAllocationBufferCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDedicatedAllocationBufferCreateInfoNVpNext
      (VkDedicatedAllocationBufferCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDedicatedAllocationBufferCreateInfoNVdedicatedAllocation
      (VkDedicatedAllocationBufferCreateInfoNV*)
      VkBool32
      "___return (___arg1->dedicatedAllocation);")
   (define-c-lambda
      make-VkDedicatedAllocationBufferCreateInfoNV*
      (int)
      VkDedicatedAllocationBufferCreateInfoNV*
      "VkDedicatedAllocationBufferCreateInfoNV* vkdedicatedallocationbuffercreateinfonv = malloc(___arg1 * sizeof(VkDedicatedAllocationBufferCreateInfoNV));
      ___return (vkdedicatedallocationbuffercreateinfonv);")
   (define-c-lambda
      ref-VkDedicatedAllocationBufferCreateInfoNV
      (VkDedicatedAllocationBufferCreateInfoNV* int)
      VkDedicatedAllocationBufferCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDedicatedAllocationBufferCreateInfoNV
      ((pointer VkDedicatedAllocationBufferCreateInfoNV))
      VkDedicatedAllocationBufferCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDedicatedAllocationBufferCreateInfoNV
      (void* VkBool32)
      VkDedicatedAllocationBufferCreateInfoNV*
      "VkDedicatedAllocationBufferCreateInfoNV *dedicatedallocationbuffercreateinfonv = malloc(sizeof(VkDedicatedAllocationBufferCreateInfoNV));
dedicatedallocationbuffercreateinfonv->sType=VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
dedicatedallocationbuffercreateinfonv->pNext=___arg1;
dedicatedallocationbuffercreateinfonv->dedicatedAllocation=___arg2;
___return (dedicatedallocationbuffercreateinfonv);"))
(begin-ffi
   (make-VkDedicatedAllocationMemoryAllocateInfoNV
      ptr->VkDedicatedAllocationMemoryAllocateInfoNV
      ref-VkDedicatedAllocationMemoryAllocateInfoNV
      make-VkDedicatedAllocationMemoryAllocateInfoNV*
      VkDedicatedAllocationMemoryAllocateInfoNVbuffer
      VkDedicatedAllocationMemoryAllocateInfoNVimage
      VkDedicatedAllocationMemoryAllocateInfoNVpNext
      VkDedicatedAllocationMemoryAllocateInfoNVsType
      VkDedicatedAllocationMemoryAllocateInfoNV
      VkDedicatedAllocationMemoryAllocateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDedicatedAllocationMemoryAllocateInfoNV
      (struct "VkDedicatedAllocationMemoryAllocateInfoNV"))
   (c-define-type
      VkDedicatedAllocationMemoryAllocateInfoNV*
      (pointer VkDedicatedAllocationMemoryAllocateInfoNV))
   (define-c-lambda
      VkDedicatedAllocationMemoryAllocateInfoNVsType
      (VkDedicatedAllocationMemoryAllocateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDedicatedAllocationMemoryAllocateInfoNVpNext
      (VkDedicatedAllocationMemoryAllocateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDedicatedAllocationMemoryAllocateInfoNVimage
      (VkDedicatedAllocationMemoryAllocateInfoNV*)
      VkImage
      "___return (___arg1->image);")
   (define-c-lambda
      VkDedicatedAllocationMemoryAllocateInfoNVbuffer
      (VkDedicatedAllocationMemoryAllocateInfoNV*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      make-VkDedicatedAllocationMemoryAllocateInfoNV*
      (int)
      VkDedicatedAllocationMemoryAllocateInfoNV*
      "VkDedicatedAllocationMemoryAllocateInfoNV* vkdedicatedallocationmemoryallocateinfonv = malloc(___arg1 * sizeof(VkDedicatedAllocationMemoryAllocateInfoNV));
      ___return (vkdedicatedallocationmemoryallocateinfonv);")
   (define-c-lambda
      ref-VkDedicatedAllocationMemoryAllocateInfoNV
      (VkDedicatedAllocationMemoryAllocateInfoNV* int)
      VkDedicatedAllocationMemoryAllocateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDedicatedAllocationMemoryAllocateInfoNV
      ((pointer VkDedicatedAllocationMemoryAllocateInfoNV))
      VkDedicatedAllocationMemoryAllocateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDedicatedAllocationMemoryAllocateInfoNV
      (void* VkImage VkBuffer)
      VkDedicatedAllocationMemoryAllocateInfoNV*
      "VkDedicatedAllocationMemoryAllocateInfoNV *dedicatedallocationmemoryallocateinfonv = malloc(sizeof(VkDedicatedAllocationMemoryAllocateInfoNV));
dedicatedallocationmemoryallocateinfonv->sType=VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
dedicatedallocationmemoryallocateinfonv->pNext=___arg1;
dedicatedallocationmemoryallocateinfonv->image=___arg2;
dedicatedallocationmemoryallocateinfonv->buffer=___arg3;
___return (dedicatedallocationmemoryallocateinfonv);"))
(begin-ffi
   (make-VkExternalImageFormatPropertiesNV
      ptr->VkExternalImageFormatPropertiesNV
      ref-VkExternalImageFormatPropertiesNV
      make-VkExternalImageFormatPropertiesNV*
      VkExternalImageFormatPropertiesNVcompatibleHandleTypes
      VkExternalImageFormatPropertiesNVexportFromImportedHandleTypes
      VkExternalImageFormatPropertiesNVexternalMemoryFeatures
      VkExternalImageFormatPropertiesNVimageFormatProperties
      VkExternalImageFormatPropertiesNV
      VkExternalImageFormatPropertiesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkExternalImageFormatPropertiesNV
      (struct "VkExternalImageFormatPropertiesNV"))
   (c-define-type
      VkExternalImageFormatPropertiesNV*
      (pointer VkExternalImageFormatPropertiesNV))
   (define-c-lambda
      VkExternalImageFormatPropertiesNVimageFormatProperties
      (VkExternalImageFormatPropertiesNV*)
      VkImageFormatProperties
      "___return (___arg1->imageFormatProperties);")
   (define-c-lambda
      VkExternalImageFormatPropertiesNVexternalMemoryFeatures
      (VkExternalImageFormatPropertiesNV*)
      VkExternalMemoryFeatureFlagsNV
      "___return (___arg1->externalMemoryFeatures);")
   (define-c-lambda
      VkExternalImageFormatPropertiesNVexportFromImportedHandleTypes
      (VkExternalImageFormatPropertiesNV*)
      VkExternalMemoryHandleTypeFlagsNV
      "___return (___arg1->exportFromImportedHandleTypes);")
   (define-c-lambda
      VkExternalImageFormatPropertiesNVcompatibleHandleTypes
      (VkExternalImageFormatPropertiesNV*)
      VkExternalMemoryHandleTypeFlagsNV
      "___return (___arg1->compatibleHandleTypes);")
   (define-c-lambda
      make-VkExternalImageFormatPropertiesNV*
      (int)
      VkExternalImageFormatPropertiesNV*
      "VkExternalImageFormatPropertiesNV* vkexternalimageformatpropertiesnv = malloc(___arg1 * sizeof(VkExternalImageFormatPropertiesNV));
      ___return (vkexternalimageformatpropertiesnv);")
   (define-c-lambda
      ref-VkExternalImageFormatPropertiesNV
      (VkExternalImageFormatPropertiesNV* int)
      VkExternalImageFormatPropertiesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExternalImageFormatPropertiesNV
      ((pointer VkExternalImageFormatPropertiesNV))
      VkExternalImageFormatPropertiesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExternalImageFormatPropertiesNV
      (VkImageFormatProperties
         VkExternalMemoryFeatureFlagsNV
         VkExternalMemoryHandleTypeFlagsNV
         VkExternalMemoryHandleTypeFlagsNV)
      VkExternalImageFormatPropertiesNV*
      "VkExternalImageFormatPropertiesNV *externalimageformatpropertiesnv = malloc(sizeof(VkExternalImageFormatPropertiesNV));
externalimageformatpropertiesnv->imageFormatProperties=___arg1;
externalimageformatpropertiesnv->externalMemoryFeatures=___arg2;
externalimageformatpropertiesnv->exportFromImportedHandleTypes=___arg3;
externalimageformatpropertiesnv->compatibleHandleTypes=___arg4;
___return (externalimageformatpropertiesnv);"))
(begin-ffi
   (make-VkExternalMemoryImageCreateInfoNV
      ptr->VkExternalMemoryImageCreateInfoNV
      ref-VkExternalMemoryImageCreateInfoNV
      make-VkExternalMemoryImageCreateInfoNV*
      VkExternalMemoryImageCreateInfoNVhandleTypes
      VkExternalMemoryImageCreateInfoNVpNext
      VkExternalMemoryImageCreateInfoNVsType
      VkExternalMemoryImageCreateInfoNV
      VkExternalMemoryImageCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkExternalMemoryImageCreateInfoNV
      (struct "VkExternalMemoryImageCreateInfoNV"))
   (c-define-type
      VkExternalMemoryImageCreateInfoNV*
      (pointer VkExternalMemoryImageCreateInfoNV))
   (define-c-lambda
      VkExternalMemoryImageCreateInfoNVsType
      (VkExternalMemoryImageCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExternalMemoryImageCreateInfoNVpNext
      (VkExternalMemoryImageCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExternalMemoryImageCreateInfoNVhandleTypes
      (VkExternalMemoryImageCreateInfoNV*)
      VkExternalMemoryHandleTypeFlagsNV
      "___return (___arg1->handleTypes);")
   (define-c-lambda
      make-VkExternalMemoryImageCreateInfoNV*
      (int)
      VkExternalMemoryImageCreateInfoNV*
      "VkExternalMemoryImageCreateInfoNV* vkexternalmemoryimagecreateinfonv = malloc(___arg1 * sizeof(VkExternalMemoryImageCreateInfoNV));
      ___return (vkexternalmemoryimagecreateinfonv);")
   (define-c-lambda
      ref-VkExternalMemoryImageCreateInfoNV
      (VkExternalMemoryImageCreateInfoNV* int)
      VkExternalMemoryImageCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExternalMemoryImageCreateInfoNV
      ((pointer VkExternalMemoryImageCreateInfoNV))
      VkExternalMemoryImageCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExternalMemoryImageCreateInfoNV
      (void* VkExternalMemoryHandleTypeFlagsNV)
      VkExternalMemoryImageCreateInfoNV*
      "VkExternalMemoryImageCreateInfoNV *externalmemoryimagecreateinfonv = malloc(sizeof(VkExternalMemoryImageCreateInfoNV));
externalmemoryimagecreateinfonv->sType=VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
externalmemoryimagecreateinfonv->pNext=___arg1;
externalmemoryimagecreateinfonv->handleTypes=___arg2;
___return (externalmemoryimagecreateinfonv);"))
(begin-ffi
   (make-VkExportMemoryAllocateInfoNV
      ptr->VkExportMemoryAllocateInfoNV
      ref-VkExportMemoryAllocateInfoNV
      make-VkExportMemoryAllocateInfoNV*
      VkExportMemoryAllocateInfoNVhandleTypes
      VkExportMemoryAllocateInfoNVpNext
      VkExportMemoryAllocateInfoNVsType
      VkExportMemoryAllocateInfoNV
      VkExportMemoryAllocateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExportMemoryAllocateInfoNV (struct "VkExportMemoryAllocateInfoNV"))
   (c-define-type VkExportMemoryAllocateInfoNV* (pointer VkExportMemoryAllocateInfoNV))
   (define-c-lambda
      VkExportMemoryAllocateInfoNVsType
      (VkExportMemoryAllocateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExportMemoryAllocateInfoNVpNext
      (VkExportMemoryAllocateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExportMemoryAllocateInfoNVhandleTypes
      (VkExportMemoryAllocateInfoNV*)
      VkExternalMemoryHandleTypeFlagsNV
      "___return (___arg1->handleTypes);")
   (define-c-lambda
      make-VkExportMemoryAllocateInfoNV*
      (int)
      VkExportMemoryAllocateInfoNV*
      "VkExportMemoryAllocateInfoNV* vkexportmemoryallocateinfonv = malloc(___arg1 * sizeof(VkExportMemoryAllocateInfoNV));
      ___return (vkexportmemoryallocateinfonv);")
   (define-c-lambda
      ref-VkExportMemoryAllocateInfoNV
      (VkExportMemoryAllocateInfoNV* int)
      VkExportMemoryAllocateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExportMemoryAllocateInfoNV
      ((pointer VkExportMemoryAllocateInfoNV))
      VkExportMemoryAllocateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExportMemoryAllocateInfoNV
      (void* VkExternalMemoryHandleTypeFlagsNV)
      VkExportMemoryAllocateInfoNV*
      "VkExportMemoryAllocateInfoNV *exportmemoryallocateinfonv = malloc(sizeof(VkExportMemoryAllocateInfoNV));
exportmemoryallocateinfonv->sType=VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV;
exportmemoryallocateinfonv->pNext=___arg1;
exportmemoryallocateinfonv->handleTypes=___arg2;
___return (exportmemoryallocateinfonv);"))
(begin-ffi
   (make-VkDeviceGeneratedCommandsFeaturesNVX
      ptr->VkDeviceGeneratedCommandsFeaturesNVX
      ref-VkDeviceGeneratedCommandsFeaturesNVX
      make-VkDeviceGeneratedCommandsFeaturesNVX*
      VkDeviceGeneratedCommandsFeaturesNVXcomputeBindingPointSupport
      VkDeviceGeneratedCommandsFeaturesNVXpNext
      VkDeviceGeneratedCommandsFeaturesNVXsType
      VkDeviceGeneratedCommandsFeaturesNVX
      VkDeviceGeneratedCommandsFeaturesNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceGeneratedCommandsFeaturesNVX
      (struct "VkDeviceGeneratedCommandsFeaturesNVX"))
   (c-define-type
      VkDeviceGeneratedCommandsFeaturesNVX*
      (pointer VkDeviceGeneratedCommandsFeaturesNVX))
   (define-c-lambda
      VkDeviceGeneratedCommandsFeaturesNVXsType
      (VkDeviceGeneratedCommandsFeaturesNVX*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceGeneratedCommandsFeaturesNVXpNext
      (VkDeviceGeneratedCommandsFeaturesNVX*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceGeneratedCommandsFeaturesNVXcomputeBindingPointSupport
      (VkDeviceGeneratedCommandsFeaturesNVX*)
      VkBool32
      "___return (___arg1->computeBindingPointSupport);")
   (define-c-lambda
      make-VkDeviceGeneratedCommandsFeaturesNVX*
      (int)
      VkDeviceGeneratedCommandsFeaturesNVX*
      "VkDeviceGeneratedCommandsFeaturesNVX* vkdevicegeneratedcommandsfeaturesnvx = malloc(___arg1 * sizeof(VkDeviceGeneratedCommandsFeaturesNVX));
      ___return (vkdevicegeneratedcommandsfeaturesnvx);")
   (define-c-lambda
      ref-VkDeviceGeneratedCommandsFeaturesNVX
      (VkDeviceGeneratedCommandsFeaturesNVX* int)
      VkDeviceGeneratedCommandsFeaturesNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceGeneratedCommandsFeaturesNVX
      ((pointer VkDeviceGeneratedCommandsFeaturesNVX))
      VkDeviceGeneratedCommandsFeaturesNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceGeneratedCommandsFeaturesNVX
      (void* VkBool32)
      VkDeviceGeneratedCommandsFeaturesNVX*
      "VkDeviceGeneratedCommandsFeaturesNVX *devicegeneratedcommandsfeaturesnvx = malloc(sizeof(VkDeviceGeneratedCommandsFeaturesNVX));
devicegeneratedcommandsfeaturesnvx->sType=VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX;
devicegeneratedcommandsfeaturesnvx->pNext=___arg1;
devicegeneratedcommandsfeaturesnvx->computeBindingPointSupport=___arg2;
___return (devicegeneratedcommandsfeaturesnvx);"))
(begin-ffi
   (make-VkDeviceGeneratedCommandsLimitsNVX
      ptr->VkDeviceGeneratedCommandsLimitsNVX
      ref-VkDeviceGeneratedCommandsLimitsNVX
      make-VkDeviceGeneratedCommandsLimitsNVX*
      VkDeviceGeneratedCommandsLimitsNVXminCommandsTokenBufferOffsetAlignment
      VkDeviceGeneratedCommandsLimitsNVXminSequenceIndexBufferOffsetAlignment
      VkDeviceGeneratedCommandsLimitsNVXminSequenceCountBufferOffsetAlignment
      VkDeviceGeneratedCommandsLimitsNVXmaxObjectEntryCounts
      VkDeviceGeneratedCommandsLimitsNVXmaxIndirectCommandsLayoutTokenCount
      VkDeviceGeneratedCommandsLimitsNVXpNext
      VkDeviceGeneratedCommandsLimitsNVXsType
      VkDeviceGeneratedCommandsLimitsNVX
      VkDeviceGeneratedCommandsLimitsNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceGeneratedCommandsLimitsNVX
      (struct "VkDeviceGeneratedCommandsLimitsNVX"))
   (c-define-type
      VkDeviceGeneratedCommandsLimitsNVX*
      (pointer VkDeviceGeneratedCommandsLimitsNVX))
   (define-c-lambda
      VkDeviceGeneratedCommandsLimitsNVXsType
      (VkDeviceGeneratedCommandsLimitsNVX*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceGeneratedCommandsLimitsNVXpNext
      (VkDeviceGeneratedCommandsLimitsNVX*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceGeneratedCommandsLimitsNVXmaxIndirectCommandsLayoutTokenCount
      (VkDeviceGeneratedCommandsLimitsNVX*)
      uint32_t
      "___return (___arg1->maxIndirectCommandsLayoutTokenCount);")
   (define-c-lambda
      VkDeviceGeneratedCommandsLimitsNVXmaxObjectEntryCounts
      (VkDeviceGeneratedCommandsLimitsNVX*)
      uint32_t
      "___return (___arg1->maxObjectEntryCounts);")
   (define-c-lambda
      VkDeviceGeneratedCommandsLimitsNVXminSequenceCountBufferOffsetAlignment
      (VkDeviceGeneratedCommandsLimitsNVX*)
      uint32_t
      "___return (___arg1->minSequenceCountBufferOffsetAlignment);")
   (define-c-lambda
      VkDeviceGeneratedCommandsLimitsNVXminSequenceIndexBufferOffsetAlignment
      (VkDeviceGeneratedCommandsLimitsNVX*)
      uint32_t
      "___return (___arg1->minSequenceIndexBufferOffsetAlignment);")
   (define-c-lambda
      VkDeviceGeneratedCommandsLimitsNVXminCommandsTokenBufferOffsetAlignment
      (VkDeviceGeneratedCommandsLimitsNVX*)
      uint32_t
      "___return (___arg1->minCommandsTokenBufferOffsetAlignment);")
   (define-c-lambda
      make-VkDeviceGeneratedCommandsLimitsNVX*
      (int)
      VkDeviceGeneratedCommandsLimitsNVX*
      "VkDeviceGeneratedCommandsLimitsNVX* vkdevicegeneratedcommandslimitsnvx = malloc(___arg1 * sizeof(VkDeviceGeneratedCommandsLimitsNVX));
      ___return (vkdevicegeneratedcommandslimitsnvx);")
   (define-c-lambda
      ref-VkDeviceGeneratedCommandsLimitsNVX
      (VkDeviceGeneratedCommandsLimitsNVX* int)
      VkDeviceGeneratedCommandsLimitsNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceGeneratedCommandsLimitsNVX
      ((pointer VkDeviceGeneratedCommandsLimitsNVX))
      VkDeviceGeneratedCommandsLimitsNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceGeneratedCommandsLimitsNVX
      (void* uint32_t uint32_t uint32_t uint32_t uint32_t)
      VkDeviceGeneratedCommandsLimitsNVX*
      "VkDeviceGeneratedCommandsLimitsNVX *devicegeneratedcommandslimitsnvx = malloc(sizeof(VkDeviceGeneratedCommandsLimitsNVX));
devicegeneratedcommandslimitsnvx->sType=VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX;
devicegeneratedcommandslimitsnvx->pNext=___arg1;
devicegeneratedcommandslimitsnvx->maxIndirectCommandsLayoutTokenCount=___arg2;
devicegeneratedcommandslimitsnvx->maxObjectEntryCounts=___arg3;
devicegeneratedcommandslimitsnvx->minSequenceCountBufferOffsetAlignment=___arg4;
devicegeneratedcommandslimitsnvx->minSequenceIndexBufferOffsetAlignment=___arg5;
devicegeneratedcommandslimitsnvx->minCommandsTokenBufferOffsetAlignment=___arg6;
___return (devicegeneratedcommandslimitsnvx);"))
(begin-ffi
   (make-VkIndirectCommandsTokenNVX
      ptr->VkIndirectCommandsTokenNVX
      ref-VkIndirectCommandsTokenNVX
      make-VkIndirectCommandsTokenNVX*
      VkIndirectCommandsTokenNVXoffset
      VkIndirectCommandsTokenNVXbuffer
      VkIndirectCommandsTokenNVXtokenType
      VkIndirectCommandsTokenNVX
      VkIndirectCommandsTokenNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkIndirectCommandsTokenNVX (struct "VkIndirectCommandsTokenNVX"))
   (c-define-type VkIndirectCommandsTokenNVX* (pointer VkIndirectCommandsTokenNVX))
   (define-c-lambda
      VkIndirectCommandsTokenNVXtokenType
      (VkIndirectCommandsTokenNVX*)
      VkIndirectCommandsTokenTypeNVX
      "___return (___arg1->tokenType);")
   (define-c-lambda
      VkIndirectCommandsTokenNVXbuffer
      (VkIndirectCommandsTokenNVX*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      VkIndirectCommandsTokenNVXoffset
      (VkIndirectCommandsTokenNVX*)
      VkDeviceSize
      "___return (___arg1->offset);")
   (define-c-lambda
      make-VkIndirectCommandsTokenNVX*
      (int)
      VkIndirectCommandsTokenNVX*
      "VkIndirectCommandsTokenNVX* vkindirectcommandstokennvx = malloc(___arg1 * sizeof(VkIndirectCommandsTokenNVX));
      ___return (vkindirectcommandstokennvx);")
   (define-c-lambda
      ref-VkIndirectCommandsTokenNVX
      (VkIndirectCommandsTokenNVX* int)
      VkIndirectCommandsTokenNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkIndirectCommandsTokenNVX
      ((pointer VkIndirectCommandsTokenNVX))
      VkIndirectCommandsTokenNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkIndirectCommandsTokenNVX
      (VkIndirectCommandsTokenTypeNVX VkBuffer VkDeviceSize)
      VkIndirectCommandsTokenNVX*
      "VkIndirectCommandsTokenNVX *indirectcommandstokennvx = malloc(sizeof(VkIndirectCommandsTokenNVX));
indirectcommandstokennvx->tokenType=___arg1;
indirectcommandstokennvx->buffer=___arg2;
indirectcommandstokennvx->offset=___arg3;
___return (indirectcommandstokennvx);"))
(begin-ffi
   (make-VkIndirectCommandsLayoutTokenNVX
      ptr->VkIndirectCommandsLayoutTokenNVX
      ref-VkIndirectCommandsLayoutTokenNVX
      make-VkIndirectCommandsLayoutTokenNVX*
      VkIndirectCommandsLayoutTokenNVXdivisor
      VkIndirectCommandsLayoutTokenNVXdynamicCount
      VkIndirectCommandsLayoutTokenNVXbindingUnit
      VkIndirectCommandsLayoutTokenNVXtokenType
      VkIndirectCommandsLayoutTokenNVX
      VkIndirectCommandsLayoutTokenNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkIndirectCommandsLayoutTokenNVX
      (struct "VkIndirectCommandsLayoutTokenNVX"))
   (c-define-type
      VkIndirectCommandsLayoutTokenNVX*
      (pointer VkIndirectCommandsLayoutTokenNVX))
   (define-c-lambda
      VkIndirectCommandsLayoutTokenNVXtokenType
      (VkIndirectCommandsLayoutTokenNVX*)
      VkIndirectCommandsTokenTypeNVX
      "___return (___arg1->tokenType);")
   (define-c-lambda
      VkIndirectCommandsLayoutTokenNVXbindingUnit
      (VkIndirectCommandsLayoutTokenNVX*)
      uint32_t
      "___return (___arg1->bindingUnit);")
   (define-c-lambda
      VkIndirectCommandsLayoutTokenNVXdynamicCount
      (VkIndirectCommandsLayoutTokenNVX*)
      uint32_t
      "___return (___arg1->dynamicCount);")
   (define-c-lambda
      VkIndirectCommandsLayoutTokenNVXdivisor
      (VkIndirectCommandsLayoutTokenNVX*)
      uint32_t
      "___return (___arg1->divisor);")
   (define-c-lambda
      make-VkIndirectCommandsLayoutTokenNVX*
      (int)
      VkIndirectCommandsLayoutTokenNVX*
      "VkIndirectCommandsLayoutTokenNVX* vkindirectcommandslayouttokennvx = malloc(___arg1 * sizeof(VkIndirectCommandsLayoutTokenNVX));
      ___return (vkindirectcommandslayouttokennvx);")
   (define-c-lambda
      ref-VkIndirectCommandsLayoutTokenNVX
      (VkIndirectCommandsLayoutTokenNVX* int)
      VkIndirectCommandsLayoutTokenNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkIndirectCommandsLayoutTokenNVX
      ((pointer VkIndirectCommandsLayoutTokenNVX))
      VkIndirectCommandsLayoutTokenNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkIndirectCommandsLayoutTokenNVX
      (VkIndirectCommandsTokenTypeNVX uint32_t uint32_t uint32_t)
      VkIndirectCommandsLayoutTokenNVX*
      "VkIndirectCommandsLayoutTokenNVX *indirectcommandslayouttokennvx = malloc(sizeof(VkIndirectCommandsLayoutTokenNVX));
indirectcommandslayouttokennvx->tokenType=___arg1;
indirectcommandslayouttokennvx->bindingUnit=___arg2;
indirectcommandslayouttokennvx->dynamicCount=___arg3;
indirectcommandslayouttokennvx->divisor=___arg4;
___return (indirectcommandslayouttokennvx);"))
(begin-ffi
   (make-VkIndirectCommandsLayoutCreateInfoNVX
      ptr->VkIndirectCommandsLayoutCreateInfoNVX
      ref-VkIndirectCommandsLayoutCreateInfoNVX
      make-VkIndirectCommandsLayoutCreateInfoNVX*
      VkIndirectCommandsLayoutCreateInfoNVXpTokens
      VkIndirectCommandsLayoutCreateInfoNVXtokenCount
      VkIndirectCommandsLayoutCreateInfoNVXflags
      VkIndirectCommandsLayoutCreateInfoNVXpipelineBindPoint
      VkIndirectCommandsLayoutCreateInfoNVXpNext
      VkIndirectCommandsLayoutCreateInfoNVXsType
      VkIndirectCommandsLayoutCreateInfoNVX
      VkIndirectCommandsLayoutCreateInfoNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkIndirectCommandsLayoutCreateInfoNVX
      (struct "VkIndirectCommandsLayoutCreateInfoNVX"))
   (c-define-type
      VkIndirectCommandsLayoutCreateInfoNVX*
      (pointer VkIndirectCommandsLayoutCreateInfoNVX))
   (define-c-lambda
      VkIndirectCommandsLayoutCreateInfoNVXsType
      (VkIndirectCommandsLayoutCreateInfoNVX*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkIndirectCommandsLayoutCreateInfoNVXpNext
      (VkIndirectCommandsLayoutCreateInfoNVX*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkIndirectCommandsLayoutCreateInfoNVXpipelineBindPoint
      (VkIndirectCommandsLayoutCreateInfoNVX*)
      VkPipelineBindPoint
      "___return (___arg1->pipelineBindPoint);")
   (define-c-lambda
      VkIndirectCommandsLayoutCreateInfoNVXflags
      (VkIndirectCommandsLayoutCreateInfoNVX*)
      VkIndirectCommandsLayoutUsageFlagsNVX
      "___return (___arg1->flags);")
   (define-c-lambda
      VkIndirectCommandsLayoutCreateInfoNVXtokenCount
      (VkIndirectCommandsLayoutCreateInfoNVX*)
      uint32_t
      "___return (___arg1->tokenCount);")
   (define-c-lambda
      VkIndirectCommandsLayoutCreateInfoNVXpTokens
      (VkIndirectCommandsLayoutCreateInfoNVX*)
      VkIndirectCommandsLayoutTokenNVX*
      "___return (___arg1->pTokens);")
   (define-c-lambda
      make-VkIndirectCommandsLayoutCreateInfoNVX*
      (int)
      VkIndirectCommandsLayoutCreateInfoNVX*
      "VkIndirectCommandsLayoutCreateInfoNVX* vkindirectcommandslayoutcreateinfonvx = malloc(___arg1 * sizeof(VkIndirectCommandsLayoutCreateInfoNVX));
      ___return (vkindirectcommandslayoutcreateinfonvx);")
   (define-c-lambda
      ref-VkIndirectCommandsLayoutCreateInfoNVX
      (VkIndirectCommandsLayoutCreateInfoNVX* int)
      VkIndirectCommandsLayoutCreateInfoNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkIndirectCommandsLayoutCreateInfoNVX
      ((pointer VkIndirectCommandsLayoutCreateInfoNVX))
      VkIndirectCommandsLayoutCreateInfoNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkIndirectCommandsLayoutCreateInfoNVX
      (void*
         VkPipelineBindPoint
         VkIndirectCommandsLayoutUsageFlagsNVX
         uint32_t
         VkIndirectCommandsLayoutTokenNVX*)
      VkIndirectCommandsLayoutCreateInfoNVX*
      "VkIndirectCommandsLayoutCreateInfoNVX *indirectcommandslayoutcreateinfonvx = malloc(sizeof(VkIndirectCommandsLayoutCreateInfoNVX));
indirectcommandslayoutcreateinfonvx->sType=VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX;
indirectcommandslayoutcreateinfonvx->pNext=___arg1;
indirectcommandslayoutcreateinfonvx->pipelineBindPoint=___arg2;
indirectcommandslayoutcreateinfonvx->flags=___arg3;
indirectcommandslayoutcreateinfonvx->tokenCount=___arg4;
indirectcommandslayoutcreateinfonvx->pTokens=___arg5;
___return (indirectcommandslayoutcreateinfonvx);"))
(begin-ffi
   (make-VkCmdProcessCommandsInfoNVX
      ptr->VkCmdProcessCommandsInfoNVX
      ref-VkCmdProcessCommandsInfoNVX
      make-VkCmdProcessCommandsInfoNVX*
      VkCmdProcessCommandsInfoNVXsequencesIndexOffset
      VkCmdProcessCommandsInfoNVXsequencesIndexBuffer
      VkCmdProcessCommandsInfoNVXsequencesCountOffset
      VkCmdProcessCommandsInfoNVXsequencesCountBuffer
      VkCmdProcessCommandsInfoNVXtargetCommandBuffer
      VkCmdProcessCommandsInfoNVXmaxSequencesCount
      VkCmdProcessCommandsInfoNVXpIndirectCommandsTokens
      VkCmdProcessCommandsInfoNVXindirectCommandsTokenCount
      VkCmdProcessCommandsInfoNVXindirectCommandsLayout
      VkCmdProcessCommandsInfoNVXobjectTable
      VkCmdProcessCommandsInfoNVXpNext
      VkCmdProcessCommandsInfoNVXsType
      VkCmdProcessCommandsInfoNVX
      VkCmdProcessCommandsInfoNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkCmdProcessCommandsInfoNVX (struct "VkCmdProcessCommandsInfoNVX"))
   (c-define-type VkCmdProcessCommandsInfoNVX* (pointer VkCmdProcessCommandsInfoNVX))
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXsType
      (VkCmdProcessCommandsInfoNVX*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXpNext
      (VkCmdProcessCommandsInfoNVX*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXobjectTable
      (VkCmdProcessCommandsInfoNVX*)
      VkObjectTableNVX
      "___return (___arg1->objectTable);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXindirectCommandsLayout
      (VkCmdProcessCommandsInfoNVX*)
      VkIndirectCommandsLayoutNVX
      "___return (___arg1->indirectCommandsLayout);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXindirectCommandsTokenCount
      (VkCmdProcessCommandsInfoNVX*)
      uint32_t
      "___return (___arg1->indirectCommandsTokenCount);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXpIndirectCommandsTokens
      (VkCmdProcessCommandsInfoNVX*)
      VkIndirectCommandsTokenNVX*
      "___return (___arg1->pIndirectCommandsTokens);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXmaxSequencesCount
      (VkCmdProcessCommandsInfoNVX*)
      uint32_t
      "___return (___arg1->maxSequencesCount);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXtargetCommandBuffer
      (VkCmdProcessCommandsInfoNVX*)
      VkCommandBuffer
      "___return (___arg1->targetCommandBuffer);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXsequencesCountBuffer
      (VkCmdProcessCommandsInfoNVX*)
      VkBuffer
      "___return (___arg1->sequencesCountBuffer);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXsequencesCountOffset
      (VkCmdProcessCommandsInfoNVX*)
      VkDeviceSize
      "___return (___arg1->sequencesCountOffset);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXsequencesIndexBuffer
      (VkCmdProcessCommandsInfoNVX*)
      VkBuffer
      "___return (___arg1->sequencesIndexBuffer);")
   (define-c-lambda
      VkCmdProcessCommandsInfoNVXsequencesIndexOffset
      (VkCmdProcessCommandsInfoNVX*)
      VkDeviceSize
      "___return (___arg1->sequencesIndexOffset);")
   (define-c-lambda
      make-VkCmdProcessCommandsInfoNVX*
      (int)
      VkCmdProcessCommandsInfoNVX*
      "VkCmdProcessCommandsInfoNVX* vkcmdprocesscommandsinfonvx = malloc(___arg1 * sizeof(VkCmdProcessCommandsInfoNVX));
      ___return (vkcmdprocesscommandsinfonvx);")
   (define-c-lambda
      ref-VkCmdProcessCommandsInfoNVX
      (VkCmdProcessCommandsInfoNVX* int)
      VkCmdProcessCommandsInfoNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCmdProcessCommandsInfoNVX
      ((pointer VkCmdProcessCommandsInfoNVX))
      VkCmdProcessCommandsInfoNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCmdProcessCommandsInfoNVX
      (void*
         VkObjectTableNVX
         VkIndirectCommandsLayoutNVX
         uint32_t
         VkIndirectCommandsTokenNVX*
         uint32_t
         VkCommandBuffer
         VkBuffer
         VkDeviceSize
         VkBuffer
         VkDeviceSize)
      VkCmdProcessCommandsInfoNVX*
      "VkCmdProcessCommandsInfoNVX *cmdprocesscommandsinfonvx = malloc(sizeof(VkCmdProcessCommandsInfoNVX));
cmdprocesscommandsinfonvx->sType=VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX;
cmdprocesscommandsinfonvx->pNext=___arg1;
cmdprocesscommandsinfonvx->objectTable=___arg2;
cmdprocesscommandsinfonvx->indirectCommandsLayout=___arg3;
cmdprocesscommandsinfonvx->indirectCommandsTokenCount=___arg4;
cmdprocesscommandsinfonvx->pIndirectCommandsTokens=___arg5;
cmdprocesscommandsinfonvx->maxSequencesCount=___arg6;
cmdprocesscommandsinfonvx->targetCommandBuffer=___arg7;
cmdprocesscommandsinfonvx->sequencesCountBuffer=___arg8;
cmdprocesscommandsinfonvx->sequencesCountOffset=___arg9;
cmdprocesscommandsinfonvx->sequencesIndexBuffer=___arg10;
cmdprocesscommandsinfonvx->sequencesIndexOffset=___arg11;
___return (cmdprocesscommandsinfonvx);"))
(begin-ffi
   (make-VkCmdReserveSpaceForCommandsInfoNVX
      ptr->VkCmdReserveSpaceForCommandsInfoNVX
      ref-VkCmdReserveSpaceForCommandsInfoNVX
      make-VkCmdReserveSpaceForCommandsInfoNVX*
      VkCmdReserveSpaceForCommandsInfoNVXmaxSequencesCount
      VkCmdReserveSpaceForCommandsInfoNVXindirectCommandsLayout
      VkCmdReserveSpaceForCommandsInfoNVXobjectTable
      VkCmdReserveSpaceForCommandsInfoNVXpNext
      VkCmdReserveSpaceForCommandsInfoNVXsType
      VkCmdReserveSpaceForCommandsInfoNVX
      VkCmdReserveSpaceForCommandsInfoNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkCmdReserveSpaceForCommandsInfoNVX
      (struct "VkCmdReserveSpaceForCommandsInfoNVX"))
   (c-define-type
      VkCmdReserveSpaceForCommandsInfoNVX*
      (pointer VkCmdReserveSpaceForCommandsInfoNVX))
   (define-c-lambda
      VkCmdReserveSpaceForCommandsInfoNVXsType
      (VkCmdReserveSpaceForCommandsInfoNVX*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCmdReserveSpaceForCommandsInfoNVXpNext
      (VkCmdReserveSpaceForCommandsInfoNVX*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCmdReserveSpaceForCommandsInfoNVXobjectTable
      (VkCmdReserveSpaceForCommandsInfoNVX*)
      VkObjectTableNVX
      "___return (___arg1->objectTable);")
   (define-c-lambda
      VkCmdReserveSpaceForCommandsInfoNVXindirectCommandsLayout
      (VkCmdReserveSpaceForCommandsInfoNVX*)
      VkIndirectCommandsLayoutNVX
      "___return (___arg1->indirectCommandsLayout);")
   (define-c-lambda
      VkCmdReserveSpaceForCommandsInfoNVXmaxSequencesCount
      (VkCmdReserveSpaceForCommandsInfoNVX*)
      uint32_t
      "___return (___arg1->maxSequencesCount);")
   (define-c-lambda
      make-VkCmdReserveSpaceForCommandsInfoNVX*
      (int)
      VkCmdReserveSpaceForCommandsInfoNVX*
      "VkCmdReserveSpaceForCommandsInfoNVX* vkcmdreservespaceforcommandsinfonvx = malloc(___arg1 * sizeof(VkCmdReserveSpaceForCommandsInfoNVX));
      ___return (vkcmdreservespaceforcommandsinfonvx);")
   (define-c-lambda
      ref-VkCmdReserveSpaceForCommandsInfoNVX
      (VkCmdReserveSpaceForCommandsInfoNVX* int)
      VkCmdReserveSpaceForCommandsInfoNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCmdReserveSpaceForCommandsInfoNVX
      ((pointer VkCmdReserveSpaceForCommandsInfoNVX))
      VkCmdReserveSpaceForCommandsInfoNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCmdReserveSpaceForCommandsInfoNVX
      (void* VkObjectTableNVX VkIndirectCommandsLayoutNVX uint32_t)
      VkCmdReserveSpaceForCommandsInfoNVX*
      "VkCmdReserveSpaceForCommandsInfoNVX *cmdreservespaceforcommandsinfonvx = malloc(sizeof(VkCmdReserveSpaceForCommandsInfoNVX));
cmdreservespaceforcommandsinfonvx->sType=VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX;
cmdreservespaceforcommandsinfonvx->pNext=___arg1;
cmdreservespaceforcommandsinfonvx->objectTable=___arg2;
cmdreservespaceforcommandsinfonvx->indirectCommandsLayout=___arg3;
cmdreservespaceforcommandsinfonvx->maxSequencesCount=___arg4;
___return (cmdreservespaceforcommandsinfonvx);"))
(begin-ffi
   (make-VkObjectTableCreateInfoNVX
      ptr->VkObjectTableCreateInfoNVX
      ref-VkObjectTableCreateInfoNVX
      make-VkObjectTableCreateInfoNVX*
      VkObjectTableCreateInfoNVXmaxPipelineLayouts
      VkObjectTableCreateInfoNVXmaxSampledImagesPerDescriptor
      VkObjectTableCreateInfoNVXmaxStorageImagesPerDescriptor
      VkObjectTableCreateInfoNVXmaxStorageBuffersPerDescriptor
      VkObjectTableCreateInfoNVXmaxUniformBuffersPerDescriptor
      VkObjectTableCreateInfoNVXpObjectEntryUsageFlags
      VkObjectTableCreateInfoNVXpObjectEntryCounts
      VkObjectTableCreateInfoNVXpObjectEntryTypes
      VkObjectTableCreateInfoNVXobjectCount
      VkObjectTableCreateInfoNVXpNext
      VkObjectTableCreateInfoNVXsType
      VkObjectTableCreateInfoNVX
      VkObjectTableCreateInfoNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkObjectTableCreateInfoNVX (struct "VkObjectTableCreateInfoNVX"))
   (c-define-type VkObjectTableCreateInfoNVX* (pointer VkObjectTableCreateInfoNVX))
   (define-c-lambda
      VkObjectTableCreateInfoNVXsType
      (VkObjectTableCreateInfoNVX*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkObjectTableCreateInfoNVXpNext
      (VkObjectTableCreateInfoNVX*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkObjectTableCreateInfoNVXobjectCount
      (VkObjectTableCreateInfoNVX*)
      uint32_t
      "___return (___arg1->objectCount);")
   (define-c-lambda
      VkObjectTableCreateInfoNVXpObjectEntryTypes
      (VkObjectTableCreateInfoNVX*)
      VkObjectEntryTypeNVX*
      "___return (___arg1->pObjectEntryTypes);")
   (define-c-lambda
      VkObjectTableCreateInfoNVXpObjectEntryCounts
      (VkObjectTableCreateInfoNVX*)
      uint32_t*
      "___return (___arg1->pObjectEntryCounts);")
   (define-c-lambda
      VkObjectTableCreateInfoNVXpObjectEntryUsageFlags
      (VkObjectTableCreateInfoNVX*)
      VkObjectEntryUsageFlagsNVX*
      "___return (___arg1->pObjectEntryUsageFlags);")
   (define-c-lambda
      VkObjectTableCreateInfoNVXmaxUniformBuffersPerDescriptor
      (VkObjectTableCreateInfoNVX*)
      uint32_t
      "___return (___arg1->maxUniformBuffersPerDescriptor);")
   (define-c-lambda
      VkObjectTableCreateInfoNVXmaxStorageBuffersPerDescriptor
      (VkObjectTableCreateInfoNVX*)
      uint32_t
      "___return (___arg1->maxStorageBuffersPerDescriptor);")
   (define-c-lambda
      VkObjectTableCreateInfoNVXmaxStorageImagesPerDescriptor
      (VkObjectTableCreateInfoNVX*)
      uint32_t
      "___return (___arg1->maxStorageImagesPerDescriptor);")
   (define-c-lambda
      VkObjectTableCreateInfoNVXmaxSampledImagesPerDescriptor
      (VkObjectTableCreateInfoNVX*)
      uint32_t
      "___return (___arg1->maxSampledImagesPerDescriptor);")
   (define-c-lambda
      VkObjectTableCreateInfoNVXmaxPipelineLayouts
      (VkObjectTableCreateInfoNVX*)
      uint32_t
      "___return (___arg1->maxPipelineLayouts);")
   (define-c-lambda
      make-VkObjectTableCreateInfoNVX*
      (int)
      VkObjectTableCreateInfoNVX*
      "VkObjectTableCreateInfoNVX* vkobjecttablecreateinfonvx = malloc(___arg1 * sizeof(VkObjectTableCreateInfoNVX));
      ___return (vkobjecttablecreateinfonvx);")
   (define-c-lambda
      ref-VkObjectTableCreateInfoNVX
      (VkObjectTableCreateInfoNVX* int)
      VkObjectTableCreateInfoNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkObjectTableCreateInfoNVX
      ((pointer VkObjectTableCreateInfoNVX))
      VkObjectTableCreateInfoNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkObjectTableCreateInfoNVX
      (void*
         uint32_t
         VkObjectEntryTypeNVX*
         uint32_t*
         VkObjectEntryUsageFlagsNVX*
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t)
      VkObjectTableCreateInfoNVX*
      "VkObjectTableCreateInfoNVX *objecttablecreateinfonvx = malloc(sizeof(VkObjectTableCreateInfoNVX));
objecttablecreateinfonvx->sType=VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX;
objecttablecreateinfonvx->pNext=___arg1;
objecttablecreateinfonvx->objectCount=___arg2;
objecttablecreateinfonvx->pObjectEntryTypes=___arg3;
objecttablecreateinfonvx->pObjectEntryCounts=___arg4;
objecttablecreateinfonvx->pObjectEntryUsageFlags=___arg5;
objecttablecreateinfonvx->maxUniformBuffersPerDescriptor=___arg6;
objecttablecreateinfonvx->maxStorageBuffersPerDescriptor=___arg7;
objecttablecreateinfonvx->maxStorageImagesPerDescriptor=___arg8;
objecttablecreateinfonvx->maxSampledImagesPerDescriptor=___arg9;
objecttablecreateinfonvx->maxPipelineLayouts=___arg10;
___return (objecttablecreateinfonvx);"))
(begin-ffi
   (make-VkObjectTableEntryNVX
      ptr->VkObjectTableEntryNVX
      ref-VkObjectTableEntryNVX
      make-VkObjectTableEntryNVX*
      VkObjectTableEntryNVXflags
      VkObjectTableEntryNVXtype
      VkObjectTableEntryNVX
      VkObjectTableEntryNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkObjectTableEntryNVX (struct "VkObjectTableEntryNVX"))
   (c-define-type VkObjectTableEntryNVX* (pointer VkObjectTableEntryNVX))
   (define-c-lambda
      VkObjectTableEntryNVXtype
      (VkObjectTableEntryNVX*)
      VkObjectEntryTypeNVX
      "___return (___arg1->type);")
   (define-c-lambda
      VkObjectTableEntryNVXflags
      (VkObjectTableEntryNVX*)
      VkObjectEntryUsageFlagsNVX
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkObjectTableEntryNVX*
      (int)
      VkObjectTableEntryNVX*
      "VkObjectTableEntryNVX* vkobjecttableentrynvx = malloc(___arg1 * sizeof(VkObjectTableEntryNVX));
      ___return (vkobjecttableentrynvx);")
   (define-c-lambda
      ref-VkObjectTableEntryNVX
      (VkObjectTableEntryNVX* int)
      VkObjectTableEntryNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkObjectTableEntryNVX
      ((pointer VkObjectTableEntryNVX))
      VkObjectTableEntryNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkObjectTableEntryNVX
      (VkObjectEntryTypeNVX VkObjectEntryUsageFlagsNVX)
      VkObjectTableEntryNVX*
      "VkObjectTableEntryNVX *objecttableentrynvx = malloc(sizeof(VkObjectTableEntryNVX));
objecttableentrynvx->type=___arg1;
objecttableentrynvx->flags=___arg2;
___return (objecttableentrynvx);"))
(begin-ffi
   (make-VkObjectTablePipelineEntryNVX
      ptr->VkObjectTablePipelineEntryNVX
      ref-VkObjectTablePipelineEntryNVX
      make-VkObjectTablePipelineEntryNVX*
      VkObjectTablePipelineEntryNVXpipeline
      VkObjectTablePipelineEntryNVXflags
      VkObjectTablePipelineEntryNVXtype
      VkObjectTablePipelineEntryNVX
      VkObjectTablePipelineEntryNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkObjectTablePipelineEntryNVX (struct "VkObjectTablePipelineEntryNVX"))
   (c-define-type VkObjectTablePipelineEntryNVX* (pointer VkObjectTablePipelineEntryNVX))
   (define-c-lambda
      VkObjectTablePipelineEntryNVXtype
      (VkObjectTablePipelineEntryNVX*)
      VkObjectEntryTypeNVX
      "___return (___arg1->type);")
   (define-c-lambda
      VkObjectTablePipelineEntryNVXflags
      (VkObjectTablePipelineEntryNVX*)
      VkObjectEntryUsageFlagsNVX
      "___return (___arg1->flags);")
   (define-c-lambda
      VkObjectTablePipelineEntryNVXpipeline
      (VkObjectTablePipelineEntryNVX*)
      VkPipeline
      "___return (___arg1->pipeline);")
   (define-c-lambda
      make-VkObjectTablePipelineEntryNVX*
      (int)
      VkObjectTablePipelineEntryNVX*
      "VkObjectTablePipelineEntryNVX* vkobjecttablepipelineentrynvx = malloc(___arg1 * sizeof(VkObjectTablePipelineEntryNVX));
      ___return (vkobjecttablepipelineentrynvx);")
   (define-c-lambda
      ref-VkObjectTablePipelineEntryNVX
      (VkObjectTablePipelineEntryNVX* int)
      VkObjectTablePipelineEntryNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkObjectTablePipelineEntryNVX
      ((pointer VkObjectTablePipelineEntryNVX))
      VkObjectTablePipelineEntryNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkObjectTablePipelineEntryNVX
      (VkObjectEntryTypeNVX VkObjectEntryUsageFlagsNVX VkPipeline)
      VkObjectTablePipelineEntryNVX*
      "VkObjectTablePipelineEntryNVX *objecttablepipelineentrynvx = malloc(sizeof(VkObjectTablePipelineEntryNVX));
objecttablepipelineentrynvx->type=___arg1;
objecttablepipelineentrynvx->flags=___arg2;
objecttablepipelineentrynvx->pipeline=___arg3;
___return (objecttablepipelineentrynvx);"))
(begin-ffi
   (make-VkObjectTableDescriptorSetEntryNVX
      ptr->VkObjectTableDescriptorSetEntryNVX
      ref-VkObjectTableDescriptorSetEntryNVX
      make-VkObjectTableDescriptorSetEntryNVX*
      VkObjectTableDescriptorSetEntryNVXdescriptorSet
      VkObjectTableDescriptorSetEntryNVXpipelineLayout
      VkObjectTableDescriptorSetEntryNVXflags
      VkObjectTableDescriptorSetEntryNVXtype
      VkObjectTableDescriptorSetEntryNVX
      VkObjectTableDescriptorSetEntryNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkObjectTableDescriptorSetEntryNVX
      (struct "VkObjectTableDescriptorSetEntryNVX"))
   (c-define-type
      VkObjectTableDescriptorSetEntryNVX*
      (pointer VkObjectTableDescriptorSetEntryNVX))
   (define-c-lambda
      VkObjectTableDescriptorSetEntryNVXtype
      (VkObjectTableDescriptorSetEntryNVX*)
      VkObjectEntryTypeNVX
      "___return (___arg1->type);")
   (define-c-lambda
      VkObjectTableDescriptorSetEntryNVXflags
      (VkObjectTableDescriptorSetEntryNVX*)
      VkObjectEntryUsageFlagsNVX
      "___return (___arg1->flags);")
   (define-c-lambda
      VkObjectTableDescriptorSetEntryNVXpipelineLayout
      (VkObjectTableDescriptorSetEntryNVX*)
      VkPipelineLayout
      "___return (___arg1->pipelineLayout);")
   (define-c-lambda
      VkObjectTableDescriptorSetEntryNVXdescriptorSet
      (VkObjectTableDescriptorSetEntryNVX*)
      VkDescriptorSet
      "___return (___arg1->descriptorSet);")
   (define-c-lambda
      make-VkObjectTableDescriptorSetEntryNVX*
      (int)
      VkObjectTableDescriptorSetEntryNVX*
      "VkObjectTableDescriptorSetEntryNVX* vkobjecttabledescriptorsetentrynvx = malloc(___arg1 * sizeof(VkObjectTableDescriptorSetEntryNVX));
      ___return (vkobjecttabledescriptorsetentrynvx);")
   (define-c-lambda
      ref-VkObjectTableDescriptorSetEntryNVX
      (VkObjectTableDescriptorSetEntryNVX* int)
      VkObjectTableDescriptorSetEntryNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkObjectTableDescriptorSetEntryNVX
      ((pointer VkObjectTableDescriptorSetEntryNVX))
      VkObjectTableDescriptorSetEntryNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkObjectTableDescriptorSetEntryNVX
      (VkObjectEntryTypeNVX VkObjectEntryUsageFlagsNVX VkPipelineLayout VkDescriptorSet)
      VkObjectTableDescriptorSetEntryNVX*
      "VkObjectTableDescriptorSetEntryNVX *objecttabledescriptorsetentrynvx = malloc(sizeof(VkObjectTableDescriptorSetEntryNVX));
objecttabledescriptorsetentrynvx->type=___arg1;
objecttabledescriptorsetentrynvx->flags=___arg2;
objecttabledescriptorsetentrynvx->pipelineLayout=___arg3;
objecttabledescriptorsetentrynvx->descriptorSet=___arg4;
___return (objecttabledescriptorsetentrynvx);"))
(begin-ffi
   (make-VkObjectTableVertexBufferEntryNVX
      ptr->VkObjectTableVertexBufferEntryNVX
      ref-VkObjectTableVertexBufferEntryNVX
      make-VkObjectTableVertexBufferEntryNVX*
      VkObjectTableVertexBufferEntryNVXbuffer
      VkObjectTableVertexBufferEntryNVXflags
      VkObjectTableVertexBufferEntryNVXtype
      VkObjectTableVertexBufferEntryNVX
      VkObjectTableVertexBufferEntryNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkObjectTableVertexBufferEntryNVX
      (struct "VkObjectTableVertexBufferEntryNVX"))
   (c-define-type
      VkObjectTableVertexBufferEntryNVX*
      (pointer VkObjectTableVertexBufferEntryNVX))
   (define-c-lambda
      VkObjectTableVertexBufferEntryNVXtype
      (VkObjectTableVertexBufferEntryNVX*)
      VkObjectEntryTypeNVX
      "___return (___arg1->type);")
   (define-c-lambda
      VkObjectTableVertexBufferEntryNVXflags
      (VkObjectTableVertexBufferEntryNVX*)
      VkObjectEntryUsageFlagsNVX
      "___return (___arg1->flags);")
   (define-c-lambda
      VkObjectTableVertexBufferEntryNVXbuffer
      (VkObjectTableVertexBufferEntryNVX*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      make-VkObjectTableVertexBufferEntryNVX*
      (int)
      VkObjectTableVertexBufferEntryNVX*
      "VkObjectTableVertexBufferEntryNVX* vkobjecttablevertexbufferentrynvx = malloc(___arg1 * sizeof(VkObjectTableVertexBufferEntryNVX));
      ___return (vkobjecttablevertexbufferentrynvx);")
   (define-c-lambda
      ref-VkObjectTableVertexBufferEntryNVX
      (VkObjectTableVertexBufferEntryNVX* int)
      VkObjectTableVertexBufferEntryNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkObjectTableVertexBufferEntryNVX
      ((pointer VkObjectTableVertexBufferEntryNVX))
      VkObjectTableVertexBufferEntryNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkObjectTableVertexBufferEntryNVX
      (VkObjectEntryTypeNVX VkObjectEntryUsageFlagsNVX VkBuffer)
      VkObjectTableVertexBufferEntryNVX*
      "VkObjectTableVertexBufferEntryNVX *objecttablevertexbufferentrynvx = malloc(sizeof(VkObjectTableVertexBufferEntryNVX));
objecttablevertexbufferentrynvx->type=___arg1;
objecttablevertexbufferentrynvx->flags=___arg2;
objecttablevertexbufferentrynvx->buffer=___arg3;
___return (objecttablevertexbufferentrynvx);"))
(begin-ffi
   (make-VkObjectTableIndexBufferEntryNVX
      ptr->VkObjectTableIndexBufferEntryNVX
      ref-VkObjectTableIndexBufferEntryNVX
      make-VkObjectTableIndexBufferEntryNVX*
      VkObjectTableIndexBufferEntryNVXindexType
      VkObjectTableIndexBufferEntryNVXbuffer
      VkObjectTableIndexBufferEntryNVXflags
      VkObjectTableIndexBufferEntryNVXtype
      VkObjectTableIndexBufferEntryNVX
      VkObjectTableIndexBufferEntryNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkObjectTableIndexBufferEntryNVX
      (struct "VkObjectTableIndexBufferEntryNVX"))
   (c-define-type
      VkObjectTableIndexBufferEntryNVX*
      (pointer VkObjectTableIndexBufferEntryNVX))
   (define-c-lambda
      VkObjectTableIndexBufferEntryNVXtype
      (VkObjectTableIndexBufferEntryNVX*)
      VkObjectEntryTypeNVX
      "___return (___arg1->type);")
   (define-c-lambda
      VkObjectTableIndexBufferEntryNVXflags
      (VkObjectTableIndexBufferEntryNVX*)
      VkObjectEntryUsageFlagsNVX
      "___return (___arg1->flags);")
   (define-c-lambda
      VkObjectTableIndexBufferEntryNVXbuffer
      (VkObjectTableIndexBufferEntryNVX*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      VkObjectTableIndexBufferEntryNVXindexType
      (VkObjectTableIndexBufferEntryNVX*)
      VkIndexType
      "___return (___arg1->indexType);")
   (define-c-lambda
      make-VkObjectTableIndexBufferEntryNVX*
      (int)
      VkObjectTableIndexBufferEntryNVX*
      "VkObjectTableIndexBufferEntryNVX* vkobjecttableindexbufferentrynvx = malloc(___arg1 * sizeof(VkObjectTableIndexBufferEntryNVX));
      ___return (vkobjecttableindexbufferentrynvx);")
   (define-c-lambda
      ref-VkObjectTableIndexBufferEntryNVX
      (VkObjectTableIndexBufferEntryNVX* int)
      VkObjectTableIndexBufferEntryNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkObjectTableIndexBufferEntryNVX
      ((pointer VkObjectTableIndexBufferEntryNVX))
      VkObjectTableIndexBufferEntryNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkObjectTableIndexBufferEntryNVX
      (VkObjectEntryTypeNVX VkObjectEntryUsageFlagsNVX VkBuffer VkIndexType)
      VkObjectTableIndexBufferEntryNVX*
      "VkObjectTableIndexBufferEntryNVX *objecttableindexbufferentrynvx = malloc(sizeof(VkObjectTableIndexBufferEntryNVX));
objecttableindexbufferentrynvx->type=___arg1;
objecttableindexbufferentrynvx->flags=___arg2;
objecttableindexbufferentrynvx->buffer=___arg3;
objecttableindexbufferentrynvx->indexType=___arg4;
___return (objecttableindexbufferentrynvx);"))
(begin-ffi
   (make-VkObjectTablePushConstantEntryNVX
      ptr->VkObjectTablePushConstantEntryNVX
      ref-VkObjectTablePushConstantEntryNVX
      make-VkObjectTablePushConstantEntryNVX*
      VkObjectTablePushConstantEntryNVXstageFlags
      VkObjectTablePushConstantEntryNVXpipelineLayout
      VkObjectTablePushConstantEntryNVXflags
      VkObjectTablePushConstantEntryNVXtype
      VkObjectTablePushConstantEntryNVX
      VkObjectTablePushConstantEntryNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkObjectTablePushConstantEntryNVX
      (struct "VkObjectTablePushConstantEntryNVX"))
   (c-define-type
      VkObjectTablePushConstantEntryNVX*
      (pointer VkObjectTablePushConstantEntryNVX))
   (define-c-lambda
      VkObjectTablePushConstantEntryNVXtype
      (VkObjectTablePushConstantEntryNVX*)
      VkObjectEntryTypeNVX
      "___return (___arg1->type);")
   (define-c-lambda
      VkObjectTablePushConstantEntryNVXflags
      (VkObjectTablePushConstantEntryNVX*)
      VkObjectEntryUsageFlagsNVX
      "___return (___arg1->flags);")
   (define-c-lambda
      VkObjectTablePushConstantEntryNVXpipelineLayout
      (VkObjectTablePushConstantEntryNVX*)
      VkPipelineLayout
      "___return (___arg1->pipelineLayout);")
   (define-c-lambda
      VkObjectTablePushConstantEntryNVXstageFlags
      (VkObjectTablePushConstantEntryNVX*)
      VkShaderStageFlags
      "___return (___arg1->stageFlags);")
   (define-c-lambda
      make-VkObjectTablePushConstantEntryNVX*
      (int)
      VkObjectTablePushConstantEntryNVX*
      "VkObjectTablePushConstantEntryNVX* vkobjecttablepushconstantentrynvx = malloc(___arg1 * sizeof(VkObjectTablePushConstantEntryNVX));
      ___return (vkobjecttablepushconstantentrynvx);")
   (define-c-lambda
      ref-VkObjectTablePushConstantEntryNVX
      (VkObjectTablePushConstantEntryNVX* int)
      VkObjectTablePushConstantEntryNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkObjectTablePushConstantEntryNVX
      ((pointer VkObjectTablePushConstantEntryNVX))
      VkObjectTablePushConstantEntryNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkObjectTablePushConstantEntryNVX
      (VkObjectEntryTypeNVX
         VkObjectEntryUsageFlagsNVX
         VkPipelineLayout
         VkShaderStageFlags)
      VkObjectTablePushConstantEntryNVX*
      "VkObjectTablePushConstantEntryNVX *objecttablepushconstantentrynvx = malloc(sizeof(VkObjectTablePushConstantEntryNVX));
objecttablepushconstantentrynvx->type=___arg1;
objecttablepushconstantentrynvx->flags=___arg2;
objecttablepushconstantentrynvx->pipelineLayout=___arg3;
objecttablepushconstantentrynvx->stageFlags=___arg4;
___return (objecttablepushconstantentrynvx);"))
(begin-ffi
   (make-VkPhysicalDeviceFeatures2
      ptr->VkPhysicalDeviceFeatures2
      ref-VkPhysicalDeviceFeatures2
      make-VkPhysicalDeviceFeatures2*
      VkPhysicalDeviceFeatures2features
      VkPhysicalDeviceFeatures2pNext
      VkPhysicalDeviceFeatures2sType
      VkPhysicalDeviceFeatures2
      VkPhysicalDeviceFeatures2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPhysicalDeviceFeatures2 (struct "VkPhysicalDeviceFeatures2"))
   (c-define-type VkPhysicalDeviceFeatures2* (pointer VkPhysicalDeviceFeatures2))
   (define-c-lambda
      VkPhysicalDeviceFeatures2sType
      (VkPhysicalDeviceFeatures2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceFeatures2pNext
      (VkPhysicalDeviceFeatures2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceFeatures2features
      (VkPhysicalDeviceFeatures2*)
      VkPhysicalDeviceFeatures
      "___return (___arg1->features);")
   (define-c-lambda
      make-VkPhysicalDeviceFeatures2*
      (int)
      VkPhysicalDeviceFeatures2*
      "VkPhysicalDeviceFeatures2* vkphysicaldevicefeatures2 = malloc(___arg1 * sizeof(VkPhysicalDeviceFeatures2));
      ___return (vkphysicaldevicefeatures2);")
   (define-c-lambda
      ref-VkPhysicalDeviceFeatures2
      (VkPhysicalDeviceFeatures2* int)
      VkPhysicalDeviceFeatures2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceFeatures2
      ((pointer VkPhysicalDeviceFeatures2))
      VkPhysicalDeviceFeatures2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceFeatures2
      (void* VkPhysicalDeviceFeatures)
      VkPhysicalDeviceFeatures2*
      "VkPhysicalDeviceFeatures2 *physicaldevicefeatures2 = malloc(sizeof(VkPhysicalDeviceFeatures2));
physicaldevicefeatures2->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
physicaldevicefeatures2->pNext=___arg1;
physicaldevicefeatures2->features=___arg2;
___return (physicaldevicefeatures2);"))
(begin-ffi
   (make-VkPhysicalDeviceFeatures2KHR
      ptr->VkPhysicalDeviceFeatures2KHR
      ref-VkPhysicalDeviceFeatures2KHR
      make-VkPhysicalDeviceFeatures2KHR*
      VkPhysicalDeviceFeatures2KHR
      VkPhysicalDeviceFeatures2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPhysicalDeviceFeatures2KHR (struct "VkPhysicalDeviceFeatures2KHR"))
   (c-define-type VkPhysicalDeviceFeatures2KHR* (pointer VkPhysicalDeviceFeatures2KHR))
   (define-c-lambda
      make-VkPhysicalDeviceFeatures2KHR*
      (int)
      VkPhysicalDeviceFeatures2KHR*
      "VkPhysicalDeviceFeatures2KHR* vkphysicaldevicefeatures2khr = malloc(___arg1 * sizeof(VkPhysicalDeviceFeatures2KHR));
      ___return (vkphysicaldevicefeatures2khr);")
   (define-c-lambda
      make-VkPhysicalDeviceFeatures2KHR
      ()
      VkPhysicalDeviceFeatures2KHR*
      "VkPhysicalDeviceFeatures2KHR *physicaldevicefeatures2khr = malloc(sizeof(VkPhysicalDeviceFeatures2KHR));
___return (physicaldevicefeatures2khr);"))
(begin-ffi
   (make-VkPhysicalDeviceProperties2
      ptr->VkPhysicalDeviceProperties2
      ref-VkPhysicalDeviceProperties2
      make-VkPhysicalDeviceProperties2*
      VkPhysicalDeviceProperties2properties
      VkPhysicalDeviceProperties2pNext
      VkPhysicalDeviceProperties2sType
      VkPhysicalDeviceProperties2
      VkPhysicalDeviceProperties2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPhysicalDeviceProperties2 (struct "VkPhysicalDeviceProperties2"))
   (c-define-type VkPhysicalDeviceProperties2* (pointer VkPhysicalDeviceProperties2))
   (define-c-lambda
      VkPhysicalDeviceProperties2sType
      (VkPhysicalDeviceProperties2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceProperties2pNext
      (VkPhysicalDeviceProperties2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceProperties2properties
      (VkPhysicalDeviceProperties2*)
      VkPhysicalDeviceProperties
      "___return (___arg1->properties);")
   (define-c-lambda
      make-VkPhysicalDeviceProperties2*
      (int)
      VkPhysicalDeviceProperties2*
      "VkPhysicalDeviceProperties2* vkphysicaldeviceproperties2 = malloc(___arg1 * sizeof(VkPhysicalDeviceProperties2));
      ___return (vkphysicaldeviceproperties2);")
   (define-c-lambda
      ref-VkPhysicalDeviceProperties2
      (VkPhysicalDeviceProperties2* int)
      VkPhysicalDeviceProperties2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceProperties2
      ((pointer VkPhysicalDeviceProperties2))
      VkPhysicalDeviceProperties2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceProperties2
      (void* VkPhysicalDeviceProperties)
      VkPhysicalDeviceProperties2*
      "VkPhysicalDeviceProperties2 *physicaldeviceproperties2 = malloc(sizeof(VkPhysicalDeviceProperties2));
physicaldeviceproperties2->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
physicaldeviceproperties2->pNext=___arg1;
physicaldeviceproperties2->properties=___arg2;
___return (physicaldeviceproperties2);"))
(begin-ffi
   (make-VkPhysicalDeviceProperties2KHR
      ptr->VkPhysicalDeviceProperties2KHR
      ref-VkPhysicalDeviceProperties2KHR
      make-VkPhysicalDeviceProperties2KHR*
      VkPhysicalDeviceProperties2KHR
      VkPhysicalDeviceProperties2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceProperties2KHR
      (struct "VkPhysicalDeviceProperties2KHR"))
   (c-define-type
      VkPhysicalDeviceProperties2KHR*
      (pointer VkPhysicalDeviceProperties2KHR))
   (define-c-lambda
      make-VkPhysicalDeviceProperties2KHR*
      (int)
      VkPhysicalDeviceProperties2KHR*
      "VkPhysicalDeviceProperties2KHR* vkphysicaldeviceproperties2khr = malloc(___arg1 * sizeof(VkPhysicalDeviceProperties2KHR));
      ___return (vkphysicaldeviceproperties2khr);")
   (define-c-lambda
      make-VkPhysicalDeviceProperties2KHR
      ()
      VkPhysicalDeviceProperties2KHR*
      "VkPhysicalDeviceProperties2KHR *physicaldeviceproperties2khr = malloc(sizeof(VkPhysicalDeviceProperties2KHR));
___return (physicaldeviceproperties2khr);"))
(begin-ffi
   (make-VkFormatProperties2
      ptr->VkFormatProperties2
      ref-VkFormatProperties2
      make-VkFormatProperties2*
      VkFormatProperties2formatProperties
      VkFormatProperties2pNext
      VkFormatProperties2sType
      VkFormatProperties2
      VkFormatProperties2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkFormatProperties2 (struct "VkFormatProperties2"))
   (c-define-type VkFormatProperties2* (pointer VkFormatProperties2))
   (define-c-lambda
      VkFormatProperties2sType
      (VkFormatProperties2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkFormatProperties2pNext
      (VkFormatProperties2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkFormatProperties2formatProperties
      (VkFormatProperties2*)
      VkFormatProperties
      "___return (___arg1->formatProperties);")
   (define-c-lambda
      make-VkFormatProperties2*
      (int)
      VkFormatProperties2*
      "VkFormatProperties2* vkformatproperties2 = malloc(___arg1 * sizeof(VkFormatProperties2));
      ___return (vkformatproperties2);")
   (define-c-lambda
      ref-VkFormatProperties2
      (VkFormatProperties2* int)
      VkFormatProperties2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkFormatProperties2
      ((pointer VkFormatProperties2))
      VkFormatProperties2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkFormatProperties2
      (void* VkFormatProperties)
      VkFormatProperties2*
      "VkFormatProperties2 *formatproperties2 = malloc(sizeof(VkFormatProperties2));
formatproperties2->sType=VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
formatproperties2->pNext=___arg1;
formatproperties2->formatProperties=___arg2;
___return (formatproperties2);"))
(begin-ffi
   (make-VkFormatProperties2KHR
      ptr->VkFormatProperties2KHR
      ref-VkFormatProperties2KHR
      make-VkFormatProperties2KHR*
      VkFormatProperties2KHR
      VkFormatProperties2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkFormatProperties2KHR (struct "VkFormatProperties2KHR"))
   (c-define-type VkFormatProperties2KHR* (pointer VkFormatProperties2KHR))
   (define-c-lambda
      make-VkFormatProperties2KHR*
      (int)
      VkFormatProperties2KHR*
      "VkFormatProperties2KHR* vkformatproperties2khr = malloc(___arg1 * sizeof(VkFormatProperties2KHR));
      ___return (vkformatproperties2khr);")
   (define-c-lambda
      make-VkFormatProperties2KHR
      ()
      VkFormatProperties2KHR*
      "VkFormatProperties2KHR *formatproperties2khr = malloc(sizeof(VkFormatProperties2KHR));
___return (formatproperties2khr);"))
(begin-ffi
   (make-VkImageFormatProperties2
      ptr->VkImageFormatProperties2
      ref-VkImageFormatProperties2
      make-VkImageFormatProperties2*
      VkImageFormatProperties2imageFormatProperties
      VkImageFormatProperties2pNext
      VkImageFormatProperties2sType
      VkImageFormatProperties2
      VkImageFormatProperties2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageFormatProperties2 (struct "VkImageFormatProperties2"))
   (c-define-type VkImageFormatProperties2* (pointer VkImageFormatProperties2))
   (define-c-lambda
      VkImageFormatProperties2sType
      (VkImageFormatProperties2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageFormatProperties2pNext
      (VkImageFormatProperties2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageFormatProperties2imageFormatProperties
      (VkImageFormatProperties2*)
      VkImageFormatProperties
      "___return (___arg1->imageFormatProperties);")
   (define-c-lambda
      make-VkImageFormatProperties2*
      (int)
      VkImageFormatProperties2*
      "VkImageFormatProperties2* vkimageformatproperties2 = malloc(___arg1 * sizeof(VkImageFormatProperties2));
      ___return (vkimageformatproperties2);")
   (define-c-lambda
      ref-VkImageFormatProperties2
      (VkImageFormatProperties2* int)
      VkImageFormatProperties2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageFormatProperties2
      ((pointer VkImageFormatProperties2))
      VkImageFormatProperties2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageFormatProperties2
      (void* VkImageFormatProperties)
      VkImageFormatProperties2*
      "VkImageFormatProperties2 *imageformatproperties2 = malloc(sizeof(VkImageFormatProperties2));
imageformatproperties2->sType=VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
imageformatproperties2->pNext=___arg1;
imageformatproperties2->imageFormatProperties=___arg2;
___return (imageformatproperties2);"))
(begin-ffi
   (make-VkImageFormatProperties2KHR
      ptr->VkImageFormatProperties2KHR
      ref-VkImageFormatProperties2KHR
      make-VkImageFormatProperties2KHR*
      VkImageFormatProperties2KHR
      VkImageFormatProperties2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageFormatProperties2KHR (struct "VkImageFormatProperties2KHR"))
   (c-define-type VkImageFormatProperties2KHR* (pointer VkImageFormatProperties2KHR))
   (define-c-lambda
      make-VkImageFormatProperties2KHR*
      (int)
      VkImageFormatProperties2KHR*
      "VkImageFormatProperties2KHR* vkimageformatproperties2khr = malloc(___arg1 * sizeof(VkImageFormatProperties2KHR));
      ___return (vkimageformatproperties2khr);")
   (define-c-lambda
      make-VkImageFormatProperties2KHR
      ()
      VkImageFormatProperties2KHR*
      "VkImageFormatProperties2KHR *imageformatproperties2khr = malloc(sizeof(VkImageFormatProperties2KHR));
___return (imageformatproperties2khr);"))
(begin-ffi
   (make-VkPhysicalDeviceImageFormatInfo2
      ptr->VkPhysicalDeviceImageFormatInfo2
      ref-VkPhysicalDeviceImageFormatInfo2
      make-VkPhysicalDeviceImageFormatInfo2*
      VkPhysicalDeviceImageFormatInfo2flags
      VkPhysicalDeviceImageFormatInfo2usage
      VkPhysicalDeviceImageFormatInfo2tiling
      VkPhysicalDeviceImageFormatInfo2type
      VkPhysicalDeviceImageFormatInfo2format
      VkPhysicalDeviceImageFormatInfo2pNext
      VkPhysicalDeviceImageFormatInfo2sType
      VkPhysicalDeviceImageFormatInfo2
      VkPhysicalDeviceImageFormatInfo2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceImageFormatInfo2
      (struct "VkPhysicalDeviceImageFormatInfo2"))
   (c-define-type
      VkPhysicalDeviceImageFormatInfo2*
      (pointer VkPhysicalDeviceImageFormatInfo2))
   (define-c-lambda
      VkPhysicalDeviceImageFormatInfo2sType
      (VkPhysicalDeviceImageFormatInfo2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceImageFormatInfo2pNext
      (VkPhysicalDeviceImageFormatInfo2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceImageFormatInfo2format
      (VkPhysicalDeviceImageFormatInfo2*)
      VkFormat
      "___return (___arg1->format);")
   (define-c-lambda
      VkPhysicalDeviceImageFormatInfo2type
      (VkPhysicalDeviceImageFormatInfo2*)
      VkImageType
      "___return (___arg1->type);")
   (define-c-lambda
      VkPhysicalDeviceImageFormatInfo2tiling
      (VkPhysicalDeviceImageFormatInfo2*)
      VkImageTiling
      "___return (___arg1->tiling);")
   (define-c-lambda
      VkPhysicalDeviceImageFormatInfo2usage
      (VkPhysicalDeviceImageFormatInfo2*)
      VkImageUsageFlags
      "___return (___arg1->usage);")
   (define-c-lambda
      VkPhysicalDeviceImageFormatInfo2flags
      (VkPhysicalDeviceImageFormatInfo2*)
      VkImageCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkPhysicalDeviceImageFormatInfo2*
      (int)
      VkPhysicalDeviceImageFormatInfo2*
      "VkPhysicalDeviceImageFormatInfo2* vkphysicaldeviceimageformatinfo2 = malloc(___arg1 * sizeof(VkPhysicalDeviceImageFormatInfo2));
      ___return (vkphysicaldeviceimageformatinfo2);")
   (define-c-lambda
      ref-VkPhysicalDeviceImageFormatInfo2
      (VkPhysicalDeviceImageFormatInfo2* int)
      VkPhysicalDeviceImageFormatInfo2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceImageFormatInfo2
      ((pointer VkPhysicalDeviceImageFormatInfo2))
      VkPhysicalDeviceImageFormatInfo2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceImageFormatInfo2
      (void* VkFormat VkImageType VkImageTiling VkImageUsageFlags VkImageCreateFlags)
      VkPhysicalDeviceImageFormatInfo2*
      "VkPhysicalDeviceImageFormatInfo2 *physicaldeviceimageformatinfo2 = malloc(sizeof(VkPhysicalDeviceImageFormatInfo2));
physicaldeviceimageformatinfo2->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
physicaldeviceimageformatinfo2->pNext=___arg1;
physicaldeviceimageformatinfo2->format=___arg2;
physicaldeviceimageformatinfo2->type=___arg3;
physicaldeviceimageformatinfo2->tiling=___arg4;
physicaldeviceimageformatinfo2->usage=___arg5;
physicaldeviceimageformatinfo2->flags=___arg6;
___return (physicaldeviceimageformatinfo2);"))
(begin-ffi
   (make-VkPhysicalDeviceImageFormatInfo2KHR
      ptr->VkPhysicalDeviceImageFormatInfo2KHR
      ref-VkPhysicalDeviceImageFormatInfo2KHR
      make-VkPhysicalDeviceImageFormatInfo2KHR*
      VkPhysicalDeviceImageFormatInfo2KHR
      VkPhysicalDeviceImageFormatInfo2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceImageFormatInfo2KHR
      (struct "VkPhysicalDeviceImageFormatInfo2KHR"))
   (c-define-type
      VkPhysicalDeviceImageFormatInfo2KHR*
      (pointer VkPhysicalDeviceImageFormatInfo2KHR))
   (define-c-lambda
      make-VkPhysicalDeviceImageFormatInfo2KHR*
      (int)
      VkPhysicalDeviceImageFormatInfo2KHR*
      "VkPhysicalDeviceImageFormatInfo2KHR* vkphysicaldeviceimageformatinfo2khr = malloc(___arg1 * sizeof(VkPhysicalDeviceImageFormatInfo2KHR));
      ___return (vkphysicaldeviceimageformatinfo2khr);")
   (define-c-lambda
      make-VkPhysicalDeviceImageFormatInfo2KHR
      ()
      VkPhysicalDeviceImageFormatInfo2KHR*
      "VkPhysicalDeviceImageFormatInfo2KHR *physicaldeviceimageformatinfo2khr = malloc(sizeof(VkPhysicalDeviceImageFormatInfo2KHR));
___return (physicaldeviceimageformatinfo2khr);"))
(begin-ffi
   (make-VkQueueFamilyProperties2
      ptr->VkQueueFamilyProperties2
      ref-VkQueueFamilyProperties2
      make-VkQueueFamilyProperties2*
      VkQueueFamilyProperties2queueFamilyProperties
      VkQueueFamilyProperties2pNext
      VkQueueFamilyProperties2sType
      VkQueueFamilyProperties2
      VkQueueFamilyProperties2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkQueueFamilyProperties2 (struct "VkQueueFamilyProperties2"))
   (c-define-type VkQueueFamilyProperties2* (pointer VkQueueFamilyProperties2))
   (define-c-lambda
      VkQueueFamilyProperties2sType
      (VkQueueFamilyProperties2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkQueueFamilyProperties2pNext
      (VkQueueFamilyProperties2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkQueueFamilyProperties2queueFamilyProperties
      (VkQueueFamilyProperties2*)
      VkQueueFamilyProperties
      "___return (___arg1->queueFamilyProperties);")
   (define-c-lambda
      make-VkQueueFamilyProperties2*
      (int)
      VkQueueFamilyProperties2*
      "VkQueueFamilyProperties2* vkqueuefamilyproperties2 = malloc(___arg1 * sizeof(VkQueueFamilyProperties2));
      ___return (vkqueuefamilyproperties2);")
   (define-c-lambda
      ref-VkQueueFamilyProperties2
      (VkQueueFamilyProperties2* int)
      VkQueueFamilyProperties2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkQueueFamilyProperties2
      ((pointer VkQueueFamilyProperties2))
      VkQueueFamilyProperties2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkQueueFamilyProperties2
      (void* VkQueueFamilyProperties)
      VkQueueFamilyProperties2*
      "VkQueueFamilyProperties2 *queuefamilyproperties2 = malloc(sizeof(VkQueueFamilyProperties2));
queuefamilyproperties2->sType=VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
queuefamilyproperties2->pNext=___arg1;
queuefamilyproperties2->queueFamilyProperties=___arg2;
___return (queuefamilyproperties2);"))
(begin-ffi
   (make-VkQueueFamilyProperties2KHR
      ptr->VkQueueFamilyProperties2KHR
      ref-VkQueueFamilyProperties2KHR
      make-VkQueueFamilyProperties2KHR*
      VkQueueFamilyProperties2KHR
      VkQueueFamilyProperties2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkQueueFamilyProperties2KHR (struct "VkQueueFamilyProperties2KHR"))
   (c-define-type VkQueueFamilyProperties2KHR* (pointer VkQueueFamilyProperties2KHR))
   (define-c-lambda
      make-VkQueueFamilyProperties2KHR*
      (int)
      VkQueueFamilyProperties2KHR*
      "VkQueueFamilyProperties2KHR* vkqueuefamilyproperties2khr = malloc(___arg1 * sizeof(VkQueueFamilyProperties2KHR));
      ___return (vkqueuefamilyproperties2khr);")
   (define-c-lambda
      make-VkQueueFamilyProperties2KHR
      ()
      VkQueueFamilyProperties2KHR*
      "VkQueueFamilyProperties2KHR *queuefamilyproperties2khr = malloc(sizeof(VkQueueFamilyProperties2KHR));
___return (queuefamilyproperties2khr);"))
(begin-ffi
   (make-VkPhysicalDeviceMemoryProperties2
      ptr->VkPhysicalDeviceMemoryProperties2
      ref-VkPhysicalDeviceMemoryProperties2
      make-VkPhysicalDeviceMemoryProperties2*
      VkPhysicalDeviceMemoryProperties2memoryProperties
      VkPhysicalDeviceMemoryProperties2pNext
      VkPhysicalDeviceMemoryProperties2sType
      VkPhysicalDeviceMemoryProperties2
      VkPhysicalDeviceMemoryProperties2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMemoryProperties2
      (struct "VkPhysicalDeviceMemoryProperties2"))
   (c-define-type
      VkPhysicalDeviceMemoryProperties2*
      (pointer VkPhysicalDeviceMemoryProperties2))
   (define-c-lambda
      VkPhysicalDeviceMemoryProperties2sType
      (VkPhysicalDeviceMemoryProperties2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceMemoryProperties2pNext
      (VkPhysicalDeviceMemoryProperties2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceMemoryProperties2memoryProperties
      (VkPhysicalDeviceMemoryProperties2*)
      VkPhysicalDeviceMemoryProperties
      "___return (___arg1->memoryProperties);")
   (define-c-lambda
      make-VkPhysicalDeviceMemoryProperties2*
      (int)
      VkPhysicalDeviceMemoryProperties2*
      "VkPhysicalDeviceMemoryProperties2* vkphysicaldevicememoryproperties2 = malloc(___arg1 * sizeof(VkPhysicalDeviceMemoryProperties2));
      ___return (vkphysicaldevicememoryproperties2);")
   (define-c-lambda
      ref-VkPhysicalDeviceMemoryProperties2
      (VkPhysicalDeviceMemoryProperties2* int)
      VkPhysicalDeviceMemoryProperties2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceMemoryProperties2
      ((pointer VkPhysicalDeviceMemoryProperties2))
      VkPhysicalDeviceMemoryProperties2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceMemoryProperties2
      (void* VkPhysicalDeviceMemoryProperties)
      VkPhysicalDeviceMemoryProperties2*
      "VkPhysicalDeviceMemoryProperties2 *physicaldevicememoryproperties2 = malloc(sizeof(VkPhysicalDeviceMemoryProperties2));
physicaldevicememoryproperties2->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
physicaldevicememoryproperties2->pNext=___arg1;
physicaldevicememoryproperties2->memoryProperties=___arg2;
___return (physicaldevicememoryproperties2);"))
(begin-ffi
   (make-VkPhysicalDeviceMemoryProperties2KHR
      ptr->VkPhysicalDeviceMemoryProperties2KHR
      ref-VkPhysicalDeviceMemoryProperties2KHR
      make-VkPhysicalDeviceMemoryProperties2KHR*
      VkPhysicalDeviceMemoryProperties2KHR
      VkPhysicalDeviceMemoryProperties2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMemoryProperties2KHR
      (struct "VkPhysicalDeviceMemoryProperties2KHR"))
   (c-define-type
      VkPhysicalDeviceMemoryProperties2KHR*
      (pointer VkPhysicalDeviceMemoryProperties2KHR))
   (define-c-lambda
      make-VkPhysicalDeviceMemoryProperties2KHR*
      (int)
      VkPhysicalDeviceMemoryProperties2KHR*
      "VkPhysicalDeviceMemoryProperties2KHR* vkphysicaldevicememoryproperties2khr = malloc(___arg1 * sizeof(VkPhysicalDeviceMemoryProperties2KHR));
      ___return (vkphysicaldevicememoryproperties2khr);")
   (define-c-lambda
      make-VkPhysicalDeviceMemoryProperties2KHR
      ()
      VkPhysicalDeviceMemoryProperties2KHR*
      "VkPhysicalDeviceMemoryProperties2KHR *physicaldevicememoryproperties2khr = malloc(sizeof(VkPhysicalDeviceMemoryProperties2KHR));
___return (physicaldevicememoryproperties2khr);"))
(begin-ffi
   (make-VkSparseImageFormatProperties2
      ptr->VkSparseImageFormatProperties2
      ref-VkSparseImageFormatProperties2
      make-VkSparseImageFormatProperties2*
      VkSparseImageFormatProperties2properties
      VkSparseImageFormatProperties2pNext
      VkSparseImageFormatProperties2sType
      VkSparseImageFormatProperties2
      VkSparseImageFormatProperties2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSparseImageFormatProperties2
      (struct "VkSparseImageFormatProperties2"))
   (c-define-type
      VkSparseImageFormatProperties2*
      (pointer VkSparseImageFormatProperties2))
   (define-c-lambda
      VkSparseImageFormatProperties2sType
      (VkSparseImageFormatProperties2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSparseImageFormatProperties2pNext
      (VkSparseImageFormatProperties2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSparseImageFormatProperties2properties
      (VkSparseImageFormatProperties2*)
      VkSparseImageFormatProperties
      "___return (___arg1->properties);")
   (define-c-lambda
      make-VkSparseImageFormatProperties2*
      (int)
      VkSparseImageFormatProperties2*
      "VkSparseImageFormatProperties2* vksparseimageformatproperties2 = malloc(___arg1 * sizeof(VkSparseImageFormatProperties2));
      ___return (vksparseimageformatproperties2);")
   (define-c-lambda
      ref-VkSparseImageFormatProperties2
      (VkSparseImageFormatProperties2* int)
      VkSparseImageFormatProperties2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSparseImageFormatProperties2
      ((pointer VkSparseImageFormatProperties2))
      VkSparseImageFormatProperties2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSparseImageFormatProperties2
      (void* VkSparseImageFormatProperties)
      VkSparseImageFormatProperties2*
      "VkSparseImageFormatProperties2 *sparseimageformatproperties2 = malloc(sizeof(VkSparseImageFormatProperties2));
sparseimageformatproperties2->sType=VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
sparseimageformatproperties2->pNext=___arg1;
sparseimageformatproperties2->properties=___arg2;
___return (sparseimageformatproperties2);"))
(begin-ffi
   (make-VkSparseImageFormatProperties2KHR
      ptr->VkSparseImageFormatProperties2KHR
      ref-VkSparseImageFormatProperties2KHR
      make-VkSparseImageFormatProperties2KHR*
      VkSparseImageFormatProperties2KHR
      VkSparseImageFormatProperties2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSparseImageFormatProperties2KHR
      (struct "VkSparseImageFormatProperties2KHR"))
   (c-define-type
      VkSparseImageFormatProperties2KHR*
      (pointer VkSparseImageFormatProperties2KHR))
   (define-c-lambda
      make-VkSparseImageFormatProperties2KHR*
      (int)
      VkSparseImageFormatProperties2KHR*
      "VkSparseImageFormatProperties2KHR* vksparseimageformatproperties2khr = malloc(___arg1 * sizeof(VkSparseImageFormatProperties2KHR));
      ___return (vksparseimageformatproperties2khr);")
   (define-c-lambda
      make-VkSparseImageFormatProperties2KHR
      ()
      VkSparseImageFormatProperties2KHR*
      "VkSparseImageFormatProperties2KHR *sparseimageformatproperties2khr = malloc(sizeof(VkSparseImageFormatProperties2KHR));
___return (sparseimageformatproperties2khr);"))
(begin-ffi
   (make-VkPhysicalDeviceSparseImageFormatInfo2
      ptr->VkPhysicalDeviceSparseImageFormatInfo2
      ref-VkPhysicalDeviceSparseImageFormatInfo2
      make-VkPhysicalDeviceSparseImageFormatInfo2*
      VkPhysicalDeviceSparseImageFormatInfo2tiling
      VkPhysicalDeviceSparseImageFormatInfo2usage
      VkPhysicalDeviceSparseImageFormatInfo2samples
      VkPhysicalDeviceSparseImageFormatInfo2type
      VkPhysicalDeviceSparseImageFormatInfo2format
      VkPhysicalDeviceSparseImageFormatInfo2pNext
      VkPhysicalDeviceSparseImageFormatInfo2sType
      VkPhysicalDeviceSparseImageFormatInfo2
      VkPhysicalDeviceSparseImageFormatInfo2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSparseImageFormatInfo2
      (struct "VkPhysicalDeviceSparseImageFormatInfo2"))
   (c-define-type
      VkPhysicalDeviceSparseImageFormatInfo2*
      (pointer VkPhysicalDeviceSparseImageFormatInfo2))
   (define-c-lambda
      VkPhysicalDeviceSparseImageFormatInfo2sType
      (VkPhysicalDeviceSparseImageFormatInfo2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceSparseImageFormatInfo2pNext
      (VkPhysicalDeviceSparseImageFormatInfo2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceSparseImageFormatInfo2format
      (VkPhysicalDeviceSparseImageFormatInfo2*)
      VkFormat
      "___return (___arg1->format);")
   (define-c-lambda
      VkPhysicalDeviceSparseImageFormatInfo2type
      (VkPhysicalDeviceSparseImageFormatInfo2*)
      VkImageType
      "___return (___arg1->type);")
   (define-c-lambda
      VkPhysicalDeviceSparseImageFormatInfo2samples
      (VkPhysicalDeviceSparseImageFormatInfo2*)
      VkSampleCountFlagBits
      "___return (___arg1->samples);")
   (define-c-lambda
      VkPhysicalDeviceSparseImageFormatInfo2usage
      (VkPhysicalDeviceSparseImageFormatInfo2*)
      VkImageUsageFlags
      "___return (___arg1->usage);")
   (define-c-lambda
      VkPhysicalDeviceSparseImageFormatInfo2tiling
      (VkPhysicalDeviceSparseImageFormatInfo2*)
      VkImageTiling
      "___return (___arg1->tiling);")
   (define-c-lambda
      make-VkPhysicalDeviceSparseImageFormatInfo2*
      (int)
      VkPhysicalDeviceSparseImageFormatInfo2*
      "VkPhysicalDeviceSparseImageFormatInfo2* vkphysicaldevicesparseimageformatinfo2 = malloc(___arg1 * sizeof(VkPhysicalDeviceSparseImageFormatInfo2));
      ___return (vkphysicaldevicesparseimageformatinfo2);")
   (define-c-lambda
      ref-VkPhysicalDeviceSparseImageFormatInfo2
      (VkPhysicalDeviceSparseImageFormatInfo2* int)
      VkPhysicalDeviceSparseImageFormatInfo2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceSparseImageFormatInfo2
      ((pointer VkPhysicalDeviceSparseImageFormatInfo2))
      VkPhysicalDeviceSparseImageFormatInfo2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceSparseImageFormatInfo2
      (void* VkFormat VkImageType VkSampleCountFlagBits VkImageUsageFlags VkImageTiling)
      VkPhysicalDeviceSparseImageFormatInfo2*
      "VkPhysicalDeviceSparseImageFormatInfo2 *physicaldevicesparseimageformatinfo2 = malloc(sizeof(VkPhysicalDeviceSparseImageFormatInfo2));
physicaldevicesparseimageformatinfo2->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
physicaldevicesparseimageformatinfo2->pNext=___arg1;
physicaldevicesparseimageformatinfo2->format=___arg2;
physicaldevicesparseimageformatinfo2->type=___arg3;
physicaldevicesparseimageformatinfo2->samples=___arg4;
physicaldevicesparseimageformatinfo2->usage=___arg5;
physicaldevicesparseimageformatinfo2->tiling=___arg6;
___return (physicaldevicesparseimageformatinfo2);"))
(begin-ffi
   (make-VkPhysicalDeviceSparseImageFormatInfo2KHR
      ptr->VkPhysicalDeviceSparseImageFormatInfo2KHR
      ref-VkPhysicalDeviceSparseImageFormatInfo2KHR
      make-VkPhysicalDeviceSparseImageFormatInfo2KHR*
      VkPhysicalDeviceSparseImageFormatInfo2KHR
      VkPhysicalDeviceSparseImageFormatInfo2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSparseImageFormatInfo2KHR
      (struct "VkPhysicalDeviceSparseImageFormatInfo2KHR"))
   (c-define-type
      VkPhysicalDeviceSparseImageFormatInfo2KHR*
      (pointer VkPhysicalDeviceSparseImageFormatInfo2KHR))
   (define-c-lambda
      make-VkPhysicalDeviceSparseImageFormatInfo2KHR*
      (int)
      VkPhysicalDeviceSparseImageFormatInfo2KHR*
      "VkPhysicalDeviceSparseImageFormatInfo2KHR* vkphysicaldevicesparseimageformatinfo2khr = malloc(___arg1 * sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR));
      ___return (vkphysicaldevicesparseimageformatinfo2khr);")
   (define-c-lambda
      make-VkPhysicalDeviceSparseImageFormatInfo2KHR
      ()
      VkPhysicalDeviceSparseImageFormatInfo2KHR*
      "VkPhysicalDeviceSparseImageFormatInfo2KHR *physicaldevicesparseimageformatinfo2khr = malloc(sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR));
___return (physicaldevicesparseimageformatinfo2khr);"))
(begin-ffi
   (make-VkPhysicalDevicePushDescriptorPropertiesKHR
      ptr->VkPhysicalDevicePushDescriptorPropertiesKHR
      ref-VkPhysicalDevicePushDescriptorPropertiesKHR
      make-VkPhysicalDevicePushDescriptorPropertiesKHR*
      VkPhysicalDevicePushDescriptorPropertiesKHRmaxPushDescriptors
      VkPhysicalDevicePushDescriptorPropertiesKHRpNext
      VkPhysicalDevicePushDescriptorPropertiesKHRsType
      VkPhysicalDevicePushDescriptorPropertiesKHR
      VkPhysicalDevicePushDescriptorPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDevicePushDescriptorPropertiesKHR
      (struct "VkPhysicalDevicePushDescriptorPropertiesKHR"))
   (c-define-type
      VkPhysicalDevicePushDescriptorPropertiesKHR*
      (pointer VkPhysicalDevicePushDescriptorPropertiesKHR))
   (define-c-lambda
      VkPhysicalDevicePushDescriptorPropertiesKHRsType
      (VkPhysicalDevicePushDescriptorPropertiesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDevicePushDescriptorPropertiesKHRpNext
      (VkPhysicalDevicePushDescriptorPropertiesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDevicePushDescriptorPropertiesKHRmaxPushDescriptors
      (VkPhysicalDevicePushDescriptorPropertiesKHR*)
      uint32_t
      "___return (___arg1->maxPushDescriptors);")
   (define-c-lambda
      make-VkPhysicalDevicePushDescriptorPropertiesKHR*
      (int)
      VkPhysicalDevicePushDescriptorPropertiesKHR*
      "VkPhysicalDevicePushDescriptorPropertiesKHR* vkphysicaldevicepushdescriptorpropertieskhr = malloc(___arg1 * sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR));
      ___return (vkphysicaldevicepushdescriptorpropertieskhr);")
   (define-c-lambda
      ref-VkPhysicalDevicePushDescriptorPropertiesKHR
      (VkPhysicalDevicePushDescriptorPropertiesKHR* int)
      VkPhysicalDevicePushDescriptorPropertiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDevicePushDescriptorPropertiesKHR
      (void* uint32_t)
      VkPhysicalDevicePushDescriptorPropertiesKHR*
      "VkPhysicalDevicePushDescriptorPropertiesKHR *physicaldevicepushdescriptorpropertieskhr = malloc(sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR));
physicaldevicepushdescriptorpropertieskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
physicaldevicepushdescriptorpropertieskhr->pNext=___arg1;
physicaldevicepushdescriptorpropertieskhr->maxPushDescriptors=___arg2;
___return (physicaldevicepushdescriptorpropertieskhr);"))
(begin-ffi
   (make-VkConformanceVersionKHR
      ptr->VkConformanceVersionKHR
      ref-VkConformanceVersionKHR
      make-VkConformanceVersionKHR*
      VkConformanceVersionKHRpatch
      VkConformanceVersionKHRsubminor
      VkConformanceVersionKHRminor
      VkConformanceVersionKHRmajor
      VkConformanceVersionKHR
      VkConformanceVersionKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkConformanceVersionKHR (struct "VkConformanceVersionKHR"))
   (c-define-type VkConformanceVersionKHR* (pointer VkConformanceVersionKHR))
   (define-c-lambda
      VkConformanceVersionKHRmajor
      (VkConformanceVersionKHR*)
      uint8_t
      "___return (___arg1->major);")
   (define-c-lambda
      VkConformanceVersionKHRminor
      (VkConformanceVersionKHR*)
      uint8_t
      "___return (___arg1->minor);")
   (define-c-lambda
      VkConformanceVersionKHRsubminor
      (VkConformanceVersionKHR*)
      uint8_t
      "___return (___arg1->subminor);")
   (define-c-lambda
      VkConformanceVersionKHRpatch
      (VkConformanceVersionKHR*)
      uint8_t
      "___return (___arg1->patch);")
   (define-c-lambda
      make-VkConformanceVersionKHR*
      (int)
      VkConformanceVersionKHR*
      "VkConformanceVersionKHR* vkconformanceversionkhr = malloc(___arg1 * sizeof(VkConformanceVersionKHR));
      ___return (vkconformanceversionkhr);")
   (define-c-lambda
      ref-VkConformanceVersionKHR
      (VkConformanceVersionKHR* int)
      VkConformanceVersionKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkConformanceVersionKHR
      (uint8_t uint8_t uint8_t uint8_t)
      VkConformanceVersionKHR*
      "VkConformanceVersionKHR *conformanceversionkhr = malloc(sizeof(VkConformanceVersionKHR));
conformanceversionkhr->major=___arg1;
conformanceversionkhr->minor=___arg2;
conformanceversionkhr->subminor=___arg3;
conformanceversionkhr->patch=___arg4;
___return (conformanceversionkhr);"))
(begin-ffi
   (make-VkPhysicalDeviceDriverPropertiesKHR
      ptr->VkPhysicalDeviceDriverPropertiesKHR
      ref-VkPhysicalDeviceDriverPropertiesKHR
      make-VkPhysicalDeviceDriverPropertiesKHR*
      VkPhysicalDeviceDriverPropertiesKHRconformanceVersion
      VkPhysicalDeviceDriverPropertiesKHRdriverInfo
      VkPhysicalDeviceDriverPropertiesKHRdriverName
      VkPhysicalDeviceDriverPropertiesKHRdriverID
      VkPhysicalDeviceDriverPropertiesKHRpNext
      VkPhysicalDeviceDriverPropertiesKHRsType
      VkPhysicalDeviceDriverPropertiesKHR
      VkPhysicalDeviceDriverPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceDriverPropertiesKHR
      (struct "VkPhysicalDeviceDriverPropertiesKHR"))
   (c-define-type
      VkPhysicalDeviceDriverPropertiesKHR*
      (pointer VkPhysicalDeviceDriverPropertiesKHR))
   (define-c-lambda
      VkPhysicalDeviceDriverPropertiesKHRsType
      (VkPhysicalDeviceDriverPropertiesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceDriverPropertiesKHRpNext
      (VkPhysicalDeviceDriverPropertiesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceDriverPropertiesKHRdriverID
      (VkPhysicalDeviceDriverPropertiesKHR*)
      VkDriverIdKHR
      "___return (___arg1->driverID);")
   (define-c-lambda
      VkPhysicalDeviceDriverPropertiesKHRdriverName
      (VkPhysicalDeviceDriverPropertiesKHR*)
      char*
      "___return (___arg1->driverName);")
   (define-c-lambda
      VkPhysicalDeviceDriverPropertiesKHRdriverInfo
      (VkPhysicalDeviceDriverPropertiesKHR*)
      char*
      "___return (___arg1->driverInfo);")
   (define-c-lambda
      VkPhysicalDeviceDriverPropertiesKHRconformanceVersion
      (VkPhysicalDeviceDriverPropertiesKHR*)
      VkConformanceVersionKHR
      "___return (___arg1->conformanceVersion);")
   (define-c-lambda
      make-VkPhysicalDeviceDriverPropertiesKHR*
      (int)
      VkPhysicalDeviceDriverPropertiesKHR*
      "VkPhysicalDeviceDriverPropertiesKHR* vkphysicaldevicedriverpropertieskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceDriverPropertiesKHR));
      ___return (vkphysicaldevicedriverpropertieskhr);")
   (define-c-lambda
      ref-VkPhysicalDeviceDriverPropertiesKHR
      (VkPhysicalDeviceDriverPropertiesKHR* int)
      VkPhysicalDeviceDriverPropertiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDeviceDriverPropertiesKHR
      (void* VkDriverIdKHR char* char* VkConformanceVersionKHR)
      VkPhysicalDeviceDriverPropertiesKHR*
      "VkPhysicalDeviceDriverPropertiesKHR *physicaldevicedriverpropertieskhr = malloc(sizeof(VkPhysicalDeviceDriverPropertiesKHR));
physicaldevicedriverpropertieskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR;
physicaldevicedriverpropertieskhr->pNext=___arg1;
physicaldevicedriverpropertieskhr->driverID=___arg2;
memcpy(physicaldevicedriverpropertieskhr->driverName,___arg3,sizeof(___arg3));
memcpy(physicaldevicedriverpropertieskhr->driverInfo,___arg4,sizeof(___arg4));
physicaldevicedriverpropertieskhr->conformanceVersion=___arg5;
___return (physicaldevicedriverpropertieskhr);"))
(begin-ffi
   (make-VkRectLayerKHR
      ptr->VkRectLayerKHR
      ref-VkRectLayerKHR
      make-VkRectLayerKHR*
      VkRectLayerKHRlayer
      VkRectLayerKHRextent
      VkRectLayerKHRoffset
      VkRectLayerKHR
      VkRectLayerKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkRectLayerKHR (struct "VkRectLayerKHR"))
   (c-define-type VkRectLayerKHR* (pointer VkRectLayerKHR))
   (define-c-lambda
      VkRectLayerKHRoffset
      (VkRectLayerKHR*)
      VkOffset2D
      "___return (___arg1->offset);")
   (define-c-lambda
      VkRectLayerKHRextent
      (VkRectLayerKHR*)
      VkExtent2D
      "___return (___arg1->extent);")
   (define-c-lambda
      VkRectLayerKHRlayer
      (VkRectLayerKHR*)
      uint32_t
      "___return (___arg1->layer);")
   (define-c-lambda
      make-VkRectLayerKHR*
      (int)
      VkRectLayerKHR*
      "VkRectLayerKHR* vkrectlayerkhr = malloc(___arg1 * sizeof(VkRectLayerKHR));
      ___return (vkrectlayerkhr);")
   (define-c-lambda
      ref-VkRectLayerKHR
      (VkRectLayerKHR* int)
      VkRectLayerKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkRectLayerKHR
      (VkOffset2D VkExtent2D uint32_t)
      VkRectLayerKHR*
      "VkRectLayerKHR *rectlayerkhr = malloc(sizeof(VkRectLayerKHR));
rectlayerkhr->offset=___arg1;
rectlayerkhr->extent=___arg2;
rectlayerkhr->layer=___arg3;
___return (rectlayerkhr);"))
(begin-ffi
   (make-VkPresentRegionKHR
      ptr->VkPresentRegionKHR
      ref-VkPresentRegionKHR
      make-VkPresentRegionKHR*
      VkPresentRegionKHRpRectangles
      VkPresentRegionKHRrectangleCount
      VkPresentRegionKHR
      VkPresentRegionKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPresentRegionKHR (struct "VkPresentRegionKHR"))
   (c-define-type VkPresentRegionKHR* (pointer VkPresentRegionKHR))
   (define-c-lambda
      VkPresentRegionKHRrectangleCount
      (VkPresentRegionKHR*)
      uint32_t
      "___return (___arg1->rectangleCount);")
   (define-c-lambda
      VkPresentRegionKHRpRectangles
      (VkPresentRegionKHR*)
      VkRectLayerKHR*
      "___return (___arg1->pRectangles);")
   (define-c-lambda
      make-VkPresentRegionKHR*
      (int)
      VkPresentRegionKHR*
      "VkPresentRegionKHR* vkpresentregionkhr = malloc(___arg1 * sizeof(VkPresentRegionKHR));
      ___return (vkpresentregionkhr);")
   (define-c-lambda
      ref-VkPresentRegionKHR
      (VkPresentRegionKHR* int)
      VkPresentRegionKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPresentRegionKHR
      (uint32_t VkRectLayerKHR*)
      VkPresentRegionKHR*
      "VkPresentRegionKHR *presentregionkhr = malloc(sizeof(VkPresentRegionKHR));
presentregionkhr->rectangleCount=___arg1;
presentregionkhr->pRectangles=___arg2;
___return (presentregionkhr);"))
(begin-ffi
   (make-VkPresentRegionsKHR
      ptr->VkPresentRegionsKHR
      ref-VkPresentRegionsKHR
      make-VkPresentRegionsKHR*
      VkPresentRegionsKHRpRegions
      VkPresentRegionsKHRswapchainCount
      VkPresentRegionsKHRpNext
      VkPresentRegionsKHRsType
      VkPresentRegionsKHR
      VkPresentRegionsKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPresentRegionsKHR (struct "VkPresentRegionsKHR"))
   (c-define-type VkPresentRegionsKHR* (pointer VkPresentRegionsKHR))
   (define-c-lambda
      VkPresentRegionsKHRsType
      (VkPresentRegionsKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPresentRegionsKHRpNext
      (VkPresentRegionsKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPresentRegionsKHRswapchainCount
      (VkPresentRegionsKHR*)
      uint32_t
      "___return (___arg1->swapchainCount);")
   (define-c-lambda
      VkPresentRegionsKHRpRegions
      (VkPresentRegionsKHR*)
      VkPresentRegionKHR*
      "___return (___arg1->pRegions);")
   (define-c-lambda
      make-VkPresentRegionsKHR*
      (int)
      VkPresentRegionsKHR*
      "VkPresentRegionsKHR* vkpresentregionskhr = malloc(___arg1 * sizeof(VkPresentRegionsKHR));
      ___return (vkpresentregionskhr);")
   (define-c-lambda
      ref-VkPresentRegionsKHR
      (VkPresentRegionsKHR* int)
      VkPresentRegionsKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPresentRegionsKHR
      (void* uint32_t VkPresentRegionKHR*)
      VkPresentRegionsKHR*
      "VkPresentRegionsKHR *presentregionskhr = malloc(sizeof(VkPresentRegionsKHR));
presentregionskhr->sType=VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
presentregionskhr->pNext=___arg1;
presentregionskhr->swapchainCount=___arg2;
presentregionskhr->pRegions=___arg3;
___return (presentregionskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceVariablePointersFeatures
      ptr->VkPhysicalDeviceVariablePointersFeatures
      ref-VkPhysicalDeviceVariablePointersFeatures
      make-VkPhysicalDeviceVariablePointersFeatures*
      VkPhysicalDeviceVariablePointersFeaturesvariablePointers
      VkPhysicalDeviceVariablePointersFeaturesvariablePointersStorageBuffer
      VkPhysicalDeviceVariablePointersFeaturespNext
      VkPhysicalDeviceVariablePointersFeaturessType
      VkPhysicalDeviceVariablePointersFeatures
      VkPhysicalDeviceVariablePointersFeatures*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceVariablePointersFeatures
      (struct "VkPhysicalDeviceVariablePointersFeatures"))
   (c-define-type
      VkPhysicalDeviceVariablePointersFeatures*
      (pointer VkPhysicalDeviceVariablePointersFeatures))
   (define-c-lambda
      VkPhysicalDeviceVariablePointersFeaturessType
      (VkPhysicalDeviceVariablePointersFeatures*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceVariablePointersFeaturespNext
      (VkPhysicalDeviceVariablePointersFeatures*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceVariablePointersFeaturesvariablePointersStorageBuffer
      (VkPhysicalDeviceVariablePointersFeatures*)
      VkBool32
      "___return (___arg1->variablePointersStorageBuffer);")
   (define-c-lambda
      VkPhysicalDeviceVariablePointersFeaturesvariablePointers
      (VkPhysicalDeviceVariablePointersFeatures*)
      VkBool32
      "___return (___arg1->variablePointers);")
   (define-c-lambda
      make-VkPhysicalDeviceVariablePointersFeatures*
      (int)
      VkPhysicalDeviceVariablePointersFeatures*
      "VkPhysicalDeviceVariablePointersFeatures* vkphysicaldevicevariablepointersfeatures = malloc(___arg1 * sizeof(VkPhysicalDeviceVariablePointersFeatures));
      ___return (vkphysicaldevicevariablepointersfeatures);")
   (define-c-lambda
      ref-VkPhysicalDeviceVariablePointersFeatures
      (VkPhysicalDeviceVariablePointersFeatures* int)
      VkPhysicalDeviceVariablePointersFeatures*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceVariablePointersFeatures
      ((pointer VkPhysicalDeviceVariablePointersFeatures))
      VkPhysicalDeviceVariablePointersFeatures
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceVariablePointersFeatures
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceVariablePointersFeatures*
      "VkPhysicalDeviceVariablePointersFeatures *physicaldevicevariablepointersfeatures = malloc(sizeof(VkPhysicalDeviceVariablePointersFeatures));
physicaldevicevariablepointersfeatures->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
physicaldevicevariablepointersfeatures->pNext=___arg1;
physicaldevicevariablepointersfeatures->variablePointersStorageBuffer=___arg2;
physicaldevicevariablepointersfeatures->variablePointers=___arg3;
___return (physicaldevicevariablepointersfeatures);"))
(begin-ffi
   (make-VkPhysicalDeviceVariablePointersFeaturesKHR
      ptr->VkPhysicalDeviceVariablePointersFeaturesKHR
      ref-VkPhysicalDeviceVariablePointersFeaturesKHR
      make-VkPhysicalDeviceVariablePointersFeaturesKHR*
      VkPhysicalDeviceVariablePointersFeaturesKHR
      VkPhysicalDeviceVariablePointersFeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceVariablePointersFeaturesKHR
      (struct "VkPhysicalDeviceVariablePointersFeaturesKHR"))
   (c-define-type
      VkPhysicalDeviceVariablePointersFeaturesKHR*
      (pointer VkPhysicalDeviceVariablePointersFeaturesKHR))
   (define-c-lambda
      make-VkPhysicalDeviceVariablePointersFeaturesKHR*
      (int)
      VkPhysicalDeviceVariablePointersFeaturesKHR*
      "VkPhysicalDeviceVariablePointersFeaturesKHR* vkphysicaldevicevariablepointersfeatureskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceVariablePointersFeaturesKHR));
      ___return (vkphysicaldevicevariablepointersfeatureskhr);")
   (define-c-lambda
      make-VkPhysicalDeviceVariablePointersFeaturesKHR
      ()
      VkPhysicalDeviceVariablePointersFeaturesKHR*
      "VkPhysicalDeviceVariablePointersFeaturesKHR *physicaldevicevariablepointersfeatureskhr = malloc(sizeof(VkPhysicalDeviceVariablePointersFeaturesKHR));
___return (physicaldevicevariablepointersfeatureskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceVariablePointerFeaturesKHR
      ptr->VkPhysicalDeviceVariablePointerFeaturesKHR
      ref-VkPhysicalDeviceVariablePointerFeaturesKHR
      make-VkPhysicalDeviceVariablePointerFeaturesKHR*
      VkPhysicalDeviceVariablePointerFeaturesKHR
      VkPhysicalDeviceVariablePointerFeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceVariablePointerFeaturesKHR
      (struct "VkPhysicalDeviceVariablePointerFeaturesKHR"))
   (c-define-type
      VkPhysicalDeviceVariablePointerFeaturesKHR*
      (pointer VkPhysicalDeviceVariablePointerFeaturesKHR))
   (define-c-lambda
      make-VkPhysicalDeviceVariablePointerFeaturesKHR*
      (int)
      VkPhysicalDeviceVariablePointerFeaturesKHR*
      "VkPhysicalDeviceVariablePointerFeaturesKHR* vkphysicaldevicevariablepointerfeatureskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR));
      ___return (vkphysicaldevicevariablepointerfeatureskhr);")
   (define-c-lambda
      make-VkPhysicalDeviceVariablePointerFeaturesKHR
      ()
      VkPhysicalDeviceVariablePointerFeaturesKHR*
      "VkPhysicalDeviceVariablePointerFeaturesKHR *physicaldevicevariablepointerfeatureskhr = malloc(sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR));
___return (physicaldevicevariablepointerfeatureskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceVariablePointerFeatures
      ptr->VkPhysicalDeviceVariablePointerFeatures
      ref-VkPhysicalDeviceVariablePointerFeatures
      make-VkPhysicalDeviceVariablePointerFeatures*
      VkPhysicalDeviceVariablePointerFeatures
      VkPhysicalDeviceVariablePointerFeatures*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceVariablePointerFeatures
      (struct "VkPhysicalDeviceVariablePointerFeatures"))
   (c-define-type
      VkPhysicalDeviceVariablePointerFeatures*
      (pointer VkPhysicalDeviceVariablePointerFeatures))
   (define-c-lambda
      make-VkPhysicalDeviceVariablePointerFeatures*
      (int)
      VkPhysicalDeviceVariablePointerFeatures*
      "VkPhysicalDeviceVariablePointerFeatures* vkphysicaldevicevariablepointerfeatures = malloc(___arg1 * sizeof(VkPhysicalDeviceVariablePointerFeatures));
      ___return (vkphysicaldevicevariablepointerfeatures);")
   (define-c-lambda
      make-VkPhysicalDeviceVariablePointerFeatures
      ()
      VkPhysicalDeviceVariablePointerFeatures*
      "VkPhysicalDeviceVariablePointerFeatures *physicaldevicevariablepointerfeatures = malloc(sizeof(VkPhysicalDeviceVariablePointerFeatures));
___return (physicaldevicevariablepointerfeatures);"))
(begin-ffi
   (make-VkExternalMemoryProperties
      ptr->VkExternalMemoryProperties
      ref-VkExternalMemoryProperties
      make-VkExternalMemoryProperties*
      VkExternalMemoryPropertiescompatibleHandleTypes
      VkExternalMemoryPropertiesexportFromImportedHandleTypes
      VkExternalMemoryPropertiesexternalMemoryFeatures
      VkExternalMemoryProperties
      VkExternalMemoryProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExternalMemoryProperties (struct "VkExternalMemoryProperties"))
   (c-define-type VkExternalMemoryProperties* (pointer VkExternalMemoryProperties))
   (define-c-lambda
      VkExternalMemoryPropertiesexternalMemoryFeatures
      (VkExternalMemoryProperties*)
      VkExternalMemoryFeatureFlags
      "___return (___arg1->externalMemoryFeatures);")
   (define-c-lambda
      VkExternalMemoryPropertiesexportFromImportedHandleTypes
      (VkExternalMemoryProperties*)
      VkExternalMemoryHandleTypeFlags
      "___return (___arg1->exportFromImportedHandleTypes);")
   (define-c-lambda
      VkExternalMemoryPropertiescompatibleHandleTypes
      (VkExternalMemoryProperties*)
      VkExternalMemoryHandleTypeFlags
      "___return (___arg1->compatibleHandleTypes);")
   (define-c-lambda
      make-VkExternalMemoryProperties*
      (int)
      VkExternalMemoryProperties*
      "VkExternalMemoryProperties* vkexternalmemoryproperties = malloc(___arg1 * sizeof(VkExternalMemoryProperties));
      ___return (vkexternalmemoryproperties);")
   (define-c-lambda
      ref-VkExternalMemoryProperties
      (VkExternalMemoryProperties* int)
      VkExternalMemoryProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExternalMemoryProperties
      ((pointer VkExternalMemoryProperties))
      VkExternalMemoryProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExternalMemoryProperties
      (VkExternalMemoryFeatureFlags
         VkExternalMemoryHandleTypeFlags
         VkExternalMemoryHandleTypeFlags)
      VkExternalMemoryProperties*
      "VkExternalMemoryProperties *externalmemoryproperties = malloc(sizeof(VkExternalMemoryProperties));
externalmemoryproperties->externalMemoryFeatures=___arg1;
externalmemoryproperties->exportFromImportedHandleTypes=___arg2;
externalmemoryproperties->compatibleHandleTypes=___arg3;
___return (externalmemoryproperties);"))
(begin-ffi
   (make-VkExternalMemoryPropertiesKHR
      ptr->VkExternalMemoryPropertiesKHR
      ref-VkExternalMemoryPropertiesKHR
      make-VkExternalMemoryPropertiesKHR*
      VkExternalMemoryPropertiesKHR
      VkExternalMemoryPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExternalMemoryPropertiesKHR (struct "VkExternalMemoryPropertiesKHR"))
   (c-define-type VkExternalMemoryPropertiesKHR* (pointer VkExternalMemoryPropertiesKHR))
   (define-c-lambda
      make-VkExternalMemoryPropertiesKHR*
      (int)
      VkExternalMemoryPropertiesKHR*
      "VkExternalMemoryPropertiesKHR* vkexternalmemorypropertieskhr = malloc(___arg1 * sizeof(VkExternalMemoryPropertiesKHR));
      ___return (vkexternalmemorypropertieskhr);")
   (define-c-lambda
      make-VkExternalMemoryPropertiesKHR
      ()
      VkExternalMemoryPropertiesKHR*
      "VkExternalMemoryPropertiesKHR *externalmemorypropertieskhr = malloc(sizeof(VkExternalMemoryPropertiesKHR));
___return (externalmemorypropertieskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceExternalImageFormatInfo
      ptr->VkPhysicalDeviceExternalImageFormatInfo
      ref-VkPhysicalDeviceExternalImageFormatInfo
      make-VkPhysicalDeviceExternalImageFormatInfo*
      VkPhysicalDeviceExternalImageFormatInfohandleType
      VkPhysicalDeviceExternalImageFormatInfopNext
      VkPhysicalDeviceExternalImageFormatInfosType
      VkPhysicalDeviceExternalImageFormatInfo
      VkPhysicalDeviceExternalImageFormatInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceExternalImageFormatInfo
      (struct "VkPhysicalDeviceExternalImageFormatInfo"))
   (c-define-type
      VkPhysicalDeviceExternalImageFormatInfo*
      (pointer VkPhysicalDeviceExternalImageFormatInfo))
   (define-c-lambda
      VkPhysicalDeviceExternalImageFormatInfosType
      (VkPhysicalDeviceExternalImageFormatInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceExternalImageFormatInfopNext
      (VkPhysicalDeviceExternalImageFormatInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceExternalImageFormatInfohandleType
      (VkPhysicalDeviceExternalImageFormatInfo*)
      VkExternalMemoryHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalImageFormatInfo*
      (int)
      VkPhysicalDeviceExternalImageFormatInfo*
      "VkPhysicalDeviceExternalImageFormatInfo* vkphysicaldeviceexternalimageformatinfo = malloc(___arg1 * sizeof(VkPhysicalDeviceExternalImageFormatInfo));
      ___return (vkphysicaldeviceexternalimageformatinfo);")
   (define-c-lambda
      ref-VkPhysicalDeviceExternalImageFormatInfo
      (VkPhysicalDeviceExternalImageFormatInfo* int)
      VkPhysicalDeviceExternalImageFormatInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceExternalImageFormatInfo
      ((pointer VkPhysicalDeviceExternalImageFormatInfo))
      VkPhysicalDeviceExternalImageFormatInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalImageFormatInfo
      (void* VkExternalMemoryHandleTypeFlagBits)
      VkPhysicalDeviceExternalImageFormatInfo*
      "VkPhysicalDeviceExternalImageFormatInfo *physicaldeviceexternalimageformatinfo = malloc(sizeof(VkPhysicalDeviceExternalImageFormatInfo));
physicaldeviceexternalimageformatinfo->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
physicaldeviceexternalimageformatinfo->pNext=___arg1;
physicaldeviceexternalimageformatinfo->handleType=___arg2;
___return (physicaldeviceexternalimageformatinfo);"))
(begin-ffi
   (make-VkPhysicalDeviceExternalImageFormatInfoKHR
      ptr->VkPhysicalDeviceExternalImageFormatInfoKHR
      ref-VkPhysicalDeviceExternalImageFormatInfoKHR
      make-VkPhysicalDeviceExternalImageFormatInfoKHR*
      VkPhysicalDeviceExternalImageFormatInfoKHR
      VkPhysicalDeviceExternalImageFormatInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceExternalImageFormatInfoKHR
      (struct "VkPhysicalDeviceExternalImageFormatInfoKHR"))
   (c-define-type
      VkPhysicalDeviceExternalImageFormatInfoKHR*
      (pointer VkPhysicalDeviceExternalImageFormatInfoKHR))
   (define-c-lambda
      make-VkPhysicalDeviceExternalImageFormatInfoKHR*
      (int)
      VkPhysicalDeviceExternalImageFormatInfoKHR*
      "VkPhysicalDeviceExternalImageFormatInfoKHR* vkphysicaldeviceexternalimageformatinfokhr = malloc(___arg1 * sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR));
      ___return (vkphysicaldeviceexternalimageformatinfokhr);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalImageFormatInfoKHR
      ()
      VkPhysicalDeviceExternalImageFormatInfoKHR*
      "VkPhysicalDeviceExternalImageFormatInfoKHR *physicaldeviceexternalimageformatinfokhr = malloc(sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR));
___return (physicaldeviceexternalimageformatinfokhr);"))
(begin-ffi
   (make-VkExternalImageFormatProperties
      ptr->VkExternalImageFormatProperties
      ref-VkExternalImageFormatProperties
      make-VkExternalImageFormatProperties*
      VkExternalImageFormatPropertiesexternalMemoryProperties
      VkExternalImageFormatPropertiespNext
      VkExternalImageFormatPropertiessType
      VkExternalImageFormatProperties
      VkExternalImageFormatProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkExternalImageFormatProperties
      (struct "VkExternalImageFormatProperties"))
   (c-define-type
      VkExternalImageFormatProperties*
      (pointer VkExternalImageFormatProperties))
   (define-c-lambda
      VkExternalImageFormatPropertiessType
      (VkExternalImageFormatProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExternalImageFormatPropertiespNext
      (VkExternalImageFormatProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExternalImageFormatPropertiesexternalMemoryProperties
      (VkExternalImageFormatProperties*)
      VkExternalMemoryProperties
      "___return (___arg1->externalMemoryProperties);")
   (define-c-lambda
      make-VkExternalImageFormatProperties*
      (int)
      VkExternalImageFormatProperties*
      "VkExternalImageFormatProperties* vkexternalimageformatproperties = malloc(___arg1 * sizeof(VkExternalImageFormatProperties));
      ___return (vkexternalimageformatproperties);")
   (define-c-lambda
      ref-VkExternalImageFormatProperties
      (VkExternalImageFormatProperties* int)
      VkExternalImageFormatProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExternalImageFormatProperties
      ((pointer VkExternalImageFormatProperties))
      VkExternalImageFormatProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExternalImageFormatProperties
      (void* VkExternalMemoryProperties)
      VkExternalImageFormatProperties*
      "VkExternalImageFormatProperties *externalimageformatproperties = malloc(sizeof(VkExternalImageFormatProperties));
externalimageformatproperties->sType=VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
externalimageformatproperties->pNext=___arg1;
externalimageformatproperties->externalMemoryProperties=___arg2;
___return (externalimageformatproperties);"))
(begin-ffi
   (make-VkExternalImageFormatPropertiesKHR
      ptr->VkExternalImageFormatPropertiesKHR
      ref-VkExternalImageFormatPropertiesKHR
      make-VkExternalImageFormatPropertiesKHR*
      VkExternalImageFormatPropertiesKHR
      VkExternalImageFormatPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkExternalImageFormatPropertiesKHR
      (struct "VkExternalImageFormatPropertiesKHR"))
   (c-define-type
      VkExternalImageFormatPropertiesKHR*
      (pointer VkExternalImageFormatPropertiesKHR))
   (define-c-lambda
      make-VkExternalImageFormatPropertiesKHR*
      (int)
      VkExternalImageFormatPropertiesKHR*
      "VkExternalImageFormatPropertiesKHR* vkexternalimageformatpropertieskhr = malloc(___arg1 * sizeof(VkExternalImageFormatPropertiesKHR));
      ___return (vkexternalimageformatpropertieskhr);")
   (define-c-lambda
      make-VkExternalImageFormatPropertiesKHR
      ()
      VkExternalImageFormatPropertiesKHR*
      "VkExternalImageFormatPropertiesKHR *externalimageformatpropertieskhr = malloc(sizeof(VkExternalImageFormatPropertiesKHR));
___return (externalimageformatpropertieskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceExternalBufferInfo
      ptr->VkPhysicalDeviceExternalBufferInfo
      ref-VkPhysicalDeviceExternalBufferInfo
      make-VkPhysicalDeviceExternalBufferInfo*
      VkPhysicalDeviceExternalBufferInfohandleType
      VkPhysicalDeviceExternalBufferInfousage
      VkPhysicalDeviceExternalBufferInfoflags
      VkPhysicalDeviceExternalBufferInfopNext
      VkPhysicalDeviceExternalBufferInfosType
      VkPhysicalDeviceExternalBufferInfo
      VkPhysicalDeviceExternalBufferInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceExternalBufferInfo
      (struct "VkPhysicalDeviceExternalBufferInfo"))
   (c-define-type
      VkPhysicalDeviceExternalBufferInfo*
      (pointer VkPhysicalDeviceExternalBufferInfo))
   (define-c-lambda
      VkPhysicalDeviceExternalBufferInfosType
      (VkPhysicalDeviceExternalBufferInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceExternalBufferInfopNext
      (VkPhysicalDeviceExternalBufferInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceExternalBufferInfoflags
      (VkPhysicalDeviceExternalBufferInfo*)
      VkBufferCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPhysicalDeviceExternalBufferInfousage
      (VkPhysicalDeviceExternalBufferInfo*)
      VkBufferUsageFlags
      "___return (___arg1->usage);")
   (define-c-lambda
      VkPhysicalDeviceExternalBufferInfohandleType
      (VkPhysicalDeviceExternalBufferInfo*)
      VkExternalMemoryHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalBufferInfo*
      (int)
      VkPhysicalDeviceExternalBufferInfo*
      "VkPhysicalDeviceExternalBufferInfo* vkphysicaldeviceexternalbufferinfo = malloc(___arg1 * sizeof(VkPhysicalDeviceExternalBufferInfo));
      ___return (vkphysicaldeviceexternalbufferinfo);")
   (define-c-lambda
      ref-VkPhysicalDeviceExternalBufferInfo
      (VkPhysicalDeviceExternalBufferInfo* int)
      VkPhysicalDeviceExternalBufferInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceExternalBufferInfo
      ((pointer VkPhysicalDeviceExternalBufferInfo))
      VkPhysicalDeviceExternalBufferInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalBufferInfo
      (void* VkBufferCreateFlags VkBufferUsageFlags VkExternalMemoryHandleTypeFlagBits)
      VkPhysicalDeviceExternalBufferInfo*
      "VkPhysicalDeviceExternalBufferInfo *physicaldeviceexternalbufferinfo = malloc(sizeof(VkPhysicalDeviceExternalBufferInfo));
physicaldeviceexternalbufferinfo->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
physicaldeviceexternalbufferinfo->pNext=___arg1;
physicaldeviceexternalbufferinfo->flags=___arg2;
physicaldeviceexternalbufferinfo->usage=___arg3;
physicaldeviceexternalbufferinfo->handleType=___arg4;
___return (physicaldeviceexternalbufferinfo);"))
(begin-ffi
   (make-VkPhysicalDeviceExternalBufferInfoKHR
      ptr->VkPhysicalDeviceExternalBufferInfoKHR
      ref-VkPhysicalDeviceExternalBufferInfoKHR
      make-VkPhysicalDeviceExternalBufferInfoKHR*
      VkPhysicalDeviceExternalBufferInfoKHR
      VkPhysicalDeviceExternalBufferInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceExternalBufferInfoKHR
      (struct "VkPhysicalDeviceExternalBufferInfoKHR"))
   (c-define-type
      VkPhysicalDeviceExternalBufferInfoKHR*
      (pointer VkPhysicalDeviceExternalBufferInfoKHR))
   (define-c-lambda
      make-VkPhysicalDeviceExternalBufferInfoKHR*
      (int)
      VkPhysicalDeviceExternalBufferInfoKHR*
      "VkPhysicalDeviceExternalBufferInfoKHR* vkphysicaldeviceexternalbufferinfokhr = malloc(___arg1 * sizeof(VkPhysicalDeviceExternalBufferInfoKHR));
      ___return (vkphysicaldeviceexternalbufferinfokhr);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalBufferInfoKHR
      ()
      VkPhysicalDeviceExternalBufferInfoKHR*
      "VkPhysicalDeviceExternalBufferInfoKHR *physicaldeviceexternalbufferinfokhr = malloc(sizeof(VkPhysicalDeviceExternalBufferInfoKHR));
___return (physicaldeviceexternalbufferinfokhr);"))
(begin-ffi
   (make-VkExternalBufferProperties
      ptr->VkExternalBufferProperties
      ref-VkExternalBufferProperties
      make-VkExternalBufferProperties*
      VkExternalBufferPropertiesexternalMemoryProperties
      VkExternalBufferPropertiespNext
      VkExternalBufferPropertiessType
      VkExternalBufferProperties
      VkExternalBufferProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExternalBufferProperties (struct "VkExternalBufferProperties"))
   (c-define-type VkExternalBufferProperties* (pointer VkExternalBufferProperties))
   (define-c-lambda
      VkExternalBufferPropertiessType
      (VkExternalBufferProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExternalBufferPropertiespNext
      (VkExternalBufferProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExternalBufferPropertiesexternalMemoryProperties
      (VkExternalBufferProperties*)
      VkExternalMemoryProperties
      "___return (___arg1->externalMemoryProperties);")
   (define-c-lambda
      make-VkExternalBufferProperties*
      (int)
      VkExternalBufferProperties*
      "VkExternalBufferProperties* vkexternalbufferproperties = malloc(___arg1 * sizeof(VkExternalBufferProperties));
      ___return (vkexternalbufferproperties);")
   (define-c-lambda
      ref-VkExternalBufferProperties
      (VkExternalBufferProperties* int)
      VkExternalBufferProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExternalBufferProperties
      ((pointer VkExternalBufferProperties))
      VkExternalBufferProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExternalBufferProperties
      (void* VkExternalMemoryProperties)
      VkExternalBufferProperties*
      "VkExternalBufferProperties *externalbufferproperties = malloc(sizeof(VkExternalBufferProperties));
externalbufferproperties->sType=VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
externalbufferproperties->pNext=___arg1;
externalbufferproperties->externalMemoryProperties=___arg2;
___return (externalbufferproperties);"))
(begin-ffi
   (make-VkExternalBufferPropertiesKHR
      ptr->VkExternalBufferPropertiesKHR
      ref-VkExternalBufferPropertiesKHR
      make-VkExternalBufferPropertiesKHR*
      VkExternalBufferPropertiesKHR
      VkExternalBufferPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExternalBufferPropertiesKHR (struct "VkExternalBufferPropertiesKHR"))
   (c-define-type VkExternalBufferPropertiesKHR* (pointer VkExternalBufferPropertiesKHR))
   (define-c-lambda
      make-VkExternalBufferPropertiesKHR*
      (int)
      VkExternalBufferPropertiesKHR*
      "VkExternalBufferPropertiesKHR* vkexternalbufferpropertieskhr = malloc(___arg1 * sizeof(VkExternalBufferPropertiesKHR));
      ___return (vkexternalbufferpropertieskhr);")
   (define-c-lambda
      make-VkExternalBufferPropertiesKHR
      ()
      VkExternalBufferPropertiesKHR*
      "VkExternalBufferPropertiesKHR *externalbufferpropertieskhr = malloc(sizeof(VkExternalBufferPropertiesKHR));
___return (externalbufferpropertieskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceIDProperties
      ptr->VkPhysicalDeviceIDProperties
      ref-VkPhysicalDeviceIDProperties
      make-VkPhysicalDeviceIDProperties*
      VkPhysicalDeviceIDPropertiesdeviceLUIDValid
      VkPhysicalDeviceIDPropertiesdeviceNodeMask
      VkPhysicalDeviceIDPropertiesdeviceLUID
      VkPhysicalDeviceIDPropertiesdriverUUID
      VkPhysicalDeviceIDPropertiesdeviceUUID
      VkPhysicalDeviceIDPropertiespNext
      VkPhysicalDeviceIDPropertiessType
      VkPhysicalDeviceIDProperties
      VkPhysicalDeviceIDProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPhysicalDeviceIDProperties (struct "VkPhysicalDeviceIDProperties"))
   (c-define-type VkPhysicalDeviceIDProperties* (pointer VkPhysicalDeviceIDProperties))
   (define-c-lambda
      VkPhysicalDeviceIDPropertiessType
      (VkPhysicalDeviceIDProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceIDPropertiespNext
      (VkPhysicalDeviceIDProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceIDPropertiesdeviceUUID
      (VkPhysicalDeviceIDProperties*)
      uint8_t*
      "___return (___arg1->deviceUUID);")
   (define-c-lambda
      VkPhysicalDeviceIDPropertiesdriverUUID
      (VkPhysicalDeviceIDProperties*)
      uint8_t*
      "___return (___arg1->driverUUID);")
   (define-c-lambda
      VkPhysicalDeviceIDPropertiesdeviceLUID
      (VkPhysicalDeviceIDProperties*)
      uint8_t*
      "___return (___arg1->deviceLUID);")
   (define-c-lambda
      VkPhysicalDeviceIDPropertiesdeviceNodeMask
      (VkPhysicalDeviceIDProperties*)
      uint32_t
      "___return (___arg1->deviceNodeMask);")
   (define-c-lambda
      VkPhysicalDeviceIDPropertiesdeviceLUIDValid
      (VkPhysicalDeviceIDProperties*)
      VkBool32
      "___return (___arg1->deviceLUIDValid);")
   (define-c-lambda
      make-VkPhysicalDeviceIDProperties*
      (int)
      VkPhysicalDeviceIDProperties*
      "VkPhysicalDeviceIDProperties* vkphysicaldeviceidproperties = malloc(___arg1 * sizeof(VkPhysicalDeviceIDProperties));
      ___return (vkphysicaldeviceidproperties);")
   (define-c-lambda
      ref-VkPhysicalDeviceIDProperties
      (VkPhysicalDeviceIDProperties* int)
      VkPhysicalDeviceIDProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceIDProperties
      ((pointer VkPhysicalDeviceIDProperties))
      VkPhysicalDeviceIDProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceIDProperties
      (void* uint8_t* uint8_t* uint8_t* uint32_t VkBool32)
      VkPhysicalDeviceIDProperties*
      "VkPhysicalDeviceIDProperties *physicaldeviceidproperties = malloc(sizeof(VkPhysicalDeviceIDProperties));
physicaldeviceidproperties->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
physicaldeviceidproperties->pNext=___arg1;
memcpy(physicaldeviceidproperties->deviceUUID,___arg2,sizeof(___arg2));
memcpy(physicaldeviceidproperties->driverUUID,___arg3,sizeof(___arg3));
memcpy(physicaldeviceidproperties->deviceLUID,___arg4,sizeof(___arg4));
physicaldeviceidproperties->deviceNodeMask=___arg5;
physicaldeviceidproperties->deviceLUIDValid=___arg6;
___return (physicaldeviceidproperties);"))
(begin-ffi
   (make-VkPhysicalDeviceIDPropertiesKHR
      ptr->VkPhysicalDeviceIDPropertiesKHR
      ref-VkPhysicalDeviceIDPropertiesKHR
      make-VkPhysicalDeviceIDPropertiesKHR*
      VkPhysicalDeviceIDPropertiesKHR
      VkPhysicalDeviceIDPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceIDPropertiesKHR
      (struct "VkPhysicalDeviceIDPropertiesKHR"))
   (c-define-type
      VkPhysicalDeviceIDPropertiesKHR*
      (pointer VkPhysicalDeviceIDPropertiesKHR))
   (define-c-lambda
      make-VkPhysicalDeviceIDPropertiesKHR*
      (int)
      VkPhysicalDeviceIDPropertiesKHR*
      "VkPhysicalDeviceIDPropertiesKHR* vkphysicaldeviceidpropertieskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceIDPropertiesKHR));
      ___return (vkphysicaldeviceidpropertieskhr);")
   (define-c-lambda
      make-VkPhysicalDeviceIDPropertiesKHR
      ()
      VkPhysicalDeviceIDPropertiesKHR*
      "VkPhysicalDeviceIDPropertiesKHR *physicaldeviceidpropertieskhr = malloc(sizeof(VkPhysicalDeviceIDPropertiesKHR));
___return (physicaldeviceidpropertieskhr);"))
(begin-ffi
   (make-VkExternalMemoryImageCreateInfo
      ptr->VkExternalMemoryImageCreateInfo
      ref-VkExternalMemoryImageCreateInfo
      make-VkExternalMemoryImageCreateInfo*
      VkExternalMemoryImageCreateInfohandleTypes
      VkExternalMemoryImageCreateInfopNext
      VkExternalMemoryImageCreateInfosType
      VkExternalMemoryImageCreateInfo
      VkExternalMemoryImageCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkExternalMemoryImageCreateInfo
      (struct "VkExternalMemoryImageCreateInfo"))
   (c-define-type
      VkExternalMemoryImageCreateInfo*
      (pointer VkExternalMemoryImageCreateInfo))
   (define-c-lambda
      VkExternalMemoryImageCreateInfosType
      (VkExternalMemoryImageCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExternalMemoryImageCreateInfopNext
      (VkExternalMemoryImageCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExternalMemoryImageCreateInfohandleTypes
      (VkExternalMemoryImageCreateInfo*)
      VkExternalMemoryHandleTypeFlags
      "___return (___arg1->handleTypes);")
   (define-c-lambda
      make-VkExternalMemoryImageCreateInfo*
      (int)
      VkExternalMemoryImageCreateInfo*
      "VkExternalMemoryImageCreateInfo* vkexternalmemoryimagecreateinfo = malloc(___arg1 * sizeof(VkExternalMemoryImageCreateInfo));
      ___return (vkexternalmemoryimagecreateinfo);")
   (define-c-lambda
      ref-VkExternalMemoryImageCreateInfo
      (VkExternalMemoryImageCreateInfo* int)
      VkExternalMemoryImageCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExternalMemoryImageCreateInfo
      ((pointer VkExternalMemoryImageCreateInfo))
      VkExternalMemoryImageCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExternalMemoryImageCreateInfo
      (void* VkExternalMemoryHandleTypeFlags)
      VkExternalMemoryImageCreateInfo*
      "VkExternalMemoryImageCreateInfo *externalmemoryimagecreateinfo = malloc(sizeof(VkExternalMemoryImageCreateInfo));
externalmemoryimagecreateinfo->sType=VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
externalmemoryimagecreateinfo->pNext=___arg1;
externalmemoryimagecreateinfo->handleTypes=___arg2;
___return (externalmemoryimagecreateinfo);"))
(begin-ffi
   (make-VkExternalMemoryImageCreateInfoKHR
      ptr->VkExternalMemoryImageCreateInfoKHR
      ref-VkExternalMemoryImageCreateInfoKHR
      make-VkExternalMemoryImageCreateInfoKHR*
      VkExternalMemoryImageCreateInfoKHR
      VkExternalMemoryImageCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkExternalMemoryImageCreateInfoKHR
      (struct "VkExternalMemoryImageCreateInfoKHR"))
   (c-define-type
      VkExternalMemoryImageCreateInfoKHR*
      (pointer VkExternalMemoryImageCreateInfoKHR))
   (define-c-lambda
      make-VkExternalMemoryImageCreateInfoKHR*
      (int)
      VkExternalMemoryImageCreateInfoKHR*
      "VkExternalMemoryImageCreateInfoKHR* vkexternalmemoryimagecreateinfokhr = malloc(___arg1 * sizeof(VkExternalMemoryImageCreateInfoKHR));
      ___return (vkexternalmemoryimagecreateinfokhr);")
   (define-c-lambda
      make-VkExternalMemoryImageCreateInfoKHR
      ()
      VkExternalMemoryImageCreateInfoKHR*
      "VkExternalMemoryImageCreateInfoKHR *externalmemoryimagecreateinfokhr = malloc(sizeof(VkExternalMemoryImageCreateInfoKHR));
___return (externalmemoryimagecreateinfokhr);"))
(begin-ffi
   (make-VkExternalMemoryBufferCreateInfo
      ptr->VkExternalMemoryBufferCreateInfo
      ref-VkExternalMemoryBufferCreateInfo
      make-VkExternalMemoryBufferCreateInfo*
      VkExternalMemoryBufferCreateInfohandleTypes
      VkExternalMemoryBufferCreateInfopNext
      VkExternalMemoryBufferCreateInfosType
      VkExternalMemoryBufferCreateInfo
      VkExternalMemoryBufferCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkExternalMemoryBufferCreateInfo
      (struct "VkExternalMemoryBufferCreateInfo"))
   (c-define-type
      VkExternalMemoryBufferCreateInfo*
      (pointer VkExternalMemoryBufferCreateInfo))
   (define-c-lambda
      VkExternalMemoryBufferCreateInfosType
      (VkExternalMemoryBufferCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExternalMemoryBufferCreateInfopNext
      (VkExternalMemoryBufferCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExternalMemoryBufferCreateInfohandleTypes
      (VkExternalMemoryBufferCreateInfo*)
      VkExternalMemoryHandleTypeFlags
      "___return (___arg1->handleTypes);")
   (define-c-lambda
      make-VkExternalMemoryBufferCreateInfo*
      (int)
      VkExternalMemoryBufferCreateInfo*
      "VkExternalMemoryBufferCreateInfo* vkexternalmemorybuffercreateinfo = malloc(___arg1 * sizeof(VkExternalMemoryBufferCreateInfo));
      ___return (vkexternalmemorybuffercreateinfo);")
   (define-c-lambda
      ref-VkExternalMemoryBufferCreateInfo
      (VkExternalMemoryBufferCreateInfo* int)
      VkExternalMemoryBufferCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExternalMemoryBufferCreateInfo
      ((pointer VkExternalMemoryBufferCreateInfo))
      VkExternalMemoryBufferCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExternalMemoryBufferCreateInfo
      (void* VkExternalMemoryHandleTypeFlags)
      VkExternalMemoryBufferCreateInfo*
      "VkExternalMemoryBufferCreateInfo *externalmemorybuffercreateinfo = malloc(sizeof(VkExternalMemoryBufferCreateInfo));
externalmemorybuffercreateinfo->sType=VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
externalmemorybuffercreateinfo->pNext=___arg1;
externalmemorybuffercreateinfo->handleTypes=___arg2;
___return (externalmemorybuffercreateinfo);"))
(begin-ffi
   (make-VkExternalMemoryBufferCreateInfoKHR
      ptr->VkExternalMemoryBufferCreateInfoKHR
      ref-VkExternalMemoryBufferCreateInfoKHR
      make-VkExternalMemoryBufferCreateInfoKHR*
      VkExternalMemoryBufferCreateInfoKHR
      VkExternalMemoryBufferCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkExternalMemoryBufferCreateInfoKHR
      (struct "VkExternalMemoryBufferCreateInfoKHR"))
   (c-define-type
      VkExternalMemoryBufferCreateInfoKHR*
      (pointer VkExternalMemoryBufferCreateInfoKHR))
   (define-c-lambda
      make-VkExternalMemoryBufferCreateInfoKHR*
      (int)
      VkExternalMemoryBufferCreateInfoKHR*
      "VkExternalMemoryBufferCreateInfoKHR* vkexternalmemorybuffercreateinfokhr = malloc(___arg1 * sizeof(VkExternalMemoryBufferCreateInfoKHR));
      ___return (vkexternalmemorybuffercreateinfokhr);")
   (define-c-lambda
      make-VkExternalMemoryBufferCreateInfoKHR
      ()
      VkExternalMemoryBufferCreateInfoKHR*
      "VkExternalMemoryBufferCreateInfoKHR *externalmemorybuffercreateinfokhr = malloc(sizeof(VkExternalMemoryBufferCreateInfoKHR));
___return (externalmemorybuffercreateinfokhr);"))
(begin-ffi
   (make-VkExportMemoryAllocateInfo
      ptr->VkExportMemoryAllocateInfo
      ref-VkExportMemoryAllocateInfo
      make-VkExportMemoryAllocateInfo*
      VkExportMemoryAllocateInfohandleTypes
      VkExportMemoryAllocateInfopNext
      VkExportMemoryAllocateInfosType
      VkExportMemoryAllocateInfo
      VkExportMemoryAllocateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExportMemoryAllocateInfo (struct "VkExportMemoryAllocateInfo"))
   (c-define-type VkExportMemoryAllocateInfo* (pointer VkExportMemoryAllocateInfo))
   (define-c-lambda
      VkExportMemoryAllocateInfosType
      (VkExportMemoryAllocateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExportMemoryAllocateInfopNext
      (VkExportMemoryAllocateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExportMemoryAllocateInfohandleTypes
      (VkExportMemoryAllocateInfo*)
      VkExternalMemoryHandleTypeFlags
      "___return (___arg1->handleTypes);")
   (define-c-lambda
      make-VkExportMemoryAllocateInfo*
      (int)
      VkExportMemoryAllocateInfo*
      "VkExportMemoryAllocateInfo* vkexportmemoryallocateinfo = malloc(___arg1 * sizeof(VkExportMemoryAllocateInfo));
      ___return (vkexportmemoryallocateinfo);")
   (define-c-lambda
      ref-VkExportMemoryAllocateInfo
      (VkExportMemoryAllocateInfo* int)
      VkExportMemoryAllocateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExportMemoryAllocateInfo
      ((pointer VkExportMemoryAllocateInfo))
      VkExportMemoryAllocateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExportMemoryAllocateInfo
      (void* VkExternalMemoryHandleTypeFlags)
      VkExportMemoryAllocateInfo*
      "VkExportMemoryAllocateInfo *exportmemoryallocateinfo = malloc(sizeof(VkExportMemoryAllocateInfo));
exportmemoryallocateinfo->sType=VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
exportmemoryallocateinfo->pNext=___arg1;
exportmemoryallocateinfo->handleTypes=___arg2;
___return (exportmemoryallocateinfo);"))
(begin-ffi
   (make-VkExportMemoryAllocateInfoKHR
      ptr->VkExportMemoryAllocateInfoKHR
      ref-VkExportMemoryAllocateInfoKHR
      make-VkExportMemoryAllocateInfoKHR*
      VkExportMemoryAllocateInfoKHR
      VkExportMemoryAllocateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExportMemoryAllocateInfoKHR (struct "VkExportMemoryAllocateInfoKHR"))
   (c-define-type VkExportMemoryAllocateInfoKHR* (pointer VkExportMemoryAllocateInfoKHR))
   (define-c-lambda
      make-VkExportMemoryAllocateInfoKHR*
      (int)
      VkExportMemoryAllocateInfoKHR*
      "VkExportMemoryAllocateInfoKHR* vkexportmemoryallocateinfokhr = malloc(___arg1 * sizeof(VkExportMemoryAllocateInfoKHR));
      ___return (vkexportmemoryallocateinfokhr);")
   (define-c-lambda
      make-VkExportMemoryAllocateInfoKHR
      ()
      VkExportMemoryAllocateInfoKHR*
      "VkExportMemoryAllocateInfoKHR *exportmemoryallocateinfokhr = malloc(sizeof(VkExportMemoryAllocateInfoKHR));
___return (exportmemoryallocateinfokhr);"))
(begin-ffi
   (make-VkImportMemoryFdInfoKHR
      ptr->VkImportMemoryFdInfoKHR
      ref-VkImportMemoryFdInfoKHR
      make-VkImportMemoryFdInfoKHR*
      VkImportMemoryFdInfoKHRfd
      VkImportMemoryFdInfoKHRhandleType
      VkImportMemoryFdInfoKHRpNext
      VkImportMemoryFdInfoKHRsType
      VkImportMemoryFdInfoKHR
      VkImportMemoryFdInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImportMemoryFdInfoKHR (struct "VkImportMemoryFdInfoKHR"))
   (c-define-type VkImportMemoryFdInfoKHR* (pointer VkImportMemoryFdInfoKHR))
   (define-c-lambda
      VkImportMemoryFdInfoKHRsType
      (VkImportMemoryFdInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImportMemoryFdInfoKHRpNext
      (VkImportMemoryFdInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImportMemoryFdInfoKHRhandleType
      (VkImportMemoryFdInfoKHR*)
      VkExternalMemoryHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      VkImportMemoryFdInfoKHRfd
      (VkImportMemoryFdInfoKHR*)
      int
      "___return (___arg1->fd);")
   (define-c-lambda
      make-VkImportMemoryFdInfoKHR*
      (int)
      VkImportMemoryFdInfoKHR*
      "VkImportMemoryFdInfoKHR* vkimportmemoryfdinfokhr = malloc(___arg1 * sizeof(VkImportMemoryFdInfoKHR));
      ___return (vkimportmemoryfdinfokhr);")
   (define-c-lambda
      ref-VkImportMemoryFdInfoKHR
      (VkImportMemoryFdInfoKHR* int)
      VkImportMemoryFdInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkImportMemoryFdInfoKHR
      (void* VkExternalMemoryHandleTypeFlagBits int)
      VkImportMemoryFdInfoKHR*
      "VkImportMemoryFdInfoKHR *importmemoryfdinfokhr = malloc(sizeof(VkImportMemoryFdInfoKHR));
importmemoryfdinfokhr->sType=VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
importmemoryfdinfokhr->pNext=___arg1;
importmemoryfdinfokhr->handleType=___arg2;
importmemoryfdinfokhr->fd=___arg3;
___return (importmemoryfdinfokhr);"))
(begin-ffi
   (make-VkMemoryFdPropertiesKHR
      ptr->VkMemoryFdPropertiesKHR
      ref-VkMemoryFdPropertiesKHR
      make-VkMemoryFdPropertiesKHR*
      VkMemoryFdPropertiesKHRmemoryTypeBits
      VkMemoryFdPropertiesKHRpNext
      VkMemoryFdPropertiesKHRsType
      VkMemoryFdPropertiesKHR
      VkMemoryFdPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryFdPropertiesKHR (struct "VkMemoryFdPropertiesKHR"))
   (c-define-type VkMemoryFdPropertiesKHR* (pointer VkMemoryFdPropertiesKHR))
   (define-c-lambda
      VkMemoryFdPropertiesKHRsType
      (VkMemoryFdPropertiesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMemoryFdPropertiesKHRpNext
      (VkMemoryFdPropertiesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMemoryFdPropertiesKHRmemoryTypeBits
      (VkMemoryFdPropertiesKHR*)
      uint32_t
      "___return (___arg1->memoryTypeBits);")
   (define-c-lambda
      make-VkMemoryFdPropertiesKHR*
      (int)
      VkMemoryFdPropertiesKHR*
      "VkMemoryFdPropertiesKHR* vkmemoryfdpropertieskhr = malloc(___arg1 * sizeof(VkMemoryFdPropertiesKHR));
      ___return (vkmemoryfdpropertieskhr);")
   (define-c-lambda
      ref-VkMemoryFdPropertiesKHR
      (VkMemoryFdPropertiesKHR* int)
      VkMemoryFdPropertiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkMemoryFdPropertiesKHR
      (void* uint32_t)
      VkMemoryFdPropertiesKHR*
      "VkMemoryFdPropertiesKHR *memoryfdpropertieskhr = malloc(sizeof(VkMemoryFdPropertiesKHR));
memoryfdpropertieskhr->sType=VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR;
memoryfdpropertieskhr->pNext=___arg1;
memoryfdpropertieskhr->memoryTypeBits=___arg2;
___return (memoryfdpropertieskhr);"))
(begin-ffi
   (make-VkMemoryGetFdInfoKHR
      ptr->VkMemoryGetFdInfoKHR
      ref-VkMemoryGetFdInfoKHR
      make-VkMemoryGetFdInfoKHR*
      VkMemoryGetFdInfoKHRhandleType
      VkMemoryGetFdInfoKHRmemory
      VkMemoryGetFdInfoKHRpNext
      VkMemoryGetFdInfoKHRsType
      VkMemoryGetFdInfoKHR
      VkMemoryGetFdInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryGetFdInfoKHR (struct "VkMemoryGetFdInfoKHR"))
   (c-define-type VkMemoryGetFdInfoKHR* (pointer VkMemoryGetFdInfoKHR))
   (define-c-lambda
      VkMemoryGetFdInfoKHRsType
      (VkMemoryGetFdInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMemoryGetFdInfoKHRpNext
      (VkMemoryGetFdInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMemoryGetFdInfoKHRmemory
      (VkMemoryGetFdInfoKHR*)
      VkDeviceMemory
      "___return (___arg1->memory);")
   (define-c-lambda
      VkMemoryGetFdInfoKHRhandleType
      (VkMemoryGetFdInfoKHR*)
      VkExternalMemoryHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      make-VkMemoryGetFdInfoKHR*
      (int)
      VkMemoryGetFdInfoKHR*
      "VkMemoryGetFdInfoKHR* vkmemorygetfdinfokhr = malloc(___arg1 * sizeof(VkMemoryGetFdInfoKHR));
      ___return (vkmemorygetfdinfokhr);")
   (define-c-lambda
      ref-VkMemoryGetFdInfoKHR
      (VkMemoryGetFdInfoKHR* int)
      VkMemoryGetFdInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkMemoryGetFdInfoKHR
      (void* VkDeviceMemory VkExternalMemoryHandleTypeFlagBits)
      VkMemoryGetFdInfoKHR*
      "VkMemoryGetFdInfoKHR *memorygetfdinfokhr = malloc(sizeof(VkMemoryGetFdInfoKHR));
memorygetfdinfokhr->sType=VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
memorygetfdinfokhr->pNext=___arg1;
memorygetfdinfokhr->memory=___arg2;
memorygetfdinfokhr->handleType=___arg3;
___return (memorygetfdinfokhr);"))
(begin-ffi
   (make-VkPhysicalDeviceExternalSemaphoreInfo
      ptr->VkPhysicalDeviceExternalSemaphoreInfo
      ref-VkPhysicalDeviceExternalSemaphoreInfo
      make-VkPhysicalDeviceExternalSemaphoreInfo*
      VkPhysicalDeviceExternalSemaphoreInfohandleType
      VkPhysicalDeviceExternalSemaphoreInfopNext
      VkPhysicalDeviceExternalSemaphoreInfosType
      VkPhysicalDeviceExternalSemaphoreInfo
      VkPhysicalDeviceExternalSemaphoreInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceExternalSemaphoreInfo
      (struct "VkPhysicalDeviceExternalSemaphoreInfo"))
   (c-define-type
      VkPhysicalDeviceExternalSemaphoreInfo*
      (pointer VkPhysicalDeviceExternalSemaphoreInfo))
   (define-c-lambda
      VkPhysicalDeviceExternalSemaphoreInfosType
      (VkPhysicalDeviceExternalSemaphoreInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceExternalSemaphoreInfopNext
      (VkPhysicalDeviceExternalSemaphoreInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceExternalSemaphoreInfohandleType
      (VkPhysicalDeviceExternalSemaphoreInfo*)
      VkExternalSemaphoreHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalSemaphoreInfo*
      (int)
      VkPhysicalDeviceExternalSemaphoreInfo*
      "VkPhysicalDeviceExternalSemaphoreInfo* vkphysicaldeviceexternalsemaphoreinfo = malloc(___arg1 * sizeof(VkPhysicalDeviceExternalSemaphoreInfo));
      ___return (vkphysicaldeviceexternalsemaphoreinfo);")
   (define-c-lambda
      ref-VkPhysicalDeviceExternalSemaphoreInfo
      (VkPhysicalDeviceExternalSemaphoreInfo* int)
      VkPhysicalDeviceExternalSemaphoreInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceExternalSemaphoreInfo
      ((pointer VkPhysicalDeviceExternalSemaphoreInfo))
      VkPhysicalDeviceExternalSemaphoreInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalSemaphoreInfo
      (void* VkExternalSemaphoreHandleTypeFlagBits)
      VkPhysicalDeviceExternalSemaphoreInfo*
      "VkPhysicalDeviceExternalSemaphoreInfo *physicaldeviceexternalsemaphoreinfo = malloc(sizeof(VkPhysicalDeviceExternalSemaphoreInfo));
physicaldeviceexternalsemaphoreinfo->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
physicaldeviceexternalsemaphoreinfo->pNext=___arg1;
physicaldeviceexternalsemaphoreinfo->handleType=___arg2;
___return (physicaldeviceexternalsemaphoreinfo);"))
(begin-ffi
   (make-VkPhysicalDeviceExternalSemaphoreInfoKHR
      ptr->VkPhysicalDeviceExternalSemaphoreInfoKHR
      ref-VkPhysicalDeviceExternalSemaphoreInfoKHR
      make-VkPhysicalDeviceExternalSemaphoreInfoKHR*
      VkPhysicalDeviceExternalSemaphoreInfoKHR
      VkPhysicalDeviceExternalSemaphoreInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceExternalSemaphoreInfoKHR
      (struct "VkPhysicalDeviceExternalSemaphoreInfoKHR"))
   (c-define-type
      VkPhysicalDeviceExternalSemaphoreInfoKHR*
      (pointer VkPhysicalDeviceExternalSemaphoreInfoKHR))
   (define-c-lambda
      make-VkPhysicalDeviceExternalSemaphoreInfoKHR*
      (int)
      VkPhysicalDeviceExternalSemaphoreInfoKHR*
      "VkPhysicalDeviceExternalSemaphoreInfoKHR* vkphysicaldeviceexternalsemaphoreinfokhr = malloc(___arg1 * sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR));
      ___return (vkphysicaldeviceexternalsemaphoreinfokhr);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalSemaphoreInfoKHR
      ()
      VkPhysicalDeviceExternalSemaphoreInfoKHR*
      "VkPhysicalDeviceExternalSemaphoreInfoKHR *physicaldeviceexternalsemaphoreinfokhr = malloc(sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR));
___return (physicaldeviceexternalsemaphoreinfokhr);"))
(begin-ffi
   (make-VkExternalSemaphoreProperties
      ptr->VkExternalSemaphoreProperties
      ref-VkExternalSemaphoreProperties
      make-VkExternalSemaphoreProperties*
      VkExternalSemaphorePropertiesexternalSemaphoreFeatures
      VkExternalSemaphorePropertiescompatibleHandleTypes
      VkExternalSemaphorePropertiesexportFromImportedHandleTypes
      VkExternalSemaphorePropertiespNext
      VkExternalSemaphorePropertiessType
      VkExternalSemaphoreProperties
      VkExternalSemaphoreProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExternalSemaphoreProperties (struct "VkExternalSemaphoreProperties"))
   (c-define-type VkExternalSemaphoreProperties* (pointer VkExternalSemaphoreProperties))
   (define-c-lambda
      VkExternalSemaphorePropertiessType
      (VkExternalSemaphoreProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExternalSemaphorePropertiespNext
      (VkExternalSemaphoreProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExternalSemaphorePropertiesexportFromImportedHandleTypes
      (VkExternalSemaphoreProperties*)
      VkExternalSemaphoreHandleTypeFlags
      "___return (___arg1->exportFromImportedHandleTypes);")
   (define-c-lambda
      VkExternalSemaphorePropertiescompatibleHandleTypes
      (VkExternalSemaphoreProperties*)
      VkExternalSemaphoreHandleTypeFlags
      "___return (___arg1->compatibleHandleTypes);")
   (define-c-lambda
      VkExternalSemaphorePropertiesexternalSemaphoreFeatures
      (VkExternalSemaphoreProperties*)
      VkExternalSemaphoreFeatureFlags
      "___return (___arg1->externalSemaphoreFeatures);")
   (define-c-lambda
      make-VkExternalSemaphoreProperties*
      (int)
      VkExternalSemaphoreProperties*
      "VkExternalSemaphoreProperties* vkexternalsemaphoreproperties = malloc(___arg1 * sizeof(VkExternalSemaphoreProperties));
      ___return (vkexternalsemaphoreproperties);")
   (define-c-lambda
      ref-VkExternalSemaphoreProperties
      (VkExternalSemaphoreProperties* int)
      VkExternalSemaphoreProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExternalSemaphoreProperties
      ((pointer VkExternalSemaphoreProperties))
      VkExternalSemaphoreProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExternalSemaphoreProperties
      (void*
         VkExternalSemaphoreHandleTypeFlags
         VkExternalSemaphoreHandleTypeFlags
         VkExternalSemaphoreFeatureFlags)
      VkExternalSemaphoreProperties*
      "VkExternalSemaphoreProperties *externalsemaphoreproperties = malloc(sizeof(VkExternalSemaphoreProperties));
externalsemaphoreproperties->sType=VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
externalsemaphoreproperties->pNext=___arg1;
externalsemaphoreproperties->exportFromImportedHandleTypes=___arg2;
externalsemaphoreproperties->compatibleHandleTypes=___arg3;
externalsemaphoreproperties->externalSemaphoreFeatures=___arg4;
___return (externalsemaphoreproperties);"))
(begin-ffi
   (make-VkExternalSemaphorePropertiesKHR
      ptr->VkExternalSemaphorePropertiesKHR
      ref-VkExternalSemaphorePropertiesKHR
      make-VkExternalSemaphorePropertiesKHR*
      VkExternalSemaphorePropertiesKHR
      VkExternalSemaphorePropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkExternalSemaphorePropertiesKHR
      (struct "VkExternalSemaphorePropertiesKHR"))
   (c-define-type
      VkExternalSemaphorePropertiesKHR*
      (pointer VkExternalSemaphorePropertiesKHR))
   (define-c-lambda
      make-VkExternalSemaphorePropertiesKHR*
      (int)
      VkExternalSemaphorePropertiesKHR*
      "VkExternalSemaphorePropertiesKHR* vkexternalsemaphorepropertieskhr = malloc(___arg1 * sizeof(VkExternalSemaphorePropertiesKHR));
      ___return (vkexternalsemaphorepropertieskhr);")
   (define-c-lambda
      make-VkExternalSemaphorePropertiesKHR
      ()
      VkExternalSemaphorePropertiesKHR*
      "VkExternalSemaphorePropertiesKHR *externalsemaphorepropertieskhr = malloc(sizeof(VkExternalSemaphorePropertiesKHR));
___return (externalsemaphorepropertieskhr);"))
(begin-ffi
   (make-VkExportSemaphoreCreateInfo
      ptr->VkExportSemaphoreCreateInfo
      ref-VkExportSemaphoreCreateInfo
      make-VkExportSemaphoreCreateInfo*
      VkExportSemaphoreCreateInfohandleTypes
      VkExportSemaphoreCreateInfopNext
      VkExportSemaphoreCreateInfosType
      VkExportSemaphoreCreateInfo
      VkExportSemaphoreCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExportSemaphoreCreateInfo (struct "VkExportSemaphoreCreateInfo"))
   (c-define-type VkExportSemaphoreCreateInfo* (pointer VkExportSemaphoreCreateInfo))
   (define-c-lambda
      VkExportSemaphoreCreateInfosType
      (VkExportSemaphoreCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExportSemaphoreCreateInfopNext
      (VkExportSemaphoreCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExportSemaphoreCreateInfohandleTypes
      (VkExportSemaphoreCreateInfo*)
      VkExternalSemaphoreHandleTypeFlags
      "___return (___arg1->handleTypes);")
   (define-c-lambda
      make-VkExportSemaphoreCreateInfo*
      (int)
      VkExportSemaphoreCreateInfo*
      "VkExportSemaphoreCreateInfo* vkexportsemaphorecreateinfo = malloc(___arg1 * sizeof(VkExportSemaphoreCreateInfo));
      ___return (vkexportsemaphorecreateinfo);")
   (define-c-lambda
      ref-VkExportSemaphoreCreateInfo
      (VkExportSemaphoreCreateInfo* int)
      VkExportSemaphoreCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExportSemaphoreCreateInfo
      ((pointer VkExportSemaphoreCreateInfo))
      VkExportSemaphoreCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExportSemaphoreCreateInfo
      (void* VkExternalSemaphoreHandleTypeFlags)
      VkExportSemaphoreCreateInfo*
      "VkExportSemaphoreCreateInfo *exportsemaphorecreateinfo = malloc(sizeof(VkExportSemaphoreCreateInfo));
exportsemaphorecreateinfo->sType=VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
exportsemaphorecreateinfo->pNext=___arg1;
exportsemaphorecreateinfo->handleTypes=___arg2;
___return (exportsemaphorecreateinfo);"))
(begin-ffi
   (make-VkExportSemaphoreCreateInfoKHR
      ptr->VkExportSemaphoreCreateInfoKHR
      ref-VkExportSemaphoreCreateInfoKHR
      make-VkExportSemaphoreCreateInfoKHR*
      VkExportSemaphoreCreateInfoKHR
      VkExportSemaphoreCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkExportSemaphoreCreateInfoKHR
      (struct "VkExportSemaphoreCreateInfoKHR"))
   (c-define-type
      VkExportSemaphoreCreateInfoKHR*
      (pointer VkExportSemaphoreCreateInfoKHR))
   (define-c-lambda
      make-VkExportSemaphoreCreateInfoKHR*
      (int)
      VkExportSemaphoreCreateInfoKHR*
      "VkExportSemaphoreCreateInfoKHR* vkexportsemaphorecreateinfokhr = malloc(___arg1 * sizeof(VkExportSemaphoreCreateInfoKHR));
      ___return (vkexportsemaphorecreateinfokhr);")
   (define-c-lambda
      make-VkExportSemaphoreCreateInfoKHR
      ()
      VkExportSemaphoreCreateInfoKHR*
      "VkExportSemaphoreCreateInfoKHR *exportsemaphorecreateinfokhr = malloc(sizeof(VkExportSemaphoreCreateInfoKHR));
___return (exportsemaphorecreateinfokhr);"))
(begin-ffi
   (make-VkImportSemaphoreFdInfoKHR
      ptr->VkImportSemaphoreFdInfoKHR
      ref-VkImportSemaphoreFdInfoKHR
      make-VkImportSemaphoreFdInfoKHR*
      VkImportSemaphoreFdInfoKHRfd
      VkImportSemaphoreFdInfoKHRhandleType
      VkImportSemaphoreFdInfoKHRflags
      VkImportSemaphoreFdInfoKHRsemaphore
      VkImportSemaphoreFdInfoKHRpNext
      VkImportSemaphoreFdInfoKHRsType
      VkImportSemaphoreFdInfoKHR
      VkImportSemaphoreFdInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImportSemaphoreFdInfoKHR (struct "VkImportSemaphoreFdInfoKHR"))
   (c-define-type VkImportSemaphoreFdInfoKHR* (pointer VkImportSemaphoreFdInfoKHR))
   (define-c-lambda
      VkImportSemaphoreFdInfoKHRsType
      (VkImportSemaphoreFdInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImportSemaphoreFdInfoKHRpNext
      (VkImportSemaphoreFdInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImportSemaphoreFdInfoKHRsemaphore
      (VkImportSemaphoreFdInfoKHR*)
      VkSemaphore
      "___return (___arg1->semaphore);")
   (define-c-lambda
      VkImportSemaphoreFdInfoKHRflags
      (VkImportSemaphoreFdInfoKHR*)
      VkSemaphoreImportFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkImportSemaphoreFdInfoKHRhandleType
      (VkImportSemaphoreFdInfoKHR*)
      VkExternalSemaphoreHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      VkImportSemaphoreFdInfoKHRfd
      (VkImportSemaphoreFdInfoKHR*)
      int
      "___return (___arg1->fd);")
   (define-c-lambda
      make-VkImportSemaphoreFdInfoKHR*
      (int)
      VkImportSemaphoreFdInfoKHR*
      "VkImportSemaphoreFdInfoKHR* vkimportsemaphorefdinfokhr = malloc(___arg1 * sizeof(VkImportSemaphoreFdInfoKHR));
      ___return (vkimportsemaphorefdinfokhr);")
   (define-c-lambda
      ref-VkImportSemaphoreFdInfoKHR
      (VkImportSemaphoreFdInfoKHR* int)
      VkImportSemaphoreFdInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkImportSemaphoreFdInfoKHR
      (void* VkSemaphore VkSemaphoreImportFlags VkExternalSemaphoreHandleTypeFlagBits int)
      VkImportSemaphoreFdInfoKHR*
      "VkImportSemaphoreFdInfoKHR *importsemaphorefdinfokhr = malloc(sizeof(VkImportSemaphoreFdInfoKHR));
importsemaphorefdinfokhr->sType=VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
importsemaphorefdinfokhr->pNext=___arg1;
importsemaphorefdinfokhr->semaphore=___arg2;
importsemaphorefdinfokhr->flags=___arg3;
importsemaphorefdinfokhr->handleType=___arg4;
importsemaphorefdinfokhr->fd=___arg5;
___return (importsemaphorefdinfokhr);"))
(begin-ffi
   (make-VkSemaphoreGetFdInfoKHR
      ptr->VkSemaphoreGetFdInfoKHR
      ref-VkSemaphoreGetFdInfoKHR
      make-VkSemaphoreGetFdInfoKHR*
      VkSemaphoreGetFdInfoKHRhandleType
      VkSemaphoreGetFdInfoKHRsemaphore
      VkSemaphoreGetFdInfoKHRpNext
      VkSemaphoreGetFdInfoKHRsType
      VkSemaphoreGetFdInfoKHR
      VkSemaphoreGetFdInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSemaphoreGetFdInfoKHR (struct "VkSemaphoreGetFdInfoKHR"))
   (c-define-type VkSemaphoreGetFdInfoKHR* (pointer VkSemaphoreGetFdInfoKHR))
   (define-c-lambda
      VkSemaphoreGetFdInfoKHRsType
      (VkSemaphoreGetFdInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSemaphoreGetFdInfoKHRpNext
      (VkSemaphoreGetFdInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSemaphoreGetFdInfoKHRsemaphore
      (VkSemaphoreGetFdInfoKHR*)
      VkSemaphore
      "___return (___arg1->semaphore);")
   (define-c-lambda
      VkSemaphoreGetFdInfoKHRhandleType
      (VkSemaphoreGetFdInfoKHR*)
      VkExternalSemaphoreHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      make-VkSemaphoreGetFdInfoKHR*
      (int)
      VkSemaphoreGetFdInfoKHR*
      "VkSemaphoreGetFdInfoKHR* vksemaphoregetfdinfokhr = malloc(___arg1 * sizeof(VkSemaphoreGetFdInfoKHR));
      ___return (vksemaphoregetfdinfokhr);")
   (define-c-lambda
      ref-VkSemaphoreGetFdInfoKHR
      (VkSemaphoreGetFdInfoKHR* int)
      VkSemaphoreGetFdInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSemaphoreGetFdInfoKHR
      (void* VkSemaphore VkExternalSemaphoreHandleTypeFlagBits)
      VkSemaphoreGetFdInfoKHR*
      "VkSemaphoreGetFdInfoKHR *semaphoregetfdinfokhr = malloc(sizeof(VkSemaphoreGetFdInfoKHR));
semaphoregetfdinfokhr->sType=VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
semaphoregetfdinfokhr->pNext=___arg1;
semaphoregetfdinfokhr->semaphore=___arg2;
semaphoregetfdinfokhr->handleType=___arg3;
___return (semaphoregetfdinfokhr);"))
(begin-ffi
   (make-VkPhysicalDeviceExternalFenceInfo
      ptr->VkPhysicalDeviceExternalFenceInfo
      ref-VkPhysicalDeviceExternalFenceInfo
      make-VkPhysicalDeviceExternalFenceInfo*
      VkPhysicalDeviceExternalFenceInfohandleType
      VkPhysicalDeviceExternalFenceInfopNext
      VkPhysicalDeviceExternalFenceInfosType
      VkPhysicalDeviceExternalFenceInfo
      VkPhysicalDeviceExternalFenceInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceExternalFenceInfo
      (struct "VkPhysicalDeviceExternalFenceInfo"))
   (c-define-type
      VkPhysicalDeviceExternalFenceInfo*
      (pointer VkPhysicalDeviceExternalFenceInfo))
   (define-c-lambda
      VkPhysicalDeviceExternalFenceInfosType
      (VkPhysicalDeviceExternalFenceInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceExternalFenceInfopNext
      (VkPhysicalDeviceExternalFenceInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceExternalFenceInfohandleType
      (VkPhysicalDeviceExternalFenceInfo*)
      VkExternalFenceHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalFenceInfo*
      (int)
      VkPhysicalDeviceExternalFenceInfo*
      "VkPhysicalDeviceExternalFenceInfo* vkphysicaldeviceexternalfenceinfo = malloc(___arg1 * sizeof(VkPhysicalDeviceExternalFenceInfo));
      ___return (vkphysicaldeviceexternalfenceinfo);")
   (define-c-lambda
      ref-VkPhysicalDeviceExternalFenceInfo
      (VkPhysicalDeviceExternalFenceInfo* int)
      VkPhysicalDeviceExternalFenceInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceExternalFenceInfo
      ((pointer VkPhysicalDeviceExternalFenceInfo))
      VkPhysicalDeviceExternalFenceInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalFenceInfo
      (void* VkExternalFenceHandleTypeFlagBits)
      VkPhysicalDeviceExternalFenceInfo*
      "VkPhysicalDeviceExternalFenceInfo *physicaldeviceexternalfenceinfo = malloc(sizeof(VkPhysicalDeviceExternalFenceInfo));
physicaldeviceexternalfenceinfo->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
physicaldeviceexternalfenceinfo->pNext=___arg1;
physicaldeviceexternalfenceinfo->handleType=___arg2;
___return (physicaldeviceexternalfenceinfo);"))
(begin-ffi
   (make-VkPhysicalDeviceExternalFenceInfoKHR
      ptr->VkPhysicalDeviceExternalFenceInfoKHR
      ref-VkPhysicalDeviceExternalFenceInfoKHR
      make-VkPhysicalDeviceExternalFenceInfoKHR*
      VkPhysicalDeviceExternalFenceInfoKHR
      VkPhysicalDeviceExternalFenceInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceExternalFenceInfoKHR
      (struct "VkPhysicalDeviceExternalFenceInfoKHR"))
   (c-define-type
      VkPhysicalDeviceExternalFenceInfoKHR*
      (pointer VkPhysicalDeviceExternalFenceInfoKHR))
   (define-c-lambda
      make-VkPhysicalDeviceExternalFenceInfoKHR*
      (int)
      VkPhysicalDeviceExternalFenceInfoKHR*
      "VkPhysicalDeviceExternalFenceInfoKHR* vkphysicaldeviceexternalfenceinfokhr = malloc(___arg1 * sizeof(VkPhysicalDeviceExternalFenceInfoKHR));
      ___return (vkphysicaldeviceexternalfenceinfokhr);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalFenceInfoKHR
      ()
      VkPhysicalDeviceExternalFenceInfoKHR*
      "VkPhysicalDeviceExternalFenceInfoKHR *physicaldeviceexternalfenceinfokhr = malloc(sizeof(VkPhysicalDeviceExternalFenceInfoKHR));
___return (physicaldeviceexternalfenceinfokhr);"))
(begin-ffi
   (make-VkExternalFenceProperties
      ptr->VkExternalFenceProperties
      ref-VkExternalFenceProperties
      make-VkExternalFenceProperties*
      VkExternalFencePropertiesexternalFenceFeatures
      VkExternalFencePropertiescompatibleHandleTypes
      VkExternalFencePropertiesexportFromImportedHandleTypes
      VkExternalFencePropertiespNext
      VkExternalFencePropertiessType
      VkExternalFenceProperties
      VkExternalFenceProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExternalFenceProperties (struct "VkExternalFenceProperties"))
   (c-define-type VkExternalFenceProperties* (pointer VkExternalFenceProperties))
   (define-c-lambda
      VkExternalFencePropertiessType
      (VkExternalFenceProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExternalFencePropertiespNext
      (VkExternalFenceProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExternalFencePropertiesexportFromImportedHandleTypes
      (VkExternalFenceProperties*)
      VkExternalFenceHandleTypeFlags
      "___return (___arg1->exportFromImportedHandleTypes);")
   (define-c-lambda
      VkExternalFencePropertiescompatibleHandleTypes
      (VkExternalFenceProperties*)
      VkExternalFenceHandleTypeFlags
      "___return (___arg1->compatibleHandleTypes);")
   (define-c-lambda
      VkExternalFencePropertiesexternalFenceFeatures
      (VkExternalFenceProperties*)
      VkExternalFenceFeatureFlags
      "___return (___arg1->externalFenceFeatures);")
   (define-c-lambda
      make-VkExternalFenceProperties*
      (int)
      VkExternalFenceProperties*
      "VkExternalFenceProperties* vkexternalfenceproperties = malloc(___arg1 * sizeof(VkExternalFenceProperties));
      ___return (vkexternalfenceproperties);")
   (define-c-lambda
      ref-VkExternalFenceProperties
      (VkExternalFenceProperties* int)
      VkExternalFenceProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExternalFenceProperties
      ((pointer VkExternalFenceProperties))
      VkExternalFenceProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExternalFenceProperties
      (void*
         VkExternalFenceHandleTypeFlags
         VkExternalFenceHandleTypeFlags
         VkExternalFenceFeatureFlags)
      VkExternalFenceProperties*
      "VkExternalFenceProperties *externalfenceproperties = malloc(sizeof(VkExternalFenceProperties));
externalfenceproperties->sType=VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
externalfenceproperties->pNext=___arg1;
externalfenceproperties->exportFromImportedHandleTypes=___arg2;
externalfenceproperties->compatibleHandleTypes=___arg3;
externalfenceproperties->externalFenceFeatures=___arg4;
___return (externalfenceproperties);"))
(begin-ffi
   (make-VkExternalFencePropertiesKHR
      ptr->VkExternalFencePropertiesKHR
      ref-VkExternalFencePropertiesKHR
      make-VkExternalFencePropertiesKHR*
      VkExternalFencePropertiesKHR
      VkExternalFencePropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExternalFencePropertiesKHR (struct "VkExternalFencePropertiesKHR"))
   (c-define-type VkExternalFencePropertiesKHR* (pointer VkExternalFencePropertiesKHR))
   (define-c-lambda
      make-VkExternalFencePropertiesKHR*
      (int)
      VkExternalFencePropertiesKHR*
      "VkExternalFencePropertiesKHR* vkexternalfencepropertieskhr = malloc(___arg1 * sizeof(VkExternalFencePropertiesKHR));
      ___return (vkexternalfencepropertieskhr);")
   (define-c-lambda
      make-VkExternalFencePropertiesKHR
      ()
      VkExternalFencePropertiesKHR*
      "VkExternalFencePropertiesKHR *externalfencepropertieskhr = malloc(sizeof(VkExternalFencePropertiesKHR));
___return (externalfencepropertieskhr);"))
(begin-ffi
   (make-VkExportFenceCreateInfo
      ptr->VkExportFenceCreateInfo
      ref-VkExportFenceCreateInfo
      make-VkExportFenceCreateInfo*
      VkExportFenceCreateInfohandleTypes
      VkExportFenceCreateInfopNext
      VkExportFenceCreateInfosType
      VkExportFenceCreateInfo
      VkExportFenceCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExportFenceCreateInfo (struct "VkExportFenceCreateInfo"))
   (c-define-type VkExportFenceCreateInfo* (pointer VkExportFenceCreateInfo))
   (define-c-lambda
      VkExportFenceCreateInfosType
      (VkExportFenceCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkExportFenceCreateInfopNext
      (VkExportFenceCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkExportFenceCreateInfohandleTypes
      (VkExportFenceCreateInfo*)
      VkExternalFenceHandleTypeFlags
      "___return (___arg1->handleTypes);")
   (define-c-lambda
      make-VkExportFenceCreateInfo*
      (int)
      VkExportFenceCreateInfo*
      "VkExportFenceCreateInfo* vkexportfencecreateinfo = malloc(___arg1 * sizeof(VkExportFenceCreateInfo));
      ___return (vkexportfencecreateinfo);")
   (define-c-lambda
      ref-VkExportFenceCreateInfo
      (VkExportFenceCreateInfo* int)
      VkExportFenceCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkExportFenceCreateInfo
      ((pointer VkExportFenceCreateInfo))
      VkExportFenceCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkExportFenceCreateInfo
      (void* VkExternalFenceHandleTypeFlags)
      VkExportFenceCreateInfo*
      "VkExportFenceCreateInfo *exportfencecreateinfo = malloc(sizeof(VkExportFenceCreateInfo));
exportfencecreateinfo->sType=VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
exportfencecreateinfo->pNext=___arg1;
exportfencecreateinfo->handleTypes=___arg2;
___return (exportfencecreateinfo);"))
(begin-ffi
   (make-VkExportFenceCreateInfoKHR
      ptr->VkExportFenceCreateInfoKHR
      ref-VkExportFenceCreateInfoKHR
      make-VkExportFenceCreateInfoKHR*
      VkExportFenceCreateInfoKHR
      VkExportFenceCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkExportFenceCreateInfoKHR (struct "VkExportFenceCreateInfoKHR"))
   (c-define-type VkExportFenceCreateInfoKHR* (pointer VkExportFenceCreateInfoKHR))
   (define-c-lambda
      make-VkExportFenceCreateInfoKHR*
      (int)
      VkExportFenceCreateInfoKHR*
      "VkExportFenceCreateInfoKHR* vkexportfencecreateinfokhr = malloc(___arg1 * sizeof(VkExportFenceCreateInfoKHR));
      ___return (vkexportfencecreateinfokhr);")
   (define-c-lambda
      make-VkExportFenceCreateInfoKHR
      ()
      VkExportFenceCreateInfoKHR*
      "VkExportFenceCreateInfoKHR *exportfencecreateinfokhr = malloc(sizeof(VkExportFenceCreateInfoKHR));
___return (exportfencecreateinfokhr);"))
(begin-ffi
   (make-VkImportFenceFdInfoKHR
      ptr->VkImportFenceFdInfoKHR
      ref-VkImportFenceFdInfoKHR
      make-VkImportFenceFdInfoKHR*
      VkImportFenceFdInfoKHRfd
      VkImportFenceFdInfoKHRhandleType
      VkImportFenceFdInfoKHRflags
      VkImportFenceFdInfoKHRfence
      VkImportFenceFdInfoKHRpNext
      VkImportFenceFdInfoKHRsType
      VkImportFenceFdInfoKHR
      VkImportFenceFdInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImportFenceFdInfoKHR (struct "VkImportFenceFdInfoKHR"))
   (c-define-type VkImportFenceFdInfoKHR* (pointer VkImportFenceFdInfoKHR))
   (define-c-lambda
      VkImportFenceFdInfoKHRsType
      (VkImportFenceFdInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImportFenceFdInfoKHRpNext
      (VkImportFenceFdInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImportFenceFdInfoKHRfence
      (VkImportFenceFdInfoKHR*)
      VkFence
      "___return (___arg1->fence);")
   (define-c-lambda
      VkImportFenceFdInfoKHRflags
      (VkImportFenceFdInfoKHR*)
      VkFenceImportFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkImportFenceFdInfoKHRhandleType
      (VkImportFenceFdInfoKHR*)
      VkExternalFenceHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      VkImportFenceFdInfoKHRfd
      (VkImportFenceFdInfoKHR*)
      int
      "___return (___arg1->fd);")
   (define-c-lambda
      make-VkImportFenceFdInfoKHR*
      (int)
      VkImportFenceFdInfoKHR*
      "VkImportFenceFdInfoKHR* vkimportfencefdinfokhr = malloc(___arg1 * sizeof(VkImportFenceFdInfoKHR));
      ___return (vkimportfencefdinfokhr);")
   (define-c-lambda
      ref-VkImportFenceFdInfoKHR
      (VkImportFenceFdInfoKHR* int)
      VkImportFenceFdInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkImportFenceFdInfoKHR
      (void* VkFence VkFenceImportFlags VkExternalFenceHandleTypeFlagBits int)
      VkImportFenceFdInfoKHR*
      "VkImportFenceFdInfoKHR *importfencefdinfokhr = malloc(sizeof(VkImportFenceFdInfoKHR));
importfencefdinfokhr->sType=VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
importfencefdinfokhr->pNext=___arg1;
importfencefdinfokhr->fence=___arg2;
importfencefdinfokhr->flags=___arg3;
importfencefdinfokhr->handleType=___arg4;
importfencefdinfokhr->fd=___arg5;
___return (importfencefdinfokhr);"))
(begin-ffi
   (make-VkFenceGetFdInfoKHR
      ptr->VkFenceGetFdInfoKHR
      ref-VkFenceGetFdInfoKHR
      make-VkFenceGetFdInfoKHR*
      VkFenceGetFdInfoKHRhandleType
      VkFenceGetFdInfoKHRfence
      VkFenceGetFdInfoKHRpNext
      VkFenceGetFdInfoKHRsType
      VkFenceGetFdInfoKHR
      VkFenceGetFdInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkFenceGetFdInfoKHR (struct "VkFenceGetFdInfoKHR"))
   (c-define-type VkFenceGetFdInfoKHR* (pointer VkFenceGetFdInfoKHR))
   (define-c-lambda
      VkFenceGetFdInfoKHRsType
      (VkFenceGetFdInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkFenceGetFdInfoKHRpNext
      (VkFenceGetFdInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkFenceGetFdInfoKHRfence
      (VkFenceGetFdInfoKHR*)
      VkFence
      "___return (___arg1->fence);")
   (define-c-lambda
      VkFenceGetFdInfoKHRhandleType
      (VkFenceGetFdInfoKHR*)
      VkExternalFenceHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      make-VkFenceGetFdInfoKHR*
      (int)
      VkFenceGetFdInfoKHR*
      "VkFenceGetFdInfoKHR* vkfencegetfdinfokhr = malloc(___arg1 * sizeof(VkFenceGetFdInfoKHR));
      ___return (vkfencegetfdinfokhr);")
   (define-c-lambda
      ref-VkFenceGetFdInfoKHR
      (VkFenceGetFdInfoKHR* int)
      VkFenceGetFdInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkFenceGetFdInfoKHR
      (void* VkFence VkExternalFenceHandleTypeFlagBits)
      VkFenceGetFdInfoKHR*
      "VkFenceGetFdInfoKHR *fencegetfdinfokhr = malloc(sizeof(VkFenceGetFdInfoKHR));
fencegetfdinfokhr->sType=VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
fencegetfdinfokhr->pNext=___arg1;
fencegetfdinfokhr->fence=___arg2;
fencegetfdinfokhr->handleType=___arg3;
___return (fencegetfdinfokhr);"))
(begin-ffi
   (make-VkPhysicalDeviceMultiviewFeatures
      ptr->VkPhysicalDeviceMultiviewFeatures
      ref-VkPhysicalDeviceMultiviewFeatures
      make-VkPhysicalDeviceMultiviewFeatures*
      VkPhysicalDeviceMultiviewFeaturesmultiviewTessellationShader
      VkPhysicalDeviceMultiviewFeaturesmultiviewGeometryShader
      VkPhysicalDeviceMultiviewFeaturesmultiview
      VkPhysicalDeviceMultiviewFeaturespNext
      VkPhysicalDeviceMultiviewFeaturessType
      VkPhysicalDeviceMultiviewFeatures
      VkPhysicalDeviceMultiviewFeatures*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMultiviewFeatures
      (struct "VkPhysicalDeviceMultiviewFeatures"))
   (c-define-type
      VkPhysicalDeviceMultiviewFeatures*
      (pointer VkPhysicalDeviceMultiviewFeatures))
   (define-c-lambda
      VkPhysicalDeviceMultiviewFeaturessType
      (VkPhysicalDeviceMultiviewFeatures*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceMultiviewFeaturespNext
      (VkPhysicalDeviceMultiviewFeatures*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceMultiviewFeaturesmultiview
      (VkPhysicalDeviceMultiviewFeatures*)
      VkBool32
      "___return (___arg1->multiview);")
   (define-c-lambda
      VkPhysicalDeviceMultiviewFeaturesmultiviewGeometryShader
      (VkPhysicalDeviceMultiviewFeatures*)
      VkBool32
      "___return (___arg1->multiviewGeometryShader);")
   (define-c-lambda
      VkPhysicalDeviceMultiviewFeaturesmultiviewTessellationShader
      (VkPhysicalDeviceMultiviewFeatures*)
      VkBool32
      "___return (___arg1->multiviewTessellationShader);")
   (define-c-lambda
      make-VkPhysicalDeviceMultiviewFeatures*
      (int)
      VkPhysicalDeviceMultiviewFeatures*
      "VkPhysicalDeviceMultiviewFeatures* vkphysicaldevicemultiviewfeatures = malloc(___arg1 * sizeof(VkPhysicalDeviceMultiviewFeatures));
      ___return (vkphysicaldevicemultiviewfeatures);")
   (define-c-lambda
      ref-VkPhysicalDeviceMultiviewFeatures
      (VkPhysicalDeviceMultiviewFeatures* int)
      VkPhysicalDeviceMultiviewFeatures*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceMultiviewFeatures
      ((pointer VkPhysicalDeviceMultiviewFeatures))
      VkPhysicalDeviceMultiviewFeatures
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceMultiviewFeatures
      (void* VkBool32 VkBool32 VkBool32)
      VkPhysicalDeviceMultiviewFeatures*
      "VkPhysicalDeviceMultiviewFeatures *physicaldevicemultiviewfeatures = malloc(sizeof(VkPhysicalDeviceMultiviewFeatures));
physicaldevicemultiviewfeatures->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
physicaldevicemultiviewfeatures->pNext=___arg1;
physicaldevicemultiviewfeatures->multiview=___arg2;
physicaldevicemultiviewfeatures->multiviewGeometryShader=___arg3;
physicaldevicemultiviewfeatures->multiviewTessellationShader=___arg4;
___return (physicaldevicemultiviewfeatures);"))
(begin-ffi
   (make-VkPhysicalDeviceMultiviewFeaturesKHR
      ptr->VkPhysicalDeviceMultiviewFeaturesKHR
      ref-VkPhysicalDeviceMultiviewFeaturesKHR
      make-VkPhysicalDeviceMultiviewFeaturesKHR*
      VkPhysicalDeviceMultiviewFeaturesKHR
      VkPhysicalDeviceMultiviewFeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMultiviewFeaturesKHR
      (struct "VkPhysicalDeviceMultiviewFeaturesKHR"))
   (c-define-type
      VkPhysicalDeviceMultiviewFeaturesKHR*
      (pointer VkPhysicalDeviceMultiviewFeaturesKHR))
   (define-c-lambda
      make-VkPhysicalDeviceMultiviewFeaturesKHR*
      (int)
      VkPhysicalDeviceMultiviewFeaturesKHR*
      "VkPhysicalDeviceMultiviewFeaturesKHR* vkphysicaldevicemultiviewfeatureskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceMultiviewFeaturesKHR));
      ___return (vkphysicaldevicemultiviewfeatureskhr);")
   (define-c-lambda
      make-VkPhysicalDeviceMultiviewFeaturesKHR
      ()
      VkPhysicalDeviceMultiviewFeaturesKHR*
      "VkPhysicalDeviceMultiviewFeaturesKHR *physicaldevicemultiviewfeatureskhr = malloc(sizeof(VkPhysicalDeviceMultiviewFeaturesKHR));
___return (physicaldevicemultiviewfeatureskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceMultiviewProperties
      ptr->VkPhysicalDeviceMultiviewProperties
      ref-VkPhysicalDeviceMultiviewProperties
      make-VkPhysicalDeviceMultiviewProperties*
      VkPhysicalDeviceMultiviewPropertiesmaxMultiviewInstanceIndex
      VkPhysicalDeviceMultiviewPropertiesmaxMultiviewViewCount
      VkPhysicalDeviceMultiviewPropertiespNext
      VkPhysicalDeviceMultiviewPropertiessType
      VkPhysicalDeviceMultiviewProperties
      VkPhysicalDeviceMultiviewProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMultiviewProperties
      (struct "VkPhysicalDeviceMultiviewProperties"))
   (c-define-type
      VkPhysicalDeviceMultiviewProperties*
      (pointer VkPhysicalDeviceMultiviewProperties))
   (define-c-lambda
      VkPhysicalDeviceMultiviewPropertiessType
      (VkPhysicalDeviceMultiviewProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceMultiviewPropertiespNext
      (VkPhysicalDeviceMultiviewProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceMultiviewPropertiesmaxMultiviewViewCount
      (VkPhysicalDeviceMultiviewProperties*)
      uint32_t
      "___return (___arg1->maxMultiviewViewCount);")
   (define-c-lambda
      VkPhysicalDeviceMultiviewPropertiesmaxMultiviewInstanceIndex
      (VkPhysicalDeviceMultiviewProperties*)
      uint32_t
      "___return (___arg1->maxMultiviewInstanceIndex);")
   (define-c-lambda
      make-VkPhysicalDeviceMultiviewProperties*
      (int)
      VkPhysicalDeviceMultiviewProperties*
      "VkPhysicalDeviceMultiviewProperties* vkphysicaldevicemultiviewproperties = malloc(___arg1 * sizeof(VkPhysicalDeviceMultiviewProperties));
      ___return (vkphysicaldevicemultiviewproperties);")
   (define-c-lambda
      ref-VkPhysicalDeviceMultiviewProperties
      (VkPhysicalDeviceMultiviewProperties* int)
      VkPhysicalDeviceMultiviewProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceMultiviewProperties
      ((pointer VkPhysicalDeviceMultiviewProperties))
      VkPhysicalDeviceMultiviewProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceMultiviewProperties
      (void* uint32_t uint32_t)
      VkPhysicalDeviceMultiviewProperties*
      "VkPhysicalDeviceMultiviewProperties *physicaldevicemultiviewproperties = malloc(sizeof(VkPhysicalDeviceMultiviewProperties));
physicaldevicemultiviewproperties->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
physicaldevicemultiviewproperties->pNext=___arg1;
physicaldevicemultiviewproperties->maxMultiviewViewCount=___arg2;
physicaldevicemultiviewproperties->maxMultiviewInstanceIndex=___arg3;
___return (physicaldevicemultiviewproperties);"))
(begin-ffi
   (make-VkPhysicalDeviceMultiviewPropertiesKHR
      ptr->VkPhysicalDeviceMultiviewPropertiesKHR
      ref-VkPhysicalDeviceMultiviewPropertiesKHR
      make-VkPhysicalDeviceMultiviewPropertiesKHR*
      VkPhysicalDeviceMultiviewPropertiesKHR
      VkPhysicalDeviceMultiviewPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMultiviewPropertiesKHR
      (struct "VkPhysicalDeviceMultiviewPropertiesKHR"))
   (c-define-type
      VkPhysicalDeviceMultiviewPropertiesKHR*
      (pointer VkPhysicalDeviceMultiviewPropertiesKHR))
   (define-c-lambda
      make-VkPhysicalDeviceMultiviewPropertiesKHR*
      (int)
      VkPhysicalDeviceMultiviewPropertiesKHR*
      "VkPhysicalDeviceMultiviewPropertiesKHR* vkphysicaldevicemultiviewpropertieskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceMultiviewPropertiesKHR));
      ___return (vkphysicaldevicemultiviewpropertieskhr);")
   (define-c-lambda
      make-VkPhysicalDeviceMultiviewPropertiesKHR
      ()
      VkPhysicalDeviceMultiviewPropertiesKHR*
      "VkPhysicalDeviceMultiviewPropertiesKHR *physicaldevicemultiviewpropertieskhr = malloc(sizeof(VkPhysicalDeviceMultiviewPropertiesKHR));
___return (physicaldevicemultiviewpropertieskhr);"))
(begin-ffi
   (make-VkRenderPassMultiviewCreateInfo
      ptr->VkRenderPassMultiviewCreateInfo
      ref-VkRenderPassMultiviewCreateInfo
      make-VkRenderPassMultiviewCreateInfo*
      VkRenderPassMultiviewCreateInfopCorrelationMasks
      VkRenderPassMultiviewCreateInfocorrelationMaskCount
      VkRenderPassMultiviewCreateInfopViewOffsets
      VkRenderPassMultiviewCreateInfodependencyCount
      VkRenderPassMultiviewCreateInfopViewMasks
      VkRenderPassMultiviewCreateInfosubpassCount
      VkRenderPassMultiviewCreateInfopNext
      VkRenderPassMultiviewCreateInfosType
      VkRenderPassMultiviewCreateInfo
      VkRenderPassMultiviewCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkRenderPassMultiviewCreateInfo
      (struct "VkRenderPassMultiviewCreateInfo"))
   (c-define-type
      VkRenderPassMultiviewCreateInfo*
      (pointer VkRenderPassMultiviewCreateInfo))
   (define-c-lambda
      VkRenderPassMultiviewCreateInfosType
      (VkRenderPassMultiviewCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkRenderPassMultiviewCreateInfopNext
      (VkRenderPassMultiviewCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkRenderPassMultiviewCreateInfosubpassCount
      (VkRenderPassMultiviewCreateInfo*)
      uint32_t
      "___return (___arg1->subpassCount);")
   (define-c-lambda
      VkRenderPassMultiviewCreateInfopViewMasks
      (VkRenderPassMultiviewCreateInfo*)
      uint32_t*
      "___return (___arg1->pViewMasks);")
   (define-c-lambda
      VkRenderPassMultiviewCreateInfodependencyCount
      (VkRenderPassMultiviewCreateInfo*)
      uint32_t
      "___return (___arg1->dependencyCount);")
   (define-c-lambda
      VkRenderPassMultiviewCreateInfopViewOffsets
      (VkRenderPassMultiviewCreateInfo*)
      int32_t*
      "___return (___arg1->pViewOffsets);")
   (define-c-lambda
      VkRenderPassMultiviewCreateInfocorrelationMaskCount
      (VkRenderPassMultiviewCreateInfo*)
      uint32_t
      "___return (___arg1->correlationMaskCount);")
   (define-c-lambda
      VkRenderPassMultiviewCreateInfopCorrelationMasks
      (VkRenderPassMultiviewCreateInfo*)
      uint32_t*
      "___return (___arg1->pCorrelationMasks);")
   (define-c-lambda
      make-VkRenderPassMultiviewCreateInfo*
      (int)
      VkRenderPassMultiviewCreateInfo*
      "VkRenderPassMultiviewCreateInfo* vkrenderpassmultiviewcreateinfo = malloc(___arg1 * sizeof(VkRenderPassMultiviewCreateInfo));
      ___return (vkrenderpassmultiviewcreateinfo);")
   (define-c-lambda
      ref-VkRenderPassMultiviewCreateInfo
      (VkRenderPassMultiviewCreateInfo* int)
      VkRenderPassMultiviewCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkRenderPassMultiviewCreateInfo
      ((pointer VkRenderPassMultiviewCreateInfo))
      VkRenderPassMultiviewCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkRenderPassMultiviewCreateInfo
      (void* uint32_t uint32_t* uint32_t int32_t* uint32_t uint32_t*)
      VkRenderPassMultiviewCreateInfo*
      "VkRenderPassMultiviewCreateInfo *renderpassmultiviewcreateinfo = malloc(sizeof(VkRenderPassMultiviewCreateInfo));
renderpassmultiviewcreateinfo->sType=VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
renderpassmultiviewcreateinfo->pNext=___arg1;
renderpassmultiviewcreateinfo->subpassCount=___arg2;
renderpassmultiviewcreateinfo->pViewMasks=___arg3;
renderpassmultiviewcreateinfo->dependencyCount=___arg4;
renderpassmultiviewcreateinfo->pViewOffsets=___arg5;
renderpassmultiviewcreateinfo->correlationMaskCount=___arg6;
renderpassmultiviewcreateinfo->pCorrelationMasks=___arg7;
___return (renderpassmultiviewcreateinfo);"))
(begin-ffi
   (make-VkRenderPassMultiviewCreateInfoKHR
      ptr->VkRenderPassMultiviewCreateInfoKHR
      ref-VkRenderPassMultiviewCreateInfoKHR
      make-VkRenderPassMultiviewCreateInfoKHR*
      VkRenderPassMultiviewCreateInfoKHR
      VkRenderPassMultiviewCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkRenderPassMultiviewCreateInfoKHR
      (struct "VkRenderPassMultiviewCreateInfoKHR"))
   (c-define-type
      VkRenderPassMultiviewCreateInfoKHR*
      (pointer VkRenderPassMultiviewCreateInfoKHR))
   (define-c-lambda
      make-VkRenderPassMultiviewCreateInfoKHR*
      (int)
      VkRenderPassMultiviewCreateInfoKHR*
      "VkRenderPassMultiviewCreateInfoKHR* vkrenderpassmultiviewcreateinfokhr = malloc(___arg1 * sizeof(VkRenderPassMultiviewCreateInfoKHR));
      ___return (vkrenderpassmultiviewcreateinfokhr);")
   (define-c-lambda
      make-VkRenderPassMultiviewCreateInfoKHR
      ()
      VkRenderPassMultiviewCreateInfoKHR*
      "VkRenderPassMultiviewCreateInfoKHR *renderpassmultiviewcreateinfokhr = malloc(sizeof(VkRenderPassMultiviewCreateInfoKHR));
___return (renderpassmultiviewcreateinfokhr);"))
(begin-ffi
   (make-VkSurfaceCapabilities2EXT
      ptr->VkSurfaceCapabilities2EXT
      ref-VkSurfaceCapabilities2EXT
      make-VkSurfaceCapabilities2EXT*
      VkSurfaceCapabilities2EXTsupportedSurfaceCounters
      VkSurfaceCapabilities2EXTsupportedUsageFlags
      VkSurfaceCapabilities2EXTsupportedCompositeAlpha
      VkSurfaceCapabilities2EXTcurrentTransform
      VkSurfaceCapabilities2EXTsupportedTransforms
      VkSurfaceCapabilities2EXTmaxImageArrayLayers
      VkSurfaceCapabilities2EXTmaxImageExtent
      VkSurfaceCapabilities2EXTminImageExtent
      VkSurfaceCapabilities2EXTcurrentExtent
      VkSurfaceCapabilities2EXTmaxImageCount
      VkSurfaceCapabilities2EXTminImageCount
      VkSurfaceCapabilities2EXTpNext
      VkSurfaceCapabilities2EXTsType
      VkSurfaceCapabilities2EXT
      VkSurfaceCapabilities2EXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSurfaceCapabilities2EXT (struct "VkSurfaceCapabilities2EXT"))
   (c-define-type VkSurfaceCapabilities2EXT* (pointer VkSurfaceCapabilities2EXT))
   (define-c-lambda
      VkSurfaceCapabilities2EXTsType
      (VkSurfaceCapabilities2EXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTpNext
      (VkSurfaceCapabilities2EXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTminImageCount
      (VkSurfaceCapabilities2EXT*)
      uint32_t
      "___return (___arg1->minImageCount);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTmaxImageCount
      (VkSurfaceCapabilities2EXT*)
      uint32_t
      "___return (___arg1->maxImageCount);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTcurrentExtent
      (VkSurfaceCapabilities2EXT*)
      VkExtent2D
      "___return (___arg1->currentExtent);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTminImageExtent
      (VkSurfaceCapabilities2EXT*)
      VkExtent2D
      "___return (___arg1->minImageExtent);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTmaxImageExtent
      (VkSurfaceCapabilities2EXT*)
      VkExtent2D
      "___return (___arg1->maxImageExtent);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTmaxImageArrayLayers
      (VkSurfaceCapabilities2EXT*)
      uint32_t
      "___return (___arg1->maxImageArrayLayers);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTsupportedTransforms
      (VkSurfaceCapabilities2EXT*)
      VkSurfaceTransformFlagsKHR
      "___return (___arg1->supportedTransforms);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTcurrentTransform
      (VkSurfaceCapabilities2EXT*)
      VkSurfaceTransformFlagBitsKHR
      "___return (___arg1->currentTransform);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTsupportedCompositeAlpha
      (VkSurfaceCapabilities2EXT*)
      VkCompositeAlphaFlagsKHR
      "___return (___arg1->supportedCompositeAlpha);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTsupportedUsageFlags
      (VkSurfaceCapabilities2EXT*)
      VkImageUsageFlags
      "___return (___arg1->supportedUsageFlags);")
   (define-c-lambda
      VkSurfaceCapabilities2EXTsupportedSurfaceCounters
      (VkSurfaceCapabilities2EXT*)
      VkSurfaceCounterFlagsEXT
      "___return (___arg1->supportedSurfaceCounters);")
   (define-c-lambda
      make-VkSurfaceCapabilities2EXT*
      (int)
      VkSurfaceCapabilities2EXT*
      "VkSurfaceCapabilities2EXT* vksurfacecapabilities2ext = malloc(___arg1 * sizeof(VkSurfaceCapabilities2EXT));
      ___return (vksurfacecapabilities2ext);")
   (define-c-lambda
      ref-VkSurfaceCapabilities2EXT
      (VkSurfaceCapabilities2EXT* int)
      VkSurfaceCapabilities2EXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSurfaceCapabilities2EXT
      ((pointer VkSurfaceCapabilities2EXT))
      VkSurfaceCapabilities2EXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSurfaceCapabilities2EXT
      (void*
         uint32_t
         uint32_t
         VkExtent2D
         VkExtent2D
         VkExtent2D
         uint32_t
         VkSurfaceTransformFlagsKHR
         VkSurfaceTransformFlagBitsKHR
         VkCompositeAlphaFlagsKHR
         VkImageUsageFlags
         VkSurfaceCounterFlagsEXT)
      VkSurfaceCapabilities2EXT*
      "VkSurfaceCapabilities2EXT *surfacecapabilities2ext = malloc(sizeof(VkSurfaceCapabilities2EXT));
surfacecapabilities2ext->sType=VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
surfacecapabilities2ext->pNext=___arg1;
surfacecapabilities2ext->minImageCount=___arg2;
surfacecapabilities2ext->maxImageCount=___arg3;
surfacecapabilities2ext->currentExtent=___arg4;
surfacecapabilities2ext->minImageExtent=___arg5;
surfacecapabilities2ext->maxImageExtent=___arg6;
surfacecapabilities2ext->maxImageArrayLayers=___arg7;
surfacecapabilities2ext->supportedTransforms=___arg8;
surfacecapabilities2ext->currentTransform=___arg9;
surfacecapabilities2ext->supportedCompositeAlpha=___arg10;
surfacecapabilities2ext->supportedUsageFlags=___arg11;
surfacecapabilities2ext->supportedSurfaceCounters=___arg12;
___return (surfacecapabilities2ext);"))
(begin-ffi
   (make-VkDisplayPowerInfoEXT
      ptr->VkDisplayPowerInfoEXT
      ref-VkDisplayPowerInfoEXT
      make-VkDisplayPowerInfoEXT*
      VkDisplayPowerInfoEXTpowerState
      VkDisplayPowerInfoEXTpNext
      VkDisplayPowerInfoEXTsType
      VkDisplayPowerInfoEXT
      VkDisplayPowerInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayPowerInfoEXT (struct "VkDisplayPowerInfoEXT"))
   (c-define-type VkDisplayPowerInfoEXT* (pointer VkDisplayPowerInfoEXT))
   (define-c-lambda
      VkDisplayPowerInfoEXTsType
      (VkDisplayPowerInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplayPowerInfoEXTpNext
      (VkDisplayPowerInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplayPowerInfoEXTpowerState
      (VkDisplayPowerInfoEXT*)
      VkDisplayPowerStateEXT
      "___return (___arg1->powerState);")
   (define-c-lambda
      make-VkDisplayPowerInfoEXT*
      (int)
      VkDisplayPowerInfoEXT*
      "VkDisplayPowerInfoEXT* vkdisplaypowerinfoext = malloc(___arg1 * sizeof(VkDisplayPowerInfoEXT));
      ___return (vkdisplaypowerinfoext);")
   (define-c-lambda
      ref-VkDisplayPowerInfoEXT
      (VkDisplayPowerInfoEXT* int)
      VkDisplayPowerInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDisplayPowerInfoEXT
      ((pointer VkDisplayPowerInfoEXT))
      VkDisplayPowerInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDisplayPowerInfoEXT
      (void* VkDisplayPowerStateEXT)
      VkDisplayPowerInfoEXT*
      "VkDisplayPowerInfoEXT *displaypowerinfoext = malloc(sizeof(VkDisplayPowerInfoEXT));
displaypowerinfoext->sType=VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
displaypowerinfoext->pNext=___arg1;
displaypowerinfoext->powerState=___arg2;
___return (displaypowerinfoext);"))
(begin-ffi
   (make-VkDeviceEventInfoEXT
      ptr->VkDeviceEventInfoEXT
      ref-VkDeviceEventInfoEXT
      make-VkDeviceEventInfoEXT*
      VkDeviceEventInfoEXTdeviceEvent
      VkDeviceEventInfoEXTpNext
      VkDeviceEventInfoEXTsType
      VkDeviceEventInfoEXT
      VkDeviceEventInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDeviceEventInfoEXT (struct "VkDeviceEventInfoEXT"))
   (c-define-type VkDeviceEventInfoEXT* (pointer VkDeviceEventInfoEXT))
   (define-c-lambda
      VkDeviceEventInfoEXTsType
      (VkDeviceEventInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceEventInfoEXTpNext
      (VkDeviceEventInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceEventInfoEXTdeviceEvent
      (VkDeviceEventInfoEXT*)
      VkDeviceEventTypeEXT
      "___return (___arg1->deviceEvent);")
   (define-c-lambda
      make-VkDeviceEventInfoEXT*
      (int)
      VkDeviceEventInfoEXT*
      "VkDeviceEventInfoEXT* vkdeviceeventinfoext = malloc(___arg1 * sizeof(VkDeviceEventInfoEXT));
      ___return (vkdeviceeventinfoext);")
   (define-c-lambda
      ref-VkDeviceEventInfoEXT
      (VkDeviceEventInfoEXT* int)
      VkDeviceEventInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceEventInfoEXT
      ((pointer VkDeviceEventInfoEXT))
      VkDeviceEventInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceEventInfoEXT
      (void* VkDeviceEventTypeEXT)
      VkDeviceEventInfoEXT*
      "VkDeviceEventInfoEXT *deviceeventinfoext = malloc(sizeof(VkDeviceEventInfoEXT));
deviceeventinfoext->sType=VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
deviceeventinfoext->pNext=___arg1;
deviceeventinfoext->deviceEvent=___arg2;
___return (deviceeventinfoext);"))
(begin-ffi
   (make-VkDisplayEventInfoEXT
      ptr->VkDisplayEventInfoEXT
      ref-VkDisplayEventInfoEXT
      make-VkDisplayEventInfoEXT*
      VkDisplayEventInfoEXTdisplayEvent
      VkDisplayEventInfoEXTpNext
      VkDisplayEventInfoEXTsType
      VkDisplayEventInfoEXT
      VkDisplayEventInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayEventInfoEXT (struct "VkDisplayEventInfoEXT"))
   (c-define-type VkDisplayEventInfoEXT* (pointer VkDisplayEventInfoEXT))
   (define-c-lambda
      VkDisplayEventInfoEXTsType
      (VkDisplayEventInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplayEventInfoEXTpNext
      (VkDisplayEventInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplayEventInfoEXTdisplayEvent
      (VkDisplayEventInfoEXT*)
      VkDisplayEventTypeEXT
      "___return (___arg1->displayEvent);")
   (define-c-lambda
      make-VkDisplayEventInfoEXT*
      (int)
      VkDisplayEventInfoEXT*
      "VkDisplayEventInfoEXT* vkdisplayeventinfoext = malloc(___arg1 * sizeof(VkDisplayEventInfoEXT));
      ___return (vkdisplayeventinfoext);")
   (define-c-lambda
      ref-VkDisplayEventInfoEXT
      (VkDisplayEventInfoEXT* int)
      VkDisplayEventInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDisplayEventInfoEXT
      ((pointer VkDisplayEventInfoEXT))
      VkDisplayEventInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDisplayEventInfoEXT
      (void* VkDisplayEventTypeEXT)
      VkDisplayEventInfoEXT*
      "VkDisplayEventInfoEXT *displayeventinfoext = malloc(sizeof(VkDisplayEventInfoEXT));
displayeventinfoext->sType=VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
displayeventinfoext->pNext=___arg1;
displayeventinfoext->displayEvent=___arg2;
___return (displayeventinfoext);"))
(begin-ffi
   (make-VkSwapchainCounterCreateInfoEXT
      ptr->VkSwapchainCounterCreateInfoEXT
      ref-VkSwapchainCounterCreateInfoEXT
      make-VkSwapchainCounterCreateInfoEXT*
      VkSwapchainCounterCreateInfoEXTsurfaceCounters
      VkSwapchainCounterCreateInfoEXTpNext
      VkSwapchainCounterCreateInfoEXTsType
      VkSwapchainCounterCreateInfoEXT
      VkSwapchainCounterCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSwapchainCounterCreateInfoEXT
      (struct "VkSwapchainCounterCreateInfoEXT"))
   (c-define-type
      VkSwapchainCounterCreateInfoEXT*
      (pointer VkSwapchainCounterCreateInfoEXT))
   (define-c-lambda
      VkSwapchainCounterCreateInfoEXTsType
      (VkSwapchainCounterCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSwapchainCounterCreateInfoEXTpNext
      (VkSwapchainCounterCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSwapchainCounterCreateInfoEXTsurfaceCounters
      (VkSwapchainCounterCreateInfoEXT*)
      VkSurfaceCounterFlagsEXT
      "___return (___arg1->surfaceCounters);")
   (define-c-lambda
      make-VkSwapchainCounterCreateInfoEXT*
      (int)
      VkSwapchainCounterCreateInfoEXT*
      "VkSwapchainCounterCreateInfoEXT* vkswapchaincountercreateinfoext = malloc(___arg1 * sizeof(VkSwapchainCounterCreateInfoEXT));
      ___return (vkswapchaincountercreateinfoext);")
   (define-c-lambda
      ref-VkSwapchainCounterCreateInfoEXT
      (VkSwapchainCounterCreateInfoEXT* int)
      VkSwapchainCounterCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSwapchainCounterCreateInfoEXT
      ((pointer VkSwapchainCounterCreateInfoEXT))
      VkSwapchainCounterCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSwapchainCounterCreateInfoEXT
      (void* VkSurfaceCounterFlagsEXT)
      VkSwapchainCounterCreateInfoEXT*
      "VkSwapchainCounterCreateInfoEXT *swapchaincountercreateinfoext = malloc(sizeof(VkSwapchainCounterCreateInfoEXT));
swapchaincountercreateinfoext->sType=VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
swapchaincountercreateinfoext->pNext=___arg1;
swapchaincountercreateinfoext->surfaceCounters=___arg2;
___return (swapchaincountercreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceGroupProperties
      ptr->VkPhysicalDeviceGroupProperties
      ref-VkPhysicalDeviceGroupProperties
      make-VkPhysicalDeviceGroupProperties*
      VkPhysicalDeviceGroupPropertiessubsetAllocation
      VkPhysicalDeviceGroupPropertiesphysicalDevices
      VkPhysicalDeviceGroupPropertiesphysicalDeviceCount
      VkPhysicalDeviceGroupPropertiespNext
      VkPhysicalDeviceGroupPropertiessType
      VkPhysicalDeviceGroupProperties
      VkPhysicalDeviceGroupProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceGroupProperties
      (struct "VkPhysicalDeviceGroupProperties"))
   (c-define-type
      VkPhysicalDeviceGroupProperties*
      (pointer VkPhysicalDeviceGroupProperties))
   (define-c-lambda
      VkPhysicalDeviceGroupPropertiessType
      (VkPhysicalDeviceGroupProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceGroupPropertiespNext
      (VkPhysicalDeviceGroupProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceGroupPropertiesphysicalDeviceCount
      (VkPhysicalDeviceGroupProperties*)
      uint32_t
      "___return (___arg1->physicalDeviceCount);")
   (define-c-lambda
      VkPhysicalDeviceGroupPropertiesphysicalDevices
      (VkPhysicalDeviceGroupProperties*)
      VkPhysicalDevice*
      "___return (___arg1->physicalDevices);")
   (define-c-lambda
      VkPhysicalDeviceGroupPropertiessubsetAllocation
      (VkPhysicalDeviceGroupProperties*)
      VkBool32
      "___return (___arg1->subsetAllocation);")
   (define-c-lambda
      make-VkPhysicalDeviceGroupProperties*
      (int)
      VkPhysicalDeviceGroupProperties*
      "VkPhysicalDeviceGroupProperties* vkphysicaldevicegroupproperties = malloc(___arg1 * sizeof(VkPhysicalDeviceGroupProperties));
      ___return (vkphysicaldevicegroupproperties);")
   (define-c-lambda
      ref-VkPhysicalDeviceGroupProperties
      (VkPhysicalDeviceGroupProperties* int)
      VkPhysicalDeviceGroupProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceGroupProperties
      ((pointer VkPhysicalDeviceGroupProperties))
      VkPhysicalDeviceGroupProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceGroupProperties
      (void* uint32_t VkPhysicalDevice* VkBool32)
      VkPhysicalDeviceGroupProperties*
      "VkPhysicalDeviceGroupProperties *physicaldevicegroupproperties = malloc(sizeof(VkPhysicalDeviceGroupProperties));
physicaldevicegroupproperties->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
physicaldevicegroupproperties->pNext=___arg1;
physicaldevicegroupproperties->physicalDeviceCount=___arg2;
memcpy(physicaldevicegroupproperties->physicalDevices,___arg3,sizeof(___arg3));
physicaldevicegroupproperties->subsetAllocation=___arg4;
___return (physicaldevicegroupproperties);"))
(begin-ffi
   (make-VkPhysicalDeviceGroupPropertiesKHR
      ptr->VkPhysicalDeviceGroupPropertiesKHR
      ref-VkPhysicalDeviceGroupPropertiesKHR
      make-VkPhysicalDeviceGroupPropertiesKHR*
      VkPhysicalDeviceGroupPropertiesKHR
      VkPhysicalDeviceGroupPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceGroupPropertiesKHR
      (struct "VkPhysicalDeviceGroupPropertiesKHR"))
   (c-define-type
      VkPhysicalDeviceGroupPropertiesKHR*
      (pointer VkPhysicalDeviceGroupPropertiesKHR))
   (define-c-lambda
      make-VkPhysicalDeviceGroupPropertiesKHR*
      (int)
      VkPhysicalDeviceGroupPropertiesKHR*
      "VkPhysicalDeviceGroupPropertiesKHR* vkphysicaldevicegrouppropertieskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceGroupPropertiesKHR));
      ___return (vkphysicaldevicegrouppropertieskhr);")
   (define-c-lambda
      make-VkPhysicalDeviceGroupPropertiesKHR
      ()
      VkPhysicalDeviceGroupPropertiesKHR*
      "VkPhysicalDeviceGroupPropertiesKHR *physicaldevicegrouppropertieskhr = malloc(sizeof(VkPhysicalDeviceGroupPropertiesKHR));
___return (physicaldevicegrouppropertieskhr);"))
(begin-ffi
   (make-VkMemoryAllocateFlagsInfo
      ptr->VkMemoryAllocateFlagsInfo
      ref-VkMemoryAllocateFlagsInfo
      make-VkMemoryAllocateFlagsInfo*
      VkMemoryAllocateFlagsInfodeviceMask
      VkMemoryAllocateFlagsInfoflags
      VkMemoryAllocateFlagsInfopNext
      VkMemoryAllocateFlagsInfosType
      VkMemoryAllocateFlagsInfo
      VkMemoryAllocateFlagsInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryAllocateFlagsInfo (struct "VkMemoryAllocateFlagsInfo"))
   (c-define-type VkMemoryAllocateFlagsInfo* (pointer VkMemoryAllocateFlagsInfo))
   (define-c-lambda
      VkMemoryAllocateFlagsInfosType
      (VkMemoryAllocateFlagsInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMemoryAllocateFlagsInfopNext
      (VkMemoryAllocateFlagsInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMemoryAllocateFlagsInfoflags
      (VkMemoryAllocateFlagsInfo*)
      VkMemoryAllocateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkMemoryAllocateFlagsInfodeviceMask
      (VkMemoryAllocateFlagsInfo*)
      uint32_t
      "___return (___arg1->deviceMask);")
   (define-c-lambda
      make-VkMemoryAllocateFlagsInfo*
      (int)
      VkMemoryAllocateFlagsInfo*
      "VkMemoryAllocateFlagsInfo* vkmemoryallocateflagsinfo = malloc(___arg1 * sizeof(VkMemoryAllocateFlagsInfo));
      ___return (vkmemoryallocateflagsinfo);")
   (define-c-lambda
      ref-VkMemoryAllocateFlagsInfo
      (VkMemoryAllocateFlagsInfo* int)
      VkMemoryAllocateFlagsInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryAllocateFlagsInfo
      ((pointer VkMemoryAllocateFlagsInfo))
      VkMemoryAllocateFlagsInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryAllocateFlagsInfo
      (void* VkMemoryAllocateFlags uint32_t)
      VkMemoryAllocateFlagsInfo*
      "VkMemoryAllocateFlagsInfo *memoryallocateflagsinfo = malloc(sizeof(VkMemoryAllocateFlagsInfo));
memoryallocateflagsinfo->sType=VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
memoryallocateflagsinfo->pNext=___arg1;
memoryallocateflagsinfo->flags=___arg2;
memoryallocateflagsinfo->deviceMask=___arg3;
___return (memoryallocateflagsinfo);"))
(begin-ffi
   (make-VkMemoryAllocateFlagsInfoKHR
      ptr->VkMemoryAllocateFlagsInfoKHR
      ref-VkMemoryAllocateFlagsInfoKHR
      make-VkMemoryAllocateFlagsInfoKHR*
      VkMemoryAllocateFlagsInfoKHR
      VkMemoryAllocateFlagsInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryAllocateFlagsInfoKHR (struct "VkMemoryAllocateFlagsInfoKHR"))
   (c-define-type VkMemoryAllocateFlagsInfoKHR* (pointer VkMemoryAllocateFlagsInfoKHR))
   (define-c-lambda
      make-VkMemoryAllocateFlagsInfoKHR*
      (int)
      VkMemoryAllocateFlagsInfoKHR*
      "VkMemoryAllocateFlagsInfoKHR* vkmemoryallocateflagsinfokhr = malloc(___arg1 * sizeof(VkMemoryAllocateFlagsInfoKHR));
      ___return (vkmemoryallocateflagsinfokhr);")
   (define-c-lambda
      make-VkMemoryAllocateFlagsInfoKHR
      ()
      VkMemoryAllocateFlagsInfoKHR*
      "VkMemoryAllocateFlagsInfoKHR *memoryallocateflagsinfokhr = malloc(sizeof(VkMemoryAllocateFlagsInfoKHR));
___return (memoryallocateflagsinfokhr);"))
(begin-ffi
   (make-VkBindBufferMemoryInfo
      ptr->VkBindBufferMemoryInfo
      ref-VkBindBufferMemoryInfo
      make-VkBindBufferMemoryInfo*
      VkBindBufferMemoryInfomemoryOffset
      VkBindBufferMemoryInfomemory
      VkBindBufferMemoryInfobuffer
      VkBindBufferMemoryInfopNext
      VkBindBufferMemoryInfosType
      VkBindBufferMemoryInfo
      VkBindBufferMemoryInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBindBufferMemoryInfo (struct "VkBindBufferMemoryInfo"))
   (c-define-type VkBindBufferMemoryInfo* (pointer VkBindBufferMemoryInfo))
   (define-c-lambda
      VkBindBufferMemoryInfosType
      (VkBindBufferMemoryInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBindBufferMemoryInfopNext
      (VkBindBufferMemoryInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBindBufferMemoryInfobuffer
      (VkBindBufferMemoryInfo*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      VkBindBufferMemoryInfomemory
      (VkBindBufferMemoryInfo*)
      VkDeviceMemory
      "___return (___arg1->memory);")
   (define-c-lambda
      VkBindBufferMemoryInfomemoryOffset
      (VkBindBufferMemoryInfo*)
      VkDeviceSize
      "___return (___arg1->memoryOffset);")
   (define-c-lambda
      make-VkBindBufferMemoryInfo*
      (int)
      VkBindBufferMemoryInfo*
      "VkBindBufferMemoryInfo* vkbindbuffermemoryinfo = malloc(___arg1 * sizeof(VkBindBufferMemoryInfo));
      ___return (vkbindbuffermemoryinfo);")
   (define-c-lambda
      ref-VkBindBufferMemoryInfo
      (VkBindBufferMemoryInfo* int)
      VkBindBufferMemoryInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBindBufferMemoryInfo
      ((pointer VkBindBufferMemoryInfo))
      VkBindBufferMemoryInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBindBufferMemoryInfo
      (void* VkBuffer VkDeviceMemory VkDeviceSize)
      VkBindBufferMemoryInfo*
      "VkBindBufferMemoryInfo *bindbuffermemoryinfo = malloc(sizeof(VkBindBufferMemoryInfo));
bindbuffermemoryinfo->sType=VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
bindbuffermemoryinfo->pNext=___arg1;
bindbuffermemoryinfo->buffer=___arg2;
bindbuffermemoryinfo->memory=___arg3;
bindbuffermemoryinfo->memoryOffset=___arg4;
___return (bindbuffermemoryinfo);"))
(begin-ffi
   (make-VkBindBufferMemoryInfoKHR
      ptr->VkBindBufferMemoryInfoKHR
      ref-VkBindBufferMemoryInfoKHR
      make-VkBindBufferMemoryInfoKHR*
      VkBindBufferMemoryInfoKHR
      VkBindBufferMemoryInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBindBufferMemoryInfoKHR (struct "VkBindBufferMemoryInfoKHR"))
   (c-define-type VkBindBufferMemoryInfoKHR* (pointer VkBindBufferMemoryInfoKHR))
   (define-c-lambda
      make-VkBindBufferMemoryInfoKHR*
      (int)
      VkBindBufferMemoryInfoKHR*
      "VkBindBufferMemoryInfoKHR* vkbindbuffermemoryinfokhr = malloc(___arg1 * sizeof(VkBindBufferMemoryInfoKHR));
      ___return (vkbindbuffermemoryinfokhr);")
   (define-c-lambda
      make-VkBindBufferMemoryInfoKHR
      ()
      VkBindBufferMemoryInfoKHR*
      "VkBindBufferMemoryInfoKHR *bindbuffermemoryinfokhr = malloc(sizeof(VkBindBufferMemoryInfoKHR));
___return (bindbuffermemoryinfokhr);"))
(begin-ffi
   (make-VkBindBufferMemoryDeviceGroupInfo
      ptr->VkBindBufferMemoryDeviceGroupInfo
      ref-VkBindBufferMemoryDeviceGroupInfo
      make-VkBindBufferMemoryDeviceGroupInfo*
      VkBindBufferMemoryDeviceGroupInfopDeviceIndices
      VkBindBufferMemoryDeviceGroupInfodeviceIndexCount
      VkBindBufferMemoryDeviceGroupInfopNext
      VkBindBufferMemoryDeviceGroupInfosType
      VkBindBufferMemoryDeviceGroupInfo
      VkBindBufferMemoryDeviceGroupInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkBindBufferMemoryDeviceGroupInfo
      (struct "VkBindBufferMemoryDeviceGroupInfo"))
   (c-define-type
      VkBindBufferMemoryDeviceGroupInfo*
      (pointer VkBindBufferMemoryDeviceGroupInfo))
   (define-c-lambda
      VkBindBufferMemoryDeviceGroupInfosType
      (VkBindBufferMemoryDeviceGroupInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBindBufferMemoryDeviceGroupInfopNext
      (VkBindBufferMemoryDeviceGroupInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBindBufferMemoryDeviceGroupInfodeviceIndexCount
      (VkBindBufferMemoryDeviceGroupInfo*)
      uint32_t
      "___return (___arg1->deviceIndexCount);")
   (define-c-lambda
      VkBindBufferMemoryDeviceGroupInfopDeviceIndices
      (VkBindBufferMemoryDeviceGroupInfo*)
      uint32_t*
      "___return (___arg1->pDeviceIndices);")
   (define-c-lambda
      make-VkBindBufferMemoryDeviceGroupInfo*
      (int)
      VkBindBufferMemoryDeviceGroupInfo*
      "VkBindBufferMemoryDeviceGroupInfo* vkbindbuffermemorydevicegroupinfo = malloc(___arg1 * sizeof(VkBindBufferMemoryDeviceGroupInfo));
      ___return (vkbindbuffermemorydevicegroupinfo);")
   (define-c-lambda
      ref-VkBindBufferMemoryDeviceGroupInfo
      (VkBindBufferMemoryDeviceGroupInfo* int)
      VkBindBufferMemoryDeviceGroupInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBindBufferMemoryDeviceGroupInfo
      ((pointer VkBindBufferMemoryDeviceGroupInfo))
      VkBindBufferMemoryDeviceGroupInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBindBufferMemoryDeviceGroupInfo
      (void* uint32_t uint32_t*)
      VkBindBufferMemoryDeviceGroupInfo*
      "VkBindBufferMemoryDeviceGroupInfo *bindbuffermemorydevicegroupinfo = malloc(sizeof(VkBindBufferMemoryDeviceGroupInfo));
bindbuffermemorydevicegroupinfo->sType=VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
bindbuffermemorydevicegroupinfo->pNext=___arg1;
bindbuffermemorydevicegroupinfo->deviceIndexCount=___arg2;
bindbuffermemorydevicegroupinfo->pDeviceIndices=___arg3;
___return (bindbuffermemorydevicegroupinfo);"))
(begin-ffi
   (make-VkBindBufferMemoryDeviceGroupInfoKHR
      ptr->VkBindBufferMemoryDeviceGroupInfoKHR
      ref-VkBindBufferMemoryDeviceGroupInfoKHR
      make-VkBindBufferMemoryDeviceGroupInfoKHR*
      VkBindBufferMemoryDeviceGroupInfoKHR
      VkBindBufferMemoryDeviceGroupInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkBindBufferMemoryDeviceGroupInfoKHR
      (struct "VkBindBufferMemoryDeviceGroupInfoKHR"))
   (c-define-type
      VkBindBufferMemoryDeviceGroupInfoKHR*
      (pointer VkBindBufferMemoryDeviceGroupInfoKHR))
   (define-c-lambda
      make-VkBindBufferMemoryDeviceGroupInfoKHR*
      (int)
      VkBindBufferMemoryDeviceGroupInfoKHR*
      "VkBindBufferMemoryDeviceGroupInfoKHR* vkbindbuffermemorydevicegroupinfokhr = malloc(___arg1 * sizeof(VkBindBufferMemoryDeviceGroupInfoKHR));
      ___return (vkbindbuffermemorydevicegroupinfokhr);")
   (define-c-lambda
      make-VkBindBufferMemoryDeviceGroupInfoKHR
      ()
      VkBindBufferMemoryDeviceGroupInfoKHR*
      "VkBindBufferMemoryDeviceGroupInfoKHR *bindbuffermemorydevicegroupinfokhr = malloc(sizeof(VkBindBufferMemoryDeviceGroupInfoKHR));
___return (bindbuffermemorydevicegroupinfokhr);"))
(begin-ffi
   (make-VkBindImageMemoryInfo
      ptr->VkBindImageMemoryInfo
      ref-VkBindImageMemoryInfo
      make-VkBindImageMemoryInfo*
      VkBindImageMemoryInfomemoryOffset
      VkBindImageMemoryInfomemory
      VkBindImageMemoryInfoimage
      VkBindImageMemoryInfopNext
      VkBindImageMemoryInfosType
      VkBindImageMemoryInfo
      VkBindImageMemoryInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBindImageMemoryInfo (struct "VkBindImageMemoryInfo"))
   (c-define-type VkBindImageMemoryInfo* (pointer VkBindImageMemoryInfo))
   (define-c-lambda
      VkBindImageMemoryInfosType
      (VkBindImageMemoryInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBindImageMemoryInfopNext
      (VkBindImageMemoryInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBindImageMemoryInfoimage
      (VkBindImageMemoryInfo*)
      VkImage
      "___return (___arg1->image);")
   (define-c-lambda
      VkBindImageMemoryInfomemory
      (VkBindImageMemoryInfo*)
      VkDeviceMemory
      "___return (___arg1->memory);")
   (define-c-lambda
      VkBindImageMemoryInfomemoryOffset
      (VkBindImageMemoryInfo*)
      VkDeviceSize
      "___return (___arg1->memoryOffset);")
   (define-c-lambda
      make-VkBindImageMemoryInfo*
      (int)
      VkBindImageMemoryInfo*
      "VkBindImageMemoryInfo* vkbindimagememoryinfo = malloc(___arg1 * sizeof(VkBindImageMemoryInfo));
      ___return (vkbindimagememoryinfo);")
   (define-c-lambda
      ref-VkBindImageMemoryInfo
      (VkBindImageMemoryInfo* int)
      VkBindImageMemoryInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBindImageMemoryInfo
      ((pointer VkBindImageMemoryInfo))
      VkBindImageMemoryInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBindImageMemoryInfo
      (void* VkImage VkDeviceMemory VkDeviceSize)
      VkBindImageMemoryInfo*
      "VkBindImageMemoryInfo *bindimagememoryinfo = malloc(sizeof(VkBindImageMemoryInfo));
bindimagememoryinfo->sType=VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
bindimagememoryinfo->pNext=___arg1;
bindimagememoryinfo->image=___arg2;
bindimagememoryinfo->memory=___arg3;
bindimagememoryinfo->memoryOffset=___arg4;
___return (bindimagememoryinfo);"))
(begin-ffi
   (make-VkBindImageMemoryInfoKHR
      ptr->VkBindImageMemoryInfoKHR
      ref-VkBindImageMemoryInfoKHR
      make-VkBindImageMemoryInfoKHR*
      VkBindImageMemoryInfoKHR
      VkBindImageMemoryInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBindImageMemoryInfoKHR (struct "VkBindImageMemoryInfoKHR"))
   (c-define-type VkBindImageMemoryInfoKHR* (pointer VkBindImageMemoryInfoKHR))
   (define-c-lambda
      make-VkBindImageMemoryInfoKHR*
      (int)
      VkBindImageMemoryInfoKHR*
      "VkBindImageMemoryInfoKHR* vkbindimagememoryinfokhr = malloc(___arg1 * sizeof(VkBindImageMemoryInfoKHR));
      ___return (vkbindimagememoryinfokhr);")
   (define-c-lambda
      make-VkBindImageMemoryInfoKHR
      ()
      VkBindImageMemoryInfoKHR*
      "VkBindImageMemoryInfoKHR *bindimagememoryinfokhr = malloc(sizeof(VkBindImageMemoryInfoKHR));
___return (bindimagememoryinfokhr);"))
(begin-ffi
   (make-VkBindImageMemoryDeviceGroupInfo
      ptr->VkBindImageMemoryDeviceGroupInfo
      ref-VkBindImageMemoryDeviceGroupInfo
      make-VkBindImageMemoryDeviceGroupInfo*
      VkBindImageMemoryDeviceGroupInfopSplitInstanceBindRegions
      VkBindImageMemoryDeviceGroupInfosplitInstanceBindRegionCount
      VkBindImageMemoryDeviceGroupInfopDeviceIndices
      VkBindImageMemoryDeviceGroupInfodeviceIndexCount
      VkBindImageMemoryDeviceGroupInfopNext
      VkBindImageMemoryDeviceGroupInfosType
      VkBindImageMemoryDeviceGroupInfo
      VkBindImageMemoryDeviceGroupInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkBindImageMemoryDeviceGroupInfo
      (struct "VkBindImageMemoryDeviceGroupInfo"))
   (c-define-type
      VkBindImageMemoryDeviceGroupInfo*
      (pointer VkBindImageMemoryDeviceGroupInfo))
   (define-c-lambda
      VkBindImageMemoryDeviceGroupInfosType
      (VkBindImageMemoryDeviceGroupInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBindImageMemoryDeviceGroupInfopNext
      (VkBindImageMemoryDeviceGroupInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBindImageMemoryDeviceGroupInfodeviceIndexCount
      (VkBindImageMemoryDeviceGroupInfo*)
      uint32_t
      "___return (___arg1->deviceIndexCount);")
   (define-c-lambda
      VkBindImageMemoryDeviceGroupInfopDeviceIndices
      (VkBindImageMemoryDeviceGroupInfo*)
      uint32_t*
      "___return (___arg1->pDeviceIndices);")
   (define-c-lambda
      VkBindImageMemoryDeviceGroupInfosplitInstanceBindRegionCount
      (VkBindImageMemoryDeviceGroupInfo*)
      uint32_t
      "___return (___arg1->splitInstanceBindRegionCount);")
   (define-c-lambda
      VkBindImageMemoryDeviceGroupInfopSplitInstanceBindRegions
      (VkBindImageMemoryDeviceGroupInfo*)
      VkRect2D*
      "___return (___arg1->pSplitInstanceBindRegions);")
   (define-c-lambda
      make-VkBindImageMemoryDeviceGroupInfo*
      (int)
      VkBindImageMemoryDeviceGroupInfo*
      "VkBindImageMemoryDeviceGroupInfo* vkbindimagememorydevicegroupinfo = malloc(___arg1 * sizeof(VkBindImageMemoryDeviceGroupInfo));
      ___return (vkbindimagememorydevicegroupinfo);")
   (define-c-lambda
      ref-VkBindImageMemoryDeviceGroupInfo
      (VkBindImageMemoryDeviceGroupInfo* int)
      VkBindImageMemoryDeviceGroupInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBindImageMemoryDeviceGroupInfo
      ((pointer VkBindImageMemoryDeviceGroupInfo))
      VkBindImageMemoryDeviceGroupInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBindImageMemoryDeviceGroupInfo
      (void* uint32_t uint32_t* uint32_t VkRect2D*)
      VkBindImageMemoryDeviceGroupInfo*
      "VkBindImageMemoryDeviceGroupInfo *bindimagememorydevicegroupinfo = malloc(sizeof(VkBindImageMemoryDeviceGroupInfo));
bindimagememorydevicegroupinfo->sType=VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
bindimagememorydevicegroupinfo->pNext=___arg1;
bindimagememorydevicegroupinfo->deviceIndexCount=___arg2;
bindimagememorydevicegroupinfo->pDeviceIndices=___arg3;
bindimagememorydevicegroupinfo->splitInstanceBindRegionCount=___arg4;
bindimagememorydevicegroupinfo->pSplitInstanceBindRegions=___arg5;
___return (bindimagememorydevicegroupinfo);"))
(begin-ffi
   (make-VkBindImageMemoryDeviceGroupInfoKHR
      ptr->VkBindImageMemoryDeviceGroupInfoKHR
      ref-VkBindImageMemoryDeviceGroupInfoKHR
      make-VkBindImageMemoryDeviceGroupInfoKHR*
      VkBindImageMemoryDeviceGroupInfoKHR
      VkBindImageMemoryDeviceGroupInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkBindImageMemoryDeviceGroupInfoKHR
      (struct "VkBindImageMemoryDeviceGroupInfoKHR"))
   (c-define-type
      VkBindImageMemoryDeviceGroupInfoKHR*
      (pointer VkBindImageMemoryDeviceGroupInfoKHR))
   (define-c-lambda
      make-VkBindImageMemoryDeviceGroupInfoKHR*
      (int)
      VkBindImageMemoryDeviceGroupInfoKHR*
      "VkBindImageMemoryDeviceGroupInfoKHR* vkbindimagememorydevicegroupinfokhr = malloc(___arg1 * sizeof(VkBindImageMemoryDeviceGroupInfoKHR));
      ___return (vkbindimagememorydevicegroupinfokhr);")
   (define-c-lambda
      make-VkBindImageMemoryDeviceGroupInfoKHR
      ()
      VkBindImageMemoryDeviceGroupInfoKHR*
      "VkBindImageMemoryDeviceGroupInfoKHR *bindimagememorydevicegroupinfokhr = malloc(sizeof(VkBindImageMemoryDeviceGroupInfoKHR));
___return (bindimagememorydevicegroupinfokhr);"))
(begin-ffi
   (make-VkDeviceGroupRenderPassBeginInfo
      ptr->VkDeviceGroupRenderPassBeginInfo
      ref-VkDeviceGroupRenderPassBeginInfo
      make-VkDeviceGroupRenderPassBeginInfo*
      VkDeviceGroupRenderPassBeginInfopDeviceRenderAreas
      VkDeviceGroupRenderPassBeginInfodeviceRenderAreaCount
      VkDeviceGroupRenderPassBeginInfodeviceMask
      VkDeviceGroupRenderPassBeginInfopNext
      VkDeviceGroupRenderPassBeginInfosType
      VkDeviceGroupRenderPassBeginInfo
      VkDeviceGroupRenderPassBeginInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceGroupRenderPassBeginInfo
      (struct "VkDeviceGroupRenderPassBeginInfo"))
   (c-define-type
      VkDeviceGroupRenderPassBeginInfo*
      (pointer VkDeviceGroupRenderPassBeginInfo))
   (define-c-lambda
      VkDeviceGroupRenderPassBeginInfosType
      (VkDeviceGroupRenderPassBeginInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceGroupRenderPassBeginInfopNext
      (VkDeviceGroupRenderPassBeginInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceGroupRenderPassBeginInfodeviceMask
      (VkDeviceGroupRenderPassBeginInfo*)
      uint32_t
      "___return (___arg1->deviceMask);")
   (define-c-lambda
      VkDeviceGroupRenderPassBeginInfodeviceRenderAreaCount
      (VkDeviceGroupRenderPassBeginInfo*)
      uint32_t
      "___return (___arg1->deviceRenderAreaCount);")
   (define-c-lambda
      VkDeviceGroupRenderPassBeginInfopDeviceRenderAreas
      (VkDeviceGroupRenderPassBeginInfo*)
      VkRect2D*
      "___return (___arg1->pDeviceRenderAreas);")
   (define-c-lambda
      make-VkDeviceGroupRenderPassBeginInfo*
      (int)
      VkDeviceGroupRenderPassBeginInfo*
      "VkDeviceGroupRenderPassBeginInfo* vkdevicegrouprenderpassbegininfo = malloc(___arg1 * sizeof(VkDeviceGroupRenderPassBeginInfo));
      ___return (vkdevicegrouprenderpassbegininfo);")
   (define-c-lambda
      ref-VkDeviceGroupRenderPassBeginInfo
      (VkDeviceGroupRenderPassBeginInfo* int)
      VkDeviceGroupRenderPassBeginInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceGroupRenderPassBeginInfo
      ((pointer VkDeviceGroupRenderPassBeginInfo))
      VkDeviceGroupRenderPassBeginInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceGroupRenderPassBeginInfo
      (void* uint32_t uint32_t VkRect2D*)
      VkDeviceGroupRenderPassBeginInfo*
      "VkDeviceGroupRenderPassBeginInfo *devicegrouprenderpassbegininfo = malloc(sizeof(VkDeviceGroupRenderPassBeginInfo));
devicegrouprenderpassbegininfo->sType=VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
devicegrouprenderpassbegininfo->pNext=___arg1;
devicegrouprenderpassbegininfo->deviceMask=___arg2;
devicegrouprenderpassbegininfo->deviceRenderAreaCount=___arg3;
devicegrouprenderpassbegininfo->pDeviceRenderAreas=___arg4;
___return (devicegrouprenderpassbegininfo);"))
(begin-ffi
   (make-VkDeviceGroupRenderPassBeginInfoKHR
      ptr->VkDeviceGroupRenderPassBeginInfoKHR
      ref-VkDeviceGroupRenderPassBeginInfoKHR
      make-VkDeviceGroupRenderPassBeginInfoKHR*
      VkDeviceGroupRenderPassBeginInfoKHR
      VkDeviceGroupRenderPassBeginInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceGroupRenderPassBeginInfoKHR
      (struct "VkDeviceGroupRenderPassBeginInfoKHR"))
   (c-define-type
      VkDeviceGroupRenderPassBeginInfoKHR*
      (pointer VkDeviceGroupRenderPassBeginInfoKHR))
   (define-c-lambda
      make-VkDeviceGroupRenderPassBeginInfoKHR*
      (int)
      VkDeviceGroupRenderPassBeginInfoKHR*
      "VkDeviceGroupRenderPassBeginInfoKHR* vkdevicegrouprenderpassbegininfokhr = malloc(___arg1 * sizeof(VkDeviceGroupRenderPassBeginInfoKHR));
      ___return (vkdevicegrouprenderpassbegininfokhr);")
   (define-c-lambda
      make-VkDeviceGroupRenderPassBeginInfoKHR
      ()
      VkDeviceGroupRenderPassBeginInfoKHR*
      "VkDeviceGroupRenderPassBeginInfoKHR *devicegrouprenderpassbegininfokhr = malloc(sizeof(VkDeviceGroupRenderPassBeginInfoKHR));
___return (devicegrouprenderpassbegininfokhr);"))
(begin-ffi
   (make-VkDeviceGroupCommandBufferBeginInfo
      ptr->VkDeviceGroupCommandBufferBeginInfo
      ref-VkDeviceGroupCommandBufferBeginInfo
      make-VkDeviceGroupCommandBufferBeginInfo*
      VkDeviceGroupCommandBufferBeginInfodeviceMask
      VkDeviceGroupCommandBufferBeginInfopNext
      VkDeviceGroupCommandBufferBeginInfosType
      VkDeviceGroupCommandBufferBeginInfo
      VkDeviceGroupCommandBufferBeginInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceGroupCommandBufferBeginInfo
      (struct "VkDeviceGroupCommandBufferBeginInfo"))
   (c-define-type
      VkDeviceGroupCommandBufferBeginInfo*
      (pointer VkDeviceGroupCommandBufferBeginInfo))
   (define-c-lambda
      VkDeviceGroupCommandBufferBeginInfosType
      (VkDeviceGroupCommandBufferBeginInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceGroupCommandBufferBeginInfopNext
      (VkDeviceGroupCommandBufferBeginInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceGroupCommandBufferBeginInfodeviceMask
      (VkDeviceGroupCommandBufferBeginInfo*)
      uint32_t
      "___return (___arg1->deviceMask);")
   (define-c-lambda
      make-VkDeviceGroupCommandBufferBeginInfo*
      (int)
      VkDeviceGroupCommandBufferBeginInfo*
      "VkDeviceGroupCommandBufferBeginInfo* vkdevicegroupcommandbufferbegininfo = malloc(___arg1 * sizeof(VkDeviceGroupCommandBufferBeginInfo));
      ___return (vkdevicegroupcommandbufferbegininfo);")
   (define-c-lambda
      ref-VkDeviceGroupCommandBufferBeginInfo
      (VkDeviceGroupCommandBufferBeginInfo* int)
      VkDeviceGroupCommandBufferBeginInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceGroupCommandBufferBeginInfo
      ((pointer VkDeviceGroupCommandBufferBeginInfo))
      VkDeviceGroupCommandBufferBeginInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceGroupCommandBufferBeginInfo
      (void* uint32_t)
      VkDeviceGroupCommandBufferBeginInfo*
      "VkDeviceGroupCommandBufferBeginInfo *devicegroupcommandbufferbegininfo = malloc(sizeof(VkDeviceGroupCommandBufferBeginInfo));
devicegroupcommandbufferbegininfo->sType=VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
devicegroupcommandbufferbegininfo->pNext=___arg1;
devicegroupcommandbufferbegininfo->deviceMask=___arg2;
___return (devicegroupcommandbufferbegininfo);"))
(begin-ffi
   (make-VkDeviceGroupCommandBufferBeginInfoKHR
      ptr->VkDeviceGroupCommandBufferBeginInfoKHR
      ref-VkDeviceGroupCommandBufferBeginInfoKHR
      make-VkDeviceGroupCommandBufferBeginInfoKHR*
      VkDeviceGroupCommandBufferBeginInfoKHR
      VkDeviceGroupCommandBufferBeginInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceGroupCommandBufferBeginInfoKHR
      (struct "VkDeviceGroupCommandBufferBeginInfoKHR"))
   (c-define-type
      VkDeviceGroupCommandBufferBeginInfoKHR*
      (pointer VkDeviceGroupCommandBufferBeginInfoKHR))
   (define-c-lambda
      make-VkDeviceGroupCommandBufferBeginInfoKHR*
      (int)
      VkDeviceGroupCommandBufferBeginInfoKHR*
      "VkDeviceGroupCommandBufferBeginInfoKHR* vkdevicegroupcommandbufferbegininfokhr = malloc(___arg1 * sizeof(VkDeviceGroupCommandBufferBeginInfoKHR));
      ___return (vkdevicegroupcommandbufferbegininfokhr);")
   (define-c-lambda
      make-VkDeviceGroupCommandBufferBeginInfoKHR
      ()
      VkDeviceGroupCommandBufferBeginInfoKHR*
      "VkDeviceGroupCommandBufferBeginInfoKHR *devicegroupcommandbufferbegininfokhr = malloc(sizeof(VkDeviceGroupCommandBufferBeginInfoKHR));
___return (devicegroupcommandbufferbegininfokhr);"))
(begin-ffi
   (make-VkDeviceGroupSubmitInfo
      ptr->VkDeviceGroupSubmitInfo
      ref-VkDeviceGroupSubmitInfo
      make-VkDeviceGroupSubmitInfo*
      VkDeviceGroupSubmitInfopSignalSemaphoreDeviceIndices
      VkDeviceGroupSubmitInfosignalSemaphoreCount
      VkDeviceGroupSubmitInfopCommandBufferDeviceMasks
      VkDeviceGroupSubmitInfocommandBufferCount
      VkDeviceGroupSubmitInfopWaitSemaphoreDeviceIndices
      VkDeviceGroupSubmitInfowaitSemaphoreCount
      VkDeviceGroupSubmitInfopNext
      VkDeviceGroupSubmitInfosType
      VkDeviceGroupSubmitInfo
      VkDeviceGroupSubmitInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDeviceGroupSubmitInfo (struct "VkDeviceGroupSubmitInfo"))
   (c-define-type VkDeviceGroupSubmitInfo* (pointer VkDeviceGroupSubmitInfo))
   (define-c-lambda
      VkDeviceGroupSubmitInfosType
      (VkDeviceGroupSubmitInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceGroupSubmitInfopNext
      (VkDeviceGroupSubmitInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceGroupSubmitInfowaitSemaphoreCount
      (VkDeviceGroupSubmitInfo*)
      uint32_t
      "___return (___arg1->waitSemaphoreCount);")
   (define-c-lambda
      VkDeviceGroupSubmitInfopWaitSemaphoreDeviceIndices
      (VkDeviceGroupSubmitInfo*)
      uint32_t*
      "___return (___arg1->pWaitSemaphoreDeviceIndices);")
   (define-c-lambda
      VkDeviceGroupSubmitInfocommandBufferCount
      (VkDeviceGroupSubmitInfo*)
      uint32_t
      "___return (___arg1->commandBufferCount);")
   (define-c-lambda
      VkDeviceGroupSubmitInfopCommandBufferDeviceMasks
      (VkDeviceGroupSubmitInfo*)
      uint32_t*
      "___return (___arg1->pCommandBufferDeviceMasks);")
   (define-c-lambda
      VkDeviceGroupSubmitInfosignalSemaphoreCount
      (VkDeviceGroupSubmitInfo*)
      uint32_t
      "___return (___arg1->signalSemaphoreCount);")
   (define-c-lambda
      VkDeviceGroupSubmitInfopSignalSemaphoreDeviceIndices
      (VkDeviceGroupSubmitInfo*)
      uint32_t*
      "___return (___arg1->pSignalSemaphoreDeviceIndices);")
   (define-c-lambda
      make-VkDeviceGroupSubmitInfo*
      (int)
      VkDeviceGroupSubmitInfo*
      "VkDeviceGroupSubmitInfo* vkdevicegroupsubmitinfo = malloc(___arg1 * sizeof(VkDeviceGroupSubmitInfo));
      ___return (vkdevicegroupsubmitinfo);")
   (define-c-lambda
      ref-VkDeviceGroupSubmitInfo
      (VkDeviceGroupSubmitInfo* int)
      VkDeviceGroupSubmitInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceGroupSubmitInfo
      ((pointer VkDeviceGroupSubmitInfo))
      VkDeviceGroupSubmitInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceGroupSubmitInfo
      (void* uint32_t uint32_t* uint32_t uint32_t* uint32_t uint32_t*)
      VkDeviceGroupSubmitInfo*
      "VkDeviceGroupSubmitInfo *devicegroupsubmitinfo = malloc(sizeof(VkDeviceGroupSubmitInfo));
devicegroupsubmitinfo->sType=VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
devicegroupsubmitinfo->pNext=___arg1;
devicegroupsubmitinfo->waitSemaphoreCount=___arg2;
devicegroupsubmitinfo->pWaitSemaphoreDeviceIndices=___arg3;
devicegroupsubmitinfo->commandBufferCount=___arg4;
devicegroupsubmitinfo->pCommandBufferDeviceMasks=___arg5;
devicegroupsubmitinfo->signalSemaphoreCount=___arg6;
devicegroupsubmitinfo->pSignalSemaphoreDeviceIndices=___arg7;
___return (devicegroupsubmitinfo);"))
(begin-ffi
   (make-VkDeviceGroupSubmitInfoKHR
      ptr->VkDeviceGroupSubmitInfoKHR
      ref-VkDeviceGroupSubmitInfoKHR
      make-VkDeviceGroupSubmitInfoKHR*
      VkDeviceGroupSubmitInfoKHR
      VkDeviceGroupSubmitInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDeviceGroupSubmitInfoKHR (struct "VkDeviceGroupSubmitInfoKHR"))
   (c-define-type VkDeviceGroupSubmitInfoKHR* (pointer VkDeviceGroupSubmitInfoKHR))
   (define-c-lambda
      make-VkDeviceGroupSubmitInfoKHR*
      (int)
      VkDeviceGroupSubmitInfoKHR*
      "VkDeviceGroupSubmitInfoKHR* vkdevicegroupsubmitinfokhr = malloc(___arg1 * sizeof(VkDeviceGroupSubmitInfoKHR));
      ___return (vkdevicegroupsubmitinfokhr);")
   (define-c-lambda
      make-VkDeviceGroupSubmitInfoKHR
      ()
      VkDeviceGroupSubmitInfoKHR*
      "VkDeviceGroupSubmitInfoKHR *devicegroupsubmitinfokhr = malloc(sizeof(VkDeviceGroupSubmitInfoKHR));
___return (devicegroupsubmitinfokhr);"))
(begin-ffi
   (make-VkDeviceGroupBindSparseInfo
      ptr->VkDeviceGroupBindSparseInfo
      ref-VkDeviceGroupBindSparseInfo
      make-VkDeviceGroupBindSparseInfo*
      VkDeviceGroupBindSparseInfomemoryDeviceIndex
      VkDeviceGroupBindSparseInforesourceDeviceIndex
      VkDeviceGroupBindSparseInfopNext
      VkDeviceGroupBindSparseInfosType
      VkDeviceGroupBindSparseInfo
      VkDeviceGroupBindSparseInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDeviceGroupBindSparseInfo (struct "VkDeviceGroupBindSparseInfo"))
   (c-define-type VkDeviceGroupBindSparseInfo* (pointer VkDeviceGroupBindSparseInfo))
   (define-c-lambda
      VkDeviceGroupBindSparseInfosType
      (VkDeviceGroupBindSparseInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceGroupBindSparseInfopNext
      (VkDeviceGroupBindSparseInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceGroupBindSparseInforesourceDeviceIndex
      (VkDeviceGroupBindSparseInfo*)
      uint32_t
      "___return (___arg1->resourceDeviceIndex);")
   (define-c-lambda
      VkDeviceGroupBindSparseInfomemoryDeviceIndex
      (VkDeviceGroupBindSparseInfo*)
      uint32_t
      "___return (___arg1->memoryDeviceIndex);")
   (define-c-lambda
      make-VkDeviceGroupBindSparseInfo*
      (int)
      VkDeviceGroupBindSparseInfo*
      "VkDeviceGroupBindSparseInfo* vkdevicegroupbindsparseinfo = malloc(___arg1 * sizeof(VkDeviceGroupBindSparseInfo));
      ___return (vkdevicegroupbindsparseinfo);")
   (define-c-lambda
      ref-VkDeviceGroupBindSparseInfo
      (VkDeviceGroupBindSparseInfo* int)
      VkDeviceGroupBindSparseInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceGroupBindSparseInfo
      ((pointer VkDeviceGroupBindSparseInfo))
      VkDeviceGroupBindSparseInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceGroupBindSparseInfo
      (void* uint32_t uint32_t)
      VkDeviceGroupBindSparseInfo*
      "VkDeviceGroupBindSparseInfo *devicegroupbindsparseinfo = malloc(sizeof(VkDeviceGroupBindSparseInfo));
devicegroupbindsparseinfo->sType=VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
devicegroupbindsparseinfo->pNext=___arg1;
devicegroupbindsparseinfo->resourceDeviceIndex=___arg2;
devicegroupbindsparseinfo->memoryDeviceIndex=___arg3;
___return (devicegroupbindsparseinfo);"))
(begin-ffi
   (make-VkDeviceGroupBindSparseInfoKHR
      ptr->VkDeviceGroupBindSparseInfoKHR
      ref-VkDeviceGroupBindSparseInfoKHR
      make-VkDeviceGroupBindSparseInfoKHR*
      VkDeviceGroupBindSparseInfoKHR
      VkDeviceGroupBindSparseInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceGroupBindSparseInfoKHR
      (struct "VkDeviceGroupBindSparseInfoKHR"))
   (c-define-type
      VkDeviceGroupBindSparseInfoKHR*
      (pointer VkDeviceGroupBindSparseInfoKHR))
   (define-c-lambda
      make-VkDeviceGroupBindSparseInfoKHR*
      (int)
      VkDeviceGroupBindSparseInfoKHR*
      "VkDeviceGroupBindSparseInfoKHR* vkdevicegroupbindsparseinfokhr = malloc(___arg1 * sizeof(VkDeviceGroupBindSparseInfoKHR));
      ___return (vkdevicegroupbindsparseinfokhr);")
   (define-c-lambda
      make-VkDeviceGroupBindSparseInfoKHR
      ()
      VkDeviceGroupBindSparseInfoKHR*
      "VkDeviceGroupBindSparseInfoKHR *devicegroupbindsparseinfokhr = malloc(sizeof(VkDeviceGroupBindSparseInfoKHR));
___return (devicegroupbindsparseinfokhr);"))
(begin-ffi
   (make-VkDeviceGroupPresentCapabilitiesKHR
      ptr->VkDeviceGroupPresentCapabilitiesKHR
      ref-VkDeviceGroupPresentCapabilitiesKHR
      make-VkDeviceGroupPresentCapabilitiesKHR*
      VkDeviceGroupPresentCapabilitiesKHRmodes
      VkDeviceGroupPresentCapabilitiesKHRpresentMask
      VkDeviceGroupPresentCapabilitiesKHRpNext
      VkDeviceGroupPresentCapabilitiesKHRsType
      VkDeviceGroupPresentCapabilitiesKHR
      VkDeviceGroupPresentCapabilitiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceGroupPresentCapabilitiesKHR
      (struct "VkDeviceGroupPresentCapabilitiesKHR"))
   (c-define-type
      VkDeviceGroupPresentCapabilitiesKHR*
      (pointer VkDeviceGroupPresentCapabilitiesKHR))
   (define-c-lambda
      VkDeviceGroupPresentCapabilitiesKHRsType
      (VkDeviceGroupPresentCapabilitiesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceGroupPresentCapabilitiesKHRpNext
      (VkDeviceGroupPresentCapabilitiesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceGroupPresentCapabilitiesKHRpresentMask
      (VkDeviceGroupPresentCapabilitiesKHR*)
      uint32_t*
      "___return (___arg1->presentMask);")
   (define-c-lambda
      VkDeviceGroupPresentCapabilitiesKHRmodes
      (VkDeviceGroupPresentCapabilitiesKHR*)
      VkDeviceGroupPresentModeFlagsKHR
      "___return (___arg1->modes);")
   (define-c-lambda
      make-VkDeviceGroupPresentCapabilitiesKHR*
      (int)
      VkDeviceGroupPresentCapabilitiesKHR*
      "VkDeviceGroupPresentCapabilitiesKHR* vkdevicegrouppresentcapabilitieskhr = malloc(___arg1 * sizeof(VkDeviceGroupPresentCapabilitiesKHR));
      ___return (vkdevicegrouppresentcapabilitieskhr);")
   (define-c-lambda
      ref-VkDeviceGroupPresentCapabilitiesKHR
      (VkDeviceGroupPresentCapabilitiesKHR* int)
      VkDeviceGroupPresentCapabilitiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDeviceGroupPresentCapabilitiesKHR
      (void* uint32_t* VkDeviceGroupPresentModeFlagsKHR)
      VkDeviceGroupPresentCapabilitiesKHR*
      "VkDeviceGroupPresentCapabilitiesKHR *devicegrouppresentcapabilitieskhr = malloc(sizeof(VkDeviceGroupPresentCapabilitiesKHR));
devicegrouppresentcapabilitieskhr->sType=VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
devicegrouppresentcapabilitieskhr->pNext=___arg1;
memcpy(devicegrouppresentcapabilitieskhr->presentMask,___arg2,sizeof(___arg2));
devicegrouppresentcapabilitieskhr->modes=___arg3;
___return (devicegrouppresentcapabilitieskhr);"))
(begin-ffi
   (make-VkImageSwapchainCreateInfoKHR
      ptr->VkImageSwapchainCreateInfoKHR
      ref-VkImageSwapchainCreateInfoKHR
      make-VkImageSwapchainCreateInfoKHR*
      VkImageSwapchainCreateInfoKHRswapchain
      VkImageSwapchainCreateInfoKHRpNext
      VkImageSwapchainCreateInfoKHRsType
      VkImageSwapchainCreateInfoKHR
      VkImageSwapchainCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageSwapchainCreateInfoKHR (struct "VkImageSwapchainCreateInfoKHR"))
   (c-define-type VkImageSwapchainCreateInfoKHR* (pointer VkImageSwapchainCreateInfoKHR))
   (define-c-lambda
      VkImageSwapchainCreateInfoKHRsType
      (VkImageSwapchainCreateInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageSwapchainCreateInfoKHRpNext
      (VkImageSwapchainCreateInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageSwapchainCreateInfoKHRswapchain
      (VkImageSwapchainCreateInfoKHR*)
      VkSwapchainKHR
      "___return (___arg1->swapchain);")
   (define-c-lambda
      make-VkImageSwapchainCreateInfoKHR*
      (int)
      VkImageSwapchainCreateInfoKHR*
      "VkImageSwapchainCreateInfoKHR* vkimageswapchaincreateinfokhr = malloc(___arg1 * sizeof(VkImageSwapchainCreateInfoKHR));
      ___return (vkimageswapchaincreateinfokhr);")
   (define-c-lambda
      ref-VkImageSwapchainCreateInfoKHR
      (VkImageSwapchainCreateInfoKHR* int)
      VkImageSwapchainCreateInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkImageSwapchainCreateInfoKHR
      (void* VkSwapchainKHR)
      VkImageSwapchainCreateInfoKHR*
      "VkImageSwapchainCreateInfoKHR *imageswapchaincreateinfokhr = malloc(sizeof(VkImageSwapchainCreateInfoKHR));
imageswapchaincreateinfokhr->sType=VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
imageswapchaincreateinfokhr->pNext=___arg1;
imageswapchaincreateinfokhr->swapchain=___arg2;
___return (imageswapchaincreateinfokhr);"))
(begin-ffi
   (make-VkBindImageMemorySwapchainInfoKHR
      ptr->VkBindImageMemorySwapchainInfoKHR
      ref-VkBindImageMemorySwapchainInfoKHR
      make-VkBindImageMemorySwapchainInfoKHR*
      VkBindImageMemorySwapchainInfoKHRimageIndex
      VkBindImageMemorySwapchainInfoKHRswapchain
      VkBindImageMemorySwapchainInfoKHRpNext
      VkBindImageMemorySwapchainInfoKHRsType
      VkBindImageMemorySwapchainInfoKHR
      VkBindImageMemorySwapchainInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkBindImageMemorySwapchainInfoKHR
      (struct "VkBindImageMemorySwapchainInfoKHR"))
   (c-define-type
      VkBindImageMemorySwapchainInfoKHR*
      (pointer VkBindImageMemorySwapchainInfoKHR))
   (define-c-lambda
      VkBindImageMemorySwapchainInfoKHRsType
      (VkBindImageMemorySwapchainInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBindImageMemorySwapchainInfoKHRpNext
      (VkBindImageMemorySwapchainInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBindImageMemorySwapchainInfoKHRswapchain
      (VkBindImageMemorySwapchainInfoKHR*)
      VkSwapchainKHR
      "___return (___arg1->swapchain);")
   (define-c-lambda
      VkBindImageMemorySwapchainInfoKHRimageIndex
      (VkBindImageMemorySwapchainInfoKHR*)
      uint32_t
      "___return (___arg1->imageIndex);")
   (define-c-lambda
      make-VkBindImageMemorySwapchainInfoKHR*
      (int)
      VkBindImageMemorySwapchainInfoKHR*
      "VkBindImageMemorySwapchainInfoKHR* vkbindimagememoryswapchaininfokhr = malloc(___arg1 * sizeof(VkBindImageMemorySwapchainInfoKHR));
      ___return (vkbindimagememoryswapchaininfokhr);")
   (define-c-lambda
      ref-VkBindImageMemorySwapchainInfoKHR
      (VkBindImageMemorySwapchainInfoKHR* int)
      VkBindImageMemorySwapchainInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkBindImageMemorySwapchainInfoKHR
      (void* VkSwapchainKHR uint32_t)
      VkBindImageMemorySwapchainInfoKHR*
      "VkBindImageMemorySwapchainInfoKHR *bindimagememoryswapchaininfokhr = malloc(sizeof(VkBindImageMemorySwapchainInfoKHR));
bindimagememoryswapchaininfokhr->sType=VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
bindimagememoryswapchaininfokhr->pNext=___arg1;
bindimagememoryswapchaininfokhr->swapchain=___arg2;
bindimagememoryswapchaininfokhr->imageIndex=___arg3;
___return (bindimagememoryswapchaininfokhr);"))
(begin-ffi
   (make-VkAcquireNextImageInfoKHR
      ptr->VkAcquireNextImageInfoKHR
      ref-VkAcquireNextImageInfoKHR
      make-VkAcquireNextImageInfoKHR*
      VkAcquireNextImageInfoKHRdeviceMask
      VkAcquireNextImageInfoKHRfence
      VkAcquireNextImageInfoKHRsemaphore
      VkAcquireNextImageInfoKHRtimeout
      VkAcquireNextImageInfoKHRswapchain
      VkAcquireNextImageInfoKHRpNext
      VkAcquireNextImageInfoKHRsType
      VkAcquireNextImageInfoKHR
      VkAcquireNextImageInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkAcquireNextImageInfoKHR (struct "VkAcquireNextImageInfoKHR"))
   (c-define-type VkAcquireNextImageInfoKHR* (pointer VkAcquireNextImageInfoKHR))
   (define-c-lambda
      VkAcquireNextImageInfoKHRsType
      (VkAcquireNextImageInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkAcquireNextImageInfoKHRpNext
      (VkAcquireNextImageInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkAcquireNextImageInfoKHRswapchain
      (VkAcquireNextImageInfoKHR*)
      VkSwapchainKHR
      "___return (___arg1->swapchain);")
   (define-c-lambda
      VkAcquireNextImageInfoKHRtimeout
      (VkAcquireNextImageInfoKHR*)
      uint64_t
      "___return (___arg1->timeout);")
   (define-c-lambda
      VkAcquireNextImageInfoKHRsemaphore
      (VkAcquireNextImageInfoKHR*)
      VkSemaphore
      "___return (___arg1->semaphore);")
   (define-c-lambda
      VkAcquireNextImageInfoKHRfence
      (VkAcquireNextImageInfoKHR*)
      VkFence
      "___return (___arg1->fence);")
   (define-c-lambda
      VkAcquireNextImageInfoKHRdeviceMask
      (VkAcquireNextImageInfoKHR*)
      uint32_t
      "___return (___arg1->deviceMask);")
   (define-c-lambda
      make-VkAcquireNextImageInfoKHR*
      (int)
      VkAcquireNextImageInfoKHR*
      "VkAcquireNextImageInfoKHR* vkacquirenextimageinfokhr = malloc(___arg1 * sizeof(VkAcquireNextImageInfoKHR));
      ___return (vkacquirenextimageinfokhr);")
   (define-c-lambda
      ref-VkAcquireNextImageInfoKHR
      (VkAcquireNextImageInfoKHR* int)
      VkAcquireNextImageInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkAcquireNextImageInfoKHR
      (void* VkSwapchainKHR uint64_t VkSemaphore VkFence uint32_t)
      VkAcquireNextImageInfoKHR*
      "VkAcquireNextImageInfoKHR *acquirenextimageinfokhr = malloc(sizeof(VkAcquireNextImageInfoKHR));
acquirenextimageinfokhr->sType=VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR;
acquirenextimageinfokhr->pNext=___arg1;
acquirenextimageinfokhr->swapchain=___arg2;
acquirenextimageinfokhr->timeout=___arg3;
acquirenextimageinfokhr->semaphore=___arg4;
acquirenextimageinfokhr->fence=___arg5;
acquirenextimageinfokhr->deviceMask=___arg6;
___return (acquirenextimageinfokhr);"))
(begin-ffi
   (make-VkDeviceGroupPresentInfoKHR
      ptr->VkDeviceGroupPresentInfoKHR
      ref-VkDeviceGroupPresentInfoKHR
      make-VkDeviceGroupPresentInfoKHR*
      VkDeviceGroupPresentInfoKHRmode
      VkDeviceGroupPresentInfoKHRpDeviceMasks
      VkDeviceGroupPresentInfoKHRswapchainCount
      VkDeviceGroupPresentInfoKHRpNext
      VkDeviceGroupPresentInfoKHRsType
      VkDeviceGroupPresentInfoKHR
      VkDeviceGroupPresentInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDeviceGroupPresentInfoKHR (struct "VkDeviceGroupPresentInfoKHR"))
   (c-define-type VkDeviceGroupPresentInfoKHR* (pointer VkDeviceGroupPresentInfoKHR))
   (define-c-lambda
      VkDeviceGroupPresentInfoKHRsType
      (VkDeviceGroupPresentInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceGroupPresentInfoKHRpNext
      (VkDeviceGroupPresentInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceGroupPresentInfoKHRswapchainCount
      (VkDeviceGroupPresentInfoKHR*)
      uint32_t
      "___return (___arg1->swapchainCount);")
   (define-c-lambda
      VkDeviceGroupPresentInfoKHRpDeviceMasks
      (VkDeviceGroupPresentInfoKHR*)
      uint32_t*
      "___return (___arg1->pDeviceMasks);")
   (define-c-lambda
      VkDeviceGroupPresentInfoKHRmode
      (VkDeviceGroupPresentInfoKHR*)
      VkDeviceGroupPresentModeFlagBitsKHR
      "___return (___arg1->mode);")
   (define-c-lambda
      make-VkDeviceGroupPresentInfoKHR*
      (int)
      VkDeviceGroupPresentInfoKHR*
      "VkDeviceGroupPresentInfoKHR* vkdevicegrouppresentinfokhr = malloc(___arg1 * sizeof(VkDeviceGroupPresentInfoKHR));
      ___return (vkdevicegrouppresentinfokhr);")
   (define-c-lambda
      ref-VkDeviceGroupPresentInfoKHR
      (VkDeviceGroupPresentInfoKHR* int)
      VkDeviceGroupPresentInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDeviceGroupPresentInfoKHR
      (void* uint32_t uint32_t* VkDeviceGroupPresentModeFlagBitsKHR)
      VkDeviceGroupPresentInfoKHR*
      "VkDeviceGroupPresentInfoKHR *devicegrouppresentinfokhr = malloc(sizeof(VkDeviceGroupPresentInfoKHR));
devicegrouppresentinfokhr->sType=VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR;
devicegrouppresentinfokhr->pNext=___arg1;
devicegrouppresentinfokhr->swapchainCount=___arg2;
devicegrouppresentinfokhr->pDeviceMasks=___arg3;
devicegrouppresentinfokhr->mode=___arg4;
___return (devicegrouppresentinfokhr);"))
(begin-ffi
   (make-VkDeviceGroupDeviceCreateInfo
      ptr->VkDeviceGroupDeviceCreateInfo
      ref-VkDeviceGroupDeviceCreateInfo
      make-VkDeviceGroupDeviceCreateInfo*
      VkDeviceGroupDeviceCreateInfopPhysicalDevices
      VkDeviceGroupDeviceCreateInfophysicalDeviceCount
      VkDeviceGroupDeviceCreateInfopNext
      VkDeviceGroupDeviceCreateInfosType
      VkDeviceGroupDeviceCreateInfo
      VkDeviceGroupDeviceCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDeviceGroupDeviceCreateInfo (struct "VkDeviceGroupDeviceCreateInfo"))
   (c-define-type VkDeviceGroupDeviceCreateInfo* (pointer VkDeviceGroupDeviceCreateInfo))
   (define-c-lambda
      VkDeviceGroupDeviceCreateInfosType
      (VkDeviceGroupDeviceCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceGroupDeviceCreateInfopNext
      (VkDeviceGroupDeviceCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceGroupDeviceCreateInfophysicalDeviceCount
      (VkDeviceGroupDeviceCreateInfo*)
      uint32_t
      "___return (___arg1->physicalDeviceCount);")
   (define-c-lambda
      VkDeviceGroupDeviceCreateInfopPhysicalDevices
      (VkDeviceGroupDeviceCreateInfo*)
      VkPhysicalDevice*
      "___return (___arg1->pPhysicalDevices);")
   (define-c-lambda
      make-VkDeviceGroupDeviceCreateInfo*
      (int)
      VkDeviceGroupDeviceCreateInfo*
      "VkDeviceGroupDeviceCreateInfo* vkdevicegroupdevicecreateinfo = malloc(___arg1 * sizeof(VkDeviceGroupDeviceCreateInfo));
      ___return (vkdevicegroupdevicecreateinfo);")
   (define-c-lambda
      ref-VkDeviceGroupDeviceCreateInfo
      (VkDeviceGroupDeviceCreateInfo* int)
      VkDeviceGroupDeviceCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceGroupDeviceCreateInfo
      ((pointer VkDeviceGroupDeviceCreateInfo))
      VkDeviceGroupDeviceCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceGroupDeviceCreateInfo
      (void* uint32_t VkPhysicalDevice*)
      VkDeviceGroupDeviceCreateInfo*
      "VkDeviceGroupDeviceCreateInfo *devicegroupdevicecreateinfo = malloc(sizeof(VkDeviceGroupDeviceCreateInfo));
devicegroupdevicecreateinfo->sType=VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
devicegroupdevicecreateinfo->pNext=___arg1;
devicegroupdevicecreateinfo->physicalDeviceCount=___arg2;
devicegroupdevicecreateinfo->pPhysicalDevices=___arg3;
___return (devicegroupdevicecreateinfo);"))
(begin-ffi
   (make-VkDeviceGroupDeviceCreateInfoKHR
      ptr->VkDeviceGroupDeviceCreateInfoKHR
      ref-VkDeviceGroupDeviceCreateInfoKHR
      make-VkDeviceGroupDeviceCreateInfoKHR*
      VkDeviceGroupDeviceCreateInfoKHR
      VkDeviceGroupDeviceCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceGroupDeviceCreateInfoKHR
      (struct "VkDeviceGroupDeviceCreateInfoKHR"))
   (c-define-type
      VkDeviceGroupDeviceCreateInfoKHR*
      (pointer VkDeviceGroupDeviceCreateInfoKHR))
   (define-c-lambda
      make-VkDeviceGroupDeviceCreateInfoKHR*
      (int)
      VkDeviceGroupDeviceCreateInfoKHR*
      "VkDeviceGroupDeviceCreateInfoKHR* vkdevicegroupdevicecreateinfokhr = malloc(___arg1 * sizeof(VkDeviceGroupDeviceCreateInfoKHR));
      ___return (vkdevicegroupdevicecreateinfokhr);")
   (define-c-lambda
      make-VkDeviceGroupDeviceCreateInfoKHR
      ()
      VkDeviceGroupDeviceCreateInfoKHR*
      "VkDeviceGroupDeviceCreateInfoKHR *devicegroupdevicecreateinfokhr = malloc(sizeof(VkDeviceGroupDeviceCreateInfoKHR));
___return (devicegroupdevicecreateinfokhr);"))
(begin-ffi
   (make-VkDeviceGroupSwapchainCreateInfoKHR
      ptr->VkDeviceGroupSwapchainCreateInfoKHR
      ref-VkDeviceGroupSwapchainCreateInfoKHR
      make-VkDeviceGroupSwapchainCreateInfoKHR*
      VkDeviceGroupSwapchainCreateInfoKHRmodes
      VkDeviceGroupSwapchainCreateInfoKHRpNext
      VkDeviceGroupSwapchainCreateInfoKHRsType
      VkDeviceGroupSwapchainCreateInfoKHR
      VkDeviceGroupSwapchainCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceGroupSwapchainCreateInfoKHR
      (struct "VkDeviceGroupSwapchainCreateInfoKHR"))
   (c-define-type
      VkDeviceGroupSwapchainCreateInfoKHR*
      (pointer VkDeviceGroupSwapchainCreateInfoKHR))
   (define-c-lambda
      VkDeviceGroupSwapchainCreateInfoKHRsType
      (VkDeviceGroupSwapchainCreateInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceGroupSwapchainCreateInfoKHRpNext
      (VkDeviceGroupSwapchainCreateInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceGroupSwapchainCreateInfoKHRmodes
      (VkDeviceGroupSwapchainCreateInfoKHR*)
      VkDeviceGroupPresentModeFlagsKHR
      "___return (___arg1->modes);")
   (define-c-lambda
      make-VkDeviceGroupSwapchainCreateInfoKHR*
      (int)
      VkDeviceGroupSwapchainCreateInfoKHR*
      "VkDeviceGroupSwapchainCreateInfoKHR* vkdevicegroupswapchaincreateinfokhr = malloc(___arg1 * sizeof(VkDeviceGroupSwapchainCreateInfoKHR));
      ___return (vkdevicegroupswapchaincreateinfokhr);")
   (define-c-lambda
      ref-VkDeviceGroupSwapchainCreateInfoKHR
      (VkDeviceGroupSwapchainCreateInfoKHR* int)
      VkDeviceGroupSwapchainCreateInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDeviceGroupSwapchainCreateInfoKHR
      (void* VkDeviceGroupPresentModeFlagsKHR)
      VkDeviceGroupSwapchainCreateInfoKHR*
      "VkDeviceGroupSwapchainCreateInfoKHR *devicegroupswapchaincreateinfokhr = malloc(sizeof(VkDeviceGroupSwapchainCreateInfoKHR));
devicegroupswapchaincreateinfokhr->sType=VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
devicegroupswapchaincreateinfokhr->pNext=___arg1;
devicegroupswapchaincreateinfokhr->modes=___arg2;
___return (devicegroupswapchaincreateinfokhr);"))
(begin-ffi
   (make-VkDescriptorUpdateTemplateEntry
      ptr->VkDescriptorUpdateTemplateEntry
      ref-VkDescriptorUpdateTemplateEntry
      make-VkDescriptorUpdateTemplateEntry*
      VkDescriptorUpdateTemplateEntrystride
      VkDescriptorUpdateTemplateEntryoffset
      VkDescriptorUpdateTemplateEntrydescriptorType
      VkDescriptorUpdateTemplateEntrydescriptorCount
      VkDescriptorUpdateTemplateEntrydstArrayElement
      VkDescriptorUpdateTemplateEntrydstBinding
      VkDescriptorUpdateTemplateEntry
      VkDescriptorUpdateTemplateEntry*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDescriptorUpdateTemplateEntry
      (struct "VkDescriptorUpdateTemplateEntry"))
   (c-define-type
      VkDescriptorUpdateTemplateEntry*
      (pointer VkDescriptorUpdateTemplateEntry))
   (define-c-lambda
      VkDescriptorUpdateTemplateEntrydstBinding
      (VkDescriptorUpdateTemplateEntry*)
      uint32_t
      "___return (___arg1->dstBinding);")
   (define-c-lambda
      VkDescriptorUpdateTemplateEntrydstArrayElement
      (VkDescriptorUpdateTemplateEntry*)
      uint32_t
      "___return (___arg1->dstArrayElement);")
   (define-c-lambda
      VkDescriptorUpdateTemplateEntrydescriptorCount
      (VkDescriptorUpdateTemplateEntry*)
      uint32_t
      "___return (___arg1->descriptorCount);")
   (define-c-lambda
      VkDescriptorUpdateTemplateEntrydescriptorType
      (VkDescriptorUpdateTemplateEntry*)
      VkDescriptorType
      "___return (___arg1->descriptorType);")
   (define-c-lambda
      VkDescriptorUpdateTemplateEntryoffset
      (VkDescriptorUpdateTemplateEntry*)
      size_t
      "___return (___arg1->offset);")
   (define-c-lambda
      VkDescriptorUpdateTemplateEntrystride
      (VkDescriptorUpdateTemplateEntry*)
      size_t
      "___return (___arg1->stride);")
   (define-c-lambda
      make-VkDescriptorUpdateTemplateEntry*
      (int)
      VkDescriptorUpdateTemplateEntry*
      "VkDescriptorUpdateTemplateEntry* vkdescriptorupdatetemplateentry = malloc(___arg1 * sizeof(VkDescriptorUpdateTemplateEntry));
      ___return (vkdescriptorupdatetemplateentry);")
   (define-c-lambda
      ref-VkDescriptorUpdateTemplateEntry
      (VkDescriptorUpdateTemplateEntry* int)
      VkDescriptorUpdateTemplateEntry*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorUpdateTemplateEntry
      ((pointer VkDescriptorUpdateTemplateEntry))
      VkDescriptorUpdateTemplateEntry
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorUpdateTemplateEntry
      (uint32_t uint32_t uint32_t VkDescriptorType size_t size_t)
      VkDescriptorUpdateTemplateEntry*
      "VkDescriptorUpdateTemplateEntry *descriptorupdatetemplateentry = malloc(sizeof(VkDescriptorUpdateTemplateEntry));
descriptorupdatetemplateentry->dstBinding=___arg1;
descriptorupdatetemplateentry->dstArrayElement=___arg2;
descriptorupdatetemplateentry->descriptorCount=___arg3;
descriptorupdatetemplateentry->descriptorType=___arg4;
descriptorupdatetemplateentry->offset=___arg5;
descriptorupdatetemplateentry->stride=___arg6;
___return (descriptorupdatetemplateentry);"))
(begin-ffi
   (make-VkDescriptorUpdateTemplateEntryKHR
      ptr->VkDescriptorUpdateTemplateEntryKHR
      ref-VkDescriptorUpdateTemplateEntryKHR
      make-VkDescriptorUpdateTemplateEntryKHR*
      VkDescriptorUpdateTemplateEntryKHR
      VkDescriptorUpdateTemplateEntryKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDescriptorUpdateTemplateEntryKHR
      (struct "VkDescriptorUpdateTemplateEntryKHR"))
   (c-define-type
      VkDescriptorUpdateTemplateEntryKHR*
      (pointer VkDescriptorUpdateTemplateEntryKHR))
   (define-c-lambda
      make-VkDescriptorUpdateTemplateEntryKHR*
      (int)
      VkDescriptorUpdateTemplateEntryKHR*
      "VkDescriptorUpdateTemplateEntryKHR* vkdescriptorupdatetemplateentrykhr = malloc(___arg1 * sizeof(VkDescriptorUpdateTemplateEntryKHR));
      ___return (vkdescriptorupdatetemplateentrykhr);")
   (define-c-lambda
      make-VkDescriptorUpdateTemplateEntryKHR
      ()
      VkDescriptorUpdateTemplateEntryKHR*
      "VkDescriptorUpdateTemplateEntryKHR *descriptorupdatetemplateentrykhr = malloc(sizeof(VkDescriptorUpdateTemplateEntryKHR));
___return (descriptorupdatetemplateentrykhr);"))
(begin-ffi
   (make-VkDescriptorUpdateTemplateCreateInfo
      ptr->VkDescriptorUpdateTemplateCreateInfo
      ref-VkDescriptorUpdateTemplateCreateInfo
      make-VkDescriptorUpdateTemplateCreateInfo*
      VkDescriptorUpdateTemplateCreateInfoset
      VkDescriptorUpdateTemplateCreateInfopipelineLayout
      VkDescriptorUpdateTemplateCreateInfopipelineBindPoint
      VkDescriptorUpdateTemplateCreateInfodescriptorSetLayout
      VkDescriptorUpdateTemplateCreateInfotemplateType
      VkDescriptorUpdateTemplateCreateInfopDescriptorUpdateEntries
      VkDescriptorUpdateTemplateCreateInfodescriptorUpdateEntryCount
      VkDescriptorUpdateTemplateCreateInfoflags
      VkDescriptorUpdateTemplateCreateInfopNext
      VkDescriptorUpdateTemplateCreateInfosType
      VkDescriptorUpdateTemplateCreateInfo
      VkDescriptorUpdateTemplateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDescriptorUpdateTemplateCreateInfo
      (struct "VkDescriptorUpdateTemplateCreateInfo"))
   (c-define-type
      VkDescriptorUpdateTemplateCreateInfo*
      (pointer VkDescriptorUpdateTemplateCreateInfo))
   (define-c-lambda
      VkDescriptorUpdateTemplateCreateInfosType
      (VkDescriptorUpdateTemplateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDescriptorUpdateTemplateCreateInfopNext
      (VkDescriptorUpdateTemplateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDescriptorUpdateTemplateCreateInfoflags
      (VkDescriptorUpdateTemplateCreateInfo*)
      VkDescriptorUpdateTemplateCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDescriptorUpdateTemplateCreateInfodescriptorUpdateEntryCount
      (VkDescriptorUpdateTemplateCreateInfo*)
      uint32_t
      "___return (___arg1->descriptorUpdateEntryCount);")
   (define-c-lambda
      VkDescriptorUpdateTemplateCreateInfopDescriptorUpdateEntries
      (VkDescriptorUpdateTemplateCreateInfo*)
      VkDescriptorUpdateTemplateEntry*
      "___return (___arg1->pDescriptorUpdateEntries);")
   (define-c-lambda
      VkDescriptorUpdateTemplateCreateInfotemplateType
      (VkDescriptorUpdateTemplateCreateInfo*)
      VkDescriptorUpdateTemplateType
      "___return (___arg1->templateType);")
   (define-c-lambda
      VkDescriptorUpdateTemplateCreateInfodescriptorSetLayout
      (VkDescriptorUpdateTemplateCreateInfo*)
      VkDescriptorSetLayout
      "___return (___arg1->descriptorSetLayout);")
   (define-c-lambda
      VkDescriptorUpdateTemplateCreateInfopipelineBindPoint
      (VkDescriptorUpdateTemplateCreateInfo*)
      VkPipelineBindPoint
      "___return (___arg1->pipelineBindPoint);")
   (define-c-lambda
      VkDescriptorUpdateTemplateCreateInfopipelineLayout
      (VkDescriptorUpdateTemplateCreateInfo*)
      VkPipelineLayout
      "___return (___arg1->pipelineLayout);")
   (define-c-lambda
      VkDescriptorUpdateTemplateCreateInfoset
      (VkDescriptorUpdateTemplateCreateInfo*)
      uint32_t
      "___return (___arg1->set);")
   (define-c-lambda
      make-VkDescriptorUpdateTemplateCreateInfo*
      (int)
      VkDescriptorUpdateTemplateCreateInfo*
      "VkDescriptorUpdateTemplateCreateInfo* vkdescriptorupdatetemplatecreateinfo = malloc(___arg1 * sizeof(VkDescriptorUpdateTemplateCreateInfo));
      ___return (vkdescriptorupdatetemplatecreateinfo);")
   (define-c-lambda
      ref-VkDescriptorUpdateTemplateCreateInfo
      (VkDescriptorUpdateTemplateCreateInfo* int)
      VkDescriptorUpdateTemplateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorUpdateTemplateCreateInfo
      ((pointer VkDescriptorUpdateTemplateCreateInfo))
      VkDescriptorUpdateTemplateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorUpdateTemplateCreateInfo
      (void*
         VkDescriptorUpdateTemplateCreateFlags
         uint32_t
         VkDescriptorUpdateTemplateEntry*
         VkDescriptorUpdateTemplateType
         VkDescriptorSetLayout
         VkPipelineBindPoint
         VkPipelineLayout
         uint32_t)
      VkDescriptorUpdateTemplateCreateInfo*
      "VkDescriptorUpdateTemplateCreateInfo *descriptorupdatetemplatecreateinfo = malloc(sizeof(VkDescriptorUpdateTemplateCreateInfo));
descriptorupdatetemplatecreateinfo->sType=VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
descriptorupdatetemplatecreateinfo->pNext=___arg1;
descriptorupdatetemplatecreateinfo->flags=___arg2;
descriptorupdatetemplatecreateinfo->descriptorUpdateEntryCount=___arg3;
descriptorupdatetemplatecreateinfo->pDescriptorUpdateEntries=___arg4;
descriptorupdatetemplatecreateinfo->templateType=___arg5;
descriptorupdatetemplatecreateinfo->descriptorSetLayout=___arg6;
descriptorupdatetemplatecreateinfo->pipelineBindPoint=___arg7;
descriptorupdatetemplatecreateinfo->pipelineLayout=___arg8;
descriptorupdatetemplatecreateinfo->set=___arg9;
___return (descriptorupdatetemplatecreateinfo);"))
(begin-ffi
   (make-VkDescriptorUpdateTemplateCreateInfoKHR
      ptr->VkDescriptorUpdateTemplateCreateInfoKHR
      ref-VkDescriptorUpdateTemplateCreateInfoKHR
      make-VkDescriptorUpdateTemplateCreateInfoKHR*
      VkDescriptorUpdateTemplateCreateInfoKHR
      VkDescriptorUpdateTemplateCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDescriptorUpdateTemplateCreateInfoKHR
      (struct "VkDescriptorUpdateTemplateCreateInfoKHR"))
   (c-define-type
      VkDescriptorUpdateTemplateCreateInfoKHR*
      (pointer VkDescriptorUpdateTemplateCreateInfoKHR))
   (define-c-lambda
      make-VkDescriptorUpdateTemplateCreateInfoKHR*
      (int)
      VkDescriptorUpdateTemplateCreateInfoKHR*
      "VkDescriptorUpdateTemplateCreateInfoKHR* vkdescriptorupdatetemplatecreateinfokhr = malloc(___arg1 * sizeof(VkDescriptorUpdateTemplateCreateInfoKHR));
      ___return (vkdescriptorupdatetemplatecreateinfokhr);")
   (define-c-lambda
      make-VkDescriptorUpdateTemplateCreateInfoKHR
      ()
      VkDescriptorUpdateTemplateCreateInfoKHR*
      "VkDescriptorUpdateTemplateCreateInfoKHR *descriptorupdatetemplatecreateinfokhr = malloc(sizeof(VkDescriptorUpdateTemplateCreateInfoKHR));
___return (descriptorupdatetemplatecreateinfokhr);"))
(begin-ffi
   (make-VkXYColorEXT
      ptr->VkXYColorEXT
      ref-VkXYColorEXT
      make-VkXYColorEXT*
      VkXYColorEXTy
      VkXYColorEXTx
      VkXYColorEXT
      VkXYColorEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkXYColorEXT (struct "VkXYColorEXT"))
   (c-define-type VkXYColorEXT* (pointer VkXYColorEXT))
   (define-c-lambda VkXYColorEXTx (VkXYColorEXT*) float "___return (___arg1->x);")
   (define-c-lambda VkXYColorEXTy (VkXYColorEXT*) float "___return (___arg1->y);")
   (define-c-lambda
      make-VkXYColorEXT*
      (int)
      VkXYColorEXT*
      "VkXYColorEXT* vkxycolorext = malloc(___arg1 * sizeof(VkXYColorEXT));
      ___return (vkxycolorext);")
   (define-c-lambda
      ref-VkXYColorEXT
      (VkXYColorEXT* int)
      VkXYColorEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkXYColorEXT
      ((pointer VkXYColorEXT))
      VkXYColorEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkXYColorEXT
      (float float)
      VkXYColorEXT*
      "VkXYColorEXT *xycolorext = malloc(sizeof(VkXYColorEXT));
xycolorext->x=___arg1;
xycolorext->y=___arg2;
___return (xycolorext);"))
(begin-ffi
   (make-VkHdrMetadataEXT
      ptr->VkHdrMetadataEXT
      ref-VkHdrMetadataEXT
      make-VkHdrMetadataEXT*
      VkHdrMetadataEXTmaxFrameAverageLightLevel
      VkHdrMetadataEXTmaxContentLightLevel
      VkHdrMetadataEXTminLuminance
      VkHdrMetadataEXTmaxLuminance
      VkHdrMetadataEXTwhitePoint
      VkHdrMetadataEXTdisplayPrimaryBlue
      VkHdrMetadataEXTdisplayPrimaryGreen
      VkHdrMetadataEXTdisplayPrimaryRed
      VkHdrMetadataEXTpNext
      VkHdrMetadataEXTsType
      VkHdrMetadataEXT
      VkHdrMetadataEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkHdrMetadataEXT (struct "VkHdrMetadataEXT"))
   (c-define-type VkHdrMetadataEXT* (pointer VkHdrMetadataEXT))
   (define-c-lambda
      VkHdrMetadataEXTsType
      (VkHdrMetadataEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkHdrMetadataEXTpNext
      (VkHdrMetadataEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkHdrMetadataEXTdisplayPrimaryRed
      (VkHdrMetadataEXT*)
      VkXYColorEXT
      "___return (___arg1->displayPrimaryRed);")
   (define-c-lambda
      VkHdrMetadataEXTdisplayPrimaryGreen
      (VkHdrMetadataEXT*)
      VkXYColorEXT
      "___return (___arg1->displayPrimaryGreen);")
   (define-c-lambda
      VkHdrMetadataEXTdisplayPrimaryBlue
      (VkHdrMetadataEXT*)
      VkXYColorEXT
      "___return (___arg1->displayPrimaryBlue);")
   (define-c-lambda
      VkHdrMetadataEXTwhitePoint
      (VkHdrMetadataEXT*)
      VkXYColorEXT
      "___return (___arg1->whitePoint);")
   (define-c-lambda
      VkHdrMetadataEXTmaxLuminance
      (VkHdrMetadataEXT*)
      float
      "___return (___arg1->maxLuminance);")
   (define-c-lambda
      VkHdrMetadataEXTminLuminance
      (VkHdrMetadataEXT*)
      float
      "___return (___arg1->minLuminance);")
   (define-c-lambda
      VkHdrMetadataEXTmaxContentLightLevel
      (VkHdrMetadataEXT*)
      float
      "___return (___arg1->maxContentLightLevel);")
   (define-c-lambda
      VkHdrMetadataEXTmaxFrameAverageLightLevel
      (VkHdrMetadataEXT*)
      float
      "___return (___arg1->maxFrameAverageLightLevel);")
   (define-c-lambda
      make-VkHdrMetadataEXT*
      (int)
      VkHdrMetadataEXT*
      "VkHdrMetadataEXT* vkhdrmetadataext = malloc(___arg1 * sizeof(VkHdrMetadataEXT));
      ___return (vkhdrmetadataext);")
   (define-c-lambda
      ref-VkHdrMetadataEXT
      (VkHdrMetadataEXT* int)
      VkHdrMetadataEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkHdrMetadataEXT
      ((pointer VkHdrMetadataEXT))
      VkHdrMetadataEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkHdrMetadataEXT
      (void* VkXYColorEXT VkXYColorEXT VkXYColorEXT VkXYColorEXT float float float float)
      VkHdrMetadataEXT*
      "VkHdrMetadataEXT *hdrmetadataext = malloc(sizeof(VkHdrMetadataEXT));
hdrmetadataext->sType=VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
hdrmetadataext->pNext=___arg1;
hdrmetadataext->displayPrimaryRed=___arg2;
hdrmetadataext->displayPrimaryGreen=___arg3;
hdrmetadataext->displayPrimaryBlue=___arg4;
hdrmetadataext->whitePoint=___arg5;
hdrmetadataext->maxLuminance=___arg6;
hdrmetadataext->minLuminance=___arg7;
hdrmetadataext->maxContentLightLevel=___arg8;
hdrmetadataext->maxFrameAverageLightLevel=___arg9;
___return (hdrmetadataext);"))
(begin-ffi
   (make-VkDisplayNativeHdrSurfaceCapabilitiesAMD
      ptr->VkDisplayNativeHdrSurfaceCapabilitiesAMD
      ref-VkDisplayNativeHdrSurfaceCapabilitiesAMD
      make-VkDisplayNativeHdrSurfaceCapabilitiesAMD*
      VkDisplayNativeHdrSurfaceCapabilitiesAMDlocalDimmingSupport
      VkDisplayNativeHdrSurfaceCapabilitiesAMDpNext
      VkDisplayNativeHdrSurfaceCapabilitiesAMDsType
      VkDisplayNativeHdrSurfaceCapabilitiesAMD
      VkDisplayNativeHdrSurfaceCapabilitiesAMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDisplayNativeHdrSurfaceCapabilitiesAMD
      (struct "VkDisplayNativeHdrSurfaceCapabilitiesAMD"))
   (c-define-type
      VkDisplayNativeHdrSurfaceCapabilitiesAMD*
      (pointer VkDisplayNativeHdrSurfaceCapabilitiesAMD))
   (define-c-lambda
      VkDisplayNativeHdrSurfaceCapabilitiesAMDsType
      (VkDisplayNativeHdrSurfaceCapabilitiesAMD*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplayNativeHdrSurfaceCapabilitiesAMDpNext
      (VkDisplayNativeHdrSurfaceCapabilitiesAMD*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplayNativeHdrSurfaceCapabilitiesAMDlocalDimmingSupport
      (VkDisplayNativeHdrSurfaceCapabilitiesAMD*)
      VkBool32
      "___return (___arg1->localDimmingSupport);")
   (define-c-lambda
      make-VkDisplayNativeHdrSurfaceCapabilitiesAMD*
      (int)
      VkDisplayNativeHdrSurfaceCapabilitiesAMD*
      "VkDisplayNativeHdrSurfaceCapabilitiesAMD* vkdisplaynativehdrsurfacecapabilitiesamd = malloc(___arg1 * sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD));
      ___return (vkdisplaynativehdrsurfacecapabilitiesamd);")
   (define-c-lambda
      ref-VkDisplayNativeHdrSurfaceCapabilitiesAMD
      (VkDisplayNativeHdrSurfaceCapabilitiesAMD* int)
      VkDisplayNativeHdrSurfaceCapabilitiesAMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDisplayNativeHdrSurfaceCapabilitiesAMD
      ((pointer VkDisplayNativeHdrSurfaceCapabilitiesAMD))
      VkDisplayNativeHdrSurfaceCapabilitiesAMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDisplayNativeHdrSurfaceCapabilitiesAMD
      (void* VkBool32)
      VkDisplayNativeHdrSurfaceCapabilitiesAMD*
      "VkDisplayNativeHdrSurfaceCapabilitiesAMD *displaynativehdrsurfacecapabilitiesamd = malloc(sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD));
displaynativehdrsurfacecapabilitiesamd->sType=VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD;
displaynativehdrsurfacecapabilitiesamd->pNext=___arg1;
displaynativehdrsurfacecapabilitiesamd->localDimmingSupport=___arg2;
___return (displaynativehdrsurfacecapabilitiesamd);"))
(begin-ffi
   (make-VkSwapchainDisplayNativeHdrCreateInfoAMD
      ptr->VkSwapchainDisplayNativeHdrCreateInfoAMD
      ref-VkSwapchainDisplayNativeHdrCreateInfoAMD
      make-VkSwapchainDisplayNativeHdrCreateInfoAMD*
      VkSwapchainDisplayNativeHdrCreateInfoAMDlocalDimmingEnable
      VkSwapchainDisplayNativeHdrCreateInfoAMDpNext
      VkSwapchainDisplayNativeHdrCreateInfoAMDsType
      VkSwapchainDisplayNativeHdrCreateInfoAMD
      VkSwapchainDisplayNativeHdrCreateInfoAMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSwapchainDisplayNativeHdrCreateInfoAMD
      (struct "VkSwapchainDisplayNativeHdrCreateInfoAMD"))
   (c-define-type
      VkSwapchainDisplayNativeHdrCreateInfoAMD*
      (pointer VkSwapchainDisplayNativeHdrCreateInfoAMD))
   (define-c-lambda
      VkSwapchainDisplayNativeHdrCreateInfoAMDsType
      (VkSwapchainDisplayNativeHdrCreateInfoAMD*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSwapchainDisplayNativeHdrCreateInfoAMDpNext
      (VkSwapchainDisplayNativeHdrCreateInfoAMD*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSwapchainDisplayNativeHdrCreateInfoAMDlocalDimmingEnable
      (VkSwapchainDisplayNativeHdrCreateInfoAMD*)
      VkBool32
      "___return (___arg1->localDimmingEnable);")
   (define-c-lambda
      make-VkSwapchainDisplayNativeHdrCreateInfoAMD*
      (int)
      VkSwapchainDisplayNativeHdrCreateInfoAMD*
      "VkSwapchainDisplayNativeHdrCreateInfoAMD* vkswapchaindisplaynativehdrcreateinfoamd = malloc(___arg1 * sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD));
      ___return (vkswapchaindisplaynativehdrcreateinfoamd);")
   (define-c-lambda
      ref-VkSwapchainDisplayNativeHdrCreateInfoAMD
      (VkSwapchainDisplayNativeHdrCreateInfoAMD* int)
      VkSwapchainDisplayNativeHdrCreateInfoAMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSwapchainDisplayNativeHdrCreateInfoAMD
      ((pointer VkSwapchainDisplayNativeHdrCreateInfoAMD))
      VkSwapchainDisplayNativeHdrCreateInfoAMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSwapchainDisplayNativeHdrCreateInfoAMD
      (void* VkBool32)
      VkSwapchainDisplayNativeHdrCreateInfoAMD*
      "VkSwapchainDisplayNativeHdrCreateInfoAMD *swapchaindisplaynativehdrcreateinfoamd = malloc(sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD));
swapchaindisplaynativehdrcreateinfoamd->sType=VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
swapchaindisplaynativehdrcreateinfoamd->pNext=___arg1;
swapchaindisplaynativehdrcreateinfoamd->localDimmingEnable=___arg2;
___return (swapchaindisplaynativehdrcreateinfoamd);"))
(begin-ffi
   (make-VkRefreshCycleDurationGOOGLE
      ptr->VkRefreshCycleDurationGOOGLE
      ref-VkRefreshCycleDurationGOOGLE
      make-VkRefreshCycleDurationGOOGLE*
      VkRefreshCycleDurationGOOGLErefreshDuration
      VkRefreshCycleDurationGOOGLE
      VkRefreshCycleDurationGOOGLE*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkRefreshCycleDurationGOOGLE (struct "VkRefreshCycleDurationGOOGLE"))
   (c-define-type VkRefreshCycleDurationGOOGLE* (pointer VkRefreshCycleDurationGOOGLE))
   (define-c-lambda
      VkRefreshCycleDurationGOOGLErefreshDuration
      (VkRefreshCycleDurationGOOGLE*)
      uint64_t
      "___return (___arg1->refreshDuration);")
   (define-c-lambda
      make-VkRefreshCycleDurationGOOGLE*
      (int)
      VkRefreshCycleDurationGOOGLE*
      "VkRefreshCycleDurationGOOGLE* vkrefreshcycledurationgoogle = malloc(___arg1 * sizeof(VkRefreshCycleDurationGOOGLE));
      ___return (vkrefreshcycledurationgoogle);")
   (define-c-lambda
      ref-VkRefreshCycleDurationGOOGLE
      (VkRefreshCycleDurationGOOGLE* int)
      VkRefreshCycleDurationGOOGLE*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkRefreshCycleDurationGOOGLE
      ((pointer VkRefreshCycleDurationGOOGLE))
      VkRefreshCycleDurationGOOGLE
      "___return(*___arg1);")
   (define-c-lambda
      make-VkRefreshCycleDurationGOOGLE
      (uint64_t)
      VkRefreshCycleDurationGOOGLE*
      "VkRefreshCycleDurationGOOGLE *refreshcycledurationgoogle = malloc(sizeof(VkRefreshCycleDurationGOOGLE));
refreshcycledurationgoogle->refreshDuration=___arg1;
___return (refreshcycledurationgoogle);"))
(begin-ffi
   (make-VkPastPresentationTimingGOOGLE
      ptr->VkPastPresentationTimingGOOGLE
      ref-VkPastPresentationTimingGOOGLE
      make-VkPastPresentationTimingGOOGLE*
      VkPastPresentationTimingGOOGLEpresentMargin
      VkPastPresentationTimingGOOGLEearliestPresentTime
      VkPastPresentationTimingGOOGLEactualPresentTime
      VkPastPresentationTimingGOOGLEdesiredPresentTime
      VkPastPresentationTimingGOOGLEpresentID
      VkPastPresentationTimingGOOGLE
      VkPastPresentationTimingGOOGLE*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPastPresentationTimingGOOGLE
      (struct "VkPastPresentationTimingGOOGLE"))
   (c-define-type
      VkPastPresentationTimingGOOGLE*
      (pointer VkPastPresentationTimingGOOGLE))
   (define-c-lambda
      VkPastPresentationTimingGOOGLEpresentID
      (VkPastPresentationTimingGOOGLE*)
      uint32_t
      "___return (___arg1->presentID);")
   (define-c-lambda
      VkPastPresentationTimingGOOGLEdesiredPresentTime
      (VkPastPresentationTimingGOOGLE*)
      uint64_t
      "___return (___arg1->desiredPresentTime);")
   (define-c-lambda
      VkPastPresentationTimingGOOGLEactualPresentTime
      (VkPastPresentationTimingGOOGLE*)
      uint64_t
      "___return (___arg1->actualPresentTime);")
   (define-c-lambda
      VkPastPresentationTimingGOOGLEearliestPresentTime
      (VkPastPresentationTimingGOOGLE*)
      uint64_t
      "___return (___arg1->earliestPresentTime);")
   (define-c-lambda
      VkPastPresentationTimingGOOGLEpresentMargin
      (VkPastPresentationTimingGOOGLE*)
      uint64_t
      "___return (___arg1->presentMargin);")
   (define-c-lambda
      make-VkPastPresentationTimingGOOGLE*
      (int)
      VkPastPresentationTimingGOOGLE*
      "VkPastPresentationTimingGOOGLE* vkpastpresentationtiminggoogle = malloc(___arg1 * sizeof(VkPastPresentationTimingGOOGLE));
      ___return (vkpastpresentationtiminggoogle);")
   (define-c-lambda
      ref-VkPastPresentationTimingGOOGLE
      (VkPastPresentationTimingGOOGLE* int)
      VkPastPresentationTimingGOOGLE*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPastPresentationTimingGOOGLE
      ((pointer VkPastPresentationTimingGOOGLE))
      VkPastPresentationTimingGOOGLE
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPastPresentationTimingGOOGLE
      (uint32_t uint64_t uint64_t uint64_t uint64_t)
      VkPastPresentationTimingGOOGLE*
      "VkPastPresentationTimingGOOGLE *pastpresentationtiminggoogle = malloc(sizeof(VkPastPresentationTimingGOOGLE));
pastpresentationtiminggoogle->presentID=___arg1;
pastpresentationtiminggoogle->desiredPresentTime=___arg2;
pastpresentationtiminggoogle->actualPresentTime=___arg3;
pastpresentationtiminggoogle->earliestPresentTime=___arg4;
pastpresentationtiminggoogle->presentMargin=___arg5;
___return (pastpresentationtiminggoogle);"))
(begin-ffi
   (make-VkPresentTimeGOOGLE
      ptr->VkPresentTimeGOOGLE
      ref-VkPresentTimeGOOGLE
      make-VkPresentTimeGOOGLE*
      VkPresentTimeGOOGLEdesiredPresentTime
      VkPresentTimeGOOGLEpresentID
      VkPresentTimeGOOGLE
      VkPresentTimeGOOGLE*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPresentTimeGOOGLE (struct "VkPresentTimeGOOGLE"))
   (c-define-type VkPresentTimeGOOGLE* (pointer VkPresentTimeGOOGLE))
   (define-c-lambda
      VkPresentTimeGOOGLEpresentID
      (VkPresentTimeGOOGLE*)
      uint32_t
      "___return (___arg1->presentID);")
   (define-c-lambda
      VkPresentTimeGOOGLEdesiredPresentTime
      (VkPresentTimeGOOGLE*)
      uint64_t
      "___return (___arg1->desiredPresentTime);")
   (define-c-lambda
      make-VkPresentTimeGOOGLE*
      (int)
      VkPresentTimeGOOGLE*
      "VkPresentTimeGOOGLE* vkpresenttimegoogle = malloc(___arg1 * sizeof(VkPresentTimeGOOGLE));
      ___return (vkpresenttimegoogle);")
   (define-c-lambda
      ref-VkPresentTimeGOOGLE
      (VkPresentTimeGOOGLE* int)
      VkPresentTimeGOOGLE*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPresentTimeGOOGLE
      ((pointer VkPresentTimeGOOGLE))
      VkPresentTimeGOOGLE
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPresentTimeGOOGLE
      (uint32_t uint64_t)
      VkPresentTimeGOOGLE*
      "VkPresentTimeGOOGLE *presenttimegoogle = malloc(sizeof(VkPresentTimeGOOGLE));
presenttimegoogle->presentID=___arg1;
presenttimegoogle->desiredPresentTime=___arg2;
___return (presenttimegoogle);"))
(begin-ffi
   (make-VkPresentTimesInfoGOOGLE
      ptr->VkPresentTimesInfoGOOGLE
      ref-VkPresentTimesInfoGOOGLE
      make-VkPresentTimesInfoGOOGLE*
      VkPresentTimesInfoGOOGLEpTimes
      VkPresentTimesInfoGOOGLEswapchainCount
      VkPresentTimesInfoGOOGLEpNext
      VkPresentTimesInfoGOOGLEsType
      VkPresentTimesInfoGOOGLE
      VkPresentTimesInfoGOOGLE*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPresentTimesInfoGOOGLE (struct "VkPresentTimesInfoGOOGLE"))
   (c-define-type VkPresentTimesInfoGOOGLE* (pointer VkPresentTimesInfoGOOGLE))
   (define-c-lambda
      VkPresentTimesInfoGOOGLEsType
      (VkPresentTimesInfoGOOGLE*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPresentTimesInfoGOOGLEpNext
      (VkPresentTimesInfoGOOGLE*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPresentTimesInfoGOOGLEswapchainCount
      (VkPresentTimesInfoGOOGLE*)
      uint32_t
      "___return (___arg1->swapchainCount);")
   (define-c-lambda
      VkPresentTimesInfoGOOGLEpTimes
      (VkPresentTimesInfoGOOGLE*)
      VkPresentTimeGOOGLE*
      "___return (___arg1->pTimes);")
   (define-c-lambda
      make-VkPresentTimesInfoGOOGLE*
      (int)
      VkPresentTimesInfoGOOGLE*
      "VkPresentTimesInfoGOOGLE* vkpresenttimesinfogoogle = malloc(___arg1 * sizeof(VkPresentTimesInfoGOOGLE));
      ___return (vkpresenttimesinfogoogle);")
   (define-c-lambda
      ref-VkPresentTimesInfoGOOGLE
      (VkPresentTimesInfoGOOGLE* int)
      VkPresentTimesInfoGOOGLE*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPresentTimesInfoGOOGLE
      ((pointer VkPresentTimesInfoGOOGLE))
      VkPresentTimesInfoGOOGLE
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPresentTimesInfoGOOGLE
      (void* uint32_t VkPresentTimeGOOGLE*)
      VkPresentTimesInfoGOOGLE*
      "VkPresentTimesInfoGOOGLE *presenttimesinfogoogle = malloc(sizeof(VkPresentTimesInfoGOOGLE));
presenttimesinfogoogle->sType=VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE;
presenttimesinfogoogle->pNext=___arg1;
presenttimesinfogoogle->swapchainCount=___arg2;
presenttimesinfogoogle->pTimes=___arg3;
___return (presenttimesinfogoogle);"))
(begin-ffi
   (make-VkViewportWScalingNV
      ptr->VkViewportWScalingNV
      ref-VkViewportWScalingNV
      make-VkViewportWScalingNV*
      VkViewportWScalingNVycoeff
      VkViewportWScalingNVxcoeff
      VkViewportWScalingNV
      VkViewportWScalingNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkViewportWScalingNV (struct "VkViewportWScalingNV"))
   (c-define-type VkViewportWScalingNV* (pointer VkViewportWScalingNV))
   (define-c-lambda
      VkViewportWScalingNVxcoeff
      (VkViewportWScalingNV*)
      float
      "___return (___arg1->xcoeff);")
   (define-c-lambda
      VkViewportWScalingNVycoeff
      (VkViewportWScalingNV*)
      float
      "___return (___arg1->ycoeff);")
   (define-c-lambda
      make-VkViewportWScalingNV*
      (int)
      VkViewportWScalingNV*
      "VkViewportWScalingNV* vkviewportwscalingnv = malloc(___arg1 * sizeof(VkViewportWScalingNV));
      ___return (vkviewportwscalingnv);")
   (define-c-lambda
      ref-VkViewportWScalingNV
      (VkViewportWScalingNV* int)
      VkViewportWScalingNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkViewportWScalingNV
      ((pointer VkViewportWScalingNV))
      VkViewportWScalingNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkViewportWScalingNV
      (float float)
      VkViewportWScalingNV*
      "VkViewportWScalingNV *viewportwscalingnv = malloc(sizeof(VkViewportWScalingNV));
viewportwscalingnv->xcoeff=___arg1;
viewportwscalingnv->ycoeff=___arg2;
___return (viewportwscalingnv);"))
(begin-ffi
   (make-VkPipelineViewportWScalingStateCreateInfoNV
      ptr->VkPipelineViewportWScalingStateCreateInfoNV
      ref-VkPipelineViewportWScalingStateCreateInfoNV
      make-VkPipelineViewportWScalingStateCreateInfoNV*
      VkPipelineViewportWScalingStateCreateInfoNVpViewportWScalings
      VkPipelineViewportWScalingStateCreateInfoNVviewportCount
      VkPipelineViewportWScalingStateCreateInfoNVviewportWScalingEnable
      VkPipelineViewportWScalingStateCreateInfoNVpNext
      VkPipelineViewportWScalingStateCreateInfoNVsType
      VkPipelineViewportWScalingStateCreateInfoNV
      VkPipelineViewportWScalingStateCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineViewportWScalingStateCreateInfoNV
      (struct "VkPipelineViewportWScalingStateCreateInfoNV"))
   (c-define-type
      VkPipelineViewportWScalingStateCreateInfoNV*
      (pointer VkPipelineViewportWScalingStateCreateInfoNV))
   (define-c-lambda
      VkPipelineViewportWScalingStateCreateInfoNVsType
      (VkPipelineViewportWScalingStateCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineViewportWScalingStateCreateInfoNVpNext
      (VkPipelineViewportWScalingStateCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineViewportWScalingStateCreateInfoNVviewportWScalingEnable
      (VkPipelineViewportWScalingStateCreateInfoNV*)
      VkBool32
      "___return (___arg1->viewportWScalingEnable);")
   (define-c-lambda
      VkPipelineViewportWScalingStateCreateInfoNVviewportCount
      (VkPipelineViewportWScalingStateCreateInfoNV*)
      uint32_t
      "___return (___arg1->viewportCount);")
   (define-c-lambda
      VkPipelineViewportWScalingStateCreateInfoNVpViewportWScalings
      (VkPipelineViewportWScalingStateCreateInfoNV*)
      VkViewportWScalingNV*
      "___return (___arg1->pViewportWScalings);")
   (define-c-lambda
      make-VkPipelineViewportWScalingStateCreateInfoNV*
      (int)
      VkPipelineViewportWScalingStateCreateInfoNV*
      "VkPipelineViewportWScalingStateCreateInfoNV* vkpipelineviewportwscalingstatecreateinfonv = malloc(___arg1 * sizeof(VkPipelineViewportWScalingStateCreateInfoNV));
      ___return (vkpipelineviewportwscalingstatecreateinfonv);")
   (define-c-lambda
      ref-VkPipelineViewportWScalingStateCreateInfoNV
      (VkPipelineViewportWScalingStateCreateInfoNV* int)
      VkPipelineViewportWScalingStateCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineViewportWScalingStateCreateInfoNV
      ((pointer VkPipelineViewportWScalingStateCreateInfoNV))
      VkPipelineViewportWScalingStateCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineViewportWScalingStateCreateInfoNV
      (void* VkBool32 uint32_t VkViewportWScalingNV*)
      VkPipelineViewportWScalingStateCreateInfoNV*
      "VkPipelineViewportWScalingStateCreateInfoNV *pipelineviewportwscalingstatecreateinfonv = malloc(sizeof(VkPipelineViewportWScalingStateCreateInfoNV));
pipelineviewportwscalingstatecreateinfonv->sType=VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
pipelineviewportwscalingstatecreateinfonv->pNext=___arg1;
pipelineviewportwscalingstatecreateinfonv->viewportWScalingEnable=___arg2;
pipelineviewportwscalingstatecreateinfonv->viewportCount=___arg3;
pipelineviewportwscalingstatecreateinfonv->pViewportWScalings=___arg4;
___return (pipelineviewportwscalingstatecreateinfonv);"))
(begin-ffi
   (make-VkViewportSwizzleNV
      ptr->VkViewportSwizzleNV
      ref-VkViewportSwizzleNV
      make-VkViewportSwizzleNV*
      VkViewportSwizzleNVw
      VkViewportSwizzleNVz
      VkViewportSwizzleNVy
      VkViewportSwizzleNVx
      VkViewportSwizzleNV
      VkViewportSwizzleNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkViewportSwizzleNV (struct "VkViewportSwizzleNV"))
   (c-define-type VkViewportSwizzleNV* (pointer VkViewportSwizzleNV))
   (define-c-lambda
      VkViewportSwizzleNVx
      (VkViewportSwizzleNV*)
      VkViewportCoordinateSwizzleNV
      "___return (___arg1->x);")
   (define-c-lambda
      VkViewportSwizzleNVy
      (VkViewportSwizzleNV*)
      VkViewportCoordinateSwizzleNV
      "___return (___arg1->y);")
   (define-c-lambda
      VkViewportSwizzleNVz
      (VkViewportSwizzleNV*)
      VkViewportCoordinateSwizzleNV
      "___return (___arg1->z);")
   (define-c-lambda
      VkViewportSwizzleNVw
      (VkViewportSwizzleNV*)
      VkViewportCoordinateSwizzleNV
      "___return (___arg1->w);")
   (define-c-lambda
      make-VkViewportSwizzleNV*
      (int)
      VkViewportSwizzleNV*
      "VkViewportSwizzleNV* vkviewportswizzlenv = malloc(___arg1 * sizeof(VkViewportSwizzleNV));
      ___return (vkviewportswizzlenv);")
   (define-c-lambda
      ref-VkViewportSwizzleNV
      (VkViewportSwizzleNV* int)
      VkViewportSwizzleNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkViewportSwizzleNV
      ((pointer VkViewportSwizzleNV))
      VkViewportSwizzleNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkViewportSwizzleNV
      (VkViewportCoordinateSwizzleNV
         VkViewportCoordinateSwizzleNV
         VkViewportCoordinateSwizzleNV
         VkViewportCoordinateSwizzleNV)
      VkViewportSwizzleNV*
      "VkViewportSwizzleNV *viewportswizzlenv = malloc(sizeof(VkViewportSwizzleNV));
viewportswizzlenv->x=___arg1;
viewportswizzlenv->y=___arg2;
viewportswizzlenv->z=___arg3;
viewportswizzlenv->w=___arg4;
___return (viewportswizzlenv);"))
(begin-ffi
   (make-VkPipelineViewportSwizzleStateCreateInfoNV
      ptr->VkPipelineViewportSwizzleStateCreateInfoNV
      ref-VkPipelineViewportSwizzleStateCreateInfoNV
      make-VkPipelineViewportSwizzleStateCreateInfoNV*
      VkPipelineViewportSwizzleStateCreateInfoNVpViewportSwizzles
      VkPipelineViewportSwizzleStateCreateInfoNVviewportCount
      VkPipelineViewportSwizzleStateCreateInfoNVflags
      VkPipelineViewportSwizzleStateCreateInfoNVpNext
      VkPipelineViewportSwizzleStateCreateInfoNVsType
      VkPipelineViewportSwizzleStateCreateInfoNV
      VkPipelineViewportSwizzleStateCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineViewportSwizzleStateCreateInfoNV
      (struct "VkPipelineViewportSwizzleStateCreateInfoNV"))
   (c-define-type
      VkPipelineViewportSwizzleStateCreateInfoNV*
      (pointer VkPipelineViewportSwizzleStateCreateInfoNV))
   (define-c-lambda
      VkPipelineViewportSwizzleStateCreateInfoNVsType
      (VkPipelineViewportSwizzleStateCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineViewportSwizzleStateCreateInfoNVpNext
      (VkPipelineViewportSwizzleStateCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineViewportSwizzleStateCreateInfoNVflags
      (VkPipelineViewportSwizzleStateCreateInfoNV*)
      VkPipelineViewportSwizzleStateCreateFlagsNV
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineViewportSwizzleStateCreateInfoNVviewportCount
      (VkPipelineViewportSwizzleStateCreateInfoNV*)
      uint32_t
      "___return (___arg1->viewportCount);")
   (define-c-lambda
      VkPipelineViewportSwizzleStateCreateInfoNVpViewportSwizzles
      (VkPipelineViewportSwizzleStateCreateInfoNV*)
      VkViewportSwizzleNV*
      "___return (___arg1->pViewportSwizzles);")
   (define-c-lambda
      make-VkPipelineViewportSwizzleStateCreateInfoNV*
      (int)
      VkPipelineViewportSwizzleStateCreateInfoNV*
      "VkPipelineViewportSwizzleStateCreateInfoNV* vkpipelineviewportswizzlestatecreateinfonv = malloc(___arg1 * sizeof(VkPipelineViewportSwizzleStateCreateInfoNV));
      ___return (vkpipelineviewportswizzlestatecreateinfonv);")
   (define-c-lambda
      ref-VkPipelineViewportSwizzleStateCreateInfoNV
      (VkPipelineViewportSwizzleStateCreateInfoNV* int)
      VkPipelineViewportSwizzleStateCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineViewportSwizzleStateCreateInfoNV
      ((pointer VkPipelineViewportSwizzleStateCreateInfoNV))
      VkPipelineViewportSwizzleStateCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineViewportSwizzleStateCreateInfoNV
      (void* VkPipelineViewportSwizzleStateCreateFlagsNV uint32_t VkViewportSwizzleNV*)
      VkPipelineViewportSwizzleStateCreateInfoNV*
      "VkPipelineViewportSwizzleStateCreateInfoNV *pipelineviewportswizzlestatecreateinfonv = malloc(sizeof(VkPipelineViewportSwizzleStateCreateInfoNV));
pipelineviewportswizzlestatecreateinfonv->sType=VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
pipelineviewportswizzlestatecreateinfonv->pNext=___arg1;
pipelineviewportswizzlestatecreateinfonv->flags=___arg2;
pipelineviewportswizzlestatecreateinfonv->viewportCount=___arg3;
pipelineviewportswizzlestatecreateinfonv->pViewportSwizzles=___arg4;
___return (pipelineviewportswizzlestatecreateinfonv);"))
(begin-ffi
   (make-VkPhysicalDeviceDiscardRectanglePropertiesEXT
      ptr->VkPhysicalDeviceDiscardRectanglePropertiesEXT
      ref-VkPhysicalDeviceDiscardRectanglePropertiesEXT
      make-VkPhysicalDeviceDiscardRectanglePropertiesEXT*
      VkPhysicalDeviceDiscardRectanglePropertiesEXTmaxDiscardRectangles
      VkPhysicalDeviceDiscardRectanglePropertiesEXTpNext
      VkPhysicalDeviceDiscardRectanglePropertiesEXTsType
      VkPhysicalDeviceDiscardRectanglePropertiesEXT
      VkPhysicalDeviceDiscardRectanglePropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceDiscardRectanglePropertiesEXT
      (struct "VkPhysicalDeviceDiscardRectanglePropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceDiscardRectanglePropertiesEXT*
      (pointer VkPhysicalDeviceDiscardRectanglePropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceDiscardRectanglePropertiesEXTsType
      (VkPhysicalDeviceDiscardRectanglePropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceDiscardRectanglePropertiesEXTpNext
      (VkPhysicalDeviceDiscardRectanglePropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceDiscardRectanglePropertiesEXTmaxDiscardRectangles
      (VkPhysicalDeviceDiscardRectanglePropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDiscardRectangles);")
   (define-c-lambda
      make-VkPhysicalDeviceDiscardRectanglePropertiesEXT*
      (int)
      VkPhysicalDeviceDiscardRectanglePropertiesEXT*
      "VkPhysicalDeviceDiscardRectanglePropertiesEXT* vkphysicaldevicediscardrectanglepropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT));
      ___return (vkphysicaldevicediscardrectanglepropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceDiscardRectanglePropertiesEXT
      (VkPhysicalDeviceDiscardRectanglePropertiesEXT* int)
      VkPhysicalDeviceDiscardRectanglePropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceDiscardRectanglePropertiesEXT
      ((pointer VkPhysicalDeviceDiscardRectanglePropertiesEXT))
      VkPhysicalDeviceDiscardRectanglePropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceDiscardRectanglePropertiesEXT
      (void* uint32_t)
      VkPhysicalDeviceDiscardRectanglePropertiesEXT*
      "VkPhysicalDeviceDiscardRectanglePropertiesEXT *physicaldevicediscardrectanglepropertiesext = malloc(sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT));
physicaldevicediscardrectanglepropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
physicaldevicediscardrectanglepropertiesext->pNext=___arg1;
physicaldevicediscardrectanglepropertiesext->maxDiscardRectangles=___arg2;
___return (physicaldevicediscardrectanglepropertiesext);"))
(begin-ffi
   (make-VkPipelineDiscardRectangleStateCreateInfoEXT
      ptr->VkPipelineDiscardRectangleStateCreateInfoEXT
      ref-VkPipelineDiscardRectangleStateCreateInfoEXT
      make-VkPipelineDiscardRectangleStateCreateInfoEXT*
      VkPipelineDiscardRectangleStateCreateInfoEXTpDiscardRectangles
      VkPipelineDiscardRectangleStateCreateInfoEXTdiscardRectangleCount
      VkPipelineDiscardRectangleStateCreateInfoEXTdiscardRectangleMode
      VkPipelineDiscardRectangleStateCreateInfoEXTflags
      VkPipelineDiscardRectangleStateCreateInfoEXTpNext
      VkPipelineDiscardRectangleStateCreateInfoEXTsType
      VkPipelineDiscardRectangleStateCreateInfoEXT
      VkPipelineDiscardRectangleStateCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineDiscardRectangleStateCreateInfoEXT
      (struct "VkPipelineDiscardRectangleStateCreateInfoEXT"))
   (c-define-type
      VkPipelineDiscardRectangleStateCreateInfoEXT*
      (pointer VkPipelineDiscardRectangleStateCreateInfoEXT))
   (define-c-lambda
      VkPipelineDiscardRectangleStateCreateInfoEXTsType
      (VkPipelineDiscardRectangleStateCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineDiscardRectangleStateCreateInfoEXTpNext
      (VkPipelineDiscardRectangleStateCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineDiscardRectangleStateCreateInfoEXTflags
      (VkPipelineDiscardRectangleStateCreateInfoEXT*)
      VkPipelineDiscardRectangleStateCreateFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineDiscardRectangleStateCreateInfoEXTdiscardRectangleMode
      (VkPipelineDiscardRectangleStateCreateInfoEXT*)
      VkDiscardRectangleModeEXT
      "___return (___arg1->discardRectangleMode);")
   (define-c-lambda
      VkPipelineDiscardRectangleStateCreateInfoEXTdiscardRectangleCount
      (VkPipelineDiscardRectangleStateCreateInfoEXT*)
      uint32_t
      "___return (___arg1->discardRectangleCount);")
   (define-c-lambda
      VkPipelineDiscardRectangleStateCreateInfoEXTpDiscardRectangles
      (VkPipelineDiscardRectangleStateCreateInfoEXT*)
      VkRect2D*
      "___return (___arg1->pDiscardRectangles);")
   (define-c-lambda
      make-VkPipelineDiscardRectangleStateCreateInfoEXT*
      (int)
      VkPipelineDiscardRectangleStateCreateInfoEXT*
      "VkPipelineDiscardRectangleStateCreateInfoEXT* vkpipelinediscardrectanglestatecreateinfoext = malloc(___arg1 * sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT));
      ___return (vkpipelinediscardrectanglestatecreateinfoext);")
   (define-c-lambda
      ref-VkPipelineDiscardRectangleStateCreateInfoEXT
      (VkPipelineDiscardRectangleStateCreateInfoEXT* int)
      VkPipelineDiscardRectangleStateCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineDiscardRectangleStateCreateInfoEXT
      ((pointer VkPipelineDiscardRectangleStateCreateInfoEXT))
      VkPipelineDiscardRectangleStateCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineDiscardRectangleStateCreateInfoEXT
      (void*
         VkPipelineDiscardRectangleStateCreateFlagsEXT
         VkDiscardRectangleModeEXT
         uint32_t
         VkRect2D*)
      VkPipelineDiscardRectangleStateCreateInfoEXT*
      "VkPipelineDiscardRectangleStateCreateInfoEXT *pipelinediscardrectanglestatecreateinfoext = malloc(sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT));
pipelinediscardrectanglestatecreateinfoext->sType=VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
pipelinediscardrectanglestatecreateinfoext->pNext=___arg1;
pipelinediscardrectanglestatecreateinfoext->flags=___arg2;
pipelinediscardrectanglestatecreateinfoext->discardRectangleMode=___arg3;
pipelinediscardrectanglestatecreateinfoext->discardRectangleCount=___arg4;
pipelinediscardrectanglestatecreateinfoext->pDiscardRectangles=___arg5;
___return (pipelinediscardrectanglestatecreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
      ptr->VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
      ref-VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
      make-VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXperViewPositionAllComponents
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXpNext
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXsType
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
      (struct "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"))
   (c-define-type
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*
      (pointer VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX))
   (define-c-lambda
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXsType
      (VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXpNext
      (VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXperViewPositionAllComponents
      (VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*)
      VkBool32
      "___return (___arg1->perViewPositionAllComponents);")
   (define-c-lambda
      make-VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*
      (int)
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*
      "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* vkphysicaldevicemultiviewperviewattributespropertiesnvx = malloc(___arg1 * sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX));
      ___return (vkphysicaldevicemultiviewperviewattributespropertiesnvx);")
   (define-c-lambda
      ref-VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
      (VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* int)
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
      ((pointer VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX))
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
      (void* VkBool32)
      VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*
      "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX *physicaldevicemultiviewperviewattributespropertiesnvx = malloc(sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX));
physicaldevicemultiviewperviewattributespropertiesnvx->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
physicaldevicemultiviewperviewattributespropertiesnvx->pNext=___arg1;
physicaldevicemultiviewperviewattributespropertiesnvx->perViewPositionAllComponents=___arg2;
___return (physicaldevicemultiviewperviewattributespropertiesnvx);"))
(begin-ffi
   (make-VkInputAttachmentAspectReference
      ptr->VkInputAttachmentAspectReference
      ref-VkInputAttachmentAspectReference
      make-VkInputAttachmentAspectReference*
      VkInputAttachmentAspectReferenceaspectMask
      VkInputAttachmentAspectReferenceinputAttachmentIndex
      VkInputAttachmentAspectReferencesubpass
      VkInputAttachmentAspectReference
      VkInputAttachmentAspectReference*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkInputAttachmentAspectReference
      (struct "VkInputAttachmentAspectReference"))
   (c-define-type
      VkInputAttachmentAspectReference*
      (pointer VkInputAttachmentAspectReference))
   (define-c-lambda
      VkInputAttachmentAspectReferencesubpass
      (VkInputAttachmentAspectReference*)
      uint32_t
      "___return (___arg1->subpass);")
   (define-c-lambda
      VkInputAttachmentAspectReferenceinputAttachmentIndex
      (VkInputAttachmentAspectReference*)
      uint32_t
      "___return (___arg1->inputAttachmentIndex);")
   (define-c-lambda
      VkInputAttachmentAspectReferenceaspectMask
      (VkInputAttachmentAspectReference*)
      VkImageAspectFlags
      "___return (___arg1->aspectMask);")
   (define-c-lambda
      make-VkInputAttachmentAspectReference*
      (int)
      VkInputAttachmentAspectReference*
      "VkInputAttachmentAspectReference* vkinputattachmentaspectreference = malloc(___arg1 * sizeof(VkInputAttachmentAspectReference));
      ___return (vkinputattachmentaspectreference);")
   (define-c-lambda
      ref-VkInputAttachmentAspectReference
      (VkInputAttachmentAspectReference* int)
      VkInputAttachmentAspectReference*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkInputAttachmentAspectReference
      ((pointer VkInputAttachmentAspectReference))
      VkInputAttachmentAspectReference
      "___return(*___arg1);")
   (define-c-lambda
      make-VkInputAttachmentAspectReference
      (uint32_t uint32_t VkImageAspectFlags)
      VkInputAttachmentAspectReference*
      "VkInputAttachmentAspectReference *inputattachmentaspectreference = malloc(sizeof(VkInputAttachmentAspectReference));
inputattachmentaspectreference->subpass=___arg1;
inputattachmentaspectreference->inputAttachmentIndex=___arg2;
inputattachmentaspectreference->aspectMask=___arg3;
___return (inputattachmentaspectreference);"))
(begin-ffi
   (make-VkInputAttachmentAspectReferenceKHR
      ptr->VkInputAttachmentAspectReferenceKHR
      ref-VkInputAttachmentAspectReferenceKHR
      make-VkInputAttachmentAspectReferenceKHR*
      VkInputAttachmentAspectReferenceKHR
      VkInputAttachmentAspectReferenceKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkInputAttachmentAspectReferenceKHR
      (struct "VkInputAttachmentAspectReferenceKHR"))
   (c-define-type
      VkInputAttachmentAspectReferenceKHR*
      (pointer VkInputAttachmentAspectReferenceKHR))
   (define-c-lambda
      make-VkInputAttachmentAspectReferenceKHR*
      (int)
      VkInputAttachmentAspectReferenceKHR*
      "VkInputAttachmentAspectReferenceKHR* vkinputattachmentaspectreferencekhr = malloc(___arg1 * sizeof(VkInputAttachmentAspectReferenceKHR));
      ___return (vkinputattachmentaspectreferencekhr);")
   (define-c-lambda
      make-VkInputAttachmentAspectReferenceKHR
      ()
      VkInputAttachmentAspectReferenceKHR*
      "VkInputAttachmentAspectReferenceKHR *inputattachmentaspectreferencekhr = malloc(sizeof(VkInputAttachmentAspectReferenceKHR));
___return (inputattachmentaspectreferencekhr);"))
(begin-ffi
   (make-VkRenderPassInputAttachmentAspectCreateInfo
      ptr->VkRenderPassInputAttachmentAspectCreateInfo
      ref-VkRenderPassInputAttachmentAspectCreateInfo
      make-VkRenderPassInputAttachmentAspectCreateInfo*
      VkRenderPassInputAttachmentAspectCreateInfopAspectReferences
      VkRenderPassInputAttachmentAspectCreateInfoaspectReferenceCount
      VkRenderPassInputAttachmentAspectCreateInfopNext
      VkRenderPassInputAttachmentAspectCreateInfosType
      VkRenderPassInputAttachmentAspectCreateInfo
      VkRenderPassInputAttachmentAspectCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkRenderPassInputAttachmentAspectCreateInfo
      (struct "VkRenderPassInputAttachmentAspectCreateInfo"))
   (c-define-type
      VkRenderPassInputAttachmentAspectCreateInfo*
      (pointer VkRenderPassInputAttachmentAspectCreateInfo))
   (define-c-lambda
      VkRenderPassInputAttachmentAspectCreateInfosType
      (VkRenderPassInputAttachmentAspectCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkRenderPassInputAttachmentAspectCreateInfopNext
      (VkRenderPassInputAttachmentAspectCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkRenderPassInputAttachmentAspectCreateInfoaspectReferenceCount
      (VkRenderPassInputAttachmentAspectCreateInfo*)
      uint32_t
      "___return (___arg1->aspectReferenceCount);")
   (define-c-lambda
      VkRenderPassInputAttachmentAspectCreateInfopAspectReferences
      (VkRenderPassInputAttachmentAspectCreateInfo*)
      VkInputAttachmentAspectReference*
      "___return (___arg1->pAspectReferences);")
   (define-c-lambda
      make-VkRenderPassInputAttachmentAspectCreateInfo*
      (int)
      VkRenderPassInputAttachmentAspectCreateInfo*
      "VkRenderPassInputAttachmentAspectCreateInfo* vkrenderpassinputattachmentaspectcreateinfo = malloc(___arg1 * sizeof(VkRenderPassInputAttachmentAspectCreateInfo));
      ___return (vkrenderpassinputattachmentaspectcreateinfo);")
   (define-c-lambda
      ref-VkRenderPassInputAttachmentAspectCreateInfo
      (VkRenderPassInputAttachmentAspectCreateInfo* int)
      VkRenderPassInputAttachmentAspectCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkRenderPassInputAttachmentAspectCreateInfo
      ((pointer VkRenderPassInputAttachmentAspectCreateInfo))
      VkRenderPassInputAttachmentAspectCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkRenderPassInputAttachmentAspectCreateInfo
      (void* uint32_t VkInputAttachmentAspectReference*)
      VkRenderPassInputAttachmentAspectCreateInfo*
      "VkRenderPassInputAttachmentAspectCreateInfo *renderpassinputattachmentaspectcreateinfo = malloc(sizeof(VkRenderPassInputAttachmentAspectCreateInfo));
renderpassinputattachmentaspectcreateinfo->sType=VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
renderpassinputattachmentaspectcreateinfo->pNext=___arg1;
renderpassinputattachmentaspectcreateinfo->aspectReferenceCount=___arg2;
renderpassinputattachmentaspectcreateinfo->pAspectReferences=___arg3;
___return (renderpassinputattachmentaspectcreateinfo);"))
(begin-ffi
   (make-VkRenderPassInputAttachmentAspectCreateInfoKHR
      ptr->VkRenderPassInputAttachmentAspectCreateInfoKHR
      ref-VkRenderPassInputAttachmentAspectCreateInfoKHR
      make-VkRenderPassInputAttachmentAspectCreateInfoKHR*
      VkRenderPassInputAttachmentAspectCreateInfoKHR
      VkRenderPassInputAttachmentAspectCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkRenderPassInputAttachmentAspectCreateInfoKHR
      (struct "VkRenderPassInputAttachmentAspectCreateInfoKHR"))
   (c-define-type
      VkRenderPassInputAttachmentAspectCreateInfoKHR*
      (pointer VkRenderPassInputAttachmentAspectCreateInfoKHR))
   (define-c-lambda
      make-VkRenderPassInputAttachmentAspectCreateInfoKHR*
      (int)
      VkRenderPassInputAttachmentAspectCreateInfoKHR*
      "VkRenderPassInputAttachmentAspectCreateInfoKHR* vkrenderpassinputattachmentaspectcreateinfokhr = malloc(___arg1 * sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR));
      ___return (vkrenderpassinputattachmentaspectcreateinfokhr);")
   (define-c-lambda
      make-VkRenderPassInputAttachmentAspectCreateInfoKHR
      ()
      VkRenderPassInputAttachmentAspectCreateInfoKHR*
      "VkRenderPassInputAttachmentAspectCreateInfoKHR *renderpassinputattachmentaspectcreateinfokhr = malloc(sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR));
___return (renderpassinputattachmentaspectcreateinfokhr);"))
(begin-ffi
   (make-VkPhysicalDeviceSurfaceInfo2KHR
      ptr->VkPhysicalDeviceSurfaceInfo2KHR
      ref-VkPhysicalDeviceSurfaceInfo2KHR
      make-VkPhysicalDeviceSurfaceInfo2KHR*
      VkPhysicalDeviceSurfaceInfo2KHRsurface
      VkPhysicalDeviceSurfaceInfo2KHRpNext
      VkPhysicalDeviceSurfaceInfo2KHRsType
      VkPhysicalDeviceSurfaceInfo2KHR
      VkPhysicalDeviceSurfaceInfo2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSurfaceInfo2KHR
      (struct "VkPhysicalDeviceSurfaceInfo2KHR"))
   (c-define-type
      VkPhysicalDeviceSurfaceInfo2KHR*
      (pointer VkPhysicalDeviceSurfaceInfo2KHR))
   (define-c-lambda
      VkPhysicalDeviceSurfaceInfo2KHRsType
      (VkPhysicalDeviceSurfaceInfo2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceSurfaceInfo2KHRpNext
      (VkPhysicalDeviceSurfaceInfo2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceSurfaceInfo2KHRsurface
      (VkPhysicalDeviceSurfaceInfo2KHR*)
      VkSurfaceKHR
      "___return (___arg1->surface);")
   (define-c-lambda
      make-VkPhysicalDeviceSurfaceInfo2KHR*
      (int)
      VkPhysicalDeviceSurfaceInfo2KHR*
      "VkPhysicalDeviceSurfaceInfo2KHR* vkphysicaldevicesurfaceinfo2khr = malloc(___arg1 * sizeof(VkPhysicalDeviceSurfaceInfo2KHR));
      ___return (vkphysicaldevicesurfaceinfo2khr);")
   (define-c-lambda
      ref-VkPhysicalDeviceSurfaceInfo2KHR
      (VkPhysicalDeviceSurfaceInfo2KHR* int)
      VkPhysicalDeviceSurfaceInfo2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDeviceSurfaceInfo2KHR
      (void* VkSurfaceKHR)
      VkPhysicalDeviceSurfaceInfo2KHR*
      "VkPhysicalDeviceSurfaceInfo2KHR *physicaldevicesurfaceinfo2khr = malloc(sizeof(VkPhysicalDeviceSurfaceInfo2KHR));
physicaldevicesurfaceinfo2khr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
physicaldevicesurfaceinfo2khr->pNext=___arg1;
physicaldevicesurfaceinfo2khr->surface=___arg2;
___return (physicaldevicesurfaceinfo2khr);"))
(begin-ffi
   (make-VkSurfaceCapabilities2KHR
      ptr->VkSurfaceCapabilities2KHR
      ref-VkSurfaceCapabilities2KHR
      make-VkSurfaceCapabilities2KHR*
      VkSurfaceCapabilities2KHRsurfaceCapabilities
      VkSurfaceCapabilities2KHRpNext
      VkSurfaceCapabilities2KHRsType
      VkSurfaceCapabilities2KHR
      VkSurfaceCapabilities2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSurfaceCapabilities2KHR (struct "VkSurfaceCapabilities2KHR"))
   (c-define-type VkSurfaceCapabilities2KHR* (pointer VkSurfaceCapabilities2KHR))
   (define-c-lambda
      VkSurfaceCapabilities2KHRsType
      (VkSurfaceCapabilities2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSurfaceCapabilities2KHRpNext
      (VkSurfaceCapabilities2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSurfaceCapabilities2KHRsurfaceCapabilities
      (VkSurfaceCapabilities2KHR*)
      VkSurfaceCapabilitiesKHR
      "___return (___arg1->surfaceCapabilities);")
   (define-c-lambda
      make-VkSurfaceCapabilities2KHR*
      (int)
      VkSurfaceCapabilities2KHR*
      "VkSurfaceCapabilities2KHR* vksurfacecapabilities2khr = malloc(___arg1 * sizeof(VkSurfaceCapabilities2KHR));
      ___return (vksurfacecapabilities2khr);")
   (define-c-lambda
      ref-VkSurfaceCapabilities2KHR
      (VkSurfaceCapabilities2KHR* int)
      VkSurfaceCapabilities2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSurfaceCapabilities2KHR
      (void* VkSurfaceCapabilitiesKHR)
      VkSurfaceCapabilities2KHR*
      "VkSurfaceCapabilities2KHR *surfacecapabilities2khr = malloc(sizeof(VkSurfaceCapabilities2KHR));
surfacecapabilities2khr->sType=VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR;
surfacecapabilities2khr->pNext=___arg1;
surfacecapabilities2khr->surfaceCapabilities=___arg2;
___return (surfacecapabilities2khr);"))
(begin-ffi
   (make-VkSurfaceFormat2KHR
      ptr->VkSurfaceFormat2KHR
      ref-VkSurfaceFormat2KHR
      make-VkSurfaceFormat2KHR*
      VkSurfaceFormat2KHRsurfaceFormat
      VkSurfaceFormat2KHRpNext
      VkSurfaceFormat2KHRsType
      VkSurfaceFormat2KHR
      VkSurfaceFormat2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSurfaceFormat2KHR (struct "VkSurfaceFormat2KHR"))
   (c-define-type VkSurfaceFormat2KHR* (pointer VkSurfaceFormat2KHR))
   (define-c-lambda
      VkSurfaceFormat2KHRsType
      (VkSurfaceFormat2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSurfaceFormat2KHRpNext
      (VkSurfaceFormat2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSurfaceFormat2KHRsurfaceFormat
      (VkSurfaceFormat2KHR*)
      VkSurfaceFormatKHR
      "___return (___arg1->surfaceFormat);")
   (define-c-lambda
      make-VkSurfaceFormat2KHR*
      (int)
      VkSurfaceFormat2KHR*
      "VkSurfaceFormat2KHR* vksurfaceformat2khr = malloc(___arg1 * sizeof(VkSurfaceFormat2KHR));
      ___return (vksurfaceformat2khr);")
   (define-c-lambda
      ref-VkSurfaceFormat2KHR
      (VkSurfaceFormat2KHR* int)
      VkSurfaceFormat2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSurfaceFormat2KHR
      (void* VkSurfaceFormatKHR)
      VkSurfaceFormat2KHR*
      "VkSurfaceFormat2KHR *surfaceformat2khr = malloc(sizeof(VkSurfaceFormat2KHR));
surfaceformat2khr->sType=VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR;
surfaceformat2khr->pNext=___arg1;
surfaceformat2khr->surfaceFormat=___arg2;
___return (surfaceformat2khr);"))
(begin-ffi
   (make-VkDisplayProperties2KHR
      ptr->VkDisplayProperties2KHR
      ref-VkDisplayProperties2KHR
      make-VkDisplayProperties2KHR*
      VkDisplayProperties2KHRdisplayProperties
      VkDisplayProperties2KHRpNext
      VkDisplayProperties2KHRsType
      VkDisplayProperties2KHR
      VkDisplayProperties2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayProperties2KHR (struct "VkDisplayProperties2KHR"))
   (c-define-type VkDisplayProperties2KHR* (pointer VkDisplayProperties2KHR))
   (define-c-lambda
      VkDisplayProperties2KHRsType
      (VkDisplayProperties2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplayProperties2KHRpNext
      (VkDisplayProperties2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplayProperties2KHRdisplayProperties
      (VkDisplayProperties2KHR*)
      VkDisplayPropertiesKHR
      "___return (___arg1->displayProperties);")
   (define-c-lambda
      make-VkDisplayProperties2KHR*
      (int)
      VkDisplayProperties2KHR*
      "VkDisplayProperties2KHR* vkdisplayproperties2khr = malloc(___arg1 * sizeof(VkDisplayProperties2KHR));
      ___return (vkdisplayproperties2khr);")
   (define-c-lambda
      ref-VkDisplayProperties2KHR
      (VkDisplayProperties2KHR* int)
      VkDisplayProperties2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayProperties2KHR
      (void* VkDisplayPropertiesKHR)
      VkDisplayProperties2KHR*
      "VkDisplayProperties2KHR *displayproperties2khr = malloc(sizeof(VkDisplayProperties2KHR));
displayproperties2khr->sType=VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR;
displayproperties2khr->pNext=___arg1;
displayproperties2khr->displayProperties=___arg2;
___return (displayproperties2khr);"))
(begin-ffi
   (make-VkDisplayPlaneProperties2KHR
      ptr->VkDisplayPlaneProperties2KHR
      ref-VkDisplayPlaneProperties2KHR
      make-VkDisplayPlaneProperties2KHR*
      VkDisplayPlaneProperties2KHRdisplayPlaneProperties
      VkDisplayPlaneProperties2KHRpNext
      VkDisplayPlaneProperties2KHRsType
      VkDisplayPlaneProperties2KHR
      VkDisplayPlaneProperties2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayPlaneProperties2KHR (struct "VkDisplayPlaneProperties2KHR"))
   (c-define-type VkDisplayPlaneProperties2KHR* (pointer VkDisplayPlaneProperties2KHR))
   (define-c-lambda
      VkDisplayPlaneProperties2KHRsType
      (VkDisplayPlaneProperties2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplayPlaneProperties2KHRpNext
      (VkDisplayPlaneProperties2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplayPlaneProperties2KHRdisplayPlaneProperties
      (VkDisplayPlaneProperties2KHR*)
      VkDisplayPlanePropertiesKHR
      "___return (___arg1->displayPlaneProperties);")
   (define-c-lambda
      make-VkDisplayPlaneProperties2KHR*
      (int)
      VkDisplayPlaneProperties2KHR*
      "VkDisplayPlaneProperties2KHR* vkdisplayplaneproperties2khr = malloc(___arg1 * sizeof(VkDisplayPlaneProperties2KHR));
      ___return (vkdisplayplaneproperties2khr);")
   (define-c-lambda
      ref-VkDisplayPlaneProperties2KHR
      (VkDisplayPlaneProperties2KHR* int)
      VkDisplayPlaneProperties2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayPlaneProperties2KHR
      (void* VkDisplayPlanePropertiesKHR)
      VkDisplayPlaneProperties2KHR*
      "VkDisplayPlaneProperties2KHR *displayplaneproperties2khr = malloc(sizeof(VkDisplayPlaneProperties2KHR));
displayplaneproperties2khr->sType=VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR;
displayplaneproperties2khr->pNext=___arg1;
displayplaneproperties2khr->displayPlaneProperties=___arg2;
___return (displayplaneproperties2khr);"))
(begin-ffi
   (make-VkDisplayModeProperties2KHR
      ptr->VkDisplayModeProperties2KHR
      ref-VkDisplayModeProperties2KHR
      make-VkDisplayModeProperties2KHR*
      VkDisplayModeProperties2KHRdisplayModeProperties
      VkDisplayModeProperties2KHRpNext
      VkDisplayModeProperties2KHRsType
      VkDisplayModeProperties2KHR
      VkDisplayModeProperties2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayModeProperties2KHR (struct "VkDisplayModeProperties2KHR"))
   (c-define-type VkDisplayModeProperties2KHR* (pointer VkDisplayModeProperties2KHR))
   (define-c-lambda
      VkDisplayModeProperties2KHRsType
      (VkDisplayModeProperties2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplayModeProperties2KHRpNext
      (VkDisplayModeProperties2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplayModeProperties2KHRdisplayModeProperties
      (VkDisplayModeProperties2KHR*)
      VkDisplayModePropertiesKHR
      "___return (___arg1->displayModeProperties);")
   (define-c-lambda
      make-VkDisplayModeProperties2KHR*
      (int)
      VkDisplayModeProperties2KHR*
      "VkDisplayModeProperties2KHR* vkdisplaymodeproperties2khr = malloc(___arg1 * sizeof(VkDisplayModeProperties2KHR));
      ___return (vkdisplaymodeproperties2khr);")
   (define-c-lambda
      ref-VkDisplayModeProperties2KHR
      (VkDisplayModeProperties2KHR* int)
      VkDisplayModeProperties2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayModeProperties2KHR
      (void* VkDisplayModePropertiesKHR)
      VkDisplayModeProperties2KHR*
      "VkDisplayModeProperties2KHR *displaymodeproperties2khr = malloc(sizeof(VkDisplayModeProperties2KHR));
displaymodeproperties2khr->sType=VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR;
displaymodeproperties2khr->pNext=___arg1;
displaymodeproperties2khr->displayModeProperties=___arg2;
___return (displaymodeproperties2khr);"))
(begin-ffi
   (make-VkDisplayPlaneInfo2KHR
      ptr->VkDisplayPlaneInfo2KHR
      ref-VkDisplayPlaneInfo2KHR
      make-VkDisplayPlaneInfo2KHR*
      VkDisplayPlaneInfo2KHRplaneIndex
      VkDisplayPlaneInfo2KHRmode
      VkDisplayPlaneInfo2KHRpNext
      VkDisplayPlaneInfo2KHRsType
      VkDisplayPlaneInfo2KHR
      VkDisplayPlaneInfo2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDisplayPlaneInfo2KHR (struct "VkDisplayPlaneInfo2KHR"))
   (c-define-type VkDisplayPlaneInfo2KHR* (pointer VkDisplayPlaneInfo2KHR))
   (define-c-lambda
      VkDisplayPlaneInfo2KHRsType
      (VkDisplayPlaneInfo2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplayPlaneInfo2KHRpNext
      (VkDisplayPlaneInfo2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplayPlaneInfo2KHRmode
      (VkDisplayPlaneInfo2KHR*)
      VkDisplayModeKHR
      "___return (___arg1->mode);")
   (define-c-lambda
      VkDisplayPlaneInfo2KHRplaneIndex
      (VkDisplayPlaneInfo2KHR*)
      uint32_t
      "___return (___arg1->planeIndex);")
   (define-c-lambda
      make-VkDisplayPlaneInfo2KHR*
      (int)
      VkDisplayPlaneInfo2KHR*
      "VkDisplayPlaneInfo2KHR* vkdisplayplaneinfo2khr = malloc(___arg1 * sizeof(VkDisplayPlaneInfo2KHR));
      ___return (vkdisplayplaneinfo2khr);")
   (define-c-lambda
      ref-VkDisplayPlaneInfo2KHR
      (VkDisplayPlaneInfo2KHR* int)
      VkDisplayPlaneInfo2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayPlaneInfo2KHR
      (void* VkDisplayModeKHR uint32_t)
      VkDisplayPlaneInfo2KHR*
      "VkDisplayPlaneInfo2KHR *displayplaneinfo2khr = malloc(sizeof(VkDisplayPlaneInfo2KHR));
displayplaneinfo2khr->sType=VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR;
displayplaneinfo2khr->pNext=___arg1;
displayplaneinfo2khr->mode=___arg2;
displayplaneinfo2khr->planeIndex=___arg3;
___return (displayplaneinfo2khr);"))
(begin-ffi
   (make-VkDisplayPlaneCapabilities2KHR
      ptr->VkDisplayPlaneCapabilities2KHR
      ref-VkDisplayPlaneCapabilities2KHR
      make-VkDisplayPlaneCapabilities2KHR*
      VkDisplayPlaneCapabilities2KHRcapabilities
      VkDisplayPlaneCapabilities2KHRpNext
      VkDisplayPlaneCapabilities2KHRsType
      VkDisplayPlaneCapabilities2KHR
      VkDisplayPlaneCapabilities2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDisplayPlaneCapabilities2KHR
      (struct "VkDisplayPlaneCapabilities2KHR"))
   (c-define-type
      VkDisplayPlaneCapabilities2KHR*
      (pointer VkDisplayPlaneCapabilities2KHR))
   (define-c-lambda
      VkDisplayPlaneCapabilities2KHRsType
      (VkDisplayPlaneCapabilities2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDisplayPlaneCapabilities2KHRpNext
      (VkDisplayPlaneCapabilities2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDisplayPlaneCapabilities2KHRcapabilities
      (VkDisplayPlaneCapabilities2KHR*)
      VkDisplayPlaneCapabilitiesKHR
      "___return (___arg1->capabilities);")
   (define-c-lambda
      make-VkDisplayPlaneCapabilities2KHR*
      (int)
      VkDisplayPlaneCapabilities2KHR*
      "VkDisplayPlaneCapabilities2KHR* vkdisplayplanecapabilities2khr = malloc(___arg1 * sizeof(VkDisplayPlaneCapabilities2KHR));
      ___return (vkdisplayplanecapabilities2khr);")
   (define-c-lambda
      ref-VkDisplayPlaneCapabilities2KHR
      (VkDisplayPlaneCapabilities2KHR* int)
      VkDisplayPlaneCapabilities2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkDisplayPlaneCapabilities2KHR
      (void* VkDisplayPlaneCapabilitiesKHR)
      VkDisplayPlaneCapabilities2KHR*
      "VkDisplayPlaneCapabilities2KHR *displayplanecapabilities2khr = malloc(sizeof(VkDisplayPlaneCapabilities2KHR));
displayplanecapabilities2khr->sType=VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR;
displayplanecapabilities2khr->pNext=___arg1;
displayplanecapabilities2khr->capabilities=___arg2;
___return (displayplanecapabilities2khr);"))
(begin-ffi
   (make-VkSharedPresentSurfaceCapabilitiesKHR
      ptr->VkSharedPresentSurfaceCapabilitiesKHR
      ref-VkSharedPresentSurfaceCapabilitiesKHR
      make-VkSharedPresentSurfaceCapabilitiesKHR*
      VkSharedPresentSurfaceCapabilitiesKHRsharedPresentSupportedUsageFlags
      VkSharedPresentSurfaceCapabilitiesKHRpNext
      VkSharedPresentSurfaceCapabilitiesKHRsType
      VkSharedPresentSurfaceCapabilitiesKHR
      VkSharedPresentSurfaceCapabilitiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSharedPresentSurfaceCapabilitiesKHR
      (struct "VkSharedPresentSurfaceCapabilitiesKHR"))
   (c-define-type
      VkSharedPresentSurfaceCapabilitiesKHR*
      (pointer VkSharedPresentSurfaceCapabilitiesKHR))
   (define-c-lambda
      VkSharedPresentSurfaceCapabilitiesKHRsType
      (VkSharedPresentSurfaceCapabilitiesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSharedPresentSurfaceCapabilitiesKHRpNext
      (VkSharedPresentSurfaceCapabilitiesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSharedPresentSurfaceCapabilitiesKHRsharedPresentSupportedUsageFlags
      (VkSharedPresentSurfaceCapabilitiesKHR*)
      VkImageUsageFlags
      "___return (___arg1->sharedPresentSupportedUsageFlags);")
   (define-c-lambda
      make-VkSharedPresentSurfaceCapabilitiesKHR*
      (int)
      VkSharedPresentSurfaceCapabilitiesKHR*
      "VkSharedPresentSurfaceCapabilitiesKHR* vksharedpresentsurfacecapabilitieskhr = malloc(___arg1 * sizeof(VkSharedPresentSurfaceCapabilitiesKHR));
      ___return (vksharedpresentsurfacecapabilitieskhr);")
   (define-c-lambda
      ref-VkSharedPresentSurfaceCapabilitiesKHR
      (VkSharedPresentSurfaceCapabilitiesKHR* int)
      VkSharedPresentSurfaceCapabilitiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSharedPresentSurfaceCapabilitiesKHR
      (void* VkImageUsageFlags)
      VkSharedPresentSurfaceCapabilitiesKHR*
      "VkSharedPresentSurfaceCapabilitiesKHR *sharedpresentsurfacecapabilitieskhr = malloc(sizeof(VkSharedPresentSurfaceCapabilitiesKHR));
sharedpresentsurfacecapabilitieskhr->sType=VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
sharedpresentsurfacecapabilitieskhr->pNext=___arg1;
sharedpresentsurfacecapabilitieskhr->sharedPresentSupportedUsageFlags=___arg2;
___return (sharedpresentsurfacecapabilitieskhr);"))
(begin-ffi
   (make-VkPhysicalDevice16BitStorageFeatures
      ptr->VkPhysicalDevice16BitStorageFeatures
      ref-VkPhysicalDevice16BitStorageFeatures
      make-VkPhysicalDevice16BitStorageFeatures*
      VkPhysicalDevice16BitStorageFeaturesstorageInputOutput16
      VkPhysicalDevice16BitStorageFeaturesstoragePushConstant16
      VkPhysicalDevice16BitStorageFeaturesuniformAndStorageBuffer16BitAccess
      VkPhysicalDevice16BitStorageFeaturesstorageBuffer16BitAccess
      VkPhysicalDevice16BitStorageFeaturespNext
      VkPhysicalDevice16BitStorageFeaturessType
      VkPhysicalDevice16BitStorageFeatures
      VkPhysicalDevice16BitStorageFeatures*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDevice16BitStorageFeatures
      (struct "VkPhysicalDevice16BitStorageFeatures"))
   (c-define-type
      VkPhysicalDevice16BitStorageFeatures*
      (pointer VkPhysicalDevice16BitStorageFeatures))
   (define-c-lambda
      VkPhysicalDevice16BitStorageFeaturessType
      (VkPhysicalDevice16BitStorageFeatures*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDevice16BitStorageFeaturespNext
      (VkPhysicalDevice16BitStorageFeatures*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDevice16BitStorageFeaturesstorageBuffer16BitAccess
      (VkPhysicalDevice16BitStorageFeatures*)
      VkBool32
      "___return (___arg1->storageBuffer16BitAccess);")
   (define-c-lambda
      VkPhysicalDevice16BitStorageFeaturesuniformAndStorageBuffer16BitAccess
      (VkPhysicalDevice16BitStorageFeatures*)
      VkBool32
      "___return (___arg1->uniformAndStorageBuffer16BitAccess);")
   (define-c-lambda
      VkPhysicalDevice16BitStorageFeaturesstoragePushConstant16
      (VkPhysicalDevice16BitStorageFeatures*)
      VkBool32
      "___return (___arg1->storagePushConstant16);")
   (define-c-lambda
      VkPhysicalDevice16BitStorageFeaturesstorageInputOutput16
      (VkPhysicalDevice16BitStorageFeatures*)
      VkBool32
      "___return (___arg1->storageInputOutput16);")
   (define-c-lambda
      make-VkPhysicalDevice16BitStorageFeatures*
      (int)
      VkPhysicalDevice16BitStorageFeatures*
      "VkPhysicalDevice16BitStorageFeatures* vkphysicaldevice16bitstoragefeatures = malloc(___arg1 * sizeof(VkPhysicalDevice16BitStorageFeatures));
      ___return (vkphysicaldevice16bitstoragefeatures);")
   (define-c-lambda
      ref-VkPhysicalDevice16BitStorageFeatures
      (VkPhysicalDevice16BitStorageFeatures* int)
      VkPhysicalDevice16BitStorageFeatures*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDevice16BitStorageFeatures
      ((pointer VkPhysicalDevice16BitStorageFeatures))
      VkPhysicalDevice16BitStorageFeatures
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDevice16BitStorageFeatures
      (void* VkBool32 VkBool32 VkBool32 VkBool32)
      VkPhysicalDevice16BitStorageFeatures*
      "VkPhysicalDevice16BitStorageFeatures *physicaldevice16bitstoragefeatures = malloc(sizeof(VkPhysicalDevice16BitStorageFeatures));
physicaldevice16bitstoragefeatures->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
physicaldevice16bitstoragefeatures->pNext=___arg1;
physicaldevice16bitstoragefeatures->storageBuffer16BitAccess=___arg2;
physicaldevice16bitstoragefeatures->uniformAndStorageBuffer16BitAccess=___arg3;
physicaldevice16bitstoragefeatures->storagePushConstant16=___arg4;
physicaldevice16bitstoragefeatures->storageInputOutput16=___arg5;
___return (physicaldevice16bitstoragefeatures);"))
(begin-ffi
   (make-VkPhysicalDevice16BitStorageFeaturesKHR
      ptr->VkPhysicalDevice16BitStorageFeaturesKHR
      ref-VkPhysicalDevice16BitStorageFeaturesKHR
      make-VkPhysicalDevice16BitStorageFeaturesKHR*
      VkPhysicalDevice16BitStorageFeaturesKHR
      VkPhysicalDevice16BitStorageFeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDevice16BitStorageFeaturesKHR
      (struct "VkPhysicalDevice16BitStorageFeaturesKHR"))
   (c-define-type
      VkPhysicalDevice16BitStorageFeaturesKHR*
      (pointer VkPhysicalDevice16BitStorageFeaturesKHR))
   (define-c-lambda
      make-VkPhysicalDevice16BitStorageFeaturesKHR*
      (int)
      VkPhysicalDevice16BitStorageFeaturesKHR*
      "VkPhysicalDevice16BitStorageFeaturesKHR* vkphysicaldevice16bitstoragefeatureskhr = malloc(___arg1 * sizeof(VkPhysicalDevice16BitStorageFeaturesKHR));
      ___return (vkphysicaldevice16bitstoragefeatureskhr);")
   (define-c-lambda
      make-VkPhysicalDevice16BitStorageFeaturesKHR
      ()
      VkPhysicalDevice16BitStorageFeaturesKHR*
      "VkPhysicalDevice16BitStorageFeaturesKHR *physicaldevice16bitstoragefeatureskhr = malloc(sizeof(VkPhysicalDevice16BitStorageFeaturesKHR));
___return (physicaldevice16bitstoragefeatureskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceSubgroupProperties
      ptr->VkPhysicalDeviceSubgroupProperties
      ref-VkPhysicalDeviceSubgroupProperties
      make-VkPhysicalDeviceSubgroupProperties*
      VkPhysicalDeviceSubgroupPropertiesquadOperationsInAllStages
      VkPhysicalDeviceSubgroupPropertiessupportedOperations
      VkPhysicalDeviceSubgroupPropertiessupportedStages
      VkPhysicalDeviceSubgroupPropertiessubgroupSize
      VkPhysicalDeviceSubgroupPropertiespNext
      VkPhysicalDeviceSubgroupPropertiessType
      VkPhysicalDeviceSubgroupProperties
      VkPhysicalDeviceSubgroupProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSubgroupProperties
      (struct "VkPhysicalDeviceSubgroupProperties"))
   (c-define-type
      VkPhysicalDeviceSubgroupProperties*
      (pointer VkPhysicalDeviceSubgroupProperties))
   (define-c-lambda
      VkPhysicalDeviceSubgroupPropertiessType
      (VkPhysicalDeviceSubgroupProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupPropertiespNext
      (VkPhysicalDeviceSubgroupProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupPropertiessubgroupSize
      (VkPhysicalDeviceSubgroupProperties*)
      uint32_t
      "___return (___arg1->subgroupSize);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupPropertiessupportedStages
      (VkPhysicalDeviceSubgroupProperties*)
      VkShaderStageFlags
      "___return (___arg1->supportedStages);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupPropertiessupportedOperations
      (VkPhysicalDeviceSubgroupProperties*)
      VkSubgroupFeatureFlags
      "___return (___arg1->supportedOperations);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupPropertiesquadOperationsInAllStages
      (VkPhysicalDeviceSubgroupProperties*)
      VkBool32
      "___return (___arg1->quadOperationsInAllStages);")
   (define-c-lambda
      make-VkPhysicalDeviceSubgroupProperties*
      (int)
      VkPhysicalDeviceSubgroupProperties*
      "VkPhysicalDeviceSubgroupProperties* vkphysicaldevicesubgroupproperties = malloc(___arg1 * sizeof(VkPhysicalDeviceSubgroupProperties));
      ___return (vkphysicaldevicesubgroupproperties);")
   (define-c-lambda
      ref-VkPhysicalDeviceSubgroupProperties
      (VkPhysicalDeviceSubgroupProperties* int)
      VkPhysicalDeviceSubgroupProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceSubgroupProperties
      ((pointer VkPhysicalDeviceSubgroupProperties))
      VkPhysicalDeviceSubgroupProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceSubgroupProperties
      (void* uint32_t VkShaderStageFlags VkSubgroupFeatureFlags VkBool32)
      VkPhysicalDeviceSubgroupProperties*
      "VkPhysicalDeviceSubgroupProperties *physicaldevicesubgroupproperties = malloc(sizeof(VkPhysicalDeviceSubgroupProperties));
physicaldevicesubgroupproperties->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
physicaldevicesubgroupproperties->pNext=___arg1;
physicaldevicesubgroupproperties->subgroupSize=___arg2;
physicaldevicesubgroupproperties->supportedStages=___arg3;
physicaldevicesubgroupproperties->supportedOperations=___arg4;
physicaldevicesubgroupproperties->quadOperationsInAllStages=___arg5;
___return (physicaldevicesubgroupproperties);"))
(begin-ffi
   (make-VkBufferMemoryRequirementsInfo2
      ptr->VkBufferMemoryRequirementsInfo2
      ref-VkBufferMemoryRequirementsInfo2
      make-VkBufferMemoryRequirementsInfo2*
      VkBufferMemoryRequirementsInfo2buffer
      VkBufferMemoryRequirementsInfo2pNext
      VkBufferMemoryRequirementsInfo2sType
      VkBufferMemoryRequirementsInfo2
      VkBufferMemoryRequirementsInfo2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkBufferMemoryRequirementsInfo2
      (struct "VkBufferMemoryRequirementsInfo2"))
   (c-define-type
      VkBufferMemoryRequirementsInfo2*
      (pointer VkBufferMemoryRequirementsInfo2))
   (define-c-lambda
      VkBufferMemoryRequirementsInfo2sType
      (VkBufferMemoryRequirementsInfo2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBufferMemoryRequirementsInfo2pNext
      (VkBufferMemoryRequirementsInfo2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBufferMemoryRequirementsInfo2buffer
      (VkBufferMemoryRequirementsInfo2*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      make-VkBufferMemoryRequirementsInfo2*
      (int)
      VkBufferMemoryRequirementsInfo2*
      "VkBufferMemoryRequirementsInfo2* vkbuffermemoryrequirementsinfo2 = malloc(___arg1 * sizeof(VkBufferMemoryRequirementsInfo2));
      ___return (vkbuffermemoryrequirementsinfo2);")
   (define-c-lambda
      ref-VkBufferMemoryRequirementsInfo2
      (VkBufferMemoryRequirementsInfo2* int)
      VkBufferMemoryRequirementsInfo2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBufferMemoryRequirementsInfo2
      ((pointer VkBufferMemoryRequirementsInfo2))
      VkBufferMemoryRequirementsInfo2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBufferMemoryRequirementsInfo2
      (void* VkBuffer)
      VkBufferMemoryRequirementsInfo2*
      "VkBufferMemoryRequirementsInfo2 *buffermemoryrequirementsinfo2 = malloc(sizeof(VkBufferMemoryRequirementsInfo2));
buffermemoryrequirementsinfo2->sType=VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
buffermemoryrequirementsinfo2->pNext=___arg1;
buffermemoryrequirementsinfo2->buffer=___arg2;
___return (buffermemoryrequirementsinfo2);"))
(begin-ffi
   (make-VkBufferMemoryRequirementsInfo2KHR
      ptr->VkBufferMemoryRequirementsInfo2KHR
      ref-VkBufferMemoryRequirementsInfo2KHR
      make-VkBufferMemoryRequirementsInfo2KHR*
      VkBufferMemoryRequirementsInfo2KHR
      VkBufferMemoryRequirementsInfo2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkBufferMemoryRequirementsInfo2KHR
      (struct "VkBufferMemoryRequirementsInfo2KHR"))
   (c-define-type
      VkBufferMemoryRequirementsInfo2KHR*
      (pointer VkBufferMemoryRequirementsInfo2KHR))
   (define-c-lambda
      make-VkBufferMemoryRequirementsInfo2KHR*
      (int)
      VkBufferMemoryRequirementsInfo2KHR*
      "VkBufferMemoryRequirementsInfo2KHR* vkbuffermemoryrequirementsinfo2khr = malloc(___arg1 * sizeof(VkBufferMemoryRequirementsInfo2KHR));
      ___return (vkbuffermemoryrequirementsinfo2khr);")
   (define-c-lambda
      make-VkBufferMemoryRequirementsInfo2KHR
      ()
      VkBufferMemoryRequirementsInfo2KHR*
      "VkBufferMemoryRequirementsInfo2KHR *buffermemoryrequirementsinfo2khr = malloc(sizeof(VkBufferMemoryRequirementsInfo2KHR));
___return (buffermemoryrequirementsinfo2khr);"))
(begin-ffi
   (make-VkImageMemoryRequirementsInfo2
      ptr->VkImageMemoryRequirementsInfo2
      ref-VkImageMemoryRequirementsInfo2
      make-VkImageMemoryRequirementsInfo2*
      VkImageMemoryRequirementsInfo2image
      VkImageMemoryRequirementsInfo2pNext
      VkImageMemoryRequirementsInfo2sType
      VkImageMemoryRequirementsInfo2
      VkImageMemoryRequirementsInfo2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImageMemoryRequirementsInfo2
      (struct "VkImageMemoryRequirementsInfo2"))
   (c-define-type
      VkImageMemoryRequirementsInfo2*
      (pointer VkImageMemoryRequirementsInfo2))
   (define-c-lambda
      VkImageMemoryRequirementsInfo2sType
      (VkImageMemoryRequirementsInfo2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageMemoryRequirementsInfo2pNext
      (VkImageMemoryRequirementsInfo2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageMemoryRequirementsInfo2image
      (VkImageMemoryRequirementsInfo2*)
      VkImage
      "___return (___arg1->image);")
   (define-c-lambda
      make-VkImageMemoryRequirementsInfo2*
      (int)
      VkImageMemoryRequirementsInfo2*
      "VkImageMemoryRequirementsInfo2* vkimagememoryrequirementsinfo2 = malloc(___arg1 * sizeof(VkImageMemoryRequirementsInfo2));
      ___return (vkimagememoryrequirementsinfo2);")
   (define-c-lambda
      ref-VkImageMemoryRequirementsInfo2
      (VkImageMemoryRequirementsInfo2* int)
      VkImageMemoryRequirementsInfo2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageMemoryRequirementsInfo2
      ((pointer VkImageMemoryRequirementsInfo2))
      VkImageMemoryRequirementsInfo2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageMemoryRequirementsInfo2
      (void* VkImage)
      VkImageMemoryRequirementsInfo2*
      "VkImageMemoryRequirementsInfo2 *imagememoryrequirementsinfo2 = malloc(sizeof(VkImageMemoryRequirementsInfo2));
imagememoryrequirementsinfo2->sType=VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
imagememoryrequirementsinfo2->pNext=___arg1;
imagememoryrequirementsinfo2->image=___arg2;
___return (imagememoryrequirementsinfo2);"))
(begin-ffi
   (make-VkImageMemoryRequirementsInfo2KHR
      ptr->VkImageMemoryRequirementsInfo2KHR
      ref-VkImageMemoryRequirementsInfo2KHR
      make-VkImageMemoryRequirementsInfo2KHR*
      VkImageMemoryRequirementsInfo2KHR
      VkImageMemoryRequirementsInfo2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImageMemoryRequirementsInfo2KHR
      (struct "VkImageMemoryRequirementsInfo2KHR"))
   (c-define-type
      VkImageMemoryRequirementsInfo2KHR*
      (pointer VkImageMemoryRequirementsInfo2KHR))
   (define-c-lambda
      make-VkImageMemoryRequirementsInfo2KHR*
      (int)
      VkImageMemoryRequirementsInfo2KHR*
      "VkImageMemoryRequirementsInfo2KHR* vkimagememoryrequirementsinfo2khr = malloc(___arg1 * sizeof(VkImageMemoryRequirementsInfo2KHR));
      ___return (vkimagememoryrequirementsinfo2khr);")
   (define-c-lambda
      make-VkImageMemoryRequirementsInfo2KHR
      ()
      VkImageMemoryRequirementsInfo2KHR*
      "VkImageMemoryRequirementsInfo2KHR *imagememoryrequirementsinfo2khr = malloc(sizeof(VkImageMemoryRequirementsInfo2KHR));
___return (imagememoryrequirementsinfo2khr);"))
(begin-ffi
   (make-VkImageSparseMemoryRequirementsInfo2
      ptr->VkImageSparseMemoryRequirementsInfo2
      ref-VkImageSparseMemoryRequirementsInfo2
      make-VkImageSparseMemoryRequirementsInfo2*
      VkImageSparseMemoryRequirementsInfo2image
      VkImageSparseMemoryRequirementsInfo2pNext
      VkImageSparseMemoryRequirementsInfo2sType
      VkImageSparseMemoryRequirementsInfo2
      VkImageSparseMemoryRequirementsInfo2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImageSparseMemoryRequirementsInfo2
      (struct "VkImageSparseMemoryRequirementsInfo2"))
   (c-define-type
      VkImageSparseMemoryRequirementsInfo2*
      (pointer VkImageSparseMemoryRequirementsInfo2))
   (define-c-lambda
      VkImageSparseMemoryRequirementsInfo2sType
      (VkImageSparseMemoryRequirementsInfo2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageSparseMemoryRequirementsInfo2pNext
      (VkImageSparseMemoryRequirementsInfo2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageSparseMemoryRequirementsInfo2image
      (VkImageSparseMemoryRequirementsInfo2*)
      VkImage
      "___return (___arg1->image);")
   (define-c-lambda
      make-VkImageSparseMemoryRequirementsInfo2*
      (int)
      VkImageSparseMemoryRequirementsInfo2*
      "VkImageSparseMemoryRequirementsInfo2* vkimagesparsememoryrequirementsinfo2 = malloc(___arg1 * sizeof(VkImageSparseMemoryRequirementsInfo2));
      ___return (vkimagesparsememoryrequirementsinfo2);")
   (define-c-lambda
      ref-VkImageSparseMemoryRequirementsInfo2
      (VkImageSparseMemoryRequirementsInfo2* int)
      VkImageSparseMemoryRequirementsInfo2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageSparseMemoryRequirementsInfo2
      ((pointer VkImageSparseMemoryRequirementsInfo2))
      VkImageSparseMemoryRequirementsInfo2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageSparseMemoryRequirementsInfo2
      (void* VkImage)
      VkImageSparseMemoryRequirementsInfo2*
      "VkImageSparseMemoryRequirementsInfo2 *imagesparsememoryrequirementsinfo2 = malloc(sizeof(VkImageSparseMemoryRequirementsInfo2));
imagesparsememoryrequirementsinfo2->sType=VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
imagesparsememoryrequirementsinfo2->pNext=___arg1;
imagesparsememoryrequirementsinfo2->image=___arg2;
___return (imagesparsememoryrequirementsinfo2);"))
(begin-ffi
   (make-VkImageSparseMemoryRequirementsInfo2KHR
      ptr->VkImageSparseMemoryRequirementsInfo2KHR
      ref-VkImageSparseMemoryRequirementsInfo2KHR
      make-VkImageSparseMemoryRequirementsInfo2KHR*
      VkImageSparseMemoryRequirementsInfo2KHR
      VkImageSparseMemoryRequirementsInfo2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImageSparseMemoryRequirementsInfo2KHR
      (struct "VkImageSparseMemoryRequirementsInfo2KHR"))
   (c-define-type
      VkImageSparseMemoryRequirementsInfo2KHR*
      (pointer VkImageSparseMemoryRequirementsInfo2KHR))
   (define-c-lambda
      make-VkImageSparseMemoryRequirementsInfo2KHR*
      (int)
      VkImageSparseMemoryRequirementsInfo2KHR*
      "VkImageSparseMemoryRequirementsInfo2KHR* vkimagesparsememoryrequirementsinfo2khr = malloc(___arg1 * sizeof(VkImageSparseMemoryRequirementsInfo2KHR));
      ___return (vkimagesparsememoryrequirementsinfo2khr);")
   (define-c-lambda
      make-VkImageSparseMemoryRequirementsInfo2KHR
      ()
      VkImageSparseMemoryRequirementsInfo2KHR*
      "VkImageSparseMemoryRequirementsInfo2KHR *imagesparsememoryrequirementsinfo2khr = malloc(sizeof(VkImageSparseMemoryRequirementsInfo2KHR));
___return (imagesparsememoryrequirementsinfo2khr);"))
(begin-ffi
   (make-VkMemoryRequirements2
      ptr->VkMemoryRequirements2
      ref-VkMemoryRequirements2
      make-VkMemoryRequirements2*
      VkMemoryRequirements2memoryRequirements
      VkMemoryRequirements2pNext
      VkMemoryRequirements2sType
      VkMemoryRequirements2
      VkMemoryRequirements2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryRequirements2 (struct "VkMemoryRequirements2"))
   (c-define-type VkMemoryRequirements2* (pointer VkMemoryRequirements2))
   (define-c-lambda
      VkMemoryRequirements2sType
      (VkMemoryRequirements2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMemoryRequirements2pNext
      (VkMemoryRequirements2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMemoryRequirements2memoryRequirements
      (VkMemoryRequirements2*)
      VkMemoryRequirements
      "___return (___arg1->memoryRequirements);")
   (define-c-lambda
      make-VkMemoryRequirements2*
      (int)
      VkMemoryRequirements2*
      "VkMemoryRequirements2* vkmemoryrequirements2 = malloc(___arg1 * sizeof(VkMemoryRequirements2));
      ___return (vkmemoryrequirements2);")
   (define-c-lambda
      ref-VkMemoryRequirements2
      (VkMemoryRequirements2* int)
      VkMemoryRequirements2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryRequirements2
      ((pointer VkMemoryRequirements2))
      VkMemoryRequirements2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryRequirements2
      (void* VkMemoryRequirements)
      VkMemoryRequirements2*
      "VkMemoryRequirements2 *memoryrequirements2 = malloc(sizeof(VkMemoryRequirements2));
memoryrequirements2->sType=VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
memoryrequirements2->pNext=___arg1;
memoryrequirements2->memoryRequirements=___arg2;
___return (memoryrequirements2);"))
(begin-ffi
   (make-VkMemoryRequirements2KHR
      ptr->VkMemoryRequirements2KHR
      ref-VkMemoryRequirements2KHR
      make-VkMemoryRequirements2KHR*
      VkMemoryRequirements2KHR
      VkMemoryRequirements2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryRequirements2KHR (struct "VkMemoryRequirements2KHR"))
   (c-define-type VkMemoryRequirements2KHR* (pointer VkMemoryRequirements2KHR))
   (define-c-lambda
      make-VkMemoryRequirements2KHR*
      (int)
      VkMemoryRequirements2KHR*
      "VkMemoryRequirements2KHR* vkmemoryrequirements2khr = malloc(___arg1 * sizeof(VkMemoryRequirements2KHR));
      ___return (vkmemoryrequirements2khr);")
   (define-c-lambda
      make-VkMemoryRequirements2KHR
      ()
      VkMemoryRequirements2KHR*
      "VkMemoryRequirements2KHR *memoryrequirements2khr = malloc(sizeof(VkMemoryRequirements2KHR));
___return (memoryrequirements2khr);"))
(begin-ffi
   (make-VkSparseImageMemoryRequirements2
      ptr->VkSparseImageMemoryRequirements2
      ref-VkSparseImageMemoryRequirements2
      make-VkSparseImageMemoryRequirements2*
      VkSparseImageMemoryRequirements2memoryRequirements
      VkSparseImageMemoryRequirements2pNext
      VkSparseImageMemoryRequirements2sType
      VkSparseImageMemoryRequirements2
      VkSparseImageMemoryRequirements2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSparseImageMemoryRequirements2
      (struct "VkSparseImageMemoryRequirements2"))
   (c-define-type
      VkSparseImageMemoryRequirements2*
      (pointer VkSparseImageMemoryRequirements2))
   (define-c-lambda
      VkSparseImageMemoryRequirements2sType
      (VkSparseImageMemoryRequirements2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSparseImageMemoryRequirements2pNext
      (VkSparseImageMemoryRequirements2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSparseImageMemoryRequirements2memoryRequirements
      (VkSparseImageMemoryRequirements2*)
      VkSparseImageMemoryRequirements
      "___return (___arg1->memoryRequirements);")
   (define-c-lambda
      make-VkSparseImageMemoryRequirements2*
      (int)
      VkSparseImageMemoryRequirements2*
      "VkSparseImageMemoryRequirements2* vksparseimagememoryrequirements2 = malloc(___arg1 * sizeof(VkSparseImageMemoryRequirements2));
      ___return (vksparseimagememoryrequirements2);")
   (define-c-lambda
      ref-VkSparseImageMemoryRequirements2
      (VkSparseImageMemoryRequirements2* int)
      VkSparseImageMemoryRequirements2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSparseImageMemoryRequirements2
      ((pointer VkSparseImageMemoryRequirements2))
      VkSparseImageMemoryRequirements2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSparseImageMemoryRequirements2
      (void* VkSparseImageMemoryRequirements)
      VkSparseImageMemoryRequirements2*
      "VkSparseImageMemoryRequirements2 *sparseimagememoryrequirements2 = malloc(sizeof(VkSparseImageMemoryRequirements2));
sparseimagememoryrequirements2->sType=VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
sparseimagememoryrequirements2->pNext=___arg1;
sparseimagememoryrequirements2->memoryRequirements=___arg2;
___return (sparseimagememoryrequirements2);"))
(begin-ffi
   (make-VkSparseImageMemoryRequirements2KHR
      ptr->VkSparseImageMemoryRequirements2KHR
      ref-VkSparseImageMemoryRequirements2KHR
      make-VkSparseImageMemoryRequirements2KHR*
      VkSparseImageMemoryRequirements2KHR
      VkSparseImageMemoryRequirements2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSparseImageMemoryRequirements2KHR
      (struct "VkSparseImageMemoryRequirements2KHR"))
   (c-define-type
      VkSparseImageMemoryRequirements2KHR*
      (pointer VkSparseImageMemoryRequirements2KHR))
   (define-c-lambda
      make-VkSparseImageMemoryRequirements2KHR*
      (int)
      VkSparseImageMemoryRequirements2KHR*
      "VkSparseImageMemoryRequirements2KHR* vksparseimagememoryrequirements2khr = malloc(___arg1 * sizeof(VkSparseImageMemoryRequirements2KHR));
      ___return (vksparseimagememoryrequirements2khr);")
   (define-c-lambda
      make-VkSparseImageMemoryRequirements2KHR
      ()
      VkSparseImageMemoryRequirements2KHR*
      "VkSparseImageMemoryRequirements2KHR *sparseimagememoryrequirements2khr = malloc(sizeof(VkSparseImageMemoryRequirements2KHR));
___return (sparseimagememoryrequirements2khr);"))
(begin-ffi
   (make-VkPhysicalDevicePointClippingProperties
      ptr->VkPhysicalDevicePointClippingProperties
      ref-VkPhysicalDevicePointClippingProperties
      make-VkPhysicalDevicePointClippingProperties*
      VkPhysicalDevicePointClippingPropertiespointClippingBehavior
      VkPhysicalDevicePointClippingPropertiespNext
      VkPhysicalDevicePointClippingPropertiessType
      VkPhysicalDevicePointClippingProperties
      VkPhysicalDevicePointClippingProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDevicePointClippingProperties
      (struct "VkPhysicalDevicePointClippingProperties"))
   (c-define-type
      VkPhysicalDevicePointClippingProperties*
      (pointer VkPhysicalDevicePointClippingProperties))
   (define-c-lambda
      VkPhysicalDevicePointClippingPropertiessType
      (VkPhysicalDevicePointClippingProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDevicePointClippingPropertiespNext
      (VkPhysicalDevicePointClippingProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDevicePointClippingPropertiespointClippingBehavior
      (VkPhysicalDevicePointClippingProperties*)
      VkPointClippingBehavior
      "___return (___arg1->pointClippingBehavior);")
   (define-c-lambda
      make-VkPhysicalDevicePointClippingProperties*
      (int)
      VkPhysicalDevicePointClippingProperties*
      "VkPhysicalDevicePointClippingProperties* vkphysicaldevicepointclippingproperties = malloc(___arg1 * sizeof(VkPhysicalDevicePointClippingProperties));
      ___return (vkphysicaldevicepointclippingproperties);")
   (define-c-lambda
      ref-VkPhysicalDevicePointClippingProperties
      (VkPhysicalDevicePointClippingProperties* int)
      VkPhysicalDevicePointClippingProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDevicePointClippingProperties
      ((pointer VkPhysicalDevicePointClippingProperties))
      VkPhysicalDevicePointClippingProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDevicePointClippingProperties
      (void* VkPointClippingBehavior)
      VkPhysicalDevicePointClippingProperties*
      "VkPhysicalDevicePointClippingProperties *physicaldevicepointclippingproperties = malloc(sizeof(VkPhysicalDevicePointClippingProperties));
physicaldevicepointclippingproperties->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
physicaldevicepointclippingproperties->pNext=___arg1;
physicaldevicepointclippingproperties->pointClippingBehavior=___arg2;
___return (physicaldevicepointclippingproperties);"))
(begin-ffi
   (make-VkPhysicalDevicePointClippingPropertiesKHR
      ptr->VkPhysicalDevicePointClippingPropertiesKHR
      ref-VkPhysicalDevicePointClippingPropertiesKHR
      make-VkPhysicalDevicePointClippingPropertiesKHR*
      VkPhysicalDevicePointClippingPropertiesKHR
      VkPhysicalDevicePointClippingPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDevicePointClippingPropertiesKHR
      (struct "VkPhysicalDevicePointClippingPropertiesKHR"))
   (c-define-type
      VkPhysicalDevicePointClippingPropertiesKHR*
      (pointer VkPhysicalDevicePointClippingPropertiesKHR))
   (define-c-lambda
      make-VkPhysicalDevicePointClippingPropertiesKHR*
      (int)
      VkPhysicalDevicePointClippingPropertiesKHR*
      "VkPhysicalDevicePointClippingPropertiesKHR* vkphysicaldevicepointclippingpropertieskhr = malloc(___arg1 * sizeof(VkPhysicalDevicePointClippingPropertiesKHR));
      ___return (vkphysicaldevicepointclippingpropertieskhr);")
   (define-c-lambda
      make-VkPhysicalDevicePointClippingPropertiesKHR
      ()
      VkPhysicalDevicePointClippingPropertiesKHR*
      "VkPhysicalDevicePointClippingPropertiesKHR *physicaldevicepointclippingpropertieskhr = malloc(sizeof(VkPhysicalDevicePointClippingPropertiesKHR));
___return (physicaldevicepointclippingpropertieskhr);"))
(begin-ffi
   (make-VkMemoryDedicatedRequirements
      ptr->VkMemoryDedicatedRequirements
      ref-VkMemoryDedicatedRequirements
      make-VkMemoryDedicatedRequirements*
      VkMemoryDedicatedRequirementsrequiresDedicatedAllocation
      VkMemoryDedicatedRequirementsprefersDedicatedAllocation
      VkMemoryDedicatedRequirementspNext
      VkMemoryDedicatedRequirementssType
      VkMemoryDedicatedRequirements
      VkMemoryDedicatedRequirements*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryDedicatedRequirements (struct "VkMemoryDedicatedRequirements"))
   (c-define-type VkMemoryDedicatedRequirements* (pointer VkMemoryDedicatedRequirements))
   (define-c-lambda
      VkMemoryDedicatedRequirementssType
      (VkMemoryDedicatedRequirements*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMemoryDedicatedRequirementspNext
      (VkMemoryDedicatedRequirements*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMemoryDedicatedRequirementsprefersDedicatedAllocation
      (VkMemoryDedicatedRequirements*)
      VkBool32
      "___return (___arg1->prefersDedicatedAllocation);")
   (define-c-lambda
      VkMemoryDedicatedRequirementsrequiresDedicatedAllocation
      (VkMemoryDedicatedRequirements*)
      VkBool32
      "___return (___arg1->requiresDedicatedAllocation);")
   (define-c-lambda
      make-VkMemoryDedicatedRequirements*
      (int)
      VkMemoryDedicatedRequirements*
      "VkMemoryDedicatedRequirements* vkmemorydedicatedrequirements = malloc(___arg1 * sizeof(VkMemoryDedicatedRequirements));
      ___return (vkmemorydedicatedrequirements);")
   (define-c-lambda
      ref-VkMemoryDedicatedRequirements
      (VkMemoryDedicatedRequirements* int)
      VkMemoryDedicatedRequirements*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryDedicatedRequirements
      ((pointer VkMemoryDedicatedRequirements))
      VkMemoryDedicatedRequirements
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryDedicatedRequirements
      (void* VkBool32 VkBool32)
      VkMemoryDedicatedRequirements*
      "VkMemoryDedicatedRequirements *memorydedicatedrequirements = malloc(sizeof(VkMemoryDedicatedRequirements));
memorydedicatedrequirements->sType=VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
memorydedicatedrequirements->pNext=___arg1;
memorydedicatedrequirements->prefersDedicatedAllocation=___arg2;
memorydedicatedrequirements->requiresDedicatedAllocation=___arg3;
___return (memorydedicatedrequirements);"))
(begin-ffi
   (make-VkMemoryDedicatedRequirementsKHR
      ptr->VkMemoryDedicatedRequirementsKHR
      ref-VkMemoryDedicatedRequirementsKHR
      make-VkMemoryDedicatedRequirementsKHR*
      VkMemoryDedicatedRequirementsKHR
      VkMemoryDedicatedRequirementsKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkMemoryDedicatedRequirementsKHR
      (struct "VkMemoryDedicatedRequirementsKHR"))
   (c-define-type
      VkMemoryDedicatedRequirementsKHR*
      (pointer VkMemoryDedicatedRequirementsKHR))
   (define-c-lambda
      make-VkMemoryDedicatedRequirementsKHR*
      (int)
      VkMemoryDedicatedRequirementsKHR*
      "VkMemoryDedicatedRequirementsKHR* vkmemorydedicatedrequirementskhr = malloc(___arg1 * sizeof(VkMemoryDedicatedRequirementsKHR));
      ___return (vkmemorydedicatedrequirementskhr);")
   (define-c-lambda
      make-VkMemoryDedicatedRequirementsKHR
      ()
      VkMemoryDedicatedRequirementsKHR*
      "VkMemoryDedicatedRequirementsKHR *memorydedicatedrequirementskhr = malloc(sizeof(VkMemoryDedicatedRequirementsKHR));
___return (memorydedicatedrequirementskhr);"))
(begin-ffi
   (make-VkMemoryDedicatedAllocateInfo
      ptr->VkMemoryDedicatedAllocateInfo
      ref-VkMemoryDedicatedAllocateInfo
      make-VkMemoryDedicatedAllocateInfo*
      VkMemoryDedicatedAllocateInfobuffer
      VkMemoryDedicatedAllocateInfoimage
      VkMemoryDedicatedAllocateInfopNext
      VkMemoryDedicatedAllocateInfosType
      VkMemoryDedicatedAllocateInfo
      VkMemoryDedicatedAllocateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMemoryDedicatedAllocateInfo (struct "VkMemoryDedicatedAllocateInfo"))
   (c-define-type VkMemoryDedicatedAllocateInfo* (pointer VkMemoryDedicatedAllocateInfo))
   (define-c-lambda
      VkMemoryDedicatedAllocateInfosType
      (VkMemoryDedicatedAllocateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMemoryDedicatedAllocateInfopNext
      (VkMemoryDedicatedAllocateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMemoryDedicatedAllocateInfoimage
      (VkMemoryDedicatedAllocateInfo*)
      VkImage
      "___return (___arg1->image);")
   (define-c-lambda
      VkMemoryDedicatedAllocateInfobuffer
      (VkMemoryDedicatedAllocateInfo*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      make-VkMemoryDedicatedAllocateInfo*
      (int)
      VkMemoryDedicatedAllocateInfo*
      "VkMemoryDedicatedAllocateInfo* vkmemorydedicatedallocateinfo = malloc(___arg1 * sizeof(VkMemoryDedicatedAllocateInfo));
      ___return (vkmemorydedicatedallocateinfo);")
   (define-c-lambda
      ref-VkMemoryDedicatedAllocateInfo
      (VkMemoryDedicatedAllocateInfo* int)
      VkMemoryDedicatedAllocateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryDedicatedAllocateInfo
      ((pointer VkMemoryDedicatedAllocateInfo))
      VkMemoryDedicatedAllocateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryDedicatedAllocateInfo
      (void* VkImage VkBuffer)
      VkMemoryDedicatedAllocateInfo*
      "VkMemoryDedicatedAllocateInfo *memorydedicatedallocateinfo = malloc(sizeof(VkMemoryDedicatedAllocateInfo));
memorydedicatedallocateinfo->sType=VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
memorydedicatedallocateinfo->pNext=___arg1;
memorydedicatedallocateinfo->image=___arg2;
memorydedicatedallocateinfo->buffer=___arg3;
___return (memorydedicatedallocateinfo);"))
(begin-ffi
   (make-VkMemoryDedicatedAllocateInfoKHR
      ptr->VkMemoryDedicatedAllocateInfoKHR
      ref-VkMemoryDedicatedAllocateInfoKHR
      make-VkMemoryDedicatedAllocateInfoKHR*
      VkMemoryDedicatedAllocateInfoKHR
      VkMemoryDedicatedAllocateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkMemoryDedicatedAllocateInfoKHR
      (struct "VkMemoryDedicatedAllocateInfoKHR"))
   (c-define-type
      VkMemoryDedicatedAllocateInfoKHR*
      (pointer VkMemoryDedicatedAllocateInfoKHR))
   (define-c-lambda
      make-VkMemoryDedicatedAllocateInfoKHR*
      (int)
      VkMemoryDedicatedAllocateInfoKHR*
      "VkMemoryDedicatedAllocateInfoKHR* vkmemorydedicatedallocateinfokhr = malloc(___arg1 * sizeof(VkMemoryDedicatedAllocateInfoKHR));
      ___return (vkmemorydedicatedallocateinfokhr);")
   (define-c-lambda
      make-VkMemoryDedicatedAllocateInfoKHR
      ()
      VkMemoryDedicatedAllocateInfoKHR*
      "VkMemoryDedicatedAllocateInfoKHR *memorydedicatedallocateinfokhr = malloc(sizeof(VkMemoryDedicatedAllocateInfoKHR));
___return (memorydedicatedallocateinfokhr);"))
(begin-ffi
   (make-VkImageViewUsageCreateInfo
      ptr->VkImageViewUsageCreateInfo
      ref-VkImageViewUsageCreateInfo
      make-VkImageViewUsageCreateInfo*
      VkImageViewUsageCreateInfousage
      VkImageViewUsageCreateInfopNext
      VkImageViewUsageCreateInfosType
      VkImageViewUsageCreateInfo
      VkImageViewUsageCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageViewUsageCreateInfo (struct "VkImageViewUsageCreateInfo"))
   (c-define-type VkImageViewUsageCreateInfo* (pointer VkImageViewUsageCreateInfo))
   (define-c-lambda
      VkImageViewUsageCreateInfosType
      (VkImageViewUsageCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageViewUsageCreateInfopNext
      (VkImageViewUsageCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageViewUsageCreateInfousage
      (VkImageViewUsageCreateInfo*)
      VkImageUsageFlags
      "___return (___arg1->usage);")
   (define-c-lambda
      make-VkImageViewUsageCreateInfo*
      (int)
      VkImageViewUsageCreateInfo*
      "VkImageViewUsageCreateInfo* vkimageviewusagecreateinfo = malloc(___arg1 * sizeof(VkImageViewUsageCreateInfo));
      ___return (vkimageviewusagecreateinfo);")
   (define-c-lambda
      ref-VkImageViewUsageCreateInfo
      (VkImageViewUsageCreateInfo* int)
      VkImageViewUsageCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageViewUsageCreateInfo
      ((pointer VkImageViewUsageCreateInfo))
      VkImageViewUsageCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageViewUsageCreateInfo
      (void* VkImageUsageFlags)
      VkImageViewUsageCreateInfo*
      "VkImageViewUsageCreateInfo *imageviewusagecreateinfo = malloc(sizeof(VkImageViewUsageCreateInfo));
imageviewusagecreateinfo->sType=VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
imageviewusagecreateinfo->pNext=___arg1;
imageviewusagecreateinfo->usage=___arg2;
___return (imageviewusagecreateinfo);"))
(begin-ffi
   (make-VkImageViewUsageCreateInfoKHR
      ptr->VkImageViewUsageCreateInfoKHR
      ref-VkImageViewUsageCreateInfoKHR
      make-VkImageViewUsageCreateInfoKHR*
      VkImageViewUsageCreateInfoKHR
      VkImageViewUsageCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageViewUsageCreateInfoKHR (struct "VkImageViewUsageCreateInfoKHR"))
   (c-define-type VkImageViewUsageCreateInfoKHR* (pointer VkImageViewUsageCreateInfoKHR))
   (define-c-lambda
      make-VkImageViewUsageCreateInfoKHR*
      (int)
      VkImageViewUsageCreateInfoKHR*
      "VkImageViewUsageCreateInfoKHR* vkimageviewusagecreateinfokhr = malloc(___arg1 * sizeof(VkImageViewUsageCreateInfoKHR));
      ___return (vkimageviewusagecreateinfokhr);")
   (define-c-lambda
      make-VkImageViewUsageCreateInfoKHR
      ()
      VkImageViewUsageCreateInfoKHR*
      "VkImageViewUsageCreateInfoKHR *imageviewusagecreateinfokhr = malloc(sizeof(VkImageViewUsageCreateInfoKHR));
___return (imageviewusagecreateinfokhr);"))
(begin-ffi
   (make-VkPipelineTessellationDomainOriginStateCreateInfo
      ptr->VkPipelineTessellationDomainOriginStateCreateInfo
      ref-VkPipelineTessellationDomainOriginStateCreateInfo
      make-VkPipelineTessellationDomainOriginStateCreateInfo*
      VkPipelineTessellationDomainOriginStateCreateInfodomainOrigin
      VkPipelineTessellationDomainOriginStateCreateInfopNext
      VkPipelineTessellationDomainOriginStateCreateInfosType
      VkPipelineTessellationDomainOriginStateCreateInfo
      VkPipelineTessellationDomainOriginStateCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineTessellationDomainOriginStateCreateInfo
      (struct "VkPipelineTessellationDomainOriginStateCreateInfo"))
   (c-define-type
      VkPipelineTessellationDomainOriginStateCreateInfo*
      (pointer VkPipelineTessellationDomainOriginStateCreateInfo))
   (define-c-lambda
      VkPipelineTessellationDomainOriginStateCreateInfosType
      (VkPipelineTessellationDomainOriginStateCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineTessellationDomainOriginStateCreateInfopNext
      (VkPipelineTessellationDomainOriginStateCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineTessellationDomainOriginStateCreateInfodomainOrigin
      (VkPipelineTessellationDomainOriginStateCreateInfo*)
      VkTessellationDomainOrigin
      "___return (___arg1->domainOrigin);")
   (define-c-lambda
      make-VkPipelineTessellationDomainOriginStateCreateInfo*
      (int)
      VkPipelineTessellationDomainOriginStateCreateInfo*
      "VkPipelineTessellationDomainOriginStateCreateInfo* vkpipelinetessellationdomainoriginstatecreateinfo = malloc(___arg1 * sizeof(VkPipelineTessellationDomainOriginStateCreateInfo));
      ___return (vkpipelinetessellationdomainoriginstatecreateinfo);")
   (define-c-lambda
      ref-VkPipelineTessellationDomainOriginStateCreateInfo
      (VkPipelineTessellationDomainOriginStateCreateInfo* int)
      VkPipelineTessellationDomainOriginStateCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineTessellationDomainOriginStateCreateInfo
      ((pointer VkPipelineTessellationDomainOriginStateCreateInfo))
      VkPipelineTessellationDomainOriginStateCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineTessellationDomainOriginStateCreateInfo
      (void* VkTessellationDomainOrigin)
      VkPipelineTessellationDomainOriginStateCreateInfo*
      "VkPipelineTessellationDomainOriginStateCreateInfo *pipelinetessellationdomainoriginstatecreateinfo = malloc(sizeof(VkPipelineTessellationDomainOriginStateCreateInfo));
pipelinetessellationdomainoriginstatecreateinfo->sType=VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
pipelinetessellationdomainoriginstatecreateinfo->pNext=___arg1;
pipelinetessellationdomainoriginstatecreateinfo->domainOrigin=___arg2;
___return (pipelinetessellationdomainoriginstatecreateinfo);"))
(begin-ffi
   (make-VkPipelineTessellationDomainOriginStateCreateInfoKHR
      ptr->VkPipelineTessellationDomainOriginStateCreateInfoKHR
      ref-VkPipelineTessellationDomainOriginStateCreateInfoKHR
      make-VkPipelineTessellationDomainOriginStateCreateInfoKHR*
      VkPipelineTessellationDomainOriginStateCreateInfoKHR
      VkPipelineTessellationDomainOriginStateCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineTessellationDomainOriginStateCreateInfoKHR
      (struct "VkPipelineTessellationDomainOriginStateCreateInfoKHR"))
   (c-define-type
      VkPipelineTessellationDomainOriginStateCreateInfoKHR*
      (pointer VkPipelineTessellationDomainOriginStateCreateInfoKHR))
   (define-c-lambda
      make-VkPipelineTessellationDomainOriginStateCreateInfoKHR*
      (int)
      VkPipelineTessellationDomainOriginStateCreateInfoKHR*
      "VkPipelineTessellationDomainOriginStateCreateInfoKHR* vkpipelinetessellationdomainoriginstatecreateinfokhr = malloc(___arg1 * sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR));
      ___return (vkpipelinetessellationdomainoriginstatecreateinfokhr);")
   (define-c-lambda
      make-VkPipelineTessellationDomainOriginStateCreateInfoKHR
      ()
      VkPipelineTessellationDomainOriginStateCreateInfoKHR*
      "VkPipelineTessellationDomainOriginStateCreateInfoKHR *pipelinetessellationdomainoriginstatecreateinfokhr = malloc(sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR));
___return (pipelinetessellationdomainoriginstatecreateinfokhr);"))
(begin-ffi
   (make-VkSamplerYcbcrConversionInfo
      ptr->VkSamplerYcbcrConversionInfo
      ref-VkSamplerYcbcrConversionInfo
      make-VkSamplerYcbcrConversionInfo*
      VkSamplerYcbcrConversionInfoconversion
      VkSamplerYcbcrConversionInfopNext
      VkSamplerYcbcrConversionInfosType
      VkSamplerYcbcrConversionInfo
      VkSamplerYcbcrConversionInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSamplerYcbcrConversionInfo (struct "VkSamplerYcbcrConversionInfo"))
   (c-define-type VkSamplerYcbcrConversionInfo* (pointer VkSamplerYcbcrConversionInfo))
   (define-c-lambda
      VkSamplerYcbcrConversionInfosType
      (VkSamplerYcbcrConversionInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSamplerYcbcrConversionInfopNext
      (VkSamplerYcbcrConversionInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSamplerYcbcrConversionInfoconversion
      (VkSamplerYcbcrConversionInfo*)
      VkSamplerYcbcrConversion
      "___return (___arg1->conversion);")
   (define-c-lambda
      make-VkSamplerYcbcrConversionInfo*
      (int)
      VkSamplerYcbcrConversionInfo*
      "VkSamplerYcbcrConversionInfo* vksamplerycbcrconversioninfo = malloc(___arg1 * sizeof(VkSamplerYcbcrConversionInfo));
      ___return (vksamplerycbcrconversioninfo);")
   (define-c-lambda
      ref-VkSamplerYcbcrConversionInfo
      (VkSamplerYcbcrConversionInfo* int)
      VkSamplerYcbcrConversionInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSamplerYcbcrConversionInfo
      ((pointer VkSamplerYcbcrConversionInfo))
      VkSamplerYcbcrConversionInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSamplerYcbcrConversionInfo
      (void* VkSamplerYcbcrConversion)
      VkSamplerYcbcrConversionInfo*
      "VkSamplerYcbcrConversionInfo *samplerycbcrconversioninfo = malloc(sizeof(VkSamplerYcbcrConversionInfo));
samplerycbcrconversioninfo->sType=VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
samplerycbcrconversioninfo->pNext=___arg1;
samplerycbcrconversioninfo->conversion=___arg2;
___return (samplerycbcrconversioninfo);"))
(begin-ffi
   (make-VkSamplerYcbcrConversionInfoKHR
      ptr->VkSamplerYcbcrConversionInfoKHR
      ref-VkSamplerYcbcrConversionInfoKHR
      make-VkSamplerYcbcrConversionInfoKHR*
      VkSamplerYcbcrConversionInfoKHR
      VkSamplerYcbcrConversionInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSamplerYcbcrConversionInfoKHR
      (struct "VkSamplerYcbcrConversionInfoKHR"))
   (c-define-type
      VkSamplerYcbcrConversionInfoKHR*
      (pointer VkSamplerYcbcrConversionInfoKHR))
   (define-c-lambda
      make-VkSamplerYcbcrConversionInfoKHR*
      (int)
      VkSamplerYcbcrConversionInfoKHR*
      "VkSamplerYcbcrConversionInfoKHR* vksamplerycbcrconversioninfokhr = malloc(___arg1 * sizeof(VkSamplerYcbcrConversionInfoKHR));
      ___return (vksamplerycbcrconversioninfokhr);")
   (define-c-lambda
      make-VkSamplerYcbcrConversionInfoKHR
      ()
      VkSamplerYcbcrConversionInfoKHR*
      "VkSamplerYcbcrConversionInfoKHR *samplerycbcrconversioninfokhr = malloc(sizeof(VkSamplerYcbcrConversionInfoKHR));
___return (samplerycbcrconversioninfokhr);"))
(begin-ffi
   (make-VkSamplerYcbcrConversionCreateInfo
      ptr->VkSamplerYcbcrConversionCreateInfo
      ref-VkSamplerYcbcrConversionCreateInfo
      make-VkSamplerYcbcrConversionCreateInfo*
      VkSamplerYcbcrConversionCreateInfoforceExplicitReconstruction
      VkSamplerYcbcrConversionCreateInfochromaFilter
      VkSamplerYcbcrConversionCreateInfoyChromaOffset
      VkSamplerYcbcrConversionCreateInfoxChromaOffset
      VkSamplerYcbcrConversionCreateInfocomponents
      VkSamplerYcbcrConversionCreateInfoycbcrRange
      VkSamplerYcbcrConversionCreateInfoycbcrModel
      VkSamplerYcbcrConversionCreateInfoformat
      VkSamplerYcbcrConversionCreateInfopNext
      VkSamplerYcbcrConversionCreateInfosType
      VkSamplerYcbcrConversionCreateInfo
      VkSamplerYcbcrConversionCreateInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSamplerYcbcrConversionCreateInfo
      (struct "VkSamplerYcbcrConversionCreateInfo"))
   (c-define-type
      VkSamplerYcbcrConversionCreateInfo*
      (pointer VkSamplerYcbcrConversionCreateInfo))
   (define-c-lambda
      VkSamplerYcbcrConversionCreateInfosType
      (VkSamplerYcbcrConversionCreateInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSamplerYcbcrConversionCreateInfopNext
      (VkSamplerYcbcrConversionCreateInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSamplerYcbcrConversionCreateInfoformat
      (VkSamplerYcbcrConversionCreateInfo*)
      VkFormat
      "___return (___arg1->format);")
   (define-c-lambda
      VkSamplerYcbcrConversionCreateInfoycbcrModel
      (VkSamplerYcbcrConversionCreateInfo*)
      VkSamplerYcbcrModelConversion
      "___return (___arg1->ycbcrModel);")
   (define-c-lambda
      VkSamplerYcbcrConversionCreateInfoycbcrRange
      (VkSamplerYcbcrConversionCreateInfo*)
      VkSamplerYcbcrRange
      "___return (___arg1->ycbcrRange);")
   (define-c-lambda
      VkSamplerYcbcrConversionCreateInfocomponents
      (VkSamplerYcbcrConversionCreateInfo*)
      VkComponentMapping
      "___return (___arg1->components);")
   (define-c-lambda
      VkSamplerYcbcrConversionCreateInfoxChromaOffset
      (VkSamplerYcbcrConversionCreateInfo*)
      VkChromaLocation
      "___return (___arg1->xChromaOffset);")
   (define-c-lambda
      VkSamplerYcbcrConversionCreateInfoyChromaOffset
      (VkSamplerYcbcrConversionCreateInfo*)
      VkChromaLocation
      "___return (___arg1->yChromaOffset);")
   (define-c-lambda
      VkSamplerYcbcrConversionCreateInfochromaFilter
      (VkSamplerYcbcrConversionCreateInfo*)
      VkFilter
      "___return (___arg1->chromaFilter);")
   (define-c-lambda
      VkSamplerYcbcrConversionCreateInfoforceExplicitReconstruction
      (VkSamplerYcbcrConversionCreateInfo*)
      VkBool32
      "___return (___arg1->forceExplicitReconstruction);")
   (define-c-lambda
      make-VkSamplerYcbcrConversionCreateInfo*
      (int)
      VkSamplerYcbcrConversionCreateInfo*
      "VkSamplerYcbcrConversionCreateInfo* vksamplerycbcrconversioncreateinfo = malloc(___arg1 * sizeof(VkSamplerYcbcrConversionCreateInfo));
      ___return (vksamplerycbcrconversioncreateinfo);")
   (define-c-lambda
      ref-VkSamplerYcbcrConversionCreateInfo
      (VkSamplerYcbcrConversionCreateInfo* int)
      VkSamplerYcbcrConversionCreateInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSamplerYcbcrConversionCreateInfo
      ((pointer VkSamplerYcbcrConversionCreateInfo))
      VkSamplerYcbcrConversionCreateInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSamplerYcbcrConversionCreateInfo
      (void*
         VkFormat
         VkSamplerYcbcrModelConversion
         VkSamplerYcbcrRange
         VkComponentMapping
         VkChromaLocation
         VkChromaLocation
         VkFilter
         VkBool32)
      VkSamplerYcbcrConversionCreateInfo*
      "VkSamplerYcbcrConversionCreateInfo *samplerycbcrconversioncreateinfo = malloc(sizeof(VkSamplerYcbcrConversionCreateInfo));
samplerycbcrconversioncreateinfo->sType=VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
samplerycbcrconversioncreateinfo->pNext=___arg1;
samplerycbcrconversioncreateinfo->format=___arg2;
samplerycbcrconversioncreateinfo->ycbcrModel=___arg3;
samplerycbcrconversioncreateinfo->ycbcrRange=___arg4;
samplerycbcrconversioncreateinfo->components=___arg5;
samplerycbcrconversioncreateinfo->xChromaOffset=___arg6;
samplerycbcrconversioncreateinfo->yChromaOffset=___arg7;
samplerycbcrconversioncreateinfo->chromaFilter=___arg8;
samplerycbcrconversioncreateinfo->forceExplicitReconstruction=___arg9;
___return (samplerycbcrconversioncreateinfo);"))
(begin-ffi
   (make-VkSamplerYcbcrConversionCreateInfoKHR
      ptr->VkSamplerYcbcrConversionCreateInfoKHR
      ref-VkSamplerYcbcrConversionCreateInfoKHR
      make-VkSamplerYcbcrConversionCreateInfoKHR*
      VkSamplerYcbcrConversionCreateInfoKHR
      VkSamplerYcbcrConversionCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSamplerYcbcrConversionCreateInfoKHR
      (struct "VkSamplerYcbcrConversionCreateInfoKHR"))
   (c-define-type
      VkSamplerYcbcrConversionCreateInfoKHR*
      (pointer VkSamplerYcbcrConversionCreateInfoKHR))
   (define-c-lambda
      make-VkSamplerYcbcrConversionCreateInfoKHR*
      (int)
      VkSamplerYcbcrConversionCreateInfoKHR*
      "VkSamplerYcbcrConversionCreateInfoKHR* vksamplerycbcrconversioncreateinfokhr = malloc(___arg1 * sizeof(VkSamplerYcbcrConversionCreateInfoKHR));
      ___return (vksamplerycbcrconversioncreateinfokhr);")
   (define-c-lambda
      make-VkSamplerYcbcrConversionCreateInfoKHR
      ()
      VkSamplerYcbcrConversionCreateInfoKHR*
      "VkSamplerYcbcrConversionCreateInfoKHR *samplerycbcrconversioncreateinfokhr = malloc(sizeof(VkSamplerYcbcrConversionCreateInfoKHR));
___return (samplerycbcrconversioncreateinfokhr);"))
(begin-ffi
   (make-VkBindImagePlaneMemoryInfo
      ptr->VkBindImagePlaneMemoryInfo
      ref-VkBindImagePlaneMemoryInfo
      make-VkBindImagePlaneMemoryInfo*
      VkBindImagePlaneMemoryInfoplaneAspect
      VkBindImagePlaneMemoryInfopNext
      VkBindImagePlaneMemoryInfosType
      VkBindImagePlaneMemoryInfo
      VkBindImagePlaneMemoryInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBindImagePlaneMemoryInfo (struct "VkBindImagePlaneMemoryInfo"))
   (c-define-type VkBindImagePlaneMemoryInfo* (pointer VkBindImagePlaneMemoryInfo))
   (define-c-lambda
      VkBindImagePlaneMemoryInfosType
      (VkBindImagePlaneMemoryInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBindImagePlaneMemoryInfopNext
      (VkBindImagePlaneMemoryInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBindImagePlaneMemoryInfoplaneAspect
      (VkBindImagePlaneMemoryInfo*)
      VkImageAspectFlagBits
      "___return (___arg1->planeAspect);")
   (define-c-lambda
      make-VkBindImagePlaneMemoryInfo*
      (int)
      VkBindImagePlaneMemoryInfo*
      "VkBindImagePlaneMemoryInfo* vkbindimageplanememoryinfo = malloc(___arg1 * sizeof(VkBindImagePlaneMemoryInfo));
      ___return (vkbindimageplanememoryinfo);")
   (define-c-lambda
      ref-VkBindImagePlaneMemoryInfo
      (VkBindImagePlaneMemoryInfo* int)
      VkBindImagePlaneMemoryInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBindImagePlaneMemoryInfo
      ((pointer VkBindImagePlaneMemoryInfo))
      VkBindImagePlaneMemoryInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBindImagePlaneMemoryInfo
      (void* VkImageAspectFlagBits)
      VkBindImagePlaneMemoryInfo*
      "VkBindImagePlaneMemoryInfo *bindimageplanememoryinfo = malloc(sizeof(VkBindImagePlaneMemoryInfo));
bindimageplanememoryinfo->sType=VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
bindimageplanememoryinfo->pNext=___arg1;
bindimageplanememoryinfo->planeAspect=___arg2;
___return (bindimageplanememoryinfo);"))
(begin-ffi
   (make-VkBindImagePlaneMemoryInfoKHR
      ptr->VkBindImagePlaneMemoryInfoKHR
      ref-VkBindImagePlaneMemoryInfoKHR
      make-VkBindImagePlaneMemoryInfoKHR*
      VkBindImagePlaneMemoryInfoKHR
      VkBindImagePlaneMemoryInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBindImagePlaneMemoryInfoKHR (struct "VkBindImagePlaneMemoryInfoKHR"))
   (c-define-type VkBindImagePlaneMemoryInfoKHR* (pointer VkBindImagePlaneMemoryInfoKHR))
   (define-c-lambda
      make-VkBindImagePlaneMemoryInfoKHR*
      (int)
      VkBindImagePlaneMemoryInfoKHR*
      "VkBindImagePlaneMemoryInfoKHR* vkbindimageplanememoryinfokhr = malloc(___arg1 * sizeof(VkBindImagePlaneMemoryInfoKHR));
      ___return (vkbindimageplanememoryinfokhr);")
   (define-c-lambda
      make-VkBindImagePlaneMemoryInfoKHR
      ()
      VkBindImagePlaneMemoryInfoKHR*
      "VkBindImagePlaneMemoryInfoKHR *bindimageplanememoryinfokhr = malloc(sizeof(VkBindImagePlaneMemoryInfoKHR));
___return (bindimageplanememoryinfokhr);"))
(begin-ffi
   (make-VkImagePlaneMemoryRequirementsInfo
      ptr->VkImagePlaneMemoryRequirementsInfo
      ref-VkImagePlaneMemoryRequirementsInfo
      make-VkImagePlaneMemoryRequirementsInfo*
      VkImagePlaneMemoryRequirementsInfoplaneAspect
      VkImagePlaneMemoryRequirementsInfopNext
      VkImagePlaneMemoryRequirementsInfosType
      VkImagePlaneMemoryRequirementsInfo
      VkImagePlaneMemoryRequirementsInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImagePlaneMemoryRequirementsInfo
      (struct "VkImagePlaneMemoryRequirementsInfo"))
   (c-define-type
      VkImagePlaneMemoryRequirementsInfo*
      (pointer VkImagePlaneMemoryRequirementsInfo))
   (define-c-lambda
      VkImagePlaneMemoryRequirementsInfosType
      (VkImagePlaneMemoryRequirementsInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImagePlaneMemoryRequirementsInfopNext
      (VkImagePlaneMemoryRequirementsInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImagePlaneMemoryRequirementsInfoplaneAspect
      (VkImagePlaneMemoryRequirementsInfo*)
      VkImageAspectFlagBits
      "___return (___arg1->planeAspect);")
   (define-c-lambda
      make-VkImagePlaneMemoryRequirementsInfo*
      (int)
      VkImagePlaneMemoryRequirementsInfo*
      "VkImagePlaneMemoryRequirementsInfo* vkimageplanememoryrequirementsinfo = malloc(___arg1 * sizeof(VkImagePlaneMemoryRequirementsInfo));
      ___return (vkimageplanememoryrequirementsinfo);")
   (define-c-lambda
      ref-VkImagePlaneMemoryRequirementsInfo
      (VkImagePlaneMemoryRequirementsInfo* int)
      VkImagePlaneMemoryRequirementsInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImagePlaneMemoryRequirementsInfo
      ((pointer VkImagePlaneMemoryRequirementsInfo))
      VkImagePlaneMemoryRequirementsInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImagePlaneMemoryRequirementsInfo
      (void* VkImageAspectFlagBits)
      VkImagePlaneMemoryRequirementsInfo*
      "VkImagePlaneMemoryRequirementsInfo *imageplanememoryrequirementsinfo = malloc(sizeof(VkImagePlaneMemoryRequirementsInfo));
imageplanememoryrequirementsinfo->sType=VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
imageplanememoryrequirementsinfo->pNext=___arg1;
imageplanememoryrequirementsinfo->planeAspect=___arg2;
___return (imageplanememoryrequirementsinfo);"))
(begin-ffi
   (make-VkImagePlaneMemoryRequirementsInfoKHR
      ptr->VkImagePlaneMemoryRequirementsInfoKHR
      ref-VkImagePlaneMemoryRequirementsInfoKHR
      make-VkImagePlaneMemoryRequirementsInfoKHR*
      VkImagePlaneMemoryRequirementsInfoKHR
      VkImagePlaneMemoryRequirementsInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImagePlaneMemoryRequirementsInfoKHR
      (struct "VkImagePlaneMemoryRequirementsInfoKHR"))
   (c-define-type
      VkImagePlaneMemoryRequirementsInfoKHR*
      (pointer VkImagePlaneMemoryRequirementsInfoKHR))
   (define-c-lambda
      make-VkImagePlaneMemoryRequirementsInfoKHR*
      (int)
      VkImagePlaneMemoryRequirementsInfoKHR*
      "VkImagePlaneMemoryRequirementsInfoKHR* vkimageplanememoryrequirementsinfokhr = malloc(___arg1 * sizeof(VkImagePlaneMemoryRequirementsInfoKHR));
      ___return (vkimageplanememoryrequirementsinfokhr);")
   (define-c-lambda
      make-VkImagePlaneMemoryRequirementsInfoKHR
      ()
      VkImagePlaneMemoryRequirementsInfoKHR*
      "VkImagePlaneMemoryRequirementsInfoKHR *imageplanememoryrequirementsinfokhr = malloc(sizeof(VkImagePlaneMemoryRequirementsInfoKHR));
___return (imageplanememoryrequirementsinfokhr);"))
(begin-ffi
   (make-VkPhysicalDeviceSamplerYcbcrConversionFeatures
      ptr->VkPhysicalDeviceSamplerYcbcrConversionFeatures
      ref-VkPhysicalDeviceSamplerYcbcrConversionFeatures
      make-VkPhysicalDeviceSamplerYcbcrConversionFeatures*
      VkPhysicalDeviceSamplerYcbcrConversionFeaturessamplerYcbcrConversion
      VkPhysicalDeviceSamplerYcbcrConversionFeaturespNext
      VkPhysicalDeviceSamplerYcbcrConversionFeaturessType
      VkPhysicalDeviceSamplerYcbcrConversionFeatures
      VkPhysicalDeviceSamplerYcbcrConversionFeatures*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSamplerYcbcrConversionFeatures
      (struct "VkPhysicalDeviceSamplerYcbcrConversionFeatures"))
   (c-define-type
      VkPhysicalDeviceSamplerYcbcrConversionFeatures*
      (pointer VkPhysicalDeviceSamplerYcbcrConversionFeatures))
   (define-c-lambda
      VkPhysicalDeviceSamplerYcbcrConversionFeaturessType
      (VkPhysicalDeviceSamplerYcbcrConversionFeatures*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceSamplerYcbcrConversionFeaturespNext
      (VkPhysicalDeviceSamplerYcbcrConversionFeatures*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceSamplerYcbcrConversionFeaturessamplerYcbcrConversion
      (VkPhysicalDeviceSamplerYcbcrConversionFeatures*)
      VkBool32
      "___return (___arg1->samplerYcbcrConversion);")
   (define-c-lambda
      make-VkPhysicalDeviceSamplerYcbcrConversionFeatures*
      (int)
      VkPhysicalDeviceSamplerYcbcrConversionFeatures*
      "VkPhysicalDeviceSamplerYcbcrConversionFeatures* vkphysicaldevicesamplerycbcrconversionfeatures = malloc(___arg1 * sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures));
      ___return (vkphysicaldevicesamplerycbcrconversionfeatures);")
   (define-c-lambda
      ref-VkPhysicalDeviceSamplerYcbcrConversionFeatures
      (VkPhysicalDeviceSamplerYcbcrConversionFeatures* int)
      VkPhysicalDeviceSamplerYcbcrConversionFeatures*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceSamplerYcbcrConversionFeatures
      ((pointer VkPhysicalDeviceSamplerYcbcrConversionFeatures))
      VkPhysicalDeviceSamplerYcbcrConversionFeatures
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceSamplerYcbcrConversionFeatures
      (void* VkBool32)
      VkPhysicalDeviceSamplerYcbcrConversionFeatures*
      "VkPhysicalDeviceSamplerYcbcrConversionFeatures *physicaldevicesamplerycbcrconversionfeatures = malloc(sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures));
physicaldevicesamplerycbcrconversionfeatures->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
physicaldevicesamplerycbcrconversionfeatures->pNext=___arg1;
physicaldevicesamplerycbcrconversionfeatures->samplerYcbcrConversion=___arg2;
___return (physicaldevicesamplerycbcrconversionfeatures);"))
(begin-ffi
   (make-VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR
      ptr->VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR
      ref-VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR
      make-VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR*
      VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR
      VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR
      (struct "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR"))
   (c-define-type
      VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR*
      (pointer VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR))
   (define-c-lambda
      make-VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR*
      (int)
      VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR*
      "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR* vkphysicaldevicesamplerycbcrconversionfeatureskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR));
      ___return (vkphysicaldevicesamplerycbcrconversionfeatureskhr);")
   (define-c-lambda
      make-VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR
      ()
      VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR*
      "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR *physicaldevicesamplerycbcrconversionfeatureskhr = malloc(sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR));
___return (physicaldevicesamplerycbcrconversionfeatureskhr);"))
(begin-ffi
   (make-VkSamplerYcbcrConversionImageFormatProperties
      ptr->VkSamplerYcbcrConversionImageFormatProperties
      ref-VkSamplerYcbcrConversionImageFormatProperties
      make-VkSamplerYcbcrConversionImageFormatProperties*
      VkSamplerYcbcrConversionImageFormatPropertiescombinedImageSamplerDescriptorCount
      VkSamplerYcbcrConversionImageFormatPropertiespNext
      VkSamplerYcbcrConversionImageFormatPropertiessType
      VkSamplerYcbcrConversionImageFormatProperties
      VkSamplerYcbcrConversionImageFormatProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSamplerYcbcrConversionImageFormatProperties
      (struct "VkSamplerYcbcrConversionImageFormatProperties"))
   (c-define-type
      VkSamplerYcbcrConversionImageFormatProperties*
      (pointer VkSamplerYcbcrConversionImageFormatProperties))
   (define-c-lambda
      VkSamplerYcbcrConversionImageFormatPropertiessType
      (VkSamplerYcbcrConversionImageFormatProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSamplerYcbcrConversionImageFormatPropertiespNext
      (VkSamplerYcbcrConversionImageFormatProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSamplerYcbcrConversionImageFormatPropertiescombinedImageSamplerDescriptorCount
      (VkSamplerYcbcrConversionImageFormatProperties*)
      uint32_t
      "___return (___arg1->combinedImageSamplerDescriptorCount);")
   (define-c-lambda
      make-VkSamplerYcbcrConversionImageFormatProperties*
      (int)
      VkSamplerYcbcrConversionImageFormatProperties*
      "VkSamplerYcbcrConversionImageFormatProperties* vksamplerycbcrconversionimageformatproperties = malloc(___arg1 * sizeof(VkSamplerYcbcrConversionImageFormatProperties));
      ___return (vksamplerycbcrconversionimageformatproperties);")
   (define-c-lambda
      ref-VkSamplerYcbcrConversionImageFormatProperties
      (VkSamplerYcbcrConversionImageFormatProperties* int)
      VkSamplerYcbcrConversionImageFormatProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSamplerYcbcrConversionImageFormatProperties
      ((pointer VkSamplerYcbcrConversionImageFormatProperties))
      VkSamplerYcbcrConversionImageFormatProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSamplerYcbcrConversionImageFormatProperties
      (void* uint32_t)
      VkSamplerYcbcrConversionImageFormatProperties*
      "VkSamplerYcbcrConversionImageFormatProperties *samplerycbcrconversionimageformatproperties = malloc(sizeof(VkSamplerYcbcrConversionImageFormatProperties));
samplerycbcrconversionimageformatproperties->sType=VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
samplerycbcrconversionimageformatproperties->pNext=___arg1;
samplerycbcrconversionimageformatproperties->combinedImageSamplerDescriptorCount=___arg2;
___return (samplerycbcrconversionimageformatproperties);"))
(begin-ffi
   (make-VkSamplerYcbcrConversionImageFormatPropertiesKHR
      ptr->VkSamplerYcbcrConversionImageFormatPropertiesKHR
      ref-VkSamplerYcbcrConversionImageFormatPropertiesKHR
      make-VkSamplerYcbcrConversionImageFormatPropertiesKHR*
      VkSamplerYcbcrConversionImageFormatPropertiesKHR
      VkSamplerYcbcrConversionImageFormatPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSamplerYcbcrConversionImageFormatPropertiesKHR
      (struct "VkSamplerYcbcrConversionImageFormatPropertiesKHR"))
   (c-define-type
      VkSamplerYcbcrConversionImageFormatPropertiesKHR*
      (pointer VkSamplerYcbcrConversionImageFormatPropertiesKHR))
   (define-c-lambda
      make-VkSamplerYcbcrConversionImageFormatPropertiesKHR*
      (int)
      VkSamplerYcbcrConversionImageFormatPropertiesKHR*
      "VkSamplerYcbcrConversionImageFormatPropertiesKHR* vksamplerycbcrconversionimageformatpropertieskhr = malloc(___arg1 * sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR));
      ___return (vksamplerycbcrconversionimageformatpropertieskhr);")
   (define-c-lambda
      make-VkSamplerYcbcrConversionImageFormatPropertiesKHR
      ()
      VkSamplerYcbcrConversionImageFormatPropertiesKHR*
      "VkSamplerYcbcrConversionImageFormatPropertiesKHR *samplerycbcrconversionimageformatpropertieskhr = malloc(sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR));
___return (samplerycbcrconversionimageformatpropertieskhr);"))
(begin-ffi
   (make-VkTextureLODGatherFormatPropertiesAMD
      ptr->VkTextureLODGatherFormatPropertiesAMD
      ref-VkTextureLODGatherFormatPropertiesAMD
      make-VkTextureLODGatherFormatPropertiesAMD*
      VkTextureLODGatherFormatPropertiesAMDsupportsTextureGatherLODBiasAMD
      VkTextureLODGatherFormatPropertiesAMDpNext
      VkTextureLODGatherFormatPropertiesAMDsType
      VkTextureLODGatherFormatPropertiesAMD
      VkTextureLODGatherFormatPropertiesAMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkTextureLODGatherFormatPropertiesAMD
      (struct "VkTextureLODGatherFormatPropertiesAMD"))
   (c-define-type
      VkTextureLODGatherFormatPropertiesAMD*
      (pointer VkTextureLODGatherFormatPropertiesAMD))
   (define-c-lambda
      VkTextureLODGatherFormatPropertiesAMDsType
      (VkTextureLODGatherFormatPropertiesAMD*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkTextureLODGatherFormatPropertiesAMDpNext
      (VkTextureLODGatherFormatPropertiesAMD*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkTextureLODGatherFormatPropertiesAMDsupportsTextureGatherLODBiasAMD
      (VkTextureLODGatherFormatPropertiesAMD*)
      VkBool32
      "___return (___arg1->supportsTextureGatherLODBiasAMD);")
   (define-c-lambda
      make-VkTextureLODGatherFormatPropertiesAMD*
      (int)
      VkTextureLODGatherFormatPropertiesAMD*
      "VkTextureLODGatherFormatPropertiesAMD* vktexturelodgatherformatpropertiesamd = malloc(___arg1 * sizeof(VkTextureLODGatherFormatPropertiesAMD));
      ___return (vktexturelodgatherformatpropertiesamd);")
   (define-c-lambda
      ref-VkTextureLODGatherFormatPropertiesAMD
      (VkTextureLODGatherFormatPropertiesAMD* int)
      VkTextureLODGatherFormatPropertiesAMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkTextureLODGatherFormatPropertiesAMD
      ((pointer VkTextureLODGatherFormatPropertiesAMD))
      VkTextureLODGatherFormatPropertiesAMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkTextureLODGatherFormatPropertiesAMD
      (void* VkBool32)
      VkTextureLODGatherFormatPropertiesAMD*
      "VkTextureLODGatherFormatPropertiesAMD *texturelodgatherformatpropertiesamd = malloc(sizeof(VkTextureLODGatherFormatPropertiesAMD));
texturelodgatherformatpropertiesamd->sType=VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
texturelodgatherformatpropertiesamd->pNext=___arg1;
texturelodgatherformatpropertiesamd->supportsTextureGatherLODBiasAMD=___arg2;
___return (texturelodgatherformatpropertiesamd);"))
(begin-ffi
   (make-VkConditionalRenderingBeginInfoEXT
      ptr->VkConditionalRenderingBeginInfoEXT
      ref-VkConditionalRenderingBeginInfoEXT
      make-VkConditionalRenderingBeginInfoEXT*
      VkConditionalRenderingBeginInfoEXTflags
      VkConditionalRenderingBeginInfoEXToffset
      VkConditionalRenderingBeginInfoEXTbuffer
      VkConditionalRenderingBeginInfoEXTpNext
      VkConditionalRenderingBeginInfoEXTsType
      VkConditionalRenderingBeginInfoEXT
      VkConditionalRenderingBeginInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkConditionalRenderingBeginInfoEXT
      (struct "VkConditionalRenderingBeginInfoEXT"))
   (c-define-type
      VkConditionalRenderingBeginInfoEXT*
      (pointer VkConditionalRenderingBeginInfoEXT))
   (define-c-lambda
      VkConditionalRenderingBeginInfoEXTsType
      (VkConditionalRenderingBeginInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkConditionalRenderingBeginInfoEXTpNext
      (VkConditionalRenderingBeginInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkConditionalRenderingBeginInfoEXTbuffer
      (VkConditionalRenderingBeginInfoEXT*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      VkConditionalRenderingBeginInfoEXToffset
      (VkConditionalRenderingBeginInfoEXT*)
      VkDeviceSize
      "___return (___arg1->offset);")
   (define-c-lambda
      VkConditionalRenderingBeginInfoEXTflags
      (VkConditionalRenderingBeginInfoEXT*)
      VkConditionalRenderingFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkConditionalRenderingBeginInfoEXT*
      (int)
      VkConditionalRenderingBeginInfoEXT*
      "VkConditionalRenderingBeginInfoEXT* vkconditionalrenderingbegininfoext = malloc(___arg1 * sizeof(VkConditionalRenderingBeginInfoEXT));
      ___return (vkconditionalrenderingbegininfoext);")
   (define-c-lambda
      ref-VkConditionalRenderingBeginInfoEXT
      (VkConditionalRenderingBeginInfoEXT* int)
      VkConditionalRenderingBeginInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkConditionalRenderingBeginInfoEXT
      ((pointer VkConditionalRenderingBeginInfoEXT))
      VkConditionalRenderingBeginInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkConditionalRenderingBeginInfoEXT
      (void* VkBuffer VkDeviceSize VkConditionalRenderingFlagsEXT)
      VkConditionalRenderingBeginInfoEXT*
      "VkConditionalRenderingBeginInfoEXT *conditionalrenderingbegininfoext = malloc(sizeof(VkConditionalRenderingBeginInfoEXT));
conditionalrenderingbegininfoext->sType=VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
conditionalrenderingbegininfoext->pNext=___arg1;
conditionalrenderingbegininfoext->buffer=___arg2;
conditionalrenderingbegininfoext->offset=___arg3;
conditionalrenderingbegininfoext->flags=___arg4;
___return (conditionalrenderingbegininfoext);"))
(begin-ffi
   (make-VkProtectedSubmitInfo
      ptr->VkProtectedSubmitInfo
      ref-VkProtectedSubmitInfo
      make-VkProtectedSubmitInfo*
      VkProtectedSubmitInfoprotectedSubmit
      VkProtectedSubmitInfopNext
      VkProtectedSubmitInfosType
      VkProtectedSubmitInfo
      VkProtectedSubmitInfo*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkProtectedSubmitInfo (struct "VkProtectedSubmitInfo"))
   (c-define-type VkProtectedSubmitInfo* (pointer VkProtectedSubmitInfo))
   (define-c-lambda
      VkProtectedSubmitInfosType
      (VkProtectedSubmitInfo*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkProtectedSubmitInfopNext
      (VkProtectedSubmitInfo*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkProtectedSubmitInfoprotectedSubmit
      (VkProtectedSubmitInfo*)
      VkBool32
      "___return (___arg1->protectedSubmit);")
   (define-c-lambda
      make-VkProtectedSubmitInfo*
      (int)
      VkProtectedSubmitInfo*
      "VkProtectedSubmitInfo* vkprotectedsubmitinfo = malloc(___arg1 * sizeof(VkProtectedSubmitInfo));
      ___return (vkprotectedsubmitinfo);")
   (define-c-lambda
      ref-VkProtectedSubmitInfo
      (VkProtectedSubmitInfo* int)
      VkProtectedSubmitInfo*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkProtectedSubmitInfo
      ((pointer VkProtectedSubmitInfo))
      VkProtectedSubmitInfo
      "___return(*___arg1);")
   (define-c-lambda
      make-VkProtectedSubmitInfo
      (void* VkBool32)
      VkProtectedSubmitInfo*
      "VkProtectedSubmitInfo *protectedsubmitinfo = malloc(sizeof(VkProtectedSubmitInfo));
protectedsubmitinfo->sType=VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
protectedsubmitinfo->pNext=___arg1;
protectedsubmitinfo->protectedSubmit=___arg2;
___return (protectedsubmitinfo);"))
(begin-ffi
   (make-VkPhysicalDeviceProtectedMemoryFeatures
      ptr->VkPhysicalDeviceProtectedMemoryFeatures
      ref-VkPhysicalDeviceProtectedMemoryFeatures
      make-VkPhysicalDeviceProtectedMemoryFeatures*
      VkPhysicalDeviceProtectedMemoryFeaturesprotectedMemory
      VkPhysicalDeviceProtectedMemoryFeaturespNext
      VkPhysicalDeviceProtectedMemoryFeaturessType
      VkPhysicalDeviceProtectedMemoryFeatures
      VkPhysicalDeviceProtectedMemoryFeatures*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceProtectedMemoryFeatures
      (struct "VkPhysicalDeviceProtectedMemoryFeatures"))
   (c-define-type
      VkPhysicalDeviceProtectedMemoryFeatures*
      (pointer VkPhysicalDeviceProtectedMemoryFeatures))
   (define-c-lambda
      VkPhysicalDeviceProtectedMemoryFeaturessType
      (VkPhysicalDeviceProtectedMemoryFeatures*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceProtectedMemoryFeaturespNext
      (VkPhysicalDeviceProtectedMemoryFeatures*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceProtectedMemoryFeaturesprotectedMemory
      (VkPhysicalDeviceProtectedMemoryFeatures*)
      VkBool32
      "___return (___arg1->protectedMemory);")
   (define-c-lambda
      make-VkPhysicalDeviceProtectedMemoryFeatures*
      (int)
      VkPhysicalDeviceProtectedMemoryFeatures*
      "VkPhysicalDeviceProtectedMemoryFeatures* vkphysicaldeviceprotectedmemoryfeatures = malloc(___arg1 * sizeof(VkPhysicalDeviceProtectedMemoryFeatures));
      ___return (vkphysicaldeviceprotectedmemoryfeatures);")
   (define-c-lambda
      ref-VkPhysicalDeviceProtectedMemoryFeatures
      (VkPhysicalDeviceProtectedMemoryFeatures* int)
      VkPhysicalDeviceProtectedMemoryFeatures*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceProtectedMemoryFeatures
      ((pointer VkPhysicalDeviceProtectedMemoryFeatures))
      VkPhysicalDeviceProtectedMemoryFeatures
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceProtectedMemoryFeatures
      (void* VkBool32)
      VkPhysicalDeviceProtectedMemoryFeatures*
      "VkPhysicalDeviceProtectedMemoryFeatures *physicaldeviceprotectedmemoryfeatures = malloc(sizeof(VkPhysicalDeviceProtectedMemoryFeatures));
physicaldeviceprotectedmemoryfeatures->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
physicaldeviceprotectedmemoryfeatures->pNext=___arg1;
physicaldeviceprotectedmemoryfeatures->protectedMemory=___arg2;
___return (physicaldeviceprotectedmemoryfeatures);"))
(begin-ffi
   (make-VkPhysicalDeviceProtectedMemoryProperties
      ptr->VkPhysicalDeviceProtectedMemoryProperties
      ref-VkPhysicalDeviceProtectedMemoryProperties
      make-VkPhysicalDeviceProtectedMemoryProperties*
      VkPhysicalDeviceProtectedMemoryPropertiesprotectedNoFault
      VkPhysicalDeviceProtectedMemoryPropertiespNext
      VkPhysicalDeviceProtectedMemoryPropertiessType
      VkPhysicalDeviceProtectedMemoryProperties
      VkPhysicalDeviceProtectedMemoryProperties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceProtectedMemoryProperties
      (struct "VkPhysicalDeviceProtectedMemoryProperties"))
   (c-define-type
      VkPhysicalDeviceProtectedMemoryProperties*
      (pointer VkPhysicalDeviceProtectedMemoryProperties))
   (define-c-lambda
      VkPhysicalDeviceProtectedMemoryPropertiessType
      (VkPhysicalDeviceProtectedMemoryProperties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceProtectedMemoryPropertiespNext
      (VkPhysicalDeviceProtectedMemoryProperties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceProtectedMemoryPropertiesprotectedNoFault
      (VkPhysicalDeviceProtectedMemoryProperties*)
      VkBool32
      "___return (___arg1->protectedNoFault);")
   (define-c-lambda
      make-VkPhysicalDeviceProtectedMemoryProperties*
      (int)
      VkPhysicalDeviceProtectedMemoryProperties*
      "VkPhysicalDeviceProtectedMemoryProperties* vkphysicaldeviceprotectedmemoryproperties = malloc(___arg1 * sizeof(VkPhysicalDeviceProtectedMemoryProperties));
      ___return (vkphysicaldeviceprotectedmemoryproperties);")
   (define-c-lambda
      ref-VkPhysicalDeviceProtectedMemoryProperties
      (VkPhysicalDeviceProtectedMemoryProperties* int)
      VkPhysicalDeviceProtectedMemoryProperties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceProtectedMemoryProperties
      ((pointer VkPhysicalDeviceProtectedMemoryProperties))
      VkPhysicalDeviceProtectedMemoryProperties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceProtectedMemoryProperties
      (void* VkBool32)
      VkPhysicalDeviceProtectedMemoryProperties*
      "VkPhysicalDeviceProtectedMemoryProperties *physicaldeviceprotectedmemoryproperties = malloc(sizeof(VkPhysicalDeviceProtectedMemoryProperties));
physicaldeviceprotectedmemoryproperties->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
physicaldeviceprotectedmemoryproperties->pNext=___arg1;
physicaldeviceprotectedmemoryproperties->protectedNoFault=___arg2;
___return (physicaldeviceprotectedmemoryproperties);"))
(begin-ffi
   (make-VkDeviceQueueInfo2
      ptr->VkDeviceQueueInfo2
      ref-VkDeviceQueueInfo2
      make-VkDeviceQueueInfo2*
      VkDeviceQueueInfo2queueIndex
      VkDeviceQueueInfo2queueFamilyIndex
      VkDeviceQueueInfo2flags
      VkDeviceQueueInfo2pNext
      VkDeviceQueueInfo2sType
      VkDeviceQueueInfo2
      VkDeviceQueueInfo2*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDeviceQueueInfo2 (struct "VkDeviceQueueInfo2"))
   (c-define-type VkDeviceQueueInfo2* (pointer VkDeviceQueueInfo2))
   (define-c-lambda
      VkDeviceQueueInfo2sType
      (VkDeviceQueueInfo2*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceQueueInfo2pNext
      (VkDeviceQueueInfo2*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceQueueInfo2flags
      (VkDeviceQueueInfo2*)
      VkDeviceQueueCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDeviceQueueInfo2queueFamilyIndex
      (VkDeviceQueueInfo2*)
      uint32_t
      "___return (___arg1->queueFamilyIndex);")
   (define-c-lambda
      VkDeviceQueueInfo2queueIndex
      (VkDeviceQueueInfo2*)
      uint32_t
      "___return (___arg1->queueIndex);")
   (define-c-lambda
      make-VkDeviceQueueInfo2*
      (int)
      VkDeviceQueueInfo2*
      "VkDeviceQueueInfo2* vkdevicequeueinfo2 = malloc(___arg1 * sizeof(VkDeviceQueueInfo2));
      ___return (vkdevicequeueinfo2);")
   (define-c-lambda
      ref-VkDeviceQueueInfo2
      (VkDeviceQueueInfo2* int)
      VkDeviceQueueInfo2*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceQueueInfo2
      ((pointer VkDeviceQueueInfo2))
      VkDeviceQueueInfo2
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceQueueInfo2
      (void* VkDeviceQueueCreateFlags uint32_t uint32_t)
      VkDeviceQueueInfo2*
      "VkDeviceQueueInfo2 *devicequeueinfo2 = malloc(sizeof(VkDeviceQueueInfo2));
devicequeueinfo2->sType=VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
devicequeueinfo2->pNext=___arg1;
devicequeueinfo2->flags=___arg2;
devicequeueinfo2->queueFamilyIndex=___arg3;
devicequeueinfo2->queueIndex=___arg4;
___return (devicequeueinfo2);"))
(begin-ffi
   (make-VkPipelineCoverageToColorStateCreateInfoNV
      ptr->VkPipelineCoverageToColorStateCreateInfoNV
      ref-VkPipelineCoverageToColorStateCreateInfoNV
      make-VkPipelineCoverageToColorStateCreateInfoNV*
      VkPipelineCoverageToColorStateCreateInfoNVcoverageToColorLocation
      VkPipelineCoverageToColorStateCreateInfoNVcoverageToColorEnable
      VkPipelineCoverageToColorStateCreateInfoNVflags
      VkPipelineCoverageToColorStateCreateInfoNVpNext
      VkPipelineCoverageToColorStateCreateInfoNVsType
      VkPipelineCoverageToColorStateCreateInfoNV
      VkPipelineCoverageToColorStateCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineCoverageToColorStateCreateInfoNV
      (struct "VkPipelineCoverageToColorStateCreateInfoNV"))
   (c-define-type
      VkPipelineCoverageToColorStateCreateInfoNV*
      (pointer VkPipelineCoverageToColorStateCreateInfoNV))
   (define-c-lambda
      VkPipelineCoverageToColorStateCreateInfoNVsType
      (VkPipelineCoverageToColorStateCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineCoverageToColorStateCreateInfoNVpNext
      (VkPipelineCoverageToColorStateCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineCoverageToColorStateCreateInfoNVflags
      (VkPipelineCoverageToColorStateCreateInfoNV*)
      VkPipelineCoverageToColorStateCreateFlagsNV
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineCoverageToColorStateCreateInfoNVcoverageToColorEnable
      (VkPipelineCoverageToColorStateCreateInfoNV*)
      VkBool32
      "___return (___arg1->coverageToColorEnable);")
   (define-c-lambda
      VkPipelineCoverageToColorStateCreateInfoNVcoverageToColorLocation
      (VkPipelineCoverageToColorStateCreateInfoNV*)
      uint32_t
      "___return (___arg1->coverageToColorLocation);")
   (define-c-lambda
      make-VkPipelineCoverageToColorStateCreateInfoNV*
      (int)
      VkPipelineCoverageToColorStateCreateInfoNV*
      "VkPipelineCoverageToColorStateCreateInfoNV* vkpipelinecoveragetocolorstatecreateinfonv = malloc(___arg1 * sizeof(VkPipelineCoverageToColorStateCreateInfoNV));
      ___return (vkpipelinecoveragetocolorstatecreateinfonv);")
   (define-c-lambda
      ref-VkPipelineCoverageToColorStateCreateInfoNV
      (VkPipelineCoverageToColorStateCreateInfoNV* int)
      VkPipelineCoverageToColorStateCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineCoverageToColorStateCreateInfoNV
      ((pointer VkPipelineCoverageToColorStateCreateInfoNV))
      VkPipelineCoverageToColorStateCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineCoverageToColorStateCreateInfoNV
      (void* VkPipelineCoverageToColorStateCreateFlagsNV VkBool32 uint32_t)
      VkPipelineCoverageToColorStateCreateInfoNV*
      "VkPipelineCoverageToColorStateCreateInfoNV *pipelinecoveragetocolorstatecreateinfonv = malloc(sizeof(VkPipelineCoverageToColorStateCreateInfoNV));
pipelinecoveragetocolorstatecreateinfonv->sType=VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
pipelinecoveragetocolorstatecreateinfonv->pNext=___arg1;
pipelinecoveragetocolorstatecreateinfonv->flags=___arg2;
pipelinecoveragetocolorstatecreateinfonv->coverageToColorEnable=___arg3;
pipelinecoveragetocolorstatecreateinfonv->coverageToColorLocation=___arg4;
___return (pipelinecoveragetocolorstatecreateinfonv);"))
(begin-ffi
   (make-VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
      ptr->VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
      ref-VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
      make-VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTfilterMinmaxImageComponentMapping
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTfilterMinmaxSingleComponentFormats
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTpNext
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTsType
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
      (struct "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*
      (pointer VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTsType
      (VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTpNext
      (VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTfilterMinmaxSingleComponentFormats
      (VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*)
      VkBool32
      "___return (___arg1->filterMinmaxSingleComponentFormats);")
   (define-c-lambda
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTfilterMinmaxImageComponentMapping
      (VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*)
      VkBool32
      "___return (___arg1->filterMinmaxImageComponentMapping);")
   (define-c-lambda
      make-VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*
      (int)
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*
      "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* vkphysicaldevicesamplerfilterminmaxpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT));
      ___return (vkphysicaldevicesamplerfilterminmaxpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
      (VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* int)
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
      ((pointer VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT))
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT*
      "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT *physicaldevicesamplerfilterminmaxpropertiesext = malloc(sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT));
physicaldevicesamplerfilterminmaxpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT;
physicaldevicesamplerfilterminmaxpropertiesext->pNext=___arg1;
physicaldevicesamplerfilterminmaxpropertiesext->filterMinmaxSingleComponentFormats=___arg2;
physicaldevicesamplerfilterminmaxpropertiesext->filterMinmaxImageComponentMapping=___arg3;
___return (physicaldevicesamplerfilterminmaxpropertiesext);"))
(begin-ffi
   (make-VkSampleLocationEXT
      ptr->VkSampleLocationEXT
      ref-VkSampleLocationEXT
      make-VkSampleLocationEXT*
      VkSampleLocationEXTy
      VkSampleLocationEXTx
      VkSampleLocationEXT
      VkSampleLocationEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSampleLocationEXT (struct "VkSampleLocationEXT"))
   (c-define-type VkSampleLocationEXT* (pointer VkSampleLocationEXT))
   (define-c-lambda
      VkSampleLocationEXTx
      (VkSampleLocationEXT*)
      float
      "___return (___arg1->x);")
   (define-c-lambda
      VkSampleLocationEXTy
      (VkSampleLocationEXT*)
      float
      "___return (___arg1->y);")
   (define-c-lambda
      make-VkSampleLocationEXT*
      (int)
      VkSampleLocationEXT*
      "VkSampleLocationEXT* vksamplelocationext = malloc(___arg1 * sizeof(VkSampleLocationEXT));
      ___return (vksamplelocationext);")
   (define-c-lambda
      ref-VkSampleLocationEXT
      (VkSampleLocationEXT* int)
      VkSampleLocationEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSampleLocationEXT
      ((pointer VkSampleLocationEXT))
      VkSampleLocationEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSampleLocationEXT
      (float float)
      VkSampleLocationEXT*
      "VkSampleLocationEXT *samplelocationext = malloc(sizeof(VkSampleLocationEXT));
samplelocationext->x=___arg1;
samplelocationext->y=___arg2;
___return (samplelocationext);"))
(begin-ffi
   (make-VkSampleLocationsInfoEXT
      ptr->VkSampleLocationsInfoEXT
      ref-VkSampleLocationsInfoEXT
      make-VkSampleLocationsInfoEXT*
      VkSampleLocationsInfoEXTpSampleLocations
      VkSampleLocationsInfoEXTsampleLocationsCount
      VkSampleLocationsInfoEXTsampleLocationGridSize
      VkSampleLocationsInfoEXTsampleLocationsPerPixel
      VkSampleLocationsInfoEXTpNext
      VkSampleLocationsInfoEXTsType
      VkSampleLocationsInfoEXT
      VkSampleLocationsInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSampleLocationsInfoEXT (struct "VkSampleLocationsInfoEXT"))
   (c-define-type VkSampleLocationsInfoEXT* (pointer VkSampleLocationsInfoEXT))
   (define-c-lambda
      VkSampleLocationsInfoEXTsType
      (VkSampleLocationsInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSampleLocationsInfoEXTpNext
      (VkSampleLocationsInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSampleLocationsInfoEXTsampleLocationsPerPixel
      (VkSampleLocationsInfoEXT*)
      VkSampleCountFlagBits
      "___return (___arg1->sampleLocationsPerPixel);")
   (define-c-lambda
      VkSampleLocationsInfoEXTsampleLocationGridSize
      (VkSampleLocationsInfoEXT*)
      VkExtent2D
      "___return (___arg1->sampleLocationGridSize);")
   (define-c-lambda
      VkSampleLocationsInfoEXTsampleLocationsCount
      (VkSampleLocationsInfoEXT*)
      uint32_t
      "___return (___arg1->sampleLocationsCount);")
   (define-c-lambda
      VkSampleLocationsInfoEXTpSampleLocations
      (VkSampleLocationsInfoEXT*)
      VkSampleLocationEXT*
      "___return (___arg1->pSampleLocations);")
   (define-c-lambda
      make-VkSampleLocationsInfoEXT*
      (int)
      VkSampleLocationsInfoEXT*
      "VkSampleLocationsInfoEXT* vksamplelocationsinfoext = malloc(___arg1 * sizeof(VkSampleLocationsInfoEXT));
      ___return (vksamplelocationsinfoext);")
   (define-c-lambda
      ref-VkSampleLocationsInfoEXT
      (VkSampleLocationsInfoEXT* int)
      VkSampleLocationsInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSampleLocationsInfoEXT
      ((pointer VkSampleLocationsInfoEXT))
      VkSampleLocationsInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSampleLocationsInfoEXT
      (void* VkSampleCountFlagBits VkExtent2D uint32_t VkSampleLocationEXT*)
      VkSampleLocationsInfoEXT*
      "VkSampleLocationsInfoEXT *samplelocationsinfoext = malloc(sizeof(VkSampleLocationsInfoEXT));
samplelocationsinfoext->sType=VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
samplelocationsinfoext->pNext=___arg1;
samplelocationsinfoext->sampleLocationsPerPixel=___arg2;
samplelocationsinfoext->sampleLocationGridSize=___arg3;
samplelocationsinfoext->sampleLocationsCount=___arg4;
samplelocationsinfoext->pSampleLocations=___arg5;
___return (samplelocationsinfoext);"))
(begin-ffi
   (make-VkAttachmentSampleLocationsEXT
      ptr->VkAttachmentSampleLocationsEXT
      ref-VkAttachmentSampleLocationsEXT
      make-VkAttachmentSampleLocationsEXT*
      VkAttachmentSampleLocationsEXTsampleLocationsInfo
      VkAttachmentSampleLocationsEXTattachmentIndex
      VkAttachmentSampleLocationsEXT
      VkAttachmentSampleLocationsEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkAttachmentSampleLocationsEXT
      (struct "VkAttachmentSampleLocationsEXT"))
   (c-define-type
      VkAttachmentSampleLocationsEXT*
      (pointer VkAttachmentSampleLocationsEXT))
   (define-c-lambda
      VkAttachmentSampleLocationsEXTattachmentIndex
      (VkAttachmentSampleLocationsEXT*)
      uint32_t
      "___return (___arg1->attachmentIndex);")
   (define-c-lambda
      VkAttachmentSampleLocationsEXTsampleLocationsInfo
      (VkAttachmentSampleLocationsEXT*)
      VkSampleLocationsInfoEXT
      "___return (___arg1->sampleLocationsInfo);")
   (define-c-lambda
      make-VkAttachmentSampleLocationsEXT*
      (int)
      VkAttachmentSampleLocationsEXT*
      "VkAttachmentSampleLocationsEXT* vkattachmentsamplelocationsext = malloc(___arg1 * sizeof(VkAttachmentSampleLocationsEXT));
      ___return (vkattachmentsamplelocationsext);")
   (define-c-lambda
      ref-VkAttachmentSampleLocationsEXT
      (VkAttachmentSampleLocationsEXT* int)
      VkAttachmentSampleLocationsEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkAttachmentSampleLocationsEXT
      ((pointer VkAttachmentSampleLocationsEXT))
      VkAttachmentSampleLocationsEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkAttachmentSampleLocationsEXT
      (uint32_t VkSampleLocationsInfoEXT)
      VkAttachmentSampleLocationsEXT*
      "VkAttachmentSampleLocationsEXT *attachmentsamplelocationsext = malloc(sizeof(VkAttachmentSampleLocationsEXT));
attachmentsamplelocationsext->attachmentIndex=___arg1;
attachmentsamplelocationsext->sampleLocationsInfo=___arg2;
___return (attachmentsamplelocationsext);"))
(begin-ffi
   (make-VkSubpassSampleLocationsEXT
      ptr->VkSubpassSampleLocationsEXT
      ref-VkSubpassSampleLocationsEXT
      make-VkSubpassSampleLocationsEXT*
      VkSubpassSampleLocationsEXTsampleLocationsInfo
      VkSubpassSampleLocationsEXTsubpassIndex
      VkSubpassSampleLocationsEXT
      VkSubpassSampleLocationsEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSubpassSampleLocationsEXT (struct "VkSubpassSampleLocationsEXT"))
   (c-define-type VkSubpassSampleLocationsEXT* (pointer VkSubpassSampleLocationsEXT))
   (define-c-lambda
      VkSubpassSampleLocationsEXTsubpassIndex
      (VkSubpassSampleLocationsEXT*)
      uint32_t
      "___return (___arg1->subpassIndex);")
   (define-c-lambda
      VkSubpassSampleLocationsEXTsampleLocationsInfo
      (VkSubpassSampleLocationsEXT*)
      VkSampleLocationsInfoEXT
      "___return (___arg1->sampleLocationsInfo);")
   (define-c-lambda
      make-VkSubpassSampleLocationsEXT*
      (int)
      VkSubpassSampleLocationsEXT*
      "VkSubpassSampleLocationsEXT* vksubpasssamplelocationsext = malloc(___arg1 * sizeof(VkSubpassSampleLocationsEXT));
      ___return (vksubpasssamplelocationsext);")
   (define-c-lambda
      ref-VkSubpassSampleLocationsEXT
      (VkSubpassSampleLocationsEXT* int)
      VkSubpassSampleLocationsEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSubpassSampleLocationsEXT
      ((pointer VkSubpassSampleLocationsEXT))
      VkSubpassSampleLocationsEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSubpassSampleLocationsEXT
      (uint32_t VkSampleLocationsInfoEXT)
      VkSubpassSampleLocationsEXT*
      "VkSubpassSampleLocationsEXT *subpasssamplelocationsext = malloc(sizeof(VkSubpassSampleLocationsEXT));
subpasssamplelocationsext->subpassIndex=___arg1;
subpasssamplelocationsext->sampleLocationsInfo=___arg2;
___return (subpasssamplelocationsext);"))
(begin-ffi
   (make-VkRenderPassSampleLocationsBeginInfoEXT
      ptr->VkRenderPassSampleLocationsBeginInfoEXT
      ref-VkRenderPassSampleLocationsBeginInfoEXT
      make-VkRenderPassSampleLocationsBeginInfoEXT*
      VkRenderPassSampleLocationsBeginInfoEXTpPostSubpassSampleLocations
      VkRenderPassSampleLocationsBeginInfoEXTpostSubpassSampleLocationsCount
      VkRenderPassSampleLocationsBeginInfoEXTpAttachmentInitialSampleLocations
      VkRenderPassSampleLocationsBeginInfoEXTattachmentInitialSampleLocationsCount
      VkRenderPassSampleLocationsBeginInfoEXTpNext
      VkRenderPassSampleLocationsBeginInfoEXTsType
      VkRenderPassSampleLocationsBeginInfoEXT
      VkRenderPassSampleLocationsBeginInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkRenderPassSampleLocationsBeginInfoEXT
      (struct "VkRenderPassSampleLocationsBeginInfoEXT"))
   (c-define-type
      VkRenderPassSampleLocationsBeginInfoEXT*
      (pointer VkRenderPassSampleLocationsBeginInfoEXT))
   (define-c-lambda
      VkRenderPassSampleLocationsBeginInfoEXTsType
      (VkRenderPassSampleLocationsBeginInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkRenderPassSampleLocationsBeginInfoEXTpNext
      (VkRenderPassSampleLocationsBeginInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkRenderPassSampleLocationsBeginInfoEXTattachmentInitialSampleLocationsCount
      (VkRenderPassSampleLocationsBeginInfoEXT*)
      uint32_t
      "___return (___arg1->attachmentInitialSampleLocationsCount);")
   (define-c-lambda
      VkRenderPassSampleLocationsBeginInfoEXTpAttachmentInitialSampleLocations
      (VkRenderPassSampleLocationsBeginInfoEXT*)
      VkAttachmentSampleLocationsEXT*
      "___return (___arg1->pAttachmentInitialSampleLocations);")
   (define-c-lambda
      VkRenderPassSampleLocationsBeginInfoEXTpostSubpassSampleLocationsCount
      (VkRenderPassSampleLocationsBeginInfoEXT*)
      uint32_t
      "___return (___arg1->postSubpassSampleLocationsCount);")
   (define-c-lambda
      VkRenderPassSampleLocationsBeginInfoEXTpPostSubpassSampleLocations
      (VkRenderPassSampleLocationsBeginInfoEXT*)
      VkSubpassSampleLocationsEXT*
      "___return (___arg1->pPostSubpassSampleLocations);")
   (define-c-lambda
      make-VkRenderPassSampleLocationsBeginInfoEXT*
      (int)
      VkRenderPassSampleLocationsBeginInfoEXT*
      "VkRenderPassSampleLocationsBeginInfoEXT* vkrenderpasssamplelocationsbegininfoext = malloc(___arg1 * sizeof(VkRenderPassSampleLocationsBeginInfoEXT));
      ___return (vkrenderpasssamplelocationsbegininfoext);")
   (define-c-lambda
      ref-VkRenderPassSampleLocationsBeginInfoEXT
      (VkRenderPassSampleLocationsBeginInfoEXT* int)
      VkRenderPassSampleLocationsBeginInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkRenderPassSampleLocationsBeginInfoEXT
      ((pointer VkRenderPassSampleLocationsBeginInfoEXT))
      VkRenderPassSampleLocationsBeginInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkRenderPassSampleLocationsBeginInfoEXT
      (void*
         uint32_t
         VkAttachmentSampleLocationsEXT*
         uint32_t
         VkSubpassSampleLocationsEXT*)
      VkRenderPassSampleLocationsBeginInfoEXT*
      "VkRenderPassSampleLocationsBeginInfoEXT *renderpasssamplelocationsbegininfoext = malloc(sizeof(VkRenderPassSampleLocationsBeginInfoEXT));
renderpasssamplelocationsbegininfoext->sType=VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
renderpasssamplelocationsbegininfoext->pNext=___arg1;
renderpasssamplelocationsbegininfoext->attachmentInitialSampleLocationsCount=___arg2;
renderpasssamplelocationsbegininfoext->pAttachmentInitialSampleLocations=___arg3;
renderpasssamplelocationsbegininfoext->postSubpassSampleLocationsCount=___arg4;
renderpasssamplelocationsbegininfoext->pPostSubpassSampleLocations=___arg5;
___return (renderpasssamplelocationsbegininfoext);"))
(begin-ffi
   (make-VkPipelineSampleLocationsStateCreateInfoEXT
      ptr->VkPipelineSampleLocationsStateCreateInfoEXT
      ref-VkPipelineSampleLocationsStateCreateInfoEXT
      make-VkPipelineSampleLocationsStateCreateInfoEXT*
      VkPipelineSampleLocationsStateCreateInfoEXTsampleLocationsInfo
      VkPipelineSampleLocationsStateCreateInfoEXTsampleLocationsEnable
      VkPipelineSampleLocationsStateCreateInfoEXTpNext
      VkPipelineSampleLocationsStateCreateInfoEXTsType
      VkPipelineSampleLocationsStateCreateInfoEXT
      VkPipelineSampleLocationsStateCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineSampleLocationsStateCreateInfoEXT
      (struct "VkPipelineSampleLocationsStateCreateInfoEXT"))
   (c-define-type
      VkPipelineSampleLocationsStateCreateInfoEXT*
      (pointer VkPipelineSampleLocationsStateCreateInfoEXT))
   (define-c-lambda
      VkPipelineSampleLocationsStateCreateInfoEXTsType
      (VkPipelineSampleLocationsStateCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineSampleLocationsStateCreateInfoEXTpNext
      (VkPipelineSampleLocationsStateCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineSampleLocationsStateCreateInfoEXTsampleLocationsEnable
      (VkPipelineSampleLocationsStateCreateInfoEXT*)
      VkBool32
      "___return (___arg1->sampleLocationsEnable);")
   (define-c-lambda
      VkPipelineSampleLocationsStateCreateInfoEXTsampleLocationsInfo
      (VkPipelineSampleLocationsStateCreateInfoEXT*)
      VkSampleLocationsInfoEXT
      "___return (___arg1->sampleLocationsInfo);")
   (define-c-lambda
      make-VkPipelineSampleLocationsStateCreateInfoEXT*
      (int)
      VkPipelineSampleLocationsStateCreateInfoEXT*
      "VkPipelineSampleLocationsStateCreateInfoEXT* vkpipelinesamplelocationsstatecreateinfoext = malloc(___arg1 * sizeof(VkPipelineSampleLocationsStateCreateInfoEXT));
      ___return (vkpipelinesamplelocationsstatecreateinfoext);")
   (define-c-lambda
      ref-VkPipelineSampleLocationsStateCreateInfoEXT
      (VkPipelineSampleLocationsStateCreateInfoEXT* int)
      VkPipelineSampleLocationsStateCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineSampleLocationsStateCreateInfoEXT
      ((pointer VkPipelineSampleLocationsStateCreateInfoEXT))
      VkPipelineSampleLocationsStateCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineSampleLocationsStateCreateInfoEXT
      (void* VkBool32 VkSampleLocationsInfoEXT)
      VkPipelineSampleLocationsStateCreateInfoEXT*
      "VkPipelineSampleLocationsStateCreateInfoEXT *pipelinesamplelocationsstatecreateinfoext = malloc(sizeof(VkPipelineSampleLocationsStateCreateInfoEXT));
pipelinesamplelocationsstatecreateinfoext->sType=VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
pipelinesamplelocationsstatecreateinfoext->pNext=___arg1;
pipelinesamplelocationsstatecreateinfoext->sampleLocationsEnable=___arg2;
pipelinesamplelocationsstatecreateinfoext->sampleLocationsInfo=___arg3;
___return (pipelinesamplelocationsstatecreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceSampleLocationsPropertiesEXT
      ptr->VkPhysicalDeviceSampleLocationsPropertiesEXT
      ref-VkPhysicalDeviceSampleLocationsPropertiesEXT
      make-VkPhysicalDeviceSampleLocationsPropertiesEXT*
      VkPhysicalDeviceSampleLocationsPropertiesEXTvariableSampleLocations
      VkPhysicalDeviceSampleLocationsPropertiesEXTsampleLocationSubPixelBits
      VkPhysicalDeviceSampleLocationsPropertiesEXTsampleLocationCoordinateRange
      VkPhysicalDeviceSampleLocationsPropertiesEXTmaxSampleLocationGridSize
      VkPhysicalDeviceSampleLocationsPropertiesEXTsampleLocationSampleCounts
      VkPhysicalDeviceSampleLocationsPropertiesEXTpNext
      VkPhysicalDeviceSampleLocationsPropertiesEXTsType
      VkPhysicalDeviceSampleLocationsPropertiesEXT
      VkPhysicalDeviceSampleLocationsPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSampleLocationsPropertiesEXT
      (struct "VkPhysicalDeviceSampleLocationsPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceSampleLocationsPropertiesEXT*
      (pointer VkPhysicalDeviceSampleLocationsPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceSampleLocationsPropertiesEXTsType
      (VkPhysicalDeviceSampleLocationsPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceSampleLocationsPropertiesEXTpNext
      (VkPhysicalDeviceSampleLocationsPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceSampleLocationsPropertiesEXTsampleLocationSampleCounts
      (VkPhysicalDeviceSampleLocationsPropertiesEXT*)
      VkSampleCountFlags
      "___return (___arg1->sampleLocationSampleCounts);")
   (define-c-lambda
      VkPhysicalDeviceSampleLocationsPropertiesEXTmaxSampleLocationGridSize
      (VkPhysicalDeviceSampleLocationsPropertiesEXT*)
      VkExtent2D
      "___return (___arg1->maxSampleLocationGridSize);")
   (define-c-lambda
      VkPhysicalDeviceSampleLocationsPropertiesEXTsampleLocationCoordinateRange
      (VkPhysicalDeviceSampleLocationsPropertiesEXT*)
      float*
      "___return (___arg1->sampleLocationCoordinateRange);")
   (define-c-lambda
      VkPhysicalDeviceSampleLocationsPropertiesEXTsampleLocationSubPixelBits
      (VkPhysicalDeviceSampleLocationsPropertiesEXT*)
      uint32_t
      "___return (___arg1->sampleLocationSubPixelBits);")
   (define-c-lambda
      VkPhysicalDeviceSampleLocationsPropertiesEXTvariableSampleLocations
      (VkPhysicalDeviceSampleLocationsPropertiesEXT*)
      VkBool32
      "___return (___arg1->variableSampleLocations);")
   (define-c-lambda
      make-VkPhysicalDeviceSampleLocationsPropertiesEXT*
      (int)
      VkPhysicalDeviceSampleLocationsPropertiesEXT*
      "VkPhysicalDeviceSampleLocationsPropertiesEXT* vkphysicaldevicesamplelocationspropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT));
      ___return (vkphysicaldevicesamplelocationspropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceSampleLocationsPropertiesEXT
      (VkPhysicalDeviceSampleLocationsPropertiesEXT* int)
      VkPhysicalDeviceSampleLocationsPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceSampleLocationsPropertiesEXT
      ((pointer VkPhysicalDeviceSampleLocationsPropertiesEXT))
      VkPhysicalDeviceSampleLocationsPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceSampleLocationsPropertiesEXT
      (void* VkSampleCountFlags VkExtent2D float* uint32_t VkBool32)
      VkPhysicalDeviceSampleLocationsPropertiesEXT*
      "VkPhysicalDeviceSampleLocationsPropertiesEXT *physicaldevicesamplelocationspropertiesext = malloc(sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT));
physicaldevicesamplelocationspropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
physicaldevicesamplelocationspropertiesext->pNext=___arg1;
physicaldevicesamplelocationspropertiesext->sampleLocationSampleCounts=___arg2;
physicaldevicesamplelocationspropertiesext->maxSampleLocationGridSize=___arg3;
memcpy(physicaldevicesamplelocationspropertiesext->sampleLocationCoordinateRange,___arg4,sizeof(___arg4));
physicaldevicesamplelocationspropertiesext->sampleLocationSubPixelBits=___arg5;
physicaldevicesamplelocationspropertiesext->variableSampleLocations=___arg6;
___return (physicaldevicesamplelocationspropertiesext);"))
(begin-ffi
   (make-VkMultisamplePropertiesEXT
      ptr->VkMultisamplePropertiesEXT
      ref-VkMultisamplePropertiesEXT
      make-VkMultisamplePropertiesEXT*
      VkMultisamplePropertiesEXTmaxSampleLocationGridSize
      VkMultisamplePropertiesEXTpNext
      VkMultisamplePropertiesEXTsType
      VkMultisamplePropertiesEXT
      VkMultisamplePropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkMultisamplePropertiesEXT (struct "VkMultisamplePropertiesEXT"))
   (c-define-type VkMultisamplePropertiesEXT* (pointer VkMultisamplePropertiesEXT))
   (define-c-lambda
      VkMultisamplePropertiesEXTsType
      (VkMultisamplePropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMultisamplePropertiesEXTpNext
      (VkMultisamplePropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMultisamplePropertiesEXTmaxSampleLocationGridSize
      (VkMultisamplePropertiesEXT*)
      VkExtent2D
      "___return (___arg1->maxSampleLocationGridSize);")
   (define-c-lambda
      make-VkMultisamplePropertiesEXT*
      (int)
      VkMultisamplePropertiesEXT*
      "VkMultisamplePropertiesEXT* vkmultisamplepropertiesext = malloc(___arg1 * sizeof(VkMultisamplePropertiesEXT));
      ___return (vkmultisamplepropertiesext);")
   (define-c-lambda
      ref-VkMultisamplePropertiesEXT
      (VkMultisamplePropertiesEXT* int)
      VkMultisamplePropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMultisamplePropertiesEXT
      ((pointer VkMultisamplePropertiesEXT))
      VkMultisamplePropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMultisamplePropertiesEXT
      (void* VkExtent2D)
      VkMultisamplePropertiesEXT*
      "VkMultisamplePropertiesEXT *multisamplepropertiesext = malloc(sizeof(VkMultisamplePropertiesEXT));
multisamplepropertiesext->sType=VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT;
multisamplepropertiesext->pNext=___arg1;
multisamplepropertiesext->maxSampleLocationGridSize=___arg2;
___return (multisamplepropertiesext);"))
(begin-ffi
   (make-VkSamplerReductionModeCreateInfoEXT
      ptr->VkSamplerReductionModeCreateInfoEXT
      ref-VkSamplerReductionModeCreateInfoEXT
      make-VkSamplerReductionModeCreateInfoEXT*
      VkSamplerReductionModeCreateInfoEXTreductionMode
      VkSamplerReductionModeCreateInfoEXTpNext
      VkSamplerReductionModeCreateInfoEXTsType
      VkSamplerReductionModeCreateInfoEXT
      VkSamplerReductionModeCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSamplerReductionModeCreateInfoEXT
      (struct "VkSamplerReductionModeCreateInfoEXT"))
   (c-define-type
      VkSamplerReductionModeCreateInfoEXT*
      (pointer VkSamplerReductionModeCreateInfoEXT))
   (define-c-lambda
      VkSamplerReductionModeCreateInfoEXTsType
      (VkSamplerReductionModeCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSamplerReductionModeCreateInfoEXTpNext
      (VkSamplerReductionModeCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSamplerReductionModeCreateInfoEXTreductionMode
      (VkSamplerReductionModeCreateInfoEXT*)
      VkSamplerReductionModeEXT
      "___return (___arg1->reductionMode);")
   (define-c-lambda
      make-VkSamplerReductionModeCreateInfoEXT*
      (int)
      VkSamplerReductionModeCreateInfoEXT*
      "VkSamplerReductionModeCreateInfoEXT* vksamplerreductionmodecreateinfoext = malloc(___arg1 * sizeof(VkSamplerReductionModeCreateInfoEXT));
      ___return (vksamplerreductionmodecreateinfoext);")
   (define-c-lambda
      ref-VkSamplerReductionModeCreateInfoEXT
      (VkSamplerReductionModeCreateInfoEXT* int)
      VkSamplerReductionModeCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkSamplerReductionModeCreateInfoEXT
      ((pointer VkSamplerReductionModeCreateInfoEXT))
      VkSamplerReductionModeCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkSamplerReductionModeCreateInfoEXT
      (void* VkSamplerReductionModeEXT)
      VkSamplerReductionModeCreateInfoEXT*
      "VkSamplerReductionModeCreateInfoEXT *samplerreductionmodecreateinfoext = malloc(sizeof(VkSamplerReductionModeCreateInfoEXT));
samplerreductionmodecreateinfoext->sType=VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT;
samplerreductionmodecreateinfoext->pNext=___arg1;
samplerreductionmodecreateinfoext->reductionMode=___arg2;
___return (samplerreductionmodecreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
      ptr->VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
      ref-VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
      make-VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTadvancedBlendCoherentOperations
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTpNext
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTsType
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
      (struct "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*
      (pointer VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTsType
      (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTpNext
      (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTadvancedBlendCoherentOperations
      (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*)
      VkBool32
      "___return (___arg1->advancedBlendCoherentOperations);")
   (define-c-lambda
      make-VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*
      (int)
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*
      "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* vkphysicaldeviceblendoperationadvancedfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT));
      ___return (vkphysicaldeviceblendoperationadvancedfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
      (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* int)
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
      ((pointer VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT))
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*
      "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT *physicaldeviceblendoperationadvancedfeaturesext = malloc(sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT));
physicaldeviceblendoperationadvancedfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
physicaldeviceblendoperationadvancedfeaturesext->pNext=___arg1;
physicaldeviceblendoperationadvancedfeaturesext->advancedBlendCoherentOperations=___arg2;
___return (physicaldeviceblendoperationadvancedfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
      ptr->VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
      ref-VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
      make-VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendAllOperations
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendCorrelatedOverlap
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendNonPremultipliedDstColor
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendNonPremultipliedSrcColor
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendIndependentBlend
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendMaxColorAttachments
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTpNext
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTsType
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
      (struct "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*
      (pointer VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTsType
      (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTpNext
      (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendMaxColorAttachments
      (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)
      uint32_t
      "___return (___arg1->advancedBlendMaxColorAttachments);")
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendIndependentBlend
      (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)
      VkBool32
      "___return (___arg1->advancedBlendIndependentBlend);")
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendNonPremultipliedSrcColor
      (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)
      VkBool32
      "___return (___arg1->advancedBlendNonPremultipliedSrcColor);")
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendNonPremultipliedDstColor
      (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)
      VkBool32
      "___return (___arg1->advancedBlendNonPremultipliedDstColor);")
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendCorrelatedOverlap
      (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)
      VkBool32
      "___return (___arg1->advancedBlendCorrelatedOverlap);")
   (define-c-lambda
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTadvancedBlendAllOperations
      (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)
      VkBool32
      "___return (___arg1->advancedBlendAllOperations);")
   (define-c-lambda
      make-VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*
      (int)
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*
      "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* vkphysicaldeviceblendoperationadvancedpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT));
      ___return (vkphysicaldeviceblendoperationadvancedpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
      (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* int)
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
      ((pointer VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT))
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
      (void* uint32_t VkBool32 VkBool32 VkBool32 VkBool32 VkBool32)
      VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*
      "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *physicaldeviceblendoperationadvancedpropertiesext = malloc(sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT));
physicaldeviceblendoperationadvancedpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
physicaldeviceblendoperationadvancedpropertiesext->pNext=___arg1;
physicaldeviceblendoperationadvancedpropertiesext->advancedBlendMaxColorAttachments=___arg2;
physicaldeviceblendoperationadvancedpropertiesext->advancedBlendIndependentBlend=___arg3;
physicaldeviceblendoperationadvancedpropertiesext->advancedBlendNonPremultipliedSrcColor=___arg4;
physicaldeviceblendoperationadvancedpropertiesext->advancedBlendNonPremultipliedDstColor=___arg5;
physicaldeviceblendoperationadvancedpropertiesext->advancedBlendCorrelatedOverlap=___arg6;
physicaldeviceblendoperationadvancedpropertiesext->advancedBlendAllOperations=___arg7;
___return (physicaldeviceblendoperationadvancedpropertiesext);"))
(begin-ffi
   (make-VkPipelineColorBlendAdvancedStateCreateInfoEXT
      ptr->VkPipelineColorBlendAdvancedStateCreateInfoEXT
      ref-VkPipelineColorBlendAdvancedStateCreateInfoEXT
      make-VkPipelineColorBlendAdvancedStateCreateInfoEXT*
      VkPipelineColorBlendAdvancedStateCreateInfoEXTblendOverlap
      VkPipelineColorBlendAdvancedStateCreateInfoEXTdstPremultiplied
      VkPipelineColorBlendAdvancedStateCreateInfoEXTsrcPremultiplied
      VkPipelineColorBlendAdvancedStateCreateInfoEXTpNext
      VkPipelineColorBlendAdvancedStateCreateInfoEXTsType
      VkPipelineColorBlendAdvancedStateCreateInfoEXT
      VkPipelineColorBlendAdvancedStateCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineColorBlendAdvancedStateCreateInfoEXT
      (struct "VkPipelineColorBlendAdvancedStateCreateInfoEXT"))
   (c-define-type
      VkPipelineColorBlendAdvancedStateCreateInfoEXT*
      (pointer VkPipelineColorBlendAdvancedStateCreateInfoEXT))
   (define-c-lambda
      VkPipelineColorBlendAdvancedStateCreateInfoEXTsType
      (VkPipelineColorBlendAdvancedStateCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineColorBlendAdvancedStateCreateInfoEXTpNext
      (VkPipelineColorBlendAdvancedStateCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineColorBlendAdvancedStateCreateInfoEXTsrcPremultiplied
      (VkPipelineColorBlendAdvancedStateCreateInfoEXT*)
      VkBool32
      "___return (___arg1->srcPremultiplied);")
   (define-c-lambda
      VkPipelineColorBlendAdvancedStateCreateInfoEXTdstPremultiplied
      (VkPipelineColorBlendAdvancedStateCreateInfoEXT*)
      VkBool32
      "___return (___arg1->dstPremultiplied);")
   (define-c-lambda
      VkPipelineColorBlendAdvancedStateCreateInfoEXTblendOverlap
      (VkPipelineColorBlendAdvancedStateCreateInfoEXT*)
      VkBlendOverlapEXT
      "___return (___arg1->blendOverlap);")
   (define-c-lambda
      make-VkPipelineColorBlendAdvancedStateCreateInfoEXT*
      (int)
      VkPipelineColorBlendAdvancedStateCreateInfoEXT*
      "VkPipelineColorBlendAdvancedStateCreateInfoEXT* vkpipelinecolorblendadvancedstatecreateinfoext = malloc(___arg1 * sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT));
      ___return (vkpipelinecolorblendadvancedstatecreateinfoext);")
   (define-c-lambda
      ref-VkPipelineColorBlendAdvancedStateCreateInfoEXT
      (VkPipelineColorBlendAdvancedStateCreateInfoEXT* int)
      VkPipelineColorBlendAdvancedStateCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineColorBlendAdvancedStateCreateInfoEXT
      ((pointer VkPipelineColorBlendAdvancedStateCreateInfoEXT))
      VkPipelineColorBlendAdvancedStateCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineColorBlendAdvancedStateCreateInfoEXT
      (void* VkBool32 VkBool32 VkBlendOverlapEXT)
      VkPipelineColorBlendAdvancedStateCreateInfoEXT*
      "VkPipelineColorBlendAdvancedStateCreateInfoEXT *pipelinecolorblendadvancedstatecreateinfoext = malloc(sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT));
pipelinecolorblendadvancedstatecreateinfoext->sType=VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
pipelinecolorblendadvancedstatecreateinfoext->pNext=___arg1;
pipelinecolorblendadvancedstatecreateinfoext->srcPremultiplied=___arg2;
pipelinecolorblendadvancedstatecreateinfoext->dstPremultiplied=___arg3;
pipelinecolorblendadvancedstatecreateinfoext->blendOverlap=___arg4;
___return (pipelinecolorblendadvancedstatecreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceInlineUniformBlockFeaturesEXT
      ptr->VkPhysicalDeviceInlineUniformBlockFeaturesEXT
      ref-VkPhysicalDeviceInlineUniformBlockFeaturesEXT
      make-VkPhysicalDeviceInlineUniformBlockFeaturesEXT*
      VkPhysicalDeviceInlineUniformBlockFeaturesEXTdescriptorBindingInlineUniformBlockUpdateAfterBind
      VkPhysicalDeviceInlineUniformBlockFeaturesEXTinlineUniformBlock
      VkPhysicalDeviceInlineUniformBlockFeaturesEXTpNext
      VkPhysicalDeviceInlineUniformBlockFeaturesEXTsType
      VkPhysicalDeviceInlineUniformBlockFeaturesEXT
      VkPhysicalDeviceInlineUniformBlockFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceInlineUniformBlockFeaturesEXT
      (struct "VkPhysicalDeviceInlineUniformBlockFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceInlineUniformBlockFeaturesEXT*
      (pointer VkPhysicalDeviceInlineUniformBlockFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockFeaturesEXTsType
      (VkPhysicalDeviceInlineUniformBlockFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockFeaturesEXTpNext
      (VkPhysicalDeviceInlineUniformBlockFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockFeaturesEXTinlineUniformBlock
      (VkPhysicalDeviceInlineUniformBlockFeaturesEXT*)
      VkBool32
      "___return (___arg1->inlineUniformBlock);")
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockFeaturesEXTdescriptorBindingInlineUniformBlockUpdateAfterBind
      (VkPhysicalDeviceInlineUniformBlockFeaturesEXT*)
      VkBool32
      "___return (___arg1->descriptorBindingInlineUniformBlockUpdateAfterBind);")
   (define-c-lambda
      make-VkPhysicalDeviceInlineUniformBlockFeaturesEXT*
      (int)
      VkPhysicalDeviceInlineUniformBlockFeaturesEXT*
      "VkPhysicalDeviceInlineUniformBlockFeaturesEXT* vkphysicaldeviceinlineuniformblockfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT));
      ___return (vkphysicaldeviceinlineuniformblockfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceInlineUniformBlockFeaturesEXT
      (VkPhysicalDeviceInlineUniformBlockFeaturesEXT* int)
      VkPhysicalDeviceInlineUniformBlockFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceInlineUniformBlockFeaturesEXT
      ((pointer VkPhysicalDeviceInlineUniformBlockFeaturesEXT))
      VkPhysicalDeviceInlineUniformBlockFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceInlineUniformBlockFeaturesEXT
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceInlineUniformBlockFeaturesEXT*
      "VkPhysicalDeviceInlineUniformBlockFeaturesEXT *physicaldeviceinlineuniformblockfeaturesext = malloc(sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT));
physicaldeviceinlineuniformblockfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
physicaldeviceinlineuniformblockfeaturesext->pNext=___arg1;
physicaldeviceinlineuniformblockfeaturesext->inlineUniformBlock=___arg2;
physicaldeviceinlineuniformblockfeaturesext->descriptorBindingInlineUniformBlockUpdateAfterBind=___arg3;
___return (physicaldeviceinlineuniformblockfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceInlineUniformBlockPropertiesEXT
      ptr->VkPhysicalDeviceInlineUniformBlockPropertiesEXT
      ref-VkPhysicalDeviceInlineUniformBlockPropertiesEXT
      make-VkPhysicalDeviceInlineUniformBlockPropertiesEXT*
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTmaxDescriptorSetUpdateAfterBindInlineUniformBlocks
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTmaxDescriptorSetInlineUniformBlocks
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTmaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTmaxPerStageDescriptorInlineUniformBlocks
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTmaxInlineUniformBlockSize
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTpNext
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTsType
      VkPhysicalDeviceInlineUniformBlockPropertiesEXT
      VkPhysicalDeviceInlineUniformBlockPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceInlineUniformBlockPropertiesEXT
      (struct "VkPhysicalDeviceInlineUniformBlockPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceInlineUniformBlockPropertiesEXT*
      (pointer VkPhysicalDeviceInlineUniformBlockPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTsType
      (VkPhysicalDeviceInlineUniformBlockPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTpNext
      (VkPhysicalDeviceInlineUniformBlockPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTmaxInlineUniformBlockSize
      (VkPhysicalDeviceInlineUniformBlockPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxInlineUniformBlockSize);")
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTmaxPerStageDescriptorInlineUniformBlocks
      (VkPhysicalDeviceInlineUniformBlockPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorInlineUniformBlocks);")
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTmaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
      (VkPhysicalDeviceInlineUniformBlockPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks);")
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTmaxDescriptorSetInlineUniformBlocks
      (VkPhysicalDeviceInlineUniformBlockPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDescriptorSetInlineUniformBlocks);")
   (define-c-lambda
      VkPhysicalDeviceInlineUniformBlockPropertiesEXTmaxDescriptorSetUpdateAfterBindInlineUniformBlocks
      (VkPhysicalDeviceInlineUniformBlockPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUpdateAfterBindInlineUniformBlocks);")
   (define-c-lambda
      make-VkPhysicalDeviceInlineUniformBlockPropertiesEXT*
      (int)
      VkPhysicalDeviceInlineUniformBlockPropertiesEXT*
      "VkPhysicalDeviceInlineUniformBlockPropertiesEXT* vkphysicaldeviceinlineuniformblockpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT));
      ___return (vkphysicaldeviceinlineuniformblockpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceInlineUniformBlockPropertiesEXT
      (VkPhysicalDeviceInlineUniformBlockPropertiesEXT* int)
      VkPhysicalDeviceInlineUniformBlockPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceInlineUniformBlockPropertiesEXT
      ((pointer VkPhysicalDeviceInlineUniformBlockPropertiesEXT))
      VkPhysicalDeviceInlineUniformBlockPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceInlineUniformBlockPropertiesEXT
      (void* uint32_t uint32_t uint32_t uint32_t uint32_t)
      VkPhysicalDeviceInlineUniformBlockPropertiesEXT*
      "VkPhysicalDeviceInlineUniformBlockPropertiesEXT *physicaldeviceinlineuniformblockpropertiesext = malloc(sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT));
physicaldeviceinlineuniformblockpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT;
physicaldeviceinlineuniformblockpropertiesext->pNext=___arg1;
physicaldeviceinlineuniformblockpropertiesext->maxInlineUniformBlockSize=___arg2;
physicaldeviceinlineuniformblockpropertiesext->maxPerStageDescriptorInlineUniformBlocks=___arg3;
physicaldeviceinlineuniformblockpropertiesext->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks=___arg4;
physicaldeviceinlineuniformblockpropertiesext->maxDescriptorSetInlineUniformBlocks=___arg5;
physicaldeviceinlineuniformblockpropertiesext->maxDescriptorSetUpdateAfterBindInlineUniformBlocks=___arg6;
___return (physicaldeviceinlineuniformblockpropertiesext);"))
(begin-ffi
   (make-VkWriteDescriptorSetInlineUniformBlockEXT
      ptr->VkWriteDescriptorSetInlineUniformBlockEXT
      ref-VkWriteDescriptorSetInlineUniformBlockEXT
      make-VkWriteDescriptorSetInlineUniformBlockEXT*
      VkWriteDescriptorSetInlineUniformBlockEXTpData
      VkWriteDescriptorSetInlineUniformBlockEXTdataSize
      VkWriteDescriptorSetInlineUniformBlockEXTpNext
      VkWriteDescriptorSetInlineUniformBlockEXTsType
      VkWriteDescriptorSetInlineUniformBlockEXT
      VkWriteDescriptorSetInlineUniformBlockEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkWriteDescriptorSetInlineUniformBlockEXT
      (struct "VkWriteDescriptorSetInlineUniformBlockEXT"))
   (c-define-type
      VkWriteDescriptorSetInlineUniformBlockEXT*
      (pointer VkWriteDescriptorSetInlineUniformBlockEXT))
   (define-c-lambda
      VkWriteDescriptorSetInlineUniformBlockEXTsType
      (VkWriteDescriptorSetInlineUniformBlockEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkWriteDescriptorSetInlineUniformBlockEXTpNext
      (VkWriteDescriptorSetInlineUniformBlockEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkWriteDescriptorSetInlineUniformBlockEXTdataSize
      (VkWriteDescriptorSetInlineUniformBlockEXT*)
      uint32_t
      "___return (___arg1->dataSize);")
   (define-c-lambda
      VkWriteDescriptorSetInlineUniformBlockEXTpData
      (VkWriteDescriptorSetInlineUniformBlockEXT*)
      void*
      "___return (___arg1->pData);")
   (define-c-lambda
      make-VkWriteDescriptorSetInlineUniformBlockEXT*
      (int)
      VkWriteDescriptorSetInlineUniformBlockEXT*
      "VkWriteDescriptorSetInlineUniformBlockEXT* vkwritedescriptorsetinlineuniformblockext = malloc(___arg1 * sizeof(VkWriteDescriptorSetInlineUniformBlockEXT));
      ___return (vkwritedescriptorsetinlineuniformblockext);")
   (define-c-lambda
      ref-VkWriteDescriptorSetInlineUniformBlockEXT
      (VkWriteDescriptorSetInlineUniformBlockEXT* int)
      VkWriteDescriptorSetInlineUniformBlockEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkWriteDescriptorSetInlineUniformBlockEXT
      ((pointer VkWriteDescriptorSetInlineUniformBlockEXT))
      VkWriteDescriptorSetInlineUniformBlockEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkWriteDescriptorSetInlineUniformBlockEXT
      (void* uint32_t void*)
      VkWriteDescriptorSetInlineUniformBlockEXT*
      "VkWriteDescriptorSetInlineUniformBlockEXT *writedescriptorsetinlineuniformblockext = malloc(sizeof(VkWriteDescriptorSetInlineUniformBlockEXT));
writedescriptorsetinlineuniformblockext->sType=VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT;
writedescriptorsetinlineuniformblockext->pNext=___arg1;
writedescriptorsetinlineuniformblockext->dataSize=___arg2;
writedescriptorsetinlineuniformblockext->pData=___arg3;
___return (writedescriptorsetinlineuniformblockext);"))
(begin-ffi
   (make-VkDescriptorPoolInlineUniformBlockCreateInfoEXT
      ptr->VkDescriptorPoolInlineUniformBlockCreateInfoEXT
      ref-VkDescriptorPoolInlineUniformBlockCreateInfoEXT
      make-VkDescriptorPoolInlineUniformBlockCreateInfoEXT*
      VkDescriptorPoolInlineUniformBlockCreateInfoEXTmaxInlineUniformBlockBindings
      VkDescriptorPoolInlineUniformBlockCreateInfoEXTpNext
      VkDescriptorPoolInlineUniformBlockCreateInfoEXTsType
      VkDescriptorPoolInlineUniformBlockCreateInfoEXT
      VkDescriptorPoolInlineUniformBlockCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDescriptorPoolInlineUniformBlockCreateInfoEXT
      (struct "VkDescriptorPoolInlineUniformBlockCreateInfoEXT"))
   (c-define-type
      VkDescriptorPoolInlineUniformBlockCreateInfoEXT*
      (pointer VkDescriptorPoolInlineUniformBlockCreateInfoEXT))
   (define-c-lambda
      VkDescriptorPoolInlineUniformBlockCreateInfoEXTsType
      (VkDescriptorPoolInlineUniformBlockCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDescriptorPoolInlineUniformBlockCreateInfoEXTpNext
      (VkDescriptorPoolInlineUniformBlockCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDescriptorPoolInlineUniformBlockCreateInfoEXTmaxInlineUniformBlockBindings
      (VkDescriptorPoolInlineUniformBlockCreateInfoEXT*)
      uint32_t
      "___return (___arg1->maxInlineUniformBlockBindings);")
   (define-c-lambda
      make-VkDescriptorPoolInlineUniformBlockCreateInfoEXT*
      (int)
      VkDescriptorPoolInlineUniformBlockCreateInfoEXT*
      "VkDescriptorPoolInlineUniformBlockCreateInfoEXT* vkdescriptorpoolinlineuniformblockcreateinfoext = malloc(___arg1 * sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT));
      ___return (vkdescriptorpoolinlineuniformblockcreateinfoext);")
   (define-c-lambda
      ref-VkDescriptorPoolInlineUniformBlockCreateInfoEXT
      (VkDescriptorPoolInlineUniformBlockCreateInfoEXT* int)
      VkDescriptorPoolInlineUniformBlockCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorPoolInlineUniformBlockCreateInfoEXT
      ((pointer VkDescriptorPoolInlineUniformBlockCreateInfoEXT))
      VkDescriptorPoolInlineUniformBlockCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorPoolInlineUniformBlockCreateInfoEXT
      (void* uint32_t)
      VkDescriptorPoolInlineUniformBlockCreateInfoEXT*
      "VkDescriptorPoolInlineUniformBlockCreateInfoEXT *descriptorpoolinlineuniformblockcreateinfoext = malloc(sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT));
descriptorpoolinlineuniformblockcreateinfoext->sType=VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT;
descriptorpoolinlineuniformblockcreateinfoext->pNext=___arg1;
descriptorpoolinlineuniformblockcreateinfoext->maxInlineUniformBlockBindings=___arg2;
___return (descriptorpoolinlineuniformblockcreateinfoext);"))
(begin-ffi
   (make-VkPipelineCoverageModulationStateCreateInfoNV
      ptr->VkPipelineCoverageModulationStateCreateInfoNV
      ref-VkPipelineCoverageModulationStateCreateInfoNV
      make-VkPipelineCoverageModulationStateCreateInfoNV*
      VkPipelineCoverageModulationStateCreateInfoNVpCoverageModulationTable
      VkPipelineCoverageModulationStateCreateInfoNVcoverageModulationTableCount
      VkPipelineCoverageModulationStateCreateInfoNVcoverageModulationTableEnable
      VkPipelineCoverageModulationStateCreateInfoNVcoverageModulationMode
      VkPipelineCoverageModulationStateCreateInfoNVflags
      VkPipelineCoverageModulationStateCreateInfoNVpNext
      VkPipelineCoverageModulationStateCreateInfoNVsType
      VkPipelineCoverageModulationStateCreateInfoNV
      VkPipelineCoverageModulationStateCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineCoverageModulationStateCreateInfoNV
      (struct "VkPipelineCoverageModulationStateCreateInfoNV"))
   (c-define-type
      VkPipelineCoverageModulationStateCreateInfoNV*
      (pointer VkPipelineCoverageModulationStateCreateInfoNV))
   (define-c-lambda
      VkPipelineCoverageModulationStateCreateInfoNVsType
      (VkPipelineCoverageModulationStateCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineCoverageModulationStateCreateInfoNVpNext
      (VkPipelineCoverageModulationStateCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineCoverageModulationStateCreateInfoNVflags
      (VkPipelineCoverageModulationStateCreateInfoNV*)
      VkPipelineCoverageModulationStateCreateFlagsNV
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineCoverageModulationStateCreateInfoNVcoverageModulationMode
      (VkPipelineCoverageModulationStateCreateInfoNV*)
      VkCoverageModulationModeNV
      "___return (___arg1->coverageModulationMode);")
   (define-c-lambda
      VkPipelineCoverageModulationStateCreateInfoNVcoverageModulationTableEnable
      (VkPipelineCoverageModulationStateCreateInfoNV*)
      VkBool32
      "___return (___arg1->coverageModulationTableEnable);")
   (define-c-lambda
      VkPipelineCoverageModulationStateCreateInfoNVcoverageModulationTableCount
      (VkPipelineCoverageModulationStateCreateInfoNV*)
      uint32_t
      "___return (___arg1->coverageModulationTableCount);")
   (define-c-lambda
      VkPipelineCoverageModulationStateCreateInfoNVpCoverageModulationTable
      (VkPipelineCoverageModulationStateCreateInfoNV*)
      float*
      "___return (___arg1->pCoverageModulationTable);")
   (define-c-lambda
      make-VkPipelineCoverageModulationStateCreateInfoNV*
      (int)
      VkPipelineCoverageModulationStateCreateInfoNV*
      "VkPipelineCoverageModulationStateCreateInfoNV* vkpipelinecoveragemodulationstatecreateinfonv = malloc(___arg1 * sizeof(VkPipelineCoverageModulationStateCreateInfoNV));
      ___return (vkpipelinecoveragemodulationstatecreateinfonv);")
   (define-c-lambda
      ref-VkPipelineCoverageModulationStateCreateInfoNV
      (VkPipelineCoverageModulationStateCreateInfoNV* int)
      VkPipelineCoverageModulationStateCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineCoverageModulationStateCreateInfoNV
      ((pointer VkPipelineCoverageModulationStateCreateInfoNV))
      VkPipelineCoverageModulationStateCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineCoverageModulationStateCreateInfoNV
      (void*
         VkPipelineCoverageModulationStateCreateFlagsNV
         VkCoverageModulationModeNV
         VkBool32
         uint32_t
         float*)
      VkPipelineCoverageModulationStateCreateInfoNV*
      "VkPipelineCoverageModulationStateCreateInfoNV *pipelinecoveragemodulationstatecreateinfonv = malloc(sizeof(VkPipelineCoverageModulationStateCreateInfoNV));
pipelinecoveragemodulationstatecreateinfonv->sType=VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
pipelinecoveragemodulationstatecreateinfonv->pNext=___arg1;
pipelinecoveragemodulationstatecreateinfonv->flags=___arg2;
pipelinecoveragemodulationstatecreateinfonv->coverageModulationMode=___arg3;
pipelinecoveragemodulationstatecreateinfonv->coverageModulationTableEnable=___arg4;
pipelinecoveragemodulationstatecreateinfonv->coverageModulationTableCount=___arg5;
pipelinecoveragemodulationstatecreateinfonv->pCoverageModulationTable=___arg6;
___return (pipelinecoveragemodulationstatecreateinfonv);"))
(begin-ffi
   (make-VkImageFormatListCreateInfoKHR
      ptr->VkImageFormatListCreateInfoKHR
      ref-VkImageFormatListCreateInfoKHR
      make-VkImageFormatListCreateInfoKHR*
      VkImageFormatListCreateInfoKHRpViewFormats
      VkImageFormatListCreateInfoKHRviewFormatCount
      VkImageFormatListCreateInfoKHRpNext
      VkImageFormatListCreateInfoKHRsType
      VkImageFormatListCreateInfoKHR
      VkImageFormatListCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImageFormatListCreateInfoKHR
      (struct "VkImageFormatListCreateInfoKHR"))
   (c-define-type
      VkImageFormatListCreateInfoKHR*
      (pointer VkImageFormatListCreateInfoKHR))
   (define-c-lambda
      VkImageFormatListCreateInfoKHRsType
      (VkImageFormatListCreateInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageFormatListCreateInfoKHRpNext
      (VkImageFormatListCreateInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageFormatListCreateInfoKHRviewFormatCount
      (VkImageFormatListCreateInfoKHR*)
      uint32_t
      "___return (___arg1->viewFormatCount);")
   (define-c-lambda
      VkImageFormatListCreateInfoKHRpViewFormats
      (VkImageFormatListCreateInfoKHR*)
      VkFormat*
      "___return (___arg1->pViewFormats);")
   (define-c-lambda
      make-VkImageFormatListCreateInfoKHR*
      (int)
      VkImageFormatListCreateInfoKHR*
      "VkImageFormatListCreateInfoKHR* vkimageformatlistcreateinfokhr = malloc(___arg1 * sizeof(VkImageFormatListCreateInfoKHR));
      ___return (vkimageformatlistcreateinfokhr);")
   (define-c-lambda
      ref-VkImageFormatListCreateInfoKHR
      (VkImageFormatListCreateInfoKHR* int)
      VkImageFormatListCreateInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkImageFormatListCreateInfoKHR
      (void* uint32_t VkFormat*)
      VkImageFormatListCreateInfoKHR*
      "VkImageFormatListCreateInfoKHR *imageformatlistcreateinfokhr = malloc(sizeof(VkImageFormatListCreateInfoKHR));
imageformatlistcreateinfokhr->sType=VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR;
imageformatlistcreateinfokhr->pNext=___arg1;
imageformatlistcreateinfokhr->viewFormatCount=___arg2;
imageformatlistcreateinfokhr->pViewFormats=___arg3;
___return (imageformatlistcreateinfokhr);"))
(begin-ffi
   (make-VkValidationCacheCreateInfoEXT
      ptr->VkValidationCacheCreateInfoEXT
      ref-VkValidationCacheCreateInfoEXT
      make-VkValidationCacheCreateInfoEXT*
      VkValidationCacheCreateInfoEXTpInitialData
      VkValidationCacheCreateInfoEXTinitialDataSize
      VkValidationCacheCreateInfoEXTflags
      VkValidationCacheCreateInfoEXTpNext
      VkValidationCacheCreateInfoEXTsType
      VkValidationCacheCreateInfoEXT
      VkValidationCacheCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkValidationCacheCreateInfoEXT
      (struct "VkValidationCacheCreateInfoEXT"))
   (c-define-type
      VkValidationCacheCreateInfoEXT*
      (pointer VkValidationCacheCreateInfoEXT))
   (define-c-lambda
      VkValidationCacheCreateInfoEXTsType
      (VkValidationCacheCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkValidationCacheCreateInfoEXTpNext
      (VkValidationCacheCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkValidationCacheCreateInfoEXTflags
      (VkValidationCacheCreateInfoEXT*)
      VkValidationCacheCreateFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      VkValidationCacheCreateInfoEXTinitialDataSize
      (VkValidationCacheCreateInfoEXT*)
      size_t
      "___return (___arg1->initialDataSize);")
   (define-c-lambda
      VkValidationCacheCreateInfoEXTpInitialData
      (VkValidationCacheCreateInfoEXT*)
      void*
      "___return (___arg1->pInitialData);")
   (define-c-lambda
      make-VkValidationCacheCreateInfoEXT*
      (int)
      VkValidationCacheCreateInfoEXT*
      "VkValidationCacheCreateInfoEXT* vkvalidationcachecreateinfoext = malloc(___arg1 * sizeof(VkValidationCacheCreateInfoEXT));
      ___return (vkvalidationcachecreateinfoext);")
   (define-c-lambda
      ref-VkValidationCacheCreateInfoEXT
      (VkValidationCacheCreateInfoEXT* int)
      VkValidationCacheCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkValidationCacheCreateInfoEXT
      ((pointer VkValidationCacheCreateInfoEXT))
      VkValidationCacheCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkValidationCacheCreateInfoEXT
      (void* VkValidationCacheCreateFlagsEXT size_t void*)
      VkValidationCacheCreateInfoEXT*
      "VkValidationCacheCreateInfoEXT *validationcachecreateinfoext = malloc(sizeof(VkValidationCacheCreateInfoEXT));
validationcachecreateinfoext->sType=VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT;
validationcachecreateinfoext->pNext=___arg1;
validationcachecreateinfoext->flags=___arg2;
validationcachecreateinfoext->initialDataSize=___arg3;
validationcachecreateinfoext->pInitialData=___arg4;
___return (validationcachecreateinfoext);"))
(begin-ffi
   (make-VkShaderModuleValidationCacheCreateInfoEXT
      ptr->VkShaderModuleValidationCacheCreateInfoEXT
      ref-VkShaderModuleValidationCacheCreateInfoEXT
      make-VkShaderModuleValidationCacheCreateInfoEXT*
      VkShaderModuleValidationCacheCreateInfoEXTvalidationCache
      VkShaderModuleValidationCacheCreateInfoEXTpNext
      VkShaderModuleValidationCacheCreateInfoEXTsType
      VkShaderModuleValidationCacheCreateInfoEXT
      VkShaderModuleValidationCacheCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkShaderModuleValidationCacheCreateInfoEXT
      (struct "VkShaderModuleValidationCacheCreateInfoEXT"))
   (c-define-type
      VkShaderModuleValidationCacheCreateInfoEXT*
      (pointer VkShaderModuleValidationCacheCreateInfoEXT))
   (define-c-lambda
      VkShaderModuleValidationCacheCreateInfoEXTsType
      (VkShaderModuleValidationCacheCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkShaderModuleValidationCacheCreateInfoEXTpNext
      (VkShaderModuleValidationCacheCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkShaderModuleValidationCacheCreateInfoEXTvalidationCache
      (VkShaderModuleValidationCacheCreateInfoEXT*)
      VkValidationCacheEXT
      "___return (___arg1->validationCache);")
   (define-c-lambda
      make-VkShaderModuleValidationCacheCreateInfoEXT*
      (int)
      VkShaderModuleValidationCacheCreateInfoEXT*
      "VkShaderModuleValidationCacheCreateInfoEXT* vkshadermodulevalidationcachecreateinfoext = malloc(___arg1 * sizeof(VkShaderModuleValidationCacheCreateInfoEXT));
      ___return (vkshadermodulevalidationcachecreateinfoext);")
   (define-c-lambda
      ref-VkShaderModuleValidationCacheCreateInfoEXT
      (VkShaderModuleValidationCacheCreateInfoEXT* int)
      VkShaderModuleValidationCacheCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkShaderModuleValidationCacheCreateInfoEXT
      ((pointer VkShaderModuleValidationCacheCreateInfoEXT))
      VkShaderModuleValidationCacheCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkShaderModuleValidationCacheCreateInfoEXT
      (void* VkValidationCacheEXT)
      VkShaderModuleValidationCacheCreateInfoEXT*
      "VkShaderModuleValidationCacheCreateInfoEXT *shadermodulevalidationcachecreateinfoext = malloc(sizeof(VkShaderModuleValidationCacheCreateInfoEXT));
shadermodulevalidationcachecreateinfoext->sType=VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
shadermodulevalidationcachecreateinfoext->pNext=___arg1;
shadermodulevalidationcachecreateinfoext->validationCache=___arg2;
___return (shadermodulevalidationcachecreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceMaintenance3Properties
      ptr->VkPhysicalDeviceMaintenance3Properties
      ref-VkPhysicalDeviceMaintenance3Properties
      make-VkPhysicalDeviceMaintenance3Properties*
      VkPhysicalDeviceMaintenance3PropertiesmaxMemoryAllocationSize
      VkPhysicalDeviceMaintenance3PropertiesmaxPerSetDescriptors
      VkPhysicalDeviceMaintenance3PropertiespNext
      VkPhysicalDeviceMaintenance3PropertiessType
      VkPhysicalDeviceMaintenance3Properties
      VkPhysicalDeviceMaintenance3Properties*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMaintenance3Properties
      (struct "VkPhysicalDeviceMaintenance3Properties"))
   (c-define-type
      VkPhysicalDeviceMaintenance3Properties*
      (pointer VkPhysicalDeviceMaintenance3Properties))
   (define-c-lambda
      VkPhysicalDeviceMaintenance3PropertiessType
      (VkPhysicalDeviceMaintenance3Properties*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceMaintenance3PropertiespNext
      (VkPhysicalDeviceMaintenance3Properties*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceMaintenance3PropertiesmaxPerSetDescriptors
      (VkPhysicalDeviceMaintenance3Properties*)
      uint32_t
      "___return (___arg1->maxPerSetDescriptors);")
   (define-c-lambda
      VkPhysicalDeviceMaintenance3PropertiesmaxMemoryAllocationSize
      (VkPhysicalDeviceMaintenance3Properties*)
      VkDeviceSize
      "___return (___arg1->maxMemoryAllocationSize);")
   (define-c-lambda
      make-VkPhysicalDeviceMaintenance3Properties*
      (int)
      VkPhysicalDeviceMaintenance3Properties*
      "VkPhysicalDeviceMaintenance3Properties* vkphysicaldevicemaintenance3properties = malloc(___arg1 * sizeof(VkPhysicalDeviceMaintenance3Properties));
      ___return (vkphysicaldevicemaintenance3properties);")
   (define-c-lambda
      ref-VkPhysicalDeviceMaintenance3Properties
      (VkPhysicalDeviceMaintenance3Properties* int)
      VkPhysicalDeviceMaintenance3Properties*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceMaintenance3Properties
      ((pointer VkPhysicalDeviceMaintenance3Properties))
      VkPhysicalDeviceMaintenance3Properties
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceMaintenance3Properties
      (void* uint32_t VkDeviceSize)
      VkPhysicalDeviceMaintenance3Properties*
      "VkPhysicalDeviceMaintenance3Properties *physicaldevicemaintenance3properties = malloc(sizeof(VkPhysicalDeviceMaintenance3Properties));
physicaldevicemaintenance3properties->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
physicaldevicemaintenance3properties->pNext=___arg1;
physicaldevicemaintenance3properties->maxPerSetDescriptors=___arg2;
physicaldevicemaintenance3properties->maxMemoryAllocationSize=___arg3;
___return (physicaldevicemaintenance3properties);"))
(begin-ffi
   (make-VkPhysicalDeviceMaintenance3PropertiesKHR
      ptr->VkPhysicalDeviceMaintenance3PropertiesKHR
      ref-VkPhysicalDeviceMaintenance3PropertiesKHR
      make-VkPhysicalDeviceMaintenance3PropertiesKHR*
      VkPhysicalDeviceMaintenance3PropertiesKHR
      VkPhysicalDeviceMaintenance3PropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMaintenance3PropertiesKHR
      (struct "VkPhysicalDeviceMaintenance3PropertiesKHR"))
   (c-define-type
      VkPhysicalDeviceMaintenance3PropertiesKHR*
      (pointer VkPhysicalDeviceMaintenance3PropertiesKHR))
   (define-c-lambda
      make-VkPhysicalDeviceMaintenance3PropertiesKHR*
      (int)
      VkPhysicalDeviceMaintenance3PropertiesKHR*
      "VkPhysicalDeviceMaintenance3PropertiesKHR* vkphysicaldevicemaintenance3propertieskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR));
      ___return (vkphysicaldevicemaintenance3propertieskhr);")
   (define-c-lambda
      make-VkPhysicalDeviceMaintenance3PropertiesKHR
      ()
      VkPhysicalDeviceMaintenance3PropertiesKHR*
      "VkPhysicalDeviceMaintenance3PropertiesKHR *physicaldevicemaintenance3propertieskhr = malloc(sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR));
___return (physicaldevicemaintenance3propertieskhr);"))
(begin-ffi
   (make-VkDescriptorSetLayoutSupport
      ptr->VkDescriptorSetLayoutSupport
      ref-VkDescriptorSetLayoutSupport
      make-VkDescriptorSetLayoutSupport*
      VkDescriptorSetLayoutSupportsupported
      VkDescriptorSetLayoutSupportpNext
      VkDescriptorSetLayoutSupportsType
      VkDescriptorSetLayoutSupport
      VkDescriptorSetLayoutSupport*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDescriptorSetLayoutSupport (struct "VkDescriptorSetLayoutSupport"))
   (c-define-type VkDescriptorSetLayoutSupport* (pointer VkDescriptorSetLayoutSupport))
   (define-c-lambda
      VkDescriptorSetLayoutSupportsType
      (VkDescriptorSetLayoutSupport*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDescriptorSetLayoutSupportpNext
      (VkDescriptorSetLayoutSupport*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDescriptorSetLayoutSupportsupported
      (VkDescriptorSetLayoutSupport*)
      VkBool32
      "___return (___arg1->supported);")
   (define-c-lambda
      make-VkDescriptorSetLayoutSupport*
      (int)
      VkDescriptorSetLayoutSupport*
      "VkDescriptorSetLayoutSupport* vkdescriptorsetlayoutsupport = malloc(___arg1 * sizeof(VkDescriptorSetLayoutSupport));
      ___return (vkdescriptorsetlayoutsupport);")
   (define-c-lambda
      ref-VkDescriptorSetLayoutSupport
      (VkDescriptorSetLayoutSupport* int)
      VkDescriptorSetLayoutSupport*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorSetLayoutSupport
      ((pointer VkDescriptorSetLayoutSupport))
      VkDescriptorSetLayoutSupport
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorSetLayoutSupport
      (void* VkBool32)
      VkDescriptorSetLayoutSupport*
      "VkDescriptorSetLayoutSupport *descriptorsetlayoutsupport = malloc(sizeof(VkDescriptorSetLayoutSupport));
descriptorsetlayoutsupport->sType=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
descriptorsetlayoutsupport->pNext=___arg1;
descriptorsetlayoutsupport->supported=___arg2;
___return (descriptorsetlayoutsupport);"))
(begin-ffi
   (make-VkDescriptorSetLayoutSupportKHR
      ptr->VkDescriptorSetLayoutSupportKHR
      ref-VkDescriptorSetLayoutSupportKHR
      make-VkDescriptorSetLayoutSupportKHR*
      VkDescriptorSetLayoutSupportKHR
      VkDescriptorSetLayoutSupportKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDescriptorSetLayoutSupportKHR
      (struct "VkDescriptorSetLayoutSupportKHR"))
   (c-define-type
      VkDescriptorSetLayoutSupportKHR*
      (pointer VkDescriptorSetLayoutSupportKHR))
   (define-c-lambda
      make-VkDescriptorSetLayoutSupportKHR*
      (int)
      VkDescriptorSetLayoutSupportKHR*
      "VkDescriptorSetLayoutSupportKHR* vkdescriptorsetlayoutsupportkhr = malloc(___arg1 * sizeof(VkDescriptorSetLayoutSupportKHR));
      ___return (vkdescriptorsetlayoutsupportkhr);")
   (define-c-lambda
      make-VkDescriptorSetLayoutSupportKHR
      ()
      VkDescriptorSetLayoutSupportKHR*
      "VkDescriptorSetLayoutSupportKHR *descriptorsetlayoutsupportkhr = malloc(sizeof(VkDescriptorSetLayoutSupportKHR));
___return (descriptorsetlayoutsupportkhr);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderDrawParametersFeatures
      ptr->VkPhysicalDeviceShaderDrawParametersFeatures
      ref-VkPhysicalDeviceShaderDrawParametersFeatures
      make-VkPhysicalDeviceShaderDrawParametersFeatures*
      VkPhysicalDeviceShaderDrawParametersFeaturesshaderDrawParameters
      VkPhysicalDeviceShaderDrawParametersFeaturespNext
      VkPhysicalDeviceShaderDrawParametersFeaturessType
      VkPhysicalDeviceShaderDrawParametersFeatures
      VkPhysicalDeviceShaderDrawParametersFeatures*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderDrawParametersFeatures
      (struct "VkPhysicalDeviceShaderDrawParametersFeatures"))
   (c-define-type
      VkPhysicalDeviceShaderDrawParametersFeatures*
      (pointer VkPhysicalDeviceShaderDrawParametersFeatures))
   (define-c-lambda
      VkPhysicalDeviceShaderDrawParametersFeaturessType
      (VkPhysicalDeviceShaderDrawParametersFeatures*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShaderDrawParametersFeaturespNext
      (VkPhysicalDeviceShaderDrawParametersFeatures*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShaderDrawParametersFeaturesshaderDrawParameters
      (VkPhysicalDeviceShaderDrawParametersFeatures*)
      VkBool32
      "___return (___arg1->shaderDrawParameters);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderDrawParametersFeatures*
      (int)
      VkPhysicalDeviceShaderDrawParametersFeatures*
      "VkPhysicalDeviceShaderDrawParametersFeatures* vkphysicaldeviceshaderdrawparametersfeatures = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderDrawParametersFeatures));
      ___return (vkphysicaldeviceshaderdrawparametersfeatures);")
   (define-c-lambda
      ref-VkPhysicalDeviceShaderDrawParametersFeatures
      (VkPhysicalDeviceShaderDrawParametersFeatures* int)
      VkPhysicalDeviceShaderDrawParametersFeatures*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceShaderDrawParametersFeatures
      ((pointer VkPhysicalDeviceShaderDrawParametersFeatures))
      VkPhysicalDeviceShaderDrawParametersFeatures
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderDrawParametersFeatures
      (void* VkBool32)
      VkPhysicalDeviceShaderDrawParametersFeatures*
      "VkPhysicalDeviceShaderDrawParametersFeatures *physicaldeviceshaderdrawparametersfeatures = malloc(sizeof(VkPhysicalDeviceShaderDrawParametersFeatures));
physicaldeviceshaderdrawparametersfeatures->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
physicaldeviceshaderdrawparametersfeatures->pNext=___arg1;
physicaldeviceshaderdrawparametersfeatures->shaderDrawParameters=___arg2;
___return (physicaldeviceshaderdrawparametersfeatures);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderDrawParameterFeatures
      ptr->VkPhysicalDeviceShaderDrawParameterFeatures
      ref-VkPhysicalDeviceShaderDrawParameterFeatures
      make-VkPhysicalDeviceShaderDrawParameterFeatures*
      VkPhysicalDeviceShaderDrawParameterFeatures
      VkPhysicalDeviceShaderDrawParameterFeatures*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderDrawParameterFeatures
      (struct "VkPhysicalDeviceShaderDrawParameterFeatures"))
   (c-define-type
      VkPhysicalDeviceShaderDrawParameterFeatures*
      (pointer VkPhysicalDeviceShaderDrawParameterFeatures))
   (define-c-lambda
      make-VkPhysicalDeviceShaderDrawParameterFeatures*
      (int)
      VkPhysicalDeviceShaderDrawParameterFeatures*
      "VkPhysicalDeviceShaderDrawParameterFeatures* vkphysicaldeviceshaderdrawparameterfeatures = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderDrawParameterFeatures));
      ___return (vkphysicaldeviceshaderdrawparameterfeatures);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderDrawParameterFeatures
      ()
      VkPhysicalDeviceShaderDrawParameterFeatures*
      "VkPhysicalDeviceShaderDrawParameterFeatures *physicaldeviceshaderdrawparameterfeatures = malloc(sizeof(VkPhysicalDeviceShaderDrawParameterFeatures));
___return (physicaldeviceshaderdrawparameterfeatures);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderFloat16Int8FeaturesKHR
      ptr->VkPhysicalDeviceShaderFloat16Int8FeaturesKHR
      ref-VkPhysicalDeviceShaderFloat16Int8FeaturesKHR
      make-VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHRshaderInt8
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHRshaderFloat16
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHRpNext
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHRsType
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHR
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHR
      (struct "VkPhysicalDeviceShaderFloat16Int8FeaturesKHR"))
   (c-define-type
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*
      (pointer VkPhysicalDeviceShaderFloat16Int8FeaturesKHR))
   (define-c-lambda
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHRsType
      (VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHRpNext
      (VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHRshaderFloat16
      (VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*)
      VkBool32
      "___return (___arg1->shaderFloat16);")
   (define-c-lambda
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHRshaderInt8
      (VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*)
      VkBool32
      "___return (___arg1->shaderInt8);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*
      (int)
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*
      "VkPhysicalDeviceShaderFloat16Int8FeaturesKHR* vkphysicaldeviceshaderfloat16int8featureskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR));
      ___return (vkphysicaldeviceshaderfloat16int8featureskhr);")
   (define-c-lambda
      ref-VkPhysicalDeviceShaderFloat16Int8FeaturesKHR
      (VkPhysicalDeviceShaderFloat16Int8FeaturesKHR* int)
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderFloat16Int8FeaturesKHR
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceShaderFloat16Int8FeaturesKHR*
      "VkPhysicalDeviceShaderFloat16Int8FeaturesKHR *physicaldeviceshaderfloat16int8featureskhr = malloc(sizeof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR));
physicaldeviceshaderfloat16int8featureskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR;
physicaldeviceshaderfloat16int8featureskhr->pNext=___arg1;
physicaldeviceshaderfloat16int8featureskhr->shaderFloat16=___arg2;
physicaldeviceshaderfloat16int8featureskhr->shaderInt8=___arg3;
___return (physicaldeviceshaderfloat16int8featureskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceFloat16Int8FeaturesKHR
      ptr->VkPhysicalDeviceFloat16Int8FeaturesKHR
      ref-VkPhysicalDeviceFloat16Int8FeaturesKHR
      make-VkPhysicalDeviceFloat16Int8FeaturesKHR*
      VkPhysicalDeviceFloat16Int8FeaturesKHR
      VkPhysicalDeviceFloat16Int8FeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceFloat16Int8FeaturesKHR
      (struct "VkPhysicalDeviceFloat16Int8FeaturesKHR"))
   (c-define-type
      VkPhysicalDeviceFloat16Int8FeaturesKHR*
      (pointer VkPhysicalDeviceFloat16Int8FeaturesKHR))
   (define-c-lambda
      make-VkPhysicalDeviceFloat16Int8FeaturesKHR*
      (int)
      VkPhysicalDeviceFloat16Int8FeaturesKHR*
      "VkPhysicalDeviceFloat16Int8FeaturesKHR* vkphysicaldevicefloat16int8featureskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR));
      ___return (vkphysicaldevicefloat16int8featureskhr);")
   (define-c-lambda
      make-VkPhysicalDeviceFloat16Int8FeaturesKHR
      ()
      VkPhysicalDeviceFloat16Int8FeaturesKHR*
      "VkPhysicalDeviceFloat16Int8FeaturesKHR *physicaldevicefloat16int8featureskhr = malloc(sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR));
___return (physicaldevicefloat16int8featureskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceFloatControlsPropertiesKHR
      ptr->VkPhysicalDeviceFloatControlsPropertiesKHR
      ref-VkPhysicalDeviceFloatControlsPropertiesKHR
      make-VkPhysicalDeviceFloatControlsPropertiesKHR*
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTZFloat64
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTZFloat32
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTZFloat16
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTEFloat64
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTEFloat32
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTEFloat16
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormFlushToZeroFloat64
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormFlushToZeroFloat32
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormFlushToZeroFloat16
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormPreserveFloat64
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormPreserveFloat32
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormPreserveFloat16
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderSignedZeroInfNanPreserveFloat64
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderSignedZeroInfNanPreserveFloat32
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderSignedZeroInfNanPreserveFloat16
      VkPhysicalDeviceFloatControlsPropertiesKHRroundingModeIndependence
      VkPhysicalDeviceFloatControlsPropertiesKHRdenormBehaviorIndependence
      VkPhysicalDeviceFloatControlsPropertiesKHRpNext
      VkPhysicalDeviceFloatControlsPropertiesKHRsType
      VkPhysicalDeviceFloatControlsPropertiesKHR
      VkPhysicalDeviceFloatControlsPropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceFloatControlsPropertiesKHR
      (struct "VkPhysicalDeviceFloatControlsPropertiesKHR"))
   (c-define-type
      VkPhysicalDeviceFloatControlsPropertiesKHR*
      (pointer VkPhysicalDeviceFloatControlsPropertiesKHR))
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRsType
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRpNext
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRdenormBehaviorIndependence
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkShaderFloatControlsIndependenceKHR
      "___return (___arg1->denormBehaviorIndependence);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRroundingModeIndependence
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkShaderFloatControlsIndependenceKHR
      "___return (___arg1->roundingModeIndependence);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderSignedZeroInfNanPreserveFloat16
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderSignedZeroInfNanPreserveFloat16);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderSignedZeroInfNanPreserveFloat32
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderSignedZeroInfNanPreserveFloat32);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderSignedZeroInfNanPreserveFloat64
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderSignedZeroInfNanPreserveFloat64);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormPreserveFloat16
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderDenormPreserveFloat16);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormPreserveFloat32
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderDenormPreserveFloat32);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormPreserveFloat64
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderDenormPreserveFloat64);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormFlushToZeroFloat16
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderDenormFlushToZeroFloat16);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormFlushToZeroFloat32
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderDenormFlushToZeroFloat32);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderDenormFlushToZeroFloat64
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderDenormFlushToZeroFloat64);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTEFloat16
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderRoundingModeRTEFloat16);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTEFloat32
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderRoundingModeRTEFloat32);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTEFloat64
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderRoundingModeRTEFloat64);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTZFloat16
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderRoundingModeRTZFloat16);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTZFloat32
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderRoundingModeRTZFloat32);")
   (define-c-lambda
      VkPhysicalDeviceFloatControlsPropertiesKHRshaderRoundingModeRTZFloat64
      (VkPhysicalDeviceFloatControlsPropertiesKHR*)
      VkBool32
      "___return (___arg1->shaderRoundingModeRTZFloat64);")
   (define-c-lambda
      make-VkPhysicalDeviceFloatControlsPropertiesKHR*
      (int)
      VkPhysicalDeviceFloatControlsPropertiesKHR*
      "VkPhysicalDeviceFloatControlsPropertiesKHR* vkphysicaldevicefloatcontrolspropertieskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR));
      ___return (vkphysicaldevicefloatcontrolspropertieskhr);")
   (define-c-lambda
      ref-VkPhysicalDeviceFloatControlsPropertiesKHR
      (VkPhysicalDeviceFloatControlsPropertiesKHR* int)
      VkPhysicalDeviceFloatControlsPropertiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDeviceFloatControlsPropertiesKHR
      (void*
         VkShaderFloatControlsIndependenceKHR
         VkShaderFloatControlsIndependenceKHR
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32)
      VkPhysicalDeviceFloatControlsPropertiesKHR*
      "VkPhysicalDeviceFloatControlsPropertiesKHR *physicaldevicefloatcontrolspropertieskhr = malloc(sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR));
physicaldevicefloatcontrolspropertieskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR;
physicaldevicefloatcontrolspropertieskhr->pNext=___arg1;
physicaldevicefloatcontrolspropertieskhr->denormBehaviorIndependence=___arg2;
physicaldevicefloatcontrolspropertieskhr->roundingModeIndependence=___arg3;
physicaldevicefloatcontrolspropertieskhr->shaderSignedZeroInfNanPreserveFloat16=___arg4;
physicaldevicefloatcontrolspropertieskhr->shaderSignedZeroInfNanPreserveFloat32=___arg5;
physicaldevicefloatcontrolspropertieskhr->shaderSignedZeroInfNanPreserveFloat64=___arg6;
physicaldevicefloatcontrolspropertieskhr->shaderDenormPreserveFloat16=___arg7;
physicaldevicefloatcontrolspropertieskhr->shaderDenormPreserveFloat32=___arg8;
physicaldevicefloatcontrolspropertieskhr->shaderDenormPreserveFloat64=___arg9;
physicaldevicefloatcontrolspropertieskhr->shaderDenormFlushToZeroFloat16=___arg10;
physicaldevicefloatcontrolspropertieskhr->shaderDenormFlushToZeroFloat32=___arg11;
physicaldevicefloatcontrolspropertieskhr->shaderDenormFlushToZeroFloat64=___arg12;
physicaldevicefloatcontrolspropertieskhr->shaderRoundingModeRTEFloat16=___arg13;
physicaldevicefloatcontrolspropertieskhr->shaderRoundingModeRTEFloat32=___arg14;
physicaldevicefloatcontrolspropertieskhr->shaderRoundingModeRTEFloat64=___arg15;
physicaldevicefloatcontrolspropertieskhr->shaderRoundingModeRTZFloat16=___arg16;
physicaldevicefloatcontrolspropertieskhr->shaderRoundingModeRTZFloat32=___arg17;
physicaldevicefloatcontrolspropertieskhr->shaderRoundingModeRTZFloat64=___arg18;
___return (physicaldevicefloatcontrolspropertieskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceHostQueryResetFeaturesEXT
      ptr->VkPhysicalDeviceHostQueryResetFeaturesEXT
      ref-VkPhysicalDeviceHostQueryResetFeaturesEXT
      make-VkPhysicalDeviceHostQueryResetFeaturesEXT*
      VkPhysicalDeviceHostQueryResetFeaturesEXThostQueryReset
      VkPhysicalDeviceHostQueryResetFeaturesEXTpNext
      VkPhysicalDeviceHostQueryResetFeaturesEXTsType
      VkPhysicalDeviceHostQueryResetFeaturesEXT
      VkPhysicalDeviceHostQueryResetFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceHostQueryResetFeaturesEXT
      (struct "VkPhysicalDeviceHostQueryResetFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceHostQueryResetFeaturesEXT*
      (pointer VkPhysicalDeviceHostQueryResetFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceHostQueryResetFeaturesEXTsType
      (VkPhysicalDeviceHostQueryResetFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceHostQueryResetFeaturesEXTpNext
      (VkPhysicalDeviceHostQueryResetFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceHostQueryResetFeaturesEXThostQueryReset
      (VkPhysicalDeviceHostQueryResetFeaturesEXT*)
      VkBool32
      "___return (___arg1->hostQueryReset);")
   (define-c-lambda
      make-VkPhysicalDeviceHostQueryResetFeaturesEXT*
      (int)
      VkPhysicalDeviceHostQueryResetFeaturesEXT*
      "VkPhysicalDeviceHostQueryResetFeaturesEXT* vkphysicaldevicehostqueryresetfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceHostQueryResetFeaturesEXT));
      ___return (vkphysicaldevicehostqueryresetfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceHostQueryResetFeaturesEXT
      (VkPhysicalDeviceHostQueryResetFeaturesEXT* int)
      VkPhysicalDeviceHostQueryResetFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceHostQueryResetFeaturesEXT
      ((pointer VkPhysicalDeviceHostQueryResetFeaturesEXT))
      VkPhysicalDeviceHostQueryResetFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceHostQueryResetFeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceHostQueryResetFeaturesEXT*
      "VkPhysicalDeviceHostQueryResetFeaturesEXT *physicaldevicehostqueryresetfeaturesext = malloc(sizeof(VkPhysicalDeviceHostQueryResetFeaturesEXT));
physicaldevicehostqueryresetfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT;
physicaldevicehostqueryresetfeaturesext->pNext=___arg1;
physicaldevicehostqueryresetfeaturesext->hostQueryReset=___arg2;
___return (physicaldevicehostqueryresetfeaturesext);"))
(begin-ffi
   (make-VkShaderResourceUsageAMD
      ptr->VkShaderResourceUsageAMD
      ref-VkShaderResourceUsageAMD
      make-VkShaderResourceUsageAMD*
      VkShaderResourceUsageAMDscratchMemUsageInBytes
      VkShaderResourceUsageAMDldsUsageSizeInBytes
      VkShaderResourceUsageAMDldsSizePerLocalWorkGroup
      VkShaderResourceUsageAMDnumUsedSgprs
      VkShaderResourceUsageAMDnumUsedVgprs
      VkShaderResourceUsageAMD
      VkShaderResourceUsageAMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkShaderResourceUsageAMD (struct "VkShaderResourceUsageAMD"))
   (c-define-type VkShaderResourceUsageAMD* (pointer VkShaderResourceUsageAMD))
   (define-c-lambda
      VkShaderResourceUsageAMDnumUsedVgprs
      (VkShaderResourceUsageAMD*)
      uint32_t
      "___return (___arg1->numUsedVgprs);")
   (define-c-lambda
      VkShaderResourceUsageAMDnumUsedSgprs
      (VkShaderResourceUsageAMD*)
      uint32_t
      "___return (___arg1->numUsedSgprs);")
   (define-c-lambda
      VkShaderResourceUsageAMDldsSizePerLocalWorkGroup
      (VkShaderResourceUsageAMD*)
      uint32_t
      "___return (___arg1->ldsSizePerLocalWorkGroup);")
   (define-c-lambda
      VkShaderResourceUsageAMDldsUsageSizeInBytes
      (VkShaderResourceUsageAMD*)
      size_t
      "___return (___arg1->ldsUsageSizeInBytes);")
   (define-c-lambda
      VkShaderResourceUsageAMDscratchMemUsageInBytes
      (VkShaderResourceUsageAMD*)
      size_t
      "___return (___arg1->scratchMemUsageInBytes);")
   (define-c-lambda
      make-VkShaderResourceUsageAMD*
      (int)
      VkShaderResourceUsageAMD*
      "VkShaderResourceUsageAMD* vkshaderresourceusageamd = malloc(___arg1 * sizeof(VkShaderResourceUsageAMD));
      ___return (vkshaderresourceusageamd);")
   (define-c-lambda
      ref-VkShaderResourceUsageAMD
      (VkShaderResourceUsageAMD* int)
      VkShaderResourceUsageAMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkShaderResourceUsageAMD
      ((pointer VkShaderResourceUsageAMD))
      VkShaderResourceUsageAMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkShaderResourceUsageAMD
      (uint32_t uint32_t uint32_t size_t size_t)
      VkShaderResourceUsageAMD*
      "VkShaderResourceUsageAMD *shaderresourceusageamd = malloc(sizeof(VkShaderResourceUsageAMD));
shaderresourceusageamd->numUsedVgprs=___arg1;
shaderresourceusageamd->numUsedSgprs=___arg2;
shaderresourceusageamd->ldsSizePerLocalWorkGroup=___arg3;
shaderresourceusageamd->ldsUsageSizeInBytes=___arg4;
shaderresourceusageamd->scratchMemUsageInBytes=___arg5;
___return (shaderresourceusageamd);"))
(begin-ffi
   (make-VkShaderStatisticsInfoAMD
      ptr->VkShaderStatisticsInfoAMD
      ref-VkShaderStatisticsInfoAMD
      make-VkShaderStatisticsInfoAMD*
      VkShaderStatisticsInfoAMDcomputeWorkGroupSize
      VkShaderStatisticsInfoAMDnumAvailableSgprs
      VkShaderStatisticsInfoAMDnumAvailableVgprs
      VkShaderStatisticsInfoAMDnumPhysicalSgprs
      VkShaderStatisticsInfoAMDnumPhysicalVgprs
      VkShaderStatisticsInfoAMDresourceUsage
      VkShaderStatisticsInfoAMDshaderStageMask
      VkShaderStatisticsInfoAMD
      VkShaderStatisticsInfoAMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkShaderStatisticsInfoAMD (struct "VkShaderStatisticsInfoAMD"))
   (c-define-type VkShaderStatisticsInfoAMD* (pointer VkShaderStatisticsInfoAMD))
   (define-c-lambda
      VkShaderStatisticsInfoAMDshaderStageMask
      (VkShaderStatisticsInfoAMD*)
      VkShaderStageFlags
      "___return (___arg1->shaderStageMask);")
   (define-c-lambda
      VkShaderStatisticsInfoAMDresourceUsage
      (VkShaderStatisticsInfoAMD*)
      VkShaderResourceUsageAMD
      "___return (___arg1->resourceUsage);")
   (define-c-lambda
      VkShaderStatisticsInfoAMDnumPhysicalVgprs
      (VkShaderStatisticsInfoAMD*)
      uint32_t
      "___return (___arg1->numPhysicalVgprs);")
   (define-c-lambda
      VkShaderStatisticsInfoAMDnumPhysicalSgprs
      (VkShaderStatisticsInfoAMD*)
      uint32_t
      "___return (___arg1->numPhysicalSgprs);")
   (define-c-lambda
      VkShaderStatisticsInfoAMDnumAvailableVgprs
      (VkShaderStatisticsInfoAMD*)
      uint32_t
      "___return (___arg1->numAvailableVgprs);")
   (define-c-lambda
      VkShaderStatisticsInfoAMDnumAvailableSgprs
      (VkShaderStatisticsInfoAMD*)
      uint32_t
      "___return (___arg1->numAvailableSgprs);")
   (define-c-lambda
      VkShaderStatisticsInfoAMDcomputeWorkGroupSize
      (VkShaderStatisticsInfoAMD*)
      uint32_t*
      "___return (___arg1->computeWorkGroupSize);")
   (define-c-lambda
      make-VkShaderStatisticsInfoAMD*
      (int)
      VkShaderStatisticsInfoAMD*
      "VkShaderStatisticsInfoAMD* vkshaderstatisticsinfoamd = malloc(___arg1 * sizeof(VkShaderStatisticsInfoAMD));
      ___return (vkshaderstatisticsinfoamd);")
   (define-c-lambda
      ref-VkShaderStatisticsInfoAMD
      (VkShaderStatisticsInfoAMD* int)
      VkShaderStatisticsInfoAMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkShaderStatisticsInfoAMD
      ((pointer VkShaderStatisticsInfoAMD))
      VkShaderStatisticsInfoAMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkShaderStatisticsInfoAMD
      (VkShaderStageFlags
         VkShaderResourceUsageAMD
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t*)
      VkShaderStatisticsInfoAMD*
      "VkShaderStatisticsInfoAMD *shaderstatisticsinfoamd = malloc(sizeof(VkShaderStatisticsInfoAMD));
shaderstatisticsinfoamd->shaderStageMask=___arg1;
shaderstatisticsinfoamd->resourceUsage=___arg2;
shaderstatisticsinfoamd->numPhysicalVgprs=___arg3;
shaderstatisticsinfoamd->numPhysicalSgprs=___arg4;
shaderstatisticsinfoamd->numAvailableVgprs=___arg5;
shaderstatisticsinfoamd->numAvailableSgprs=___arg6;
memcpy(shaderstatisticsinfoamd->computeWorkGroupSize,___arg7,sizeof(___arg7));
___return (shaderstatisticsinfoamd);"))
(begin-ffi
   (make-VkDeviceQueueGlobalPriorityCreateInfoEXT
      ptr->VkDeviceQueueGlobalPriorityCreateInfoEXT
      ref-VkDeviceQueueGlobalPriorityCreateInfoEXT
      make-VkDeviceQueueGlobalPriorityCreateInfoEXT*
      VkDeviceQueueGlobalPriorityCreateInfoEXTglobalPriority
      VkDeviceQueueGlobalPriorityCreateInfoEXTpNext
      VkDeviceQueueGlobalPriorityCreateInfoEXTsType
      VkDeviceQueueGlobalPriorityCreateInfoEXT
      VkDeviceQueueGlobalPriorityCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceQueueGlobalPriorityCreateInfoEXT
      (struct "VkDeviceQueueGlobalPriorityCreateInfoEXT"))
   (c-define-type
      VkDeviceQueueGlobalPriorityCreateInfoEXT*
      (pointer VkDeviceQueueGlobalPriorityCreateInfoEXT))
   (define-c-lambda
      VkDeviceQueueGlobalPriorityCreateInfoEXTsType
      (VkDeviceQueueGlobalPriorityCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceQueueGlobalPriorityCreateInfoEXTpNext
      (VkDeviceQueueGlobalPriorityCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceQueueGlobalPriorityCreateInfoEXTglobalPriority
      (VkDeviceQueueGlobalPriorityCreateInfoEXT*)
      VkQueueGlobalPriorityEXT
      "___return (___arg1->globalPriority);")
   (define-c-lambda
      make-VkDeviceQueueGlobalPriorityCreateInfoEXT*
      (int)
      VkDeviceQueueGlobalPriorityCreateInfoEXT*
      "VkDeviceQueueGlobalPriorityCreateInfoEXT* vkdevicequeueglobalprioritycreateinfoext = malloc(___arg1 * sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT));
      ___return (vkdevicequeueglobalprioritycreateinfoext);")
   (define-c-lambda
      ref-VkDeviceQueueGlobalPriorityCreateInfoEXT
      (VkDeviceQueueGlobalPriorityCreateInfoEXT* int)
      VkDeviceQueueGlobalPriorityCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceQueueGlobalPriorityCreateInfoEXT
      ((pointer VkDeviceQueueGlobalPriorityCreateInfoEXT))
      VkDeviceQueueGlobalPriorityCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceQueueGlobalPriorityCreateInfoEXT
      (void* VkQueueGlobalPriorityEXT)
      VkDeviceQueueGlobalPriorityCreateInfoEXT*
      "VkDeviceQueueGlobalPriorityCreateInfoEXT *devicequeueglobalprioritycreateinfoext = malloc(sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT));
devicequeueglobalprioritycreateinfoext->sType=VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
devicequeueglobalprioritycreateinfoext->pNext=___arg1;
devicequeueglobalprioritycreateinfoext->globalPriority=___arg2;
___return (devicequeueglobalprioritycreateinfoext);"))
(begin-ffi
   (make-VkDebugUtilsObjectNameInfoEXT
      ptr->VkDebugUtilsObjectNameInfoEXT
      ref-VkDebugUtilsObjectNameInfoEXT
      make-VkDebugUtilsObjectNameInfoEXT*
      VkDebugUtilsObjectNameInfoEXTpObjectName
      VkDebugUtilsObjectNameInfoEXTobjectHandle
      VkDebugUtilsObjectNameInfoEXTobjectType
      VkDebugUtilsObjectNameInfoEXTpNext
      VkDebugUtilsObjectNameInfoEXTsType
      VkDebugUtilsObjectNameInfoEXT
      VkDebugUtilsObjectNameInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDebugUtilsObjectNameInfoEXT (struct "VkDebugUtilsObjectNameInfoEXT"))
   (c-define-type VkDebugUtilsObjectNameInfoEXT* (pointer VkDebugUtilsObjectNameInfoEXT))
   (define-c-lambda
      VkDebugUtilsObjectNameInfoEXTsType
      (VkDebugUtilsObjectNameInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDebugUtilsObjectNameInfoEXTpNext
      (VkDebugUtilsObjectNameInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDebugUtilsObjectNameInfoEXTobjectType
      (VkDebugUtilsObjectNameInfoEXT*)
      VkObjectType
      "___return (___arg1->objectType);")
   (define-c-lambda
      VkDebugUtilsObjectNameInfoEXTobjectHandle
      (VkDebugUtilsObjectNameInfoEXT*)
      uint64_t
      "___return (___arg1->objectHandle);")
   (define-c-lambda
      VkDebugUtilsObjectNameInfoEXTpObjectName
      (VkDebugUtilsObjectNameInfoEXT*)
      char*
      "___return (___arg1->pObjectName);")
   (define-c-lambda
      make-VkDebugUtilsObjectNameInfoEXT*
      (int)
      VkDebugUtilsObjectNameInfoEXT*
      "VkDebugUtilsObjectNameInfoEXT* vkdebugutilsobjectnameinfoext = malloc(___arg1 * sizeof(VkDebugUtilsObjectNameInfoEXT));
      ___return (vkdebugutilsobjectnameinfoext);")
   (define-c-lambda
      ref-VkDebugUtilsObjectNameInfoEXT
      (VkDebugUtilsObjectNameInfoEXT* int)
      VkDebugUtilsObjectNameInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDebugUtilsObjectNameInfoEXT
      ((pointer VkDebugUtilsObjectNameInfoEXT))
      VkDebugUtilsObjectNameInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugUtilsObjectNameInfoEXT
      (void* VkObjectType uint64_t char*)
      VkDebugUtilsObjectNameInfoEXT*
      "VkDebugUtilsObjectNameInfoEXT *debugutilsobjectnameinfoext = malloc(sizeof(VkDebugUtilsObjectNameInfoEXT));
debugutilsobjectnameinfoext->sType=VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
debugutilsobjectnameinfoext->pNext=___arg1;
debugutilsobjectnameinfoext->objectType=___arg2;
debugutilsobjectnameinfoext->objectHandle=___arg3;
debugutilsobjectnameinfoext->pObjectName=___arg4;
___return (debugutilsobjectnameinfoext);"))
(begin-ffi
   (make-VkDebugUtilsObjectTagInfoEXT
      ptr->VkDebugUtilsObjectTagInfoEXT
      ref-VkDebugUtilsObjectTagInfoEXT
      make-VkDebugUtilsObjectTagInfoEXT*
      VkDebugUtilsObjectTagInfoEXTpTag
      VkDebugUtilsObjectTagInfoEXTtagSize
      VkDebugUtilsObjectTagInfoEXTtagName
      VkDebugUtilsObjectTagInfoEXTobjectHandle
      VkDebugUtilsObjectTagInfoEXTobjectType
      VkDebugUtilsObjectTagInfoEXTpNext
      VkDebugUtilsObjectTagInfoEXTsType
      VkDebugUtilsObjectTagInfoEXT
      VkDebugUtilsObjectTagInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDebugUtilsObjectTagInfoEXT (struct "VkDebugUtilsObjectTagInfoEXT"))
   (c-define-type VkDebugUtilsObjectTagInfoEXT* (pointer VkDebugUtilsObjectTagInfoEXT))
   (define-c-lambda
      VkDebugUtilsObjectTagInfoEXTsType
      (VkDebugUtilsObjectTagInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDebugUtilsObjectTagInfoEXTpNext
      (VkDebugUtilsObjectTagInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDebugUtilsObjectTagInfoEXTobjectType
      (VkDebugUtilsObjectTagInfoEXT*)
      VkObjectType
      "___return (___arg1->objectType);")
   (define-c-lambda
      VkDebugUtilsObjectTagInfoEXTobjectHandle
      (VkDebugUtilsObjectTagInfoEXT*)
      uint64_t
      "___return (___arg1->objectHandle);")
   (define-c-lambda
      VkDebugUtilsObjectTagInfoEXTtagName
      (VkDebugUtilsObjectTagInfoEXT*)
      uint64_t
      "___return (___arg1->tagName);")
   (define-c-lambda
      VkDebugUtilsObjectTagInfoEXTtagSize
      (VkDebugUtilsObjectTagInfoEXT*)
      size_t
      "___return (___arg1->tagSize);")
   (define-c-lambda
      VkDebugUtilsObjectTagInfoEXTpTag
      (VkDebugUtilsObjectTagInfoEXT*)
      void*
      "___return (___arg1->pTag);")
   (define-c-lambda
      make-VkDebugUtilsObjectTagInfoEXT*
      (int)
      VkDebugUtilsObjectTagInfoEXT*
      "VkDebugUtilsObjectTagInfoEXT* vkdebugutilsobjecttaginfoext = malloc(___arg1 * sizeof(VkDebugUtilsObjectTagInfoEXT));
      ___return (vkdebugutilsobjecttaginfoext);")
   (define-c-lambda
      ref-VkDebugUtilsObjectTagInfoEXT
      (VkDebugUtilsObjectTagInfoEXT* int)
      VkDebugUtilsObjectTagInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDebugUtilsObjectTagInfoEXT
      ((pointer VkDebugUtilsObjectTagInfoEXT))
      VkDebugUtilsObjectTagInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugUtilsObjectTagInfoEXT
      (void* VkObjectType uint64_t uint64_t size_t void*)
      VkDebugUtilsObjectTagInfoEXT*
      "VkDebugUtilsObjectTagInfoEXT *debugutilsobjecttaginfoext = malloc(sizeof(VkDebugUtilsObjectTagInfoEXT));
debugutilsobjecttaginfoext->sType=VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
debugutilsobjecttaginfoext->pNext=___arg1;
debugutilsobjecttaginfoext->objectType=___arg2;
debugutilsobjecttaginfoext->objectHandle=___arg3;
debugutilsobjecttaginfoext->tagName=___arg4;
debugutilsobjecttaginfoext->tagSize=___arg5;
debugutilsobjecttaginfoext->pTag=___arg6;
___return (debugutilsobjecttaginfoext);"))
(begin-ffi
   (make-VkDebugUtilsLabelEXT
      ptr->VkDebugUtilsLabelEXT
      ref-VkDebugUtilsLabelEXT
      make-VkDebugUtilsLabelEXT*
      VkDebugUtilsLabelEXTcolor
      VkDebugUtilsLabelEXTpLabelName
      VkDebugUtilsLabelEXTpNext
      VkDebugUtilsLabelEXTsType
      VkDebugUtilsLabelEXT
      VkDebugUtilsLabelEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkDebugUtilsLabelEXT (struct "VkDebugUtilsLabelEXT"))
   (c-define-type VkDebugUtilsLabelEXT* (pointer VkDebugUtilsLabelEXT))
   (define-c-lambda
      VkDebugUtilsLabelEXTsType
      (VkDebugUtilsLabelEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDebugUtilsLabelEXTpNext
      (VkDebugUtilsLabelEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDebugUtilsLabelEXTpLabelName
      (VkDebugUtilsLabelEXT*)
      char*
      "___return (___arg1->pLabelName);")
   (define-c-lambda
      VkDebugUtilsLabelEXTcolor
      (VkDebugUtilsLabelEXT*)
      float*
      "___return (___arg1->color);")
   (define-c-lambda
      make-VkDebugUtilsLabelEXT*
      (int)
      VkDebugUtilsLabelEXT*
      "VkDebugUtilsLabelEXT* vkdebugutilslabelext = malloc(___arg1 * sizeof(VkDebugUtilsLabelEXT));
      ___return (vkdebugutilslabelext);")
   (define-c-lambda
      ref-VkDebugUtilsLabelEXT
      (VkDebugUtilsLabelEXT* int)
      VkDebugUtilsLabelEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDebugUtilsLabelEXT
      ((pointer VkDebugUtilsLabelEXT))
      VkDebugUtilsLabelEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugUtilsLabelEXT
      (void* char* float*)
      VkDebugUtilsLabelEXT*
      "VkDebugUtilsLabelEXT *debugutilslabelext = malloc(sizeof(VkDebugUtilsLabelEXT));
debugutilslabelext->sType=VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT;
debugutilslabelext->pNext=___arg1;
debugutilslabelext->pLabelName=___arg2;
memcpy(debugutilslabelext->color,___arg3,sizeof(___arg3));
___return (debugutilslabelext);"))
(begin-ffi
   (make-VkDebugUtilsMessengerCallbackDataEXT
      ptr->VkDebugUtilsMessengerCallbackDataEXT
      ref-VkDebugUtilsMessengerCallbackDataEXT
      make-VkDebugUtilsMessengerCallbackDataEXT*
      VkDebugUtilsMessengerCallbackDataEXTpObjects
      VkDebugUtilsMessengerCallbackDataEXTobjectCount
      VkDebugUtilsMessengerCallbackDataEXTpCmdBufLabels
      VkDebugUtilsMessengerCallbackDataEXTcmdBufLabelCount
      VkDebugUtilsMessengerCallbackDataEXTpQueueLabels
      VkDebugUtilsMessengerCallbackDataEXTqueueLabelCount
      VkDebugUtilsMessengerCallbackDataEXTpMessage
      VkDebugUtilsMessengerCallbackDataEXTmessageIdNumber
      VkDebugUtilsMessengerCallbackDataEXTpMessageIdName
      VkDebugUtilsMessengerCallbackDataEXTflags
      VkDebugUtilsMessengerCallbackDataEXTpNext
      VkDebugUtilsMessengerCallbackDataEXTsType
      VkDebugUtilsMessengerCallbackDataEXT
      VkDebugUtilsMessengerCallbackDataEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDebugUtilsMessengerCallbackDataEXT
      (struct "VkDebugUtilsMessengerCallbackDataEXT"))
   (c-define-type
      VkDebugUtilsMessengerCallbackDataEXT*
      (pointer VkDebugUtilsMessengerCallbackDataEXT))
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTsType
      (VkDebugUtilsMessengerCallbackDataEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTpNext
      (VkDebugUtilsMessengerCallbackDataEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTflags
      (VkDebugUtilsMessengerCallbackDataEXT*)
      VkDebugUtilsMessengerCallbackDataFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTpMessageIdName
      (VkDebugUtilsMessengerCallbackDataEXT*)
      char*
      "___return (___arg1->pMessageIdName);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTmessageIdNumber
      (VkDebugUtilsMessengerCallbackDataEXT*)
      int32_t
      "___return (___arg1->messageIdNumber);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTpMessage
      (VkDebugUtilsMessengerCallbackDataEXT*)
      char*
      "___return (___arg1->pMessage);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTqueueLabelCount
      (VkDebugUtilsMessengerCallbackDataEXT*)
      uint32_t
      "___return (___arg1->queueLabelCount);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTpQueueLabels
      (VkDebugUtilsMessengerCallbackDataEXT*)
      VkDebugUtilsLabelEXT*
      "___return (___arg1->pQueueLabels);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTcmdBufLabelCount
      (VkDebugUtilsMessengerCallbackDataEXT*)
      uint32_t
      "___return (___arg1->cmdBufLabelCount);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTpCmdBufLabels
      (VkDebugUtilsMessengerCallbackDataEXT*)
      VkDebugUtilsLabelEXT*
      "___return (___arg1->pCmdBufLabels);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTobjectCount
      (VkDebugUtilsMessengerCallbackDataEXT*)
      uint32_t
      "___return (___arg1->objectCount);")
   (define-c-lambda
      VkDebugUtilsMessengerCallbackDataEXTpObjects
      (VkDebugUtilsMessengerCallbackDataEXT*)
      VkDebugUtilsObjectNameInfoEXT*
      "___return (___arg1->pObjects);")
   (define-c-lambda
      make-VkDebugUtilsMessengerCallbackDataEXT*
      (int)
      VkDebugUtilsMessengerCallbackDataEXT*
      "VkDebugUtilsMessengerCallbackDataEXT* vkdebugutilsmessengercallbackdataext = malloc(___arg1 * sizeof(VkDebugUtilsMessengerCallbackDataEXT));
      ___return (vkdebugutilsmessengercallbackdataext);")
   (define-c-lambda
      ref-VkDebugUtilsMessengerCallbackDataEXT
      (VkDebugUtilsMessengerCallbackDataEXT* int)
      VkDebugUtilsMessengerCallbackDataEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDebugUtilsMessengerCallbackDataEXT
      ((pointer VkDebugUtilsMessengerCallbackDataEXT))
      VkDebugUtilsMessengerCallbackDataEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugUtilsMessengerCallbackDataEXT
      (void*
         VkDebugUtilsMessengerCallbackDataFlagsEXT
         char*
         int32_t
         char*
         uint32_t
         VkDebugUtilsLabelEXT*
         uint32_t
         VkDebugUtilsLabelEXT*
         uint32_t
         VkDebugUtilsObjectNameInfoEXT*)
      VkDebugUtilsMessengerCallbackDataEXT*
      "VkDebugUtilsMessengerCallbackDataEXT *debugutilsmessengercallbackdataext = malloc(sizeof(VkDebugUtilsMessengerCallbackDataEXT));
debugutilsmessengercallbackdataext->sType=VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
debugutilsmessengercallbackdataext->pNext=___arg1;
debugutilsmessengercallbackdataext->flags=___arg2;
debugutilsmessengercallbackdataext->pMessageIdName=___arg3;
debugutilsmessengercallbackdataext->messageIdNumber=___arg4;
debugutilsmessengercallbackdataext->pMessage=___arg5;
debugutilsmessengercallbackdataext->queueLabelCount=___arg6;
debugutilsmessengercallbackdataext->pQueueLabels=___arg7;
debugutilsmessengercallbackdataext->cmdBufLabelCount=___arg8;
debugutilsmessengercallbackdataext->pCmdBufLabels=___arg9;
debugutilsmessengercallbackdataext->objectCount=___arg10;
debugutilsmessengercallbackdataext->pObjects=___arg11;
___return (debugutilsmessengercallbackdataext);"))
(begin-ffi
   (PFN_vkDebugUtilsMessengerCallbackEXT PFN_vkDebugUtilsMessengerCallbackEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      PFN_vkDebugUtilsMessengerCallbackEXT
      (function
         (VkDebugUtilsMessageSeverityFlagBitsEXT
            VkDebugUtilsMessageTypeFlagsEXT
            VkDebugUtilsMessengerCallbackDataEXT
            (pointer void))
         VkBool32))
   (c-define-type
      PFN_vkDebugUtilsMessengerCallbackEXT*
      (pointer PFN_vkDebugUtilsMessengerCallbackEXT)))
(begin-ffi
   (make-VkDebugUtilsMessengerCreateInfoEXT
      ptr->VkDebugUtilsMessengerCreateInfoEXT
      ref-VkDebugUtilsMessengerCreateInfoEXT
      make-VkDebugUtilsMessengerCreateInfoEXT*
      VkDebugUtilsMessengerCreateInfoEXTpUserData
      VkDebugUtilsMessengerCreateInfoEXTpfnUserCallback
      VkDebugUtilsMessengerCreateInfoEXTmessageType
      VkDebugUtilsMessengerCreateInfoEXTmessageSeverity
      VkDebugUtilsMessengerCreateInfoEXTflags
      VkDebugUtilsMessengerCreateInfoEXTpNext
      VkDebugUtilsMessengerCreateInfoEXTsType
      VkDebugUtilsMessengerCreateInfoEXT
      VkDebugUtilsMessengerCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDebugUtilsMessengerCreateInfoEXT
      (struct "VkDebugUtilsMessengerCreateInfoEXT"))
   (c-define-type
      VkDebugUtilsMessengerCreateInfoEXT*
      (pointer VkDebugUtilsMessengerCreateInfoEXT))
   (define-c-lambda
      VkDebugUtilsMessengerCreateInfoEXTsType
      (VkDebugUtilsMessengerCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDebugUtilsMessengerCreateInfoEXTpNext
      (VkDebugUtilsMessengerCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDebugUtilsMessengerCreateInfoEXTflags
      (VkDebugUtilsMessengerCreateInfoEXT*)
      VkDebugUtilsMessengerCreateFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      VkDebugUtilsMessengerCreateInfoEXTmessageSeverity
      (VkDebugUtilsMessengerCreateInfoEXT*)
      VkDebugUtilsMessageSeverityFlagsEXT
      "___return (___arg1->messageSeverity);")
   (define-c-lambda
      VkDebugUtilsMessengerCreateInfoEXTmessageType
      (VkDebugUtilsMessengerCreateInfoEXT*)
      VkDebugUtilsMessageTypeFlagsEXT
      "___return (___arg1->messageType);")
   (define-c-lambda
      VkDebugUtilsMessengerCreateInfoEXTpfnUserCallback
      (VkDebugUtilsMessengerCreateInfoEXT*)
      PFN_vkDebugUtilsMessengerCallbackEXT
      "___return (___arg1->pfnUserCallback);")
   (define-c-lambda
      VkDebugUtilsMessengerCreateInfoEXTpUserData
      (VkDebugUtilsMessengerCreateInfoEXT*)
      void*
      "___return (___arg1->pUserData);")
   (define-c-lambda
      make-VkDebugUtilsMessengerCreateInfoEXT*
      (int)
      VkDebugUtilsMessengerCreateInfoEXT*
      "VkDebugUtilsMessengerCreateInfoEXT* vkdebugutilsmessengercreateinfoext = malloc(___arg1 * sizeof(VkDebugUtilsMessengerCreateInfoEXT));
      ___return (vkdebugutilsmessengercreateinfoext);")
   (define-c-lambda
      ref-VkDebugUtilsMessengerCreateInfoEXT
      (VkDebugUtilsMessengerCreateInfoEXT* int)
      VkDebugUtilsMessengerCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDebugUtilsMessengerCreateInfoEXT
      ((pointer VkDebugUtilsMessengerCreateInfoEXT))
      VkDebugUtilsMessengerCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDebugUtilsMessengerCreateInfoEXT
      (void*
         VkDebugUtilsMessengerCreateFlagsEXT
         VkDebugUtilsMessageSeverityFlagsEXT
         VkDebugUtilsMessageTypeFlagsEXT
         PFN_vkDebugUtilsMessengerCallbackEXT
         void*)
      VkDebugUtilsMessengerCreateInfoEXT*
      "VkDebugUtilsMessengerCreateInfoEXT *debugutilsmessengercreateinfoext = malloc(sizeof(VkDebugUtilsMessengerCreateInfoEXT));
debugutilsmessengercreateinfoext->sType=VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
debugutilsmessengercreateinfoext->pNext=___arg1;
debugutilsmessengercreateinfoext->flags=___arg2;
debugutilsmessengercreateinfoext->messageSeverity=___arg3;
debugutilsmessengercreateinfoext->messageType=___arg4;
debugutilsmessengercreateinfoext->pfnUserCallback=___arg5;
debugutilsmessengercreateinfoext->pUserData=___arg6;
___return (debugutilsmessengercreateinfoext);"))
(begin-ffi
   (make-VkImportMemoryHostPointerInfoEXT
      ptr->VkImportMemoryHostPointerInfoEXT
      ref-VkImportMemoryHostPointerInfoEXT
      make-VkImportMemoryHostPointerInfoEXT*
      VkImportMemoryHostPointerInfoEXTpHostPointer
      VkImportMemoryHostPointerInfoEXThandleType
      VkImportMemoryHostPointerInfoEXTpNext
      VkImportMemoryHostPointerInfoEXTsType
      VkImportMemoryHostPointerInfoEXT
      VkImportMemoryHostPointerInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImportMemoryHostPointerInfoEXT
      (struct "VkImportMemoryHostPointerInfoEXT"))
   (c-define-type
      VkImportMemoryHostPointerInfoEXT*
      (pointer VkImportMemoryHostPointerInfoEXT))
   (define-c-lambda
      VkImportMemoryHostPointerInfoEXTsType
      (VkImportMemoryHostPointerInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImportMemoryHostPointerInfoEXTpNext
      (VkImportMemoryHostPointerInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImportMemoryHostPointerInfoEXThandleType
      (VkImportMemoryHostPointerInfoEXT*)
      VkExternalMemoryHandleTypeFlagBits
      "___return (___arg1->handleType);")
   (define-c-lambda
      VkImportMemoryHostPointerInfoEXTpHostPointer
      (VkImportMemoryHostPointerInfoEXT*)
      void*
      "___return (___arg1->pHostPointer);")
   (define-c-lambda
      make-VkImportMemoryHostPointerInfoEXT*
      (int)
      VkImportMemoryHostPointerInfoEXT*
      "VkImportMemoryHostPointerInfoEXT* vkimportmemoryhostpointerinfoext = malloc(___arg1 * sizeof(VkImportMemoryHostPointerInfoEXT));
      ___return (vkimportmemoryhostpointerinfoext);")
   (define-c-lambda
      ref-VkImportMemoryHostPointerInfoEXT
      (VkImportMemoryHostPointerInfoEXT* int)
      VkImportMemoryHostPointerInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImportMemoryHostPointerInfoEXT
      ((pointer VkImportMemoryHostPointerInfoEXT))
      VkImportMemoryHostPointerInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImportMemoryHostPointerInfoEXT
      (void* VkExternalMemoryHandleTypeFlagBits void*)
      VkImportMemoryHostPointerInfoEXT*
      "VkImportMemoryHostPointerInfoEXT *importmemoryhostpointerinfoext = malloc(sizeof(VkImportMemoryHostPointerInfoEXT));
importmemoryhostpointerinfoext->sType=VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
importmemoryhostpointerinfoext->pNext=___arg1;
importmemoryhostpointerinfoext->handleType=___arg2;
importmemoryhostpointerinfoext->pHostPointer=___arg3;
___return (importmemoryhostpointerinfoext);"))
(begin-ffi
   (make-VkMemoryHostPointerPropertiesEXT
      ptr->VkMemoryHostPointerPropertiesEXT
      ref-VkMemoryHostPointerPropertiesEXT
      make-VkMemoryHostPointerPropertiesEXT*
      VkMemoryHostPointerPropertiesEXTmemoryTypeBits
      VkMemoryHostPointerPropertiesEXTpNext
      VkMemoryHostPointerPropertiesEXTsType
      VkMemoryHostPointerPropertiesEXT
      VkMemoryHostPointerPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkMemoryHostPointerPropertiesEXT
      (struct "VkMemoryHostPointerPropertiesEXT"))
   (c-define-type
      VkMemoryHostPointerPropertiesEXT*
      (pointer VkMemoryHostPointerPropertiesEXT))
   (define-c-lambda
      VkMemoryHostPointerPropertiesEXTsType
      (VkMemoryHostPointerPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMemoryHostPointerPropertiesEXTpNext
      (VkMemoryHostPointerPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMemoryHostPointerPropertiesEXTmemoryTypeBits
      (VkMemoryHostPointerPropertiesEXT*)
      uint32_t
      "___return (___arg1->memoryTypeBits);")
   (define-c-lambda
      make-VkMemoryHostPointerPropertiesEXT*
      (int)
      VkMemoryHostPointerPropertiesEXT*
      "VkMemoryHostPointerPropertiesEXT* vkmemoryhostpointerpropertiesext = malloc(___arg1 * sizeof(VkMemoryHostPointerPropertiesEXT));
      ___return (vkmemoryhostpointerpropertiesext);")
   (define-c-lambda
      ref-VkMemoryHostPointerPropertiesEXT
      (VkMemoryHostPointerPropertiesEXT* int)
      VkMemoryHostPointerPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryHostPointerPropertiesEXT
      ((pointer VkMemoryHostPointerPropertiesEXT))
      VkMemoryHostPointerPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryHostPointerPropertiesEXT
      (void* uint32_t)
      VkMemoryHostPointerPropertiesEXT*
      "VkMemoryHostPointerPropertiesEXT *memoryhostpointerpropertiesext = malloc(sizeof(VkMemoryHostPointerPropertiesEXT));
memoryhostpointerpropertiesext->sType=VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT;
memoryhostpointerpropertiesext->pNext=___arg1;
memoryhostpointerpropertiesext->memoryTypeBits=___arg2;
___return (memoryhostpointerpropertiesext);"))
(begin-ffi
   (make-VkPhysicalDeviceExternalMemoryHostPropertiesEXT
      ptr->VkPhysicalDeviceExternalMemoryHostPropertiesEXT
      ref-VkPhysicalDeviceExternalMemoryHostPropertiesEXT
      make-VkPhysicalDeviceExternalMemoryHostPropertiesEXT*
      VkPhysicalDeviceExternalMemoryHostPropertiesEXTminImportedHostPointerAlignment
      VkPhysicalDeviceExternalMemoryHostPropertiesEXTpNext
      VkPhysicalDeviceExternalMemoryHostPropertiesEXTsType
      VkPhysicalDeviceExternalMemoryHostPropertiesEXT
      VkPhysicalDeviceExternalMemoryHostPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceExternalMemoryHostPropertiesEXT
      (struct "VkPhysicalDeviceExternalMemoryHostPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceExternalMemoryHostPropertiesEXT*
      (pointer VkPhysicalDeviceExternalMemoryHostPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceExternalMemoryHostPropertiesEXTsType
      (VkPhysicalDeviceExternalMemoryHostPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceExternalMemoryHostPropertiesEXTpNext
      (VkPhysicalDeviceExternalMemoryHostPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceExternalMemoryHostPropertiesEXTminImportedHostPointerAlignment
      (VkPhysicalDeviceExternalMemoryHostPropertiesEXT*)
      VkDeviceSize
      "___return (___arg1->minImportedHostPointerAlignment);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalMemoryHostPropertiesEXT*
      (int)
      VkPhysicalDeviceExternalMemoryHostPropertiesEXT*
      "VkPhysicalDeviceExternalMemoryHostPropertiesEXT* vkphysicaldeviceexternalmemoryhostpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT));
      ___return (vkphysicaldeviceexternalmemoryhostpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceExternalMemoryHostPropertiesEXT
      (VkPhysicalDeviceExternalMemoryHostPropertiesEXT* int)
      VkPhysicalDeviceExternalMemoryHostPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceExternalMemoryHostPropertiesEXT
      ((pointer VkPhysicalDeviceExternalMemoryHostPropertiesEXT))
      VkPhysicalDeviceExternalMemoryHostPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceExternalMemoryHostPropertiesEXT
      (void* VkDeviceSize)
      VkPhysicalDeviceExternalMemoryHostPropertiesEXT*
      "VkPhysicalDeviceExternalMemoryHostPropertiesEXT *physicaldeviceexternalmemoryhostpropertiesext = malloc(sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT));
physicaldeviceexternalmemoryhostpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
physicaldeviceexternalmemoryhostpropertiesext->pNext=___arg1;
physicaldeviceexternalmemoryhostpropertiesext->minImportedHostPointerAlignment=___arg2;
___return (physicaldeviceexternalmemoryhostpropertiesext);"))
(begin-ffi
   (make-VkPhysicalDeviceConservativeRasterizationPropertiesEXT
      ptr->VkPhysicalDeviceConservativeRasterizationPropertiesEXT
      ref-VkPhysicalDeviceConservativeRasterizationPropertiesEXT
      make-VkPhysicalDeviceConservativeRasterizationPropertiesEXT*
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTconservativeRasterizationPostDepthCoverage
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTfullyCoveredFragmentShaderInputVariable
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTdegenerateLinesRasterized
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTdegenerateTrianglesRasterized
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTconservativePointAndLineRasterization
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTprimitiveUnderestimation
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTextraPrimitiveOverestimationSizeGranularity
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTmaxExtraPrimitiveOverestimationSize
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTprimitiveOverestimationSize
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTpNext
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTsType
      VkPhysicalDeviceConservativeRasterizationPropertiesEXT
      VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceConservativeRasterizationPropertiesEXT
      (struct "VkPhysicalDeviceConservativeRasterizationPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceConservativeRasterizationPropertiesEXT*
      (pointer VkPhysicalDeviceConservativeRasterizationPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTsType
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTpNext
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTprimitiveOverestimationSize
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      float
      "___return (___arg1->primitiveOverestimationSize);")
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTmaxExtraPrimitiveOverestimationSize
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      float
      "___return (___arg1->maxExtraPrimitiveOverestimationSize);")
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTextraPrimitiveOverestimationSizeGranularity
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      float
      "___return (___arg1->extraPrimitiveOverestimationSizeGranularity);")
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTprimitiveUnderestimation
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      VkBool32
      "___return (___arg1->primitiveUnderestimation);")
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTconservativePointAndLineRasterization
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      VkBool32
      "___return (___arg1->conservativePointAndLineRasterization);")
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTdegenerateTrianglesRasterized
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      VkBool32
      "___return (___arg1->degenerateTrianglesRasterized);")
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTdegenerateLinesRasterized
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      VkBool32
      "___return (___arg1->degenerateLinesRasterized);")
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTfullyCoveredFragmentShaderInputVariable
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      VkBool32
      "___return (___arg1->fullyCoveredFragmentShaderInputVariable);")
   (define-c-lambda
      VkPhysicalDeviceConservativeRasterizationPropertiesEXTconservativeRasterizationPostDepthCoverage
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)
      VkBool32
      "___return (___arg1->conservativeRasterizationPostDepthCoverage);")
   (define-c-lambda
      make-VkPhysicalDeviceConservativeRasterizationPropertiesEXT*
      (int)
      VkPhysicalDeviceConservativeRasterizationPropertiesEXT*
      "VkPhysicalDeviceConservativeRasterizationPropertiesEXT* vkphysicaldeviceconservativerasterizationpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT));
      ___return (vkphysicaldeviceconservativerasterizationpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceConservativeRasterizationPropertiesEXT
      (VkPhysicalDeviceConservativeRasterizationPropertiesEXT* int)
      VkPhysicalDeviceConservativeRasterizationPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceConservativeRasterizationPropertiesEXT
      ((pointer VkPhysicalDeviceConservativeRasterizationPropertiesEXT))
      VkPhysicalDeviceConservativeRasterizationPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceConservativeRasterizationPropertiesEXT
      (void* float float float VkBool32 VkBool32 VkBool32 VkBool32 VkBool32 VkBool32)
      VkPhysicalDeviceConservativeRasterizationPropertiesEXT*
      "VkPhysicalDeviceConservativeRasterizationPropertiesEXT *physicaldeviceconservativerasterizationpropertiesext = malloc(sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT));
physicaldeviceconservativerasterizationpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
physicaldeviceconservativerasterizationpropertiesext->pNext=___arg1;
physicaldeviceconservativerasterizationpropertiesext->primitiveOverestimationSize=___arg2;
physicaldeviceconservativerasterizationpropertiesext->maxExtraPrimitiveOverestimationSize=___arg3;
physicaldeviceconservativerasterizationpropertiesext->extraPrimitiveOverestimationSizeGranularity=___arg4;
physicaldeviceconservativerasterizationpropertiesext->primitiveUnderestimation=___arg5;
physicaldeviceconservativerasterizationpropertiesext->conservativePointAndLineRasterization=___arg6;
physicaldeviceconservativerasterizationpropertiesext->degenerateTrianglesRasterized=___arg7;
physicaldeviceconservativerasterizationpropertiesext->degenerateLinesRasterized=___arg8;
physicaldeviceconservativerasterizationpropertiesext->fullyCoveredFragmentShaderInputVariable=___arg9;
physicaldeviceconservativerasterizationpropertiesext->conservativeRasterizationPostDepthCoverage=___arg10;
___return (physicaldeviceconservativerasterizationpropertiesext);"))
(begin-ffi
   (make-VkCalibratedTimestampInfoEXT
      ptr->VkCalibratedTimestampInfoEXT
      ref-VkCalibratedTimestampInfoEXT
      make-VkCalibratedTimestampInfoEXT*
      VkCalibratedTimestampInfoEXTtimeDomain
      VkCalibratedTimestampInfoEXTpNext
      VkCalibratedTimestampInfoEXTsType
      VkCalibratedTimestampInfoEXT
      VkCalibratedTimestampInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkCalibratedTimestampInfoEXT (struct "VkCalibratedTimestampInfoEXT"))
   (c-define-type VkCalibratedTimestampInfoEXT* (pointer VkCalibratedTimestampInfoEXT))
   (define-c-lambda
      VkCalibratedTimestampInfoEXTsType
      (VkCalibratedTimestampInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCalibratedTimestampInfoEXTpNext
      (VkCalibratedTimestampInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCalibratedTimestampInfoEXTtimeDomain
      (VkCalibratedTimestampInfoEXT*)
      VkTimeDomainEXT
      "___return (___arg1->timeDomain);")
   (define-c-lambda
      make-VkCalibratedTimestampInfoEXT*
      (int)
      VkCalibratedTimestampInfoEXT*
      "VkCalibratedTimestampInfoEXT* vkcalibratedtimestampinfoext = malloc(___arg1 * sizeof(VkCalibratedTimestampInfoEXT));
      ___return (vkcalibratedtimestampinfoext);")
   (define-c-lambda
      ref-VkCalibratedTimestampInfoEXT
      (VkCalibratedTimestampInfoEXT* int)
      VkCalibratedTimestampInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCalibratedTimestampInfoEXT
      ((pointer VkCalibratedTimestampInfoEXT))
      VkCalibratedTimestampInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCalibratedTimestampInfoEXT
      (void* VkTimeDomainEXT)
      VkCalibratedTimestampInfoEXT*
      "VkCalibratedTimestampInfoEXT *calibratedtimestampinfoext = malloc(sizeof(VkCalibratedTimestampInfoEXT));
calibratedtimestampinfoext->sType=VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT;
calibratedtimestampinfoext->pNext=___arg1;
calibratedtimestampinfoext->timeDomain=___arg2;
___return (calibratedtimestampinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderCorePropertiesAMD
      ptr->VkPhysicalDeviceShaderCorePropertiesAMD
      ref-VkPhysicalDeviceShaderCorePropertiesAMD
      make-VkPhysicalDeviceShaderCorePropertiesAMD*
      VkPhysicalDeviceShaderCorePropertiesAMDvgprAllocationGranularity
      VkPhysicalDeviceShaderCorePropertiesAMDmaxVgprAllocation
      VkPhysicalDeviceShaderCorePropertiesAMDminVgprAllocation
      VkPhysicalDeviceShaderCorePropertiesAMDvgprsPerSimd
      VkPhysicalDeviceShaderCorePropertiesAMDsgprAllocationGranularity
      VkPhysicalDeviceShaderCorePropertiesAMDmaxSgprAllocation
      VkPhysicalDeviceShaderCorePropertiesAMDminSgprAllocation
      VkPhysicalDeviceShaderCorePropertiesAMDsgprsPerSimd
      VkPhysicalDeviceShaderCorePropertiesAMDwavefrontSize
      VkPhysicalDeviceShaderCorePropertiesAMDwavefrontsPerSimd
      VkPhysicalDeviceShaderCorePropertiesAMDsimdPerComputeUnit
      VkPhysicalDeviceShaderCorePropertiesAMDcomputeUnitsPerShaderArray
      VkPhysicalDeviceShaderCorePropertiesAMDshaderArraysPerEngineCount
      VkPhysicalDeviceShaderCorePropertiesAMDshaderEngineCount
      VkPhysicalDeviceShaderCorePropertiesAMDpNext
      VkPhysicalDeviceShaderCorePropertiesAMDsType
      VkPhysicalDeviceShaderCorePropertiesAMD
      VkPhysicalDeviceShaderCorePropertiesAMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderCorePropertiesAMD
      (struct "VkPhysicalDeviceShaderCorePropertiesAMD"))
   (c-define-type
      VkPhysicalDeviceShaderCorePropertiesAMD*
      (pointer VkPhysicalDeviceShaderCorePropertiesAMD))
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDsType
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDpNext
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDshaderEngineCount
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->shaderEngineCount);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDshaderArraysPerEngineCount
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->shaderArraysPerEngineCount);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDcomputeUnitsPerShaderArray
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->computeUnitsPerShaderArray);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDsimdPerComputeUnit
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->simdPerComputeUnit);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDwavefrontsPerSimd
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->wavefrontsPerSimd);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDwavefrontSize
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->wavefrontSize);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDsgprsPerSimd
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->sgprsPerSimd);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDminSgprAllocation
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->minSgprAllocation);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDmaxSgprAllocation
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->maxSgprAllocation);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDsgprAllocationGranularity
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->sgprAllocationGranularity);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDvgprsPerSimd
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->vgprsPerSimd);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDminVgprAllocation
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->minVgprAllocation);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDmaxVgprAllocation
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->maxVgprAllocation);")
   (define-c-lambda
      VkPhysicalDeviceShaderCorePropertiesAMDvgprAllocationGranularity
      (VkPhysicalDeviceShaderCorePropertiesAMD*)
      uint32_t
      "___return (___arg1->vgprAllocationGranularity);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderCorePropertiesAMD*
      (int)
      VkPhysicalDeviceShaderCorePropertiesAMD*
      "VkPhysicalDeviceShaderCorePropertiesAMD* vkphysicaldeviceshadercorepropertiesamd = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderCorePropertiesAMD));
      ___return (vkphysicaldeviceshadercorepropertiesamd);")
   (define-c-lambda
      ref-VkPhysicalDeviceShaderCorePropertiesAMD
      (VkPhysicalDeviceShaderCorePropertiesAMD* int)
      VkPhysicalDeviceShaderCorePropertiesAMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceShaderCorePropertiesAMD
      ((pointer VkPhysicalDeviceShaderCorePropertiesAMD))
      VkPhysicalDeviceShaderCorePropertiesAMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderCorePropertiesAMD
      (void*
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t)
      VkPhysicalDeviceShaderCorePropertiesAMD*
      "VkPhysicalDeviceShaderCorePropertiesAMD *physicaldeviceshadercorepropertiesamd = malloc(sizeof(VkPhysicalDeviceShaderCorePropertiesAMD));
physicaldeviceshadercorepropertiesamd->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
physicaldeviceshadercorepropertiesamd->pNext=___arg1;
physicaldeviceshadercorepropertiesamd->shaderEngineCount=___arg2;
physicaldeviceshadercorepropertiesamd->shaderArraysPerEngineCount=___arg3;
physicaldeviceshadercorepropertiesamd->computeUnitsPerShaderArray=___arg4;
physicaldeviceshadercorepropertiesamd->simdPerComputeUnit=___arg5;
physicaldeviceshadercorepropertiesamd->wavefrontsPerSimd=___arg6;
physicaldeviceshadercorepropertiesamd->wavefrontSize=___arg7;
physicaldeviceshadercorepropertiesamd->sgprsPerSimd=___arg8;
physicaldeviceshadercorepropertiesamd->minSgprAllocation=___arg9;
physicaldeviceshadercorepropertiesamd->maxSgprAllocation=___arg10;
physicaldeviceshadercorepropertiesamd->sgprAllocationGranularity=___arg11;
physicaldeviceshadercorepropertiesamd->vgprsPerSimd=___arg12;
physicaldeviceshadercorepropertiesamd->minVgprAllocation=___arg13;
physicaldeviceshadercorepropertiesamd->maxVgprAllocation=___arg14;
physicaldeviceshadercorepropertiesamd->vgprAllocationGranularity=___arg15;
___return (physicaldeviceshadercorepropertiesamd);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderCoreProperties2AMD
      ptr->VkPhysicalDeviceShaderCoreProperties2AMD
      ref-VkPhysicalDeviceShaderCoreProperties2AMD
      make-VkPhysicalDeviceShaderCoreProperties2AMD*
      VkPhysicalDeviceShaderCoreProperties2AMDactiveComputeUnitCount
      VkPhysicalDeviceShaderCoreProperties2AMDshaderCoreFeatures
      VkPhysicalDeviceShaderCoreProperties2AMDpNext
      VkPhysicalDeviceShaderCoreProperties2AMDsType
      VkPhysicalDeviceShaderCoreProperties2AMD
      VkPhysicalDeviceShaderCoreProperties2AMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderCoreProperties2AMD
      (struct "VkPhysicalDeviceShaderCoreProperties2AMD"))
   (c-define-type
      VkPhysicalDeviceShaderCoreProperties2AMD*
      (pointer VkPhysicalDeviceShaderCoreProperties2AMD))
   (define-c-lambda
      VkPhysicalDeviceShaderCoreProperties2AMDsType
      (VkPhysicalDeviceShaderCoreProperties2AMD*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShaderCoreProperties2AMDpNext
      (VkPhysicalDeviceShaderCoreProperties2AMD*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShaderCoreProperties2AMDshaderCoreFeatures
      (VkPhysicalDeviceShaderCoreProperties2AMD*)
      VkShaderCorePropertiesFlagsAMD
      "___return (___arg1->shaderCoreFeatures);")
   (define-c-lambda
      VkPhysicalDeviceShaderCoreProperties2AMDactiveComputeUnitCount
      (VkPhysicalDeviceShaderCoreProperties2AMD*)
      uint32_t
      "___return (___arg1->activeComputeUnitCount);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderCoreProperties2AMD*
      (int)
      VkPhysicalDeviceShaderCoreProperties2AMD*
      "VkPhysicalDeviceShaderCoreProperties2AMD* vkphysicaldeviceshadercoreproperties2amd = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderCoreProperties2AMD));
      ___return (vkphysicaldeviceshadercoreproperties2amd);")
   (define-c-lambda
      ref-VkPhysicalDeviceShaderCoreProperties2AMD
      (VkPhysicalDeviceShaderCoreProperties2AMD* int)
      VkPhysicalDeviceShaderCoreProperties2AMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceShaderCoreProperties2AMD
      ((pointer VkPhysicalDeviceShaderCoreProperties2AMD))
      VkPhysicalDeviceShaderCoreProperties2AMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderCoreProperties2AMD
      (void* VkShaderCorePropertiesFlagsAMD uint32_t)
      VkPhysicalDeviceShaderCoreProperties2AMD*
      "VkPhysicalDeviceShaderCoreProperties2AMD *physicaldeviceshadercoreproperties2amd = malloc(sizeof(VkPhysicalDeviceShaderCoreProperties2AMD));
physicaldeviceshadercoreproperties2amd->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD;
physicaldeviceshadercoreproperties2amd->pNext=___arg1;
physicaldeviceshadercoreproperties2amd->shaderCoreFeatures=___arg2;
physicaldeviceshadercoreproperties2amd->activeComputeUnitCount=___arg3;
___return (physicaldeviceshadercoreproperties2amd);"))
(begin-ffi
   (make-VkPipelineRasterizationConservativeStateCreateInfoEXT
      ptr->VkPipelineRasterizationConservativeStateCreateInfoEXT
      ref-VkPipelineRasterizationConservativeStateCreateInfoEXT
      make-VkPipelineRasterizationConservativeStateCreateInfoEXT*
      VkPipelineRasterizationConservativeStateCreateInfoEXTextraPrimitiveOverestimationSize
      VkPipelineRasterizationConservativeStateCreateInfoEXTconservativeRasterizationMode
      VkPipelineRasterizationConservativeStateCreateInfoEXTflags
      VkPipelineRasterizationConservativeStateCreateInfoEXTpNext
      VkPipelineRasterizationConservativeStateCreateInfoEXTsType
      VkPipelineRasterizationConservativeStateCreateInfoEXT
      VkPipelineRasterizationConservativeStateCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineRasterizationConservativeStateCreateInfoEXT
      (struct "VkPipelineRasterizationConservativeStateCreateInfoEXT"))
   (c-define-type
      VkPipelineRasterizationConservativeStateCreateInfoEXT*
      (pointer VkPipelineRasterizationConservativeStateCreateInfoEXT))
   (define-c-lambda
      VkPipelineRasterizationConservativeStateCreateInfoEXTsType
      (VkPipelineRasterizationConservativeStateCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineRasterizationConservativeStateCreateInfoEXTpNext
      (VkPipelineRasterizationConservativeStateCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineRasterizationConservativeStateCreateInfoEXTflags
      (VkPipelineRasterizationConservativeStateCreateInfoEXT*)
      VkPipelineRasterizationConservativeStateCreateFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineRasterizationConservativeStateCreateInfoEXTconservativeRasterizationMode
      (VkPipelineRasterizationConservativeStateCreateInfoEXT*)
      VkConservativeRasterizationModeEXT
      "___return (___arg1->conservativeRasterizationMode);")
   (define-c-lambda
      VkPipelineRasterizationConservativeStateCreateInfoEXTextraPrimitiveOverestimationSize
      (VkPipelineRasterizationConservativeStateCreateInfoEXT*)
      float
      "___return (___arg1->extraPrimitiveOverestimationSize);")
   (define-c-lambda
      make-VkPipelineRasterizationConservativeStateCreateInfoEXT*
      (int)
      VkPipelineRasterizationConservativeStateCreateInfoEXT*
      "VkPipelineRasterizationConservativeStateCreateInfoEXT* vkpipelinerasterizationconservativestatecreateinfoext = malloc(___arg1 * sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT));
      ___return (vkpipelinerasterizationconservativestatecreateinfoext);")
   (define-c-lambda
      ref-VkPipelineRasterizationConservativeStateCreateInfoEXT
      (VkPipelineRasterizationConservativeStateCreateInfoEXT* int)
      VkPipelineRasterizationConservativeStateCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineRasterizationConservativeStateCreateInfoEXT
      ((pointer VkPipelineRasterizationConservativeStateCreateInfoEXT))
      VkPipelineRasterizationConservativeStateCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineRasterizationConservativeStateCreateInfoEXT
      (void*
         VkPipelineRasterizationConservativeStateCreateFlagsEXT
         VkConservativeRasterizationModeEXT
         float)
      VkPipelineRasterizationConservativeStateCreateInfoEXT*
      "VkPipelineRasterizationConservativeStateCreateInfoEXT *pipelinerasterizationconservativestatecreateinfoext = malloc(sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT));
pipelinerasterizationconservativestatecreateinfoext->sType=VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
pipelinerasterizationconservativestatecreateinfoext->pNext=___arg1;
pipelinerasterizationconservativestatecreateinfoext->flags=___arg2;
pipelinerasterizationconservativestatecreateinfoext->conservativeRasterizationMode=___arg3;
pipelinerasterizationconservativestatecreateinfoext->extraPrimitiveOverestimationSize=___arg4;
___return (pipelinerasterizationconservativestatecreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceDescriptorIndexingFeaturesEXT
      ptr->VkPhysicalDeviceDescriptorIndexingFeaturesEXT
      ref-VkPhysicalDeviceDescriptorIndexingFeaturesEXT
      make-VkPhysicalDeviceDescriptorIndexingFeaturesEXT*
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTruntimeDescriptorArray
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingVariableDescriptorCount
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingPartiallyBound
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingUpdateUnusedWhilePending
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingStorageTexelBufferUpdateAfterBind
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingUniformTexelBufferUpdateAfterBind
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingStorageBufferUpdateAfterBind
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingStorageImageUpdateAfterBind
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingSampledImageUpdateAfterBind
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingUniformBufferUpdateAfterBind
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderStorageTexelBufferArrayNonUniformIndexing
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderUniformTexelBufferArrayNonUniformIndexing
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderInputAttachmentArrayNonUniformIndexing
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderStorageImageArrayNonUniformIndexing
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderStorageBufferArrayNonUniformIndexing
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderSampledImageArrayNonUniformIndexing
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderUniformBufferArrayNonUniformIndexing
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderStorageTexelBufferArrayDynamicIndexing
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderUniformTexelBufferArrayDynamicIndexing
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderInputAttachmentArrayDynamicIndexing
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTpNext
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTsType
      VkPhysicalDeviceDescriptorIndexingFeaturesEXT
      VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceDescriptorIndexingFeaturesEXT
      (struct "VkPhysicalDeviceDescriptorIndexingFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceDescriptorIndexingFeaturesEXT*
      (pointer VkPhysicalDeviceDescriptorIndexingFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTsType
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTpNext
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderInputAttachmentArrayDynamicIndexing
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderInputAttachmentArrayDynamicIndexing);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderUniformTexelBufferArrayDynamicIndexing
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderUniformTexelBufferArrayDynamicIndexing);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderStorageTexelBufferArrayDynamicIndexing
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderStorageTexelBufferArrayDynamicIndexing);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderUniformBufferArrayNonUniformIndexing
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderUniformBufferArrayNonUniformIndexing);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderSampledImageArrayNonUniformIndexing
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderSampledImageArrayNonUniformIndexing);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderStorageBufferArrayNonUniformIndexing
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderStorageBufferArrayNonUniformIndexing);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderStorageImageArrayNonUniformIndexing
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderStorageImageArrayNonUniformIndexing);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderInputAttachmentArrayNonUniformIndexing
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderInputAttachmentArrayNonUniformIndexing);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderUniformTexelBufferArrayNonUniformIndexing
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderUniformTexelBufferArrayNonUniformIndexing);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTshaderStorageTexelBufferArrayNonUniformIndexing
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderStorageTexelBufferArrayNonUniformIndexing);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingUniformBufferUpdateAfterBind
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->descriptorBindingUniformBufferUpdateAfterBind);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingSampledImageUpdateAfterBind
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->descriptorBindingSampledImageUpdateAfterBind);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingStorageImageUpdateAfterBind
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->descriptorBindingStorageImageUpdateAfterBind);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingStorageBufferUpdateAfterBind
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->descriptorBindingStorageBufferUpdateAfterBind);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingUniformTexelBufferUpdateAfterBind
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->descriptorBindingUniformTexelBufferUpdateAfterBind);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingStorageTexelBufferUpdateAfterBind
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->descriptorBindingStorageTexelBufferUpdateAfterBind);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingUpdateUnusedWhilePending
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->descriptorBindingUpdateUnusedWhilePending);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingPartiallyBound
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->descriptorBindingPartiallyBound);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTdescriptorBindingVariableDescriptorCount
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->descriptorBindingVariableDescriptorCount);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingFeaturesEXTruntimeDescriptorArray
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT*)
      VkBool32
      "___return (___arg1->runtimeDescriptorArray);")
   (define-c-lambda
      make-VkPhysicalDeviceDescriptorIndexingFeaturesEXT*
      (int)
      VkPhysicalDeviceDescriptorIndexingFeaturesEXT*
      "VkPhysicalDeviceDescriptorIndexingFeaturesEXT* vkphysicaldevicedescriptorindexingfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT));
      ___return (vkphysicaldevicedescriptorindexingfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceDescriptorIndexingFeaturesEXT
      (VkPhysicalDeviceDescriptorIndexingFeaturesEXT* int)
      VkPhysicalDeviceDescriptorIndexingFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceDescriptorIndexingFeaturesEXT
      ((pointer VkPhysicalDeviceDescriptorIndexingFeaturesEXT))
      VkPhysicalDeviceDescriptorIndexingFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceDescriptorIndexingFeaturesEXT
      (void*
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32)
      VkPhysicalDeviceDescriptorIndexingFeaturesEXT*
      "VkPhysicalDeviceDescriptorIndexingFeaturesEXT *physicaldevicedescriptorindexingfeaturesext = malloc(sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT));
physicaldevicedescriptorindexingfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT;
physicaldevicedescriptorindexingfeaturesext->pNext=___arg1;
physicaldevicedescriptorindexingfeaturesext->shaderInputAttachmentArrayDynamicIndexing=___arg2;
physicaldevicedescriptorindexingfeaturesext->shaderUniformTexelBufferArrayDynamicIndexing=___arg3;
physicaldevicedescriptorindexingfeaturesext->shaderStorageTexelBufferArrayDynamicIndexing=___arg4;
physicaldevicedescriptorindexingfeaturesext->shaderUniformBufferArrayNonUniformIndexing=___arg5;
physicaldevicedescriptorindexingfeaturesext->shaderSampledImageArrayNonUniformIndexing=___arg6;
physicaldevicedescriptorindexingfeaturesext->shaderStorageBufferArrayNonUniformIndexing=___arg7;
physicaldevicedescriptorindexingfeaturesext->shaderStorageImageArrayNonUniformIndexing=___arg8;
physicaldevicedescriptorindexingfeaturesext->shaderInputAttachmentArrayNonUniformIndexing=___arg9;
physicaldevicedescriptorindexingfeaturesext->shaderUniformTexelBufferArrayNonUniformIndexing=___arg10;
physicaldevicedescriptorindexingfeaturesext->shaderStorageTexelBufferArrayNonUniformIndexing=___arg11;
physicaldevicedescriptorindexingfeaturesext->descriptorBindingUniformBufferUpdateAfterBind=___arg12;
physicaldevicedescriptorindexingfeaturesext->descriptorBindingSampledImageUpdateAfterBind=___arg13;
physicaldevicedescriptorindexingfeaturesext->descriptorBindingStorageImageUpdateAfterBind=___arg14;
physicaldevicedescriptorindexingfeaturesext->descriptorBindingStorageBufferUpdateAfterBind=___arg15;
physicaldevicedescriptorindexingfeaturesext->descriptorBindingUniformTexelBufferUpdateAfterBind=___arg16;
physicaldevicedescriptorindexingfeaturesext->descriptorBindingStorageTexelBufferUpdateAfterBind=___arg17;
physicaldevicedescriptorindexingfeaturesext->descriptorBindingUpdateUnusedWhilePending=___arg18;
physicaldevicedescriptorindexingfeaturesext->descriptorBindingPartiallyBound=___arg19;
physicaldevicedescriptorindexingfeaturesext->descriptorBindingVariableDescriptorCount=___arg20;
physicaldevicedescriptorindexingfeaturesext->runtimeDescriptorArray=___arg21;
___return (physicaldevicedescriptorindexingfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceDescriptorIndexingPropertiesEXT
      ptr->VkPhysicalDeviceDescriptorIndexingPropertiesEXT
      ref-VkPhysicalDeviceDescriptorIndexingPropertiesEXT
      make-VkPhysicalDeviceDescriptorIndexingPropertiesEXT*
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindInputAttachments
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindStorageImages
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindSampledImages
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindStorageBuffersDynamic
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindStorageBuffers
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindUniformBuffersDynamic
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindUniformBuffers
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindSamplers
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageUpdateAfterBindResources
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindInputAttachments
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindStorageImages
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindSampledImages
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindStorageBuffers
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindUniformBuffers
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindSamplers
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTquadDivergentImplicitLod
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTrobustBufferAccessUpdateAfterBind
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTshaderInputAttachmentArrayNonUniformIndexingNative
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTshaderStorageImageArrayNonUniformIndexingNative
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTshaderStorageBufferArrayNonUniformIndexingNative
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTshaderSampledImageArrayNonUniformIndexingNative
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTshaderUniformBufferArrayNonUniformIndexingNative
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxUpdateAfterBindDescriptorsInAllPools
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTpNext
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTsType
      VkPhysicalDeviceDescriptorIndexingPropertiesEXT
      VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceDescriptorIndexingPropertiesEXT
      (struct "VkPhysicalDeviceDescriptorIndexingPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceDescriptorIndexingPropertiesEXT*
      (pointer VkPhysicalDeviceDescriptorIndexingPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTsType
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTpNext
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxUpdateAfterBindDescriptorsInAllPools
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxUpdateAfterBindDescriptorsInAllPools);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTshaderUniformBufferArrayNonUniformIndexingNative
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      VkBool32
      "___return (___arg1->shaderUniformBufferArrayNonUniformIndexingNative);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTshaderSampledImageArrayNonUniformIndexingNative
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      VkBool32
      "___return (___arg1->shaderSampledImageArrayNonUniformIndexingNative);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTshaderStorageBufferArrayNonUniformIndexingNative
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      VkBool32
      "___return (___arg1->shaderStorageBufferArrayNonUniformIndexingNative);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTshaderStorageImageArrayNonUniformIndexingNative
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      VkBool32
      "___return (___arg1->shaderStorageImageArrayNonUniformIndexingNative);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTshaderInputAttachmentArrayNonUniformIndexingNative
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      VkBool32
      "___return (___arg1->shaderInputAttachmentArrayNonUniformIndexingNative);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTrobustBufferAccessUpdateAfterBind
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      VkBool32
      "___return (___arg1->robustBufferAccessUpdateAfterBind);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTquadDivergentImplicitLod
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      VkBool32
      "___return (___arg1->quadDivergentImplicitLod);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindSamplers
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorUpdateAfterBindSamplers);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindUniformBuffers
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorUpdateAfterBindUniformBuffers);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindStorageBuffers
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorUpdateAfterBindStorageBuffers);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindSampledImages
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorUpdateAfterBindSampledImages);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindStorageImages
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorUpdateAfterBindStorageImages);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageDescriptorUpdateAfterBindInputAttachments
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxPerStageDescriptorUpdateAfterBindInputAttachments);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxPerStageUpdateAfterBindResources
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxPerStageUpdateAfterBindResources);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindSamplers
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUpdateAfterBindSamplers);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindUniformBuffers
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUpdateAfterBindUniformBuffers);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindUniformBuffersDynamic
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindStorageBuffers
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUpdateAfterBindStorageBuffers);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindStorageBuffersDynamic
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindSampledImages
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUpdateAfterBindSampledImages);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindStorageImages
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUpdateAfterBindStorageImages);")
   (define-c-lambda
      VkPhysicalDeviceDescriptorIndexingPropertiesEXTmaxDescriptorSetUpdateAfterBindInputAttachments
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxDescriptorSetUpdateAfterBindInputAttachments);")
   (define-c-lambda
      make-VkPhysicalDeviceDescriptorIndexingPropertiesEXT*
      (int)
      VkPhysicalDeviceDescriptorIndexingPropertiesEXT*
      "VkPhysicalDeviceDescriptorIndexingPropertiesEXT* vkphysicaldevicedescriptorindexingpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT));
      ___return (vkphysicaldevicedescriptorindexingpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceDescriptorIndexingPropertiesEXT
      (VkPhysicalDeviceDescriptorIndexingPropertiesEXT* int)
      VkPhysicalDeviceDescriptorIndexingPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceDescriptorIndexingPropertiesEXT
      ((pointer VkPhysicalDeviceDescriptorIndexingPropertiesEXT))
      VkPhysicalDeviceDescriptorIndexingPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceDescriptorIndexingPropertiesEXT
      (void*
         uint32_t
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         VkBool32
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t)
      VkPhysicalDeviceDescriptorIndexingPropertiesEXT*
      "VkPhysicalDeviceDescriptorIndexingPropertiesEXT *physicaldevicedescriptorindexingpropertiesext = malloc(sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT));
physicaldevicedescriptorindexingpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT;
physicaldevicedescriptorindexingpropertiesext->pNext=___arg1;
physicaldevicedescriptorindexingpropertiesext->maxUpdateAfterBindDescriptorsInAllPools=___arg2;
physicaldevicedescriptorindexingpropertiesext->shaderUniformBufferArrayNonUniformIndexingNative=___arg3;
physicaldevicedescriptorindexingpropertiesext->shaderSampledImageArrayNonUniformIndexingNative=___arg4;
physicaldevicedescriptorindexingpropertiesext->shaderStorageBufferArrayNonUniformIndexingNative=___arg5;
physicaldevicedescriptorindexingpropertiesext->shaderStorageImageArrayNonUniformIndexingNative=___arg6;
physicaldevicedescriptorindexingpropertiesext->shaderInputAttachmentArrayNonUniformIndexingNative=___arg7;
physicaldevicedescriptorindexingpropertiesext->robustBufferAccessUpdateAfterBind=___arg8;
physicaldevicedescriptorindexingpropertiesext->quadDivergentImplicitLod=___arg9;
physicaldevicedescriptorindexingpropertiesext->maxPerStageDescriptorUpdateAfterBindSamplers=___arg10;
physicaldevicedescriptorindexingpropertiesext->maxPerStageDescriptorUpdateAfterBindUniformBuffers=___arg11;
physicaldevicedescriptorindexingpropertiesext->maxPerStageDescriptorUpdateAfterBindStorageBuffers=___arg12;
physicaldevicedescriptorindexingpropertiesext->maxPerStageDescriptorUpdateAfterBindSampledImages=___arg13;
physicaldevicedescriptorindexingpropertiesext->maxPerStageDescriptorUpdateAfterBindStorageImages=___arg14;
physicaldevicedescriptorindexingpropertiesext->maxPerStageDescriptorUpdateAfterBindInputAttachments=___arg15;
physicaldevicedescriptorindexingpropertiesext->maxPerStageUpdateAfterBindResources=___arg16;
physicaldevicedescriptorindexingpropertiesext->maxDescriptorSetUpdateAfterBindSamplers=___arg17;
physicaldevicedescriptorindexingpropertiesext->maxDescriptorSetUpdateAfterBindUniformBuffers=___arg18;
physicaldevicedescriptorindexingpropertiesext->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic=___arg19;
physicaldevicedescriptorindexingpropertiesext->maxDescriptorSetUpdateAfterBindStorageBuffers=___arg20;
physicaldevicedescriptorindexingpropertiesext->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic=___arg21;
physicaldevicedescriptorindexingpropertiesext->maxDescriptorSetUpdateAfterBindSampledImages=___arg22;
physicaldevicedescriptorindexingpropertiesext->maxDescriptorSetUpdateAfterBindStorageImages=___arg23;
physicaldevicedescriptorindexingpropertiesext->maxDescriptorSetUpdateAfterBindInputAttachments=___arg24;
___return (physicaldevicedescriptorindexingpropertiesext);"))
(begin-ffi
   (make-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
      ptr->VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
      ref-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
      make-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXTpBindingFlags
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXTbindingCount
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXTpNext
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXTsType
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
      (struct "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT"))
   (c-define-type
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*
      (pointer VkDescriptorSetLayoutBindingFlagsCreateInfoEXT))
   (define-c-lambda
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXTsType
      (VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXTpNext
      (VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXTbindingCount
      (VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*)
      uint32_t
      "___return (___arg1->bindingCount);")
   (define-c-lambda
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXTpBindingFlags
      (VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*)
      VkDescriptorBindingFlagsEXT*
      "___return (___arg1->pBindingFlags);")
   (define-c-lambda
      make-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*
      (int)
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*
      "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* vkdescriptorsetlayoutbindingflagscreateinfoext = malloc(___arg1 * sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT));
      ___return (vkdescriptorsetlayoutbindingflagscreateinfoext);")
   (define-c-lambda
      ref-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
      (VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* int)
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
      ((pointer VkDescriptorSetLayoutBindingFlagsCreateInfoEXT))
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
      (void* uint32_t VkDescriptorBindingFlagsEXT*)
      VkDescriptorSetLayoutBindingFlagsCreateInfoEXT*
      "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT *descriptorsetlayoutbindingflagscreateinfoext = malloc(sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT));
descriptorsetlayoutbindingflagscreateinfoext->sType=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT;
descriptorsetlayoutbindingflagscreateinfoext->pNext=___arg1;
descriptorsetlayoutbindingflagscreateinfoext->bindingCount=___arg2;
descriptorsetlayoutbindingflagscreateinfoext->pBindingFlags=___arg3;
___return (descriptorsetlayoutbindingflagscreateinfoext);"))
(begin-ffi
   (make-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
      ptr->VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
      ref-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
      make-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXTpDescriptorCounts
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXTdescriptorSetCount
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXTpNext
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXTsType
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
      (struct "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT"))
   (c-define-type
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*
      (pointer VkDescriptorSetVariableDescriptorCountAllocateInfoEXT))
   (define-c-lambda
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXTsType
      (VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXTpNext
      (VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXTdescriptorSetCount
      (VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*)
      uint32_t
      "___return (___arg1->descriptorSetCount);")
   (define-c-lambda
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXTpDescriptorCounts
      (VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*)
      uint32_t*
      "___return (___arg1->pDescriptorCounts);")
   (define-c-lambda
      make-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*
      (int)
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*
      "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* vkdescriptorsetvariabledescriptorcountallocateinfoext = malloc(___arg1 * sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT));
      ___return (vkdescriptorsetvariabledescriptorcountallocateinfoext);")
   (define-c-lambda
      ref-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
      (VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* int)
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
      ((pointer VkDescriptorSetVariableDescriptorCountAllocateInfoEXT))
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
      (void* uint32_t uint32_t*)
      VkDescriptorSetVariableDescriptorCountAllocateInfoEXT*
      "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT *descriptorsetvariabledescriptorcountallocateinfoext = malloc(sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT));
descriptorsetvariabledescriptorcountallocateinfoext->sType=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT;
descriptorsetvariabledescriptorcountallocateinfoext->pNext=___arg1;
descriptorsetvariabledescriptorcountallocateinfoext->descriptorSetCount=___arg2;
descriptorsetvariabledescriptorcountallocateinfoext->pDescriptorCounts=___arg3;
___return (descriptorsetvariabledescriptorcountallocateinfoext);"))
(begin-ffi
   (make-VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
      ptr->VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
      ref-VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
      make-VkDescriptorSetVariableDescriptorCountLayoutSupportEXT*
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXTmaxVariableDescriptorCount
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXTpNext
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXTsType
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
      (struct "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT"))
   (c-define-type
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXT*
      (pointer VkDescriptorSetVariableDescriptorCountLayoutSupportEXT))
   (define-c-lambda
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXTsType
      (VkDescriptorSetVariableDescriptorCountLayoutSupportEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXTpNext
      (VkDescriptorSetVariableDescriptorCountLayoutSupportEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXTmaxVariableDescriptorCount
      (VkDescriptorSetVariableDescriptorCountLayoutSupportEXT*)
      uint32_t
      "___return (___arg1->maxVariableDescriptorCount);")
   (define-c-lambda
      make-VkDescriptorSetVariableDescriptorCountLayoutSupportEXT*
      (int)
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXT*
      "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* vkdescriptorsetvariabledescriptorcountlayoutsupportext = malloc(___arg1 * sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT));
      ___return (vkdescriptorsetvariabledescriptorcountlayoutsupportext);")
   (define-c-lambda
      ref-VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
      (VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* int)
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
      ((pointer VkDescriptorSetVariableDescriptorCountLayoutSupportEXT))
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
      (void* uint32_t)
      VkDescriptorSetVariableDescriptorCountLayoutSupportEXT*
      "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT *descriptorsetvariabledescriptorcountlayoutsupportext = malloc(sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT));
descriptorsetvariabledescriptorcountlayoutsupportext->sType=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT;
descriptorsetvariabledescriptorcountlayoutsupportext->pNext=___arg1;
descriptorsetvariabledescriptorcountlayoutsupportext->maxVariableDescriptorCount=___arg2;
___return (descriptorsetvariabledescriptorcountlayoutsupportext);"))
(begin-ffi
   (make-VkAttachmentDescription2KHR
      ptr->VkAttachmentDescription2KHR
      ref-VkAttachmentDescription2KHR
      make-VkAttachmentDescription2KHR*
      VkAttachmentDescription2KHRfinalLayout
      VkAttachmentDescription2KHRinitialLayout
      VkAttachmentDescription2KHRstencilStoreOp
      VkAttachmentDescription2KHRstencilLoadOp
      VkAttachmentDescription2KHRstoreOp
      VkAttachmentDescription2KHRloadOp
      VkAttachmentDescription2KHRsamples
      VkAttachmentDescription2KHRformat
      VkAttachmentDescription2KHRflags
      VkAttachmentDescription2KHRpNext
      VkAttachmentDescription2KHRsType
      VkAttachmentDescription2KHR
      VkAttachmentDescription2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkAttachmentDescription2KHR (struct "VkAttachmentDescription2KHR"))
   (c-define-type VkAttachmentDescription2KHR* (pointer VkAttachmentDescription2KHR))
   (define-c-lambda
      VkAttachmentDescription2KHRsType
      (VkAttachmentDescription2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkAttachmentDescription2KHRpNext
      (VkAttachmentDescription2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkAttachmentDescription2KHRflags
      (VkAttachmentDescription2KHR*)
      VkAttachmentDescriptionFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkAttachmentDescription2KHRformat
      (VkAttachmentDescription2KHR*)
      VkFormat
      "___return (___arg1->format);")
   (define-c-lambda
      VkAttachmentDescription2KHRsamples
      (VkAttachmentDescription2KHR*)
      VkSampleCountFlagBits
      "___return (___arg1->samples);")
   (define-c-lambda
      VkAttachmentDescription2KHRloadOp
      (VkAttachmentDescription2KHR*)
      VkAttachmentLoadOp
      "___return (___arg1->loadOp);")
   (define-c-lambda
      VkAttachmentDescription2KHRstoreOp
      (VkAttachmentDescription2KHR*)
      VkAttachmentStoreOp
      "___return (___arg1->storeOp);")
   (define-c-lambda
      VkAttachmentDescription2KHRstencilLoadOp
      (VkAttachmentDescription2KHR*)
      VkAttachmentLoadOp
      "___return (___arg1->stencilLoadOp);")
   (define-c-lambda
      VkAttachmentDescription2KHRstencilStoreOp
      (VkAttachmentDescription2KHR*)
      VkAttachmentStoreOp
      "___return (___arg1->stencilStoreOp);")
   (define-c-lambda
      VkAttachmentDescription2KHRinitialLayout
      (VkAttachmentDescription2KHR*)
      VkImageLayout
      "___return (___arg1->initialLayout);")
   (define-c-lambda
      VkAttachmentDescription2KHRfinalLayout
      (VkAttachmentDescription2KHR*)
      VkImageLayout
      "___return (___arg1->finalLayout);")
   (define-c-lambda
      make-VkAttachmentDescription2KHR*
      (int)
      VkAttachmentDescription2KHR*
      "VkAttachmentDescription2KHR* vkattachmentdescription2khr = malloc(___arg1 * sizeof(VkAttachmentDescription2KHR));
      ___return (vkattachmentdescription2khr);")
   (define-c-lambda
      ref-VkAttachmentDescription2KHR
      (VkAttachmentDescription2KHR* int)
      VkAttachmentDescription2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkAttachmentDescription2KHR
      (void*
         VkAttachmentDescriptionFlags
         VkFormat
         VkSampleCountFlagBits
         VkAttachmentLoadOp
         VkAttachmentStoreOp
         VkAttachmentLoadOp
         VkAttachmentStoreOp
         VkImageLayout
         VkImageLayout)
      VkAttachmentDescription2KHR*
      "VkAttachmentDescription2KHR *attachmentdescription2khr = malloc(sizeof(VkAttachmentDescription2KHR));
attachmentdescription2khr->sType=VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR;
attachmentdescription2khr->pNext=___arg1;
attachmentdescription2khr->flags=___arg2;
attachmentdescription2khr->format=___arg3;
attachmentdescription2khr->samples=___arg4;
attachmentdescription2khr->loadOp=___arg5;
attachmentdescription2khr->storeOp=___arg6;
attachmentdescription2khr->stencilLoadOp=___arg7;
attachmentdescription2khr->stencilStoreOp=___arg8;
attachmentdescription2khr->initialLayout=___arg9;
attachmentdescription2khr->finalLayout=___arg10;
___return (attachmentdescription2khr);"))
(begin-ffi
   (make-VkAttachmentReference2KHR
      ptr->VkAttachmentReference2KHR
      ref-VkAttachmentReference2KHR
      make-VkAttachmentReference2KHR*
      VkAttachmentReference2KHRaspectMask
      VkAttachmentReference2KHRlayout
      VkAttachmentReference2KHRattachment
      VkAttachmentReference2KHRpNext
      VkAttachmentReference2KHRsType
      VkAttachmentReference2KHR
      VkAttachmentReference2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkAttachmentReference2KHR (struct "VkAttachmentReference2KHR"))
   (c-define-type VkAttachmentReference2KHR* (pointer VkAttachmentReference2KHR))
   (define-c-lambda
      VkAttachmentReference2KHRsType
      (VkAttachmentReference2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkAttachmentReference2KHRpNext
      (VkAttachmentReference2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkAttachmentReference2KHRattachment
      (VkAttachmentReference2KHR*)
      uint32_t
      "___return (___arg1->attachment);")
   (define-c-lambda
      VkAttachmentReference2KHRlayout
      (VkAttachmentReference2KHR*)
      VkImageLayout
      "___return (___arg1->layout);")
   (define-c-lambda
      VkAttachmentReference2KHRaspectMask
      (VkAttachmentReference2KHR*)
      VkImageAspectFlags
      "___return (___arg1->aspectMask);")
   (define-c-lambda
      make-VkAttachmentReference2KHR*
      (int)
      VkAttachmentReference2KHR*
      "VkAttachmentReference2KHR* vkattachmentreference2khr = malloc(___arg1 * sizeof(VkAttachmentReference2KHR));
      ___return (vkattachmentreference2khr);")
   (define-c-lambda
      ref-VkAttachmentReference2KHR
      (VkAttachmentReference2KHR* int)
      VkAttachmentReference2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkAttachmentReference2KHR
      (void* uint32_t VkImageLayout VkImageAspectFlags)
      VkAttachmentReference2KHR*
      "VkAttachmentReference2KHR *attachmentreference2khr = malloc(sizeof(VkAttachmentReference2KHR));
attachmentreference2khr->sType=VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR;
attachmentreference2khr->pNext=___arg1;
attachmentreference2khr->attachment=___arg2;
attachmentreference2khr->layout=___arg3;
attachmentreference2khr->aspectMask=___arg4;
___return (attachmentreference2khr);"))
(begin-ffi
   (make-VkSubpassDescription2KHR
      ptr->VkSubpassDescription2KHR
      ref-VkSubpassDescription2KHR
      make-VkSubpassDescription2KHR*
      VkSubpassDescription2KHRpPreserveAttachments
      VkSubpassDescription2KHRpreserveAttachmentCount
      VkSubpassDescription2KHRpDepthStencilAttachment
      VkSubpassDescription2KHRpResolveAttachments
      VkSubpassDescription2KHRpColorAttachments
      VkSubpassDescription2KHRcolorAttachmentCount
      VkSubpassDescription2KHRpInputAttachments
      VkSubpassDescription2KHRinputAttachmentCount
      VkSubpassDescription2KHRviewMask
      VkSubpassDescription2KHRpipelineBindPoint
      VkSubpassDescription2KHRflags
      VkSubpassDescription2KHRpNext
      VkSubpassDescription2KHRsType
      VkSubpassDescription2KHR
      VkSubpassDescription2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSubpassDescription2KHR (struct "VkSubpassDescription2KHR"))
   (c-define-type VkSubpassDescription2KHR* (pointer VkSubpassDescription2KHR))
   (define-c-lambda
      VkSubpassDescription2KHRsType
      (VkSubpassDescription2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSubpassDescription2KHRpNext
      (VkSubpassDescription2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSubpassDescription2KHRflags
      (VkSubpassDescription2KHR*)
      VkSubpassDescriptionFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkSubpassDescription2KHRpipelineBindPoint
      (VkSubpassDescription2KHR*)
      VkPipelineBindPoint
      "___return (___arg1->pipelineBindPoint);")
   (define-c-lambda
      VkSubpassDescription2KHRviewMask
      (VkSubpassDescription2KHR*)
      uint32_t
      "___return (___arg1->viewMask);")
   (define-c-lambda
      VkSubpassDescription2KHRinputAttachmentCount
      (VkSubpassDescription2KHR*)
      uint32_t
      "___return (___arg1->inputAttachmentCount);")
   (define-c-lambda
      VkSubpassDescription2KHRpInputAttachments
      (VkSubpassDescription2KHR*)
      VkAttachmentReference2KHR*
      "___return (___arg1->pInputAttachments);")
   (define-c-lambda
      VkSubpassDescription2KHRcolorAttachmentCount
      (VkSubpassDescription2KHR*)
      uint32_t
      "___return (___arg1->colorAttachmentCount);")
   (define-c-lambda
      VkSubpassDescription2KHRpColorAttachments
      (VkSubpassDescription2KHR*)
      VkAttachmentReference2KHR*
      "___return (___arg1->pColorAttachments);")
   (define-c-lambda
      VkSubpassDescription2KHRpResolveAttachments
      (VkSubpassDescription2KHR*)
      VkAttachmentReference2KHR*
      "___return (___arg1->pResolveAttachments);")
   (define-c-lambda
      VkSubpassDescription2KHRpDepthStencilAttachment
      (VkSubpassDescription2KHR*)
      VkAttachmentReference2KHR*
      "___return (___arg1->pDepthStencilAttachment);")
   (define-c-lambda
      VkSubpassDescription2KHRpreserveAttachmentCount
      (VkSubpassDescription2KHR*)
      uint32_t
      "___return (___arg1->preserveAttachmentCount);")
   (define-c-lambda
      VkSubpassDescription2KHRpPreserveAttachments
      (VkSubpassDescription2KHR*)
      uint32_t*
      "___return (___arg1->pPreserveAttachments);")
   (define-c-lambda
      make-VkSubpassDescription2KHR*
      (int)
      VkSubpassDescription2KHR*
      "VkSubpassDescription2KHR* vksubpassdescription2khr = malloc(___arg1 * sizeof(VkSubpassDescription2KHR));
      ___return (vksubpassdescription2khr);")
   (define-c-lambda
      ref-VkSubpassDescription2KHR
      (VkSubpassDescription2KHR* int)
      VkSubpassDescription2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSubpassDescription2KHR
      (void*
         VkSubpassDescriptionFlags
         VkPipelineBindPoint
         uint32_t
         uint32_t
         VkAttachmentReference2KHR*
         uint32_t
         VkAttachmentReference2KHR*
         VkAttachmentReference2KHR*
         VkAttachmentReference2KHR*
         uint32_t
         uint32_t*)
      VkSubpassDescription2KHR*
      "VkSubpassDescription2KHR *subpassdescription2khr = malloc(sizeof(VkSubpassDescription2KHR));
subpassdescription2khr->sType=VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR;
subpassdescription2khr->pNext=___arg1;
subpassdescription2khr->flags=___arg2;
subpassdescription2khr->pipelineBindPoint=___arg3;
subpassdescription2khr->viewMask=___arg4;
subpassdescription2khr->inputAttachmentCount=___arg5;
subpassdescription2khr->pInputAttachments=___arg6;
subpassdescription2khr->colorAttachmentCount=___arg7;
subpassdescription2khr->pColorAttachments=___arg8;
subpassdescription2khr->pResolveAttachments=___arg9;
subpassdescription2khr->pDepthStencilAttachment=___arg10;
subpassdescription2khr->preserveAttachmentCount=___arg11;
subpassdescription2khr->pPreserveAttachments=___arg12;
___return (subpassdescription2khr);"))
(begin-ffi
   (make-VkSubpassDependency2KHR
      ptr->VkSubpassDependency2KHR
      ref-VkSubpassDependency2KHR
      make-VkSubpassDependency2KHR*
      VkSubpassDependency2KHRviewOffset
      VkSubpassDependency2KHRdependencyFlags
      VkSubpassDependency2KHRdstAccessMask
      VkSubpassDependency2KHRsrcAccessMask
      VkSubpassDependency2KHRdstStageMask
      VkSubpassDependency2KHRsrcStageMask
      VkSubpassDependency2KHRdstSubpass
      VkSubpassDependency2KHRsrcSubpass
      VkSubpassDependency2KHRpNext
      VkSubpassDependency2KHRsType
      VkSubpassDependency2KHR
      VkSubpassDependency2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSubpassDependency2KHR (struct "VkSubpassDependency2KHR"))
   (c-define-type VkSubpassDependency2KHR* (pointer VkSubpassDependency2KHR))
   (define-c-lambda
      VkSubpassDependency2KHRsType
      (VkSubpassDependency2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSubpassDependency2KHRpNext
      (VkSubpassDependency2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSubpassDependency2KHRsrcSubpass
      (VkSubpassDependency2KHR*)
      uint32_t
      "___return (___arg1->srcSubpass);")
   (define-c-lambda
      VkSubpassDependency2KHRdstSubpass
      (VkSubpassDependency2KHR*)
      uint32_t
      "___return (___arg1->dstSubpass);")
   (define-c-lambda
      VkSubpassDependency2KHRsrcStageMask
      (VkSubpassDependency2KHR*)
      VkPipelineStageFlags
      "___return (___arg1->srcStageMask);")
   (define-c-lambda
      VkSubpassDependency2KHRdstStageMask
      (VkSubpassDependency2KHR*)
      VkPipelineStageFlags
      "___return (___arg1->dstStageMask);")
   (define-c-lambda
      VkSubpassDependency2KHRsrcAccessMask
      (VkSubpassDependency2KHR*)
      VkAccessFlags
      "___return (___arg1->srcAccessMask);")
   (define-c-lambda
      VkSubpassDependency2KHRdstAccessMask
      (VkSubpassDependency2KHR*)
      VkAccessFlags
      "___return (___arg1->dstAccessMask);")
   (define-c-lambda
      VkSubpassDependency2KHRdependencyFlags
      (VkSubpassDependency2KHR*)
      VkDependencyFlags
      "___return (___arg1->dependencyFlags);")
   (define-c-lambda
      VkSubpassDependency2KHRviewOffset
      (VkSubpassDependency2KHR*)
      int32_t
      "___return (___arg1->viewOffset);")
   (define-c-lambda
      make-VkSubpassDependency2KHR*
      (int)
      VkSubpassDependency2KHR*
      "VkSubpassDependency2KHR* vksubpassdependency2khr = malloc(___arg1 * sizeof(VkSubpassDependency2KHR));
      ___return (vksubpassdependency2khr);")
   (define-c-lambda
      ref-VkSubpassDependency2KHR
      (VkSubpassDependency2KHR* int)
      VkSubpassDependency2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSubpassDependency2KHR
      (void*
         uint32_t
         uint32_t
         VkPipelineStageFlags
         VkPipelineStageFlags
         VkAccessFlags
         VkAccessFlags
         VkDependencyFlags
         int32_t)
      VkSubpassDependency2KHR*
      "VkSubpassDependency2KHR *subpassdependency2khr = malloc(sizeof(VkSubpassDependency2KHR));
subpassdependency2khr->sType=VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR;
subpassdependency2khr->pNext=___arg1;
subpassdependency2khr->srcSubpass=___arg2;
subpassdependency2khr->dstSubpass=___arg3;
subpassdependency2khr->srcStageMask=___arg4;
subpassdependency2khr->dstStageMask=___arg5;
subpassdependency2khr->srcAccessMask=___arg6;
subpassdependency2khr->dstAccessMask=___arg7;
subpassdependency2khr->dependencyFlags=___arg8;
subpassdependency2khr->viewOffset=___arg9;
___return (subpassdependency2khr);"))
(begin-ffi
   (make-VkRenderPassCreateInfo2KHR
      ptr->VkRenderPassCreateInfo2KHR
      ref-VkRenderPassCreateInfo2KHR
      make-VkRenderPassCreateInfo2KHR*
      VkRenderPassCreateInfo2KHRpCorrelatedViewMasks
      VkRenderPassCreateInfo2KHRcorrelatedViewMaskCount
      VkRenderPassCreateInfo2KHRpDependencies
      VkRenderPassCreateInfo2KHRdependencyCount
      VkRenderPassCreateInfo2KHRpSubpasses
      VkRenderPassCreateInfo2KHRsubpassCount
      VkRenderPassCreateInfo2KHRpAttachments
      VkRenderPassCreateInfo2KHRattachmentCount
      VkRenderPassCreateInfo2KHRflags
      VkRenderPassCreateInfo2KHRpNext
      VkRenderPassCreateInfo2KHRsType
      VkRenderPassCreateInfo2KHR
      VkRenderPassCreateInfo2KHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkRenderPassCreateInfo2KHR (struct "VkRenderPassCreateInfo2KHR"))
   (c-define-type VkRenderPassCreateInfo2KHR* (pointer VkRenderPassCreateInfo2KHR))
   (define-c-lambda
      VkRenderPassCreateInfo2KHRsType
      (VkRenderPassCreateInfo2KHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkRenderPassCreateInfo2KHRpNext
      (VkRenderPassCreateInfo2KHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkRenderPassCreateInfo2KHRflags
      (VkRenderPassCreateInfo2KHR*)
      VkRenderPassCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkRenderPassCreateInfo2KHRattachmentCount
      (VkRenderPassCreateInfo2KHR*)
      uint32_t
      "___return (___arg1->attachmentCount);")
   (define-c-lambda
      VkRenderPassCreateInfo2KHRpAttachments
      (VkRenderPassCreateInfo2KHR*)
      VkAttachmentDescription2KHR*
      "___return (___arg1->pAttachments);")
   (define-c-lambda
      VkRenderPassCreateInfo2KHRsubpassCount
      (VkRenderPassCreateInfo2KHR*)
      uint32_t
      "___return (___arg1->subpassCount);")
   (define-c-lambda
      VkRenderPassCreateInfo2KHRpSubpasses
      (VkRenderPassCreateInfo2KHR*)
      VkSubpassDescription2KHR*
      "___return (___arg1->pSubpasses);")
   (define-c-lambda
      VkRenderPassCreateInfo2KHRdependencyCount
      (VkRenderPassCreateInfo2KHR*)
      uint32_t
      "___return (___arg1->dependencyCount);")
   (define-c-lambda
      VkRenderPassCreateInfo2KHRpDependencies
      (VkRenderPassCreateInfo2KHR*)
      VkSubpassDependency2KHR*
      "___return (___arg1->pDependencies);")
   (define-c-lambda
      VkRenderPassCreateInfo2KHRcorrelatedViewMaskCount
      (VkRenderPassCreateInfo2KHR*)
      uint32_t
      "___return (___arg1->correlatedViewMaskCount);")
   (define-c-lambda
      VkRenderPassCreateInfo2KHRpCorrelatedViewMasks
      (VkRenderPassCreateInfo2KHR*)
      uint32_t*
      "___return (___arg1->pCorrelatedViewMasks);")
   (define-c-lambda
      make-VkRenderPassCreateInfo2KHR*
      (int)
      VkRenderPassCreateInfo2KHR*
      "VkRenderPassCreateInfo2KHR* vkrenderpasscreateinfo2khr = malloc(___arg1 * sizeof(VkRenderPassCreateInfo2KHR));
      ___return (vkrenderpasscreateinfo2khr);")
   (define-c-lambda
      ref-VkRenderPassCreateInfo2KHR
      (VkRenderPassCreateInfo2KHR* int)
      VkRenderPassCreateInfo2KHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkRenderPassCreateInfo2KHR
      (void*
         VkRenderPassCreateFlags
         uint32_t
         VkAttachmentDescription2KHR*
         uint32_t
         VkSubpassDescription2KHR*
         uint32_t
         VkSubpassDependency2KHR*
         uint32_t
         uint32_t*)
      VkRenderPassCreateInfo2KHR*
      "VkRenderPassCreateInfo2KHR *renderpasscreateinfo2khr = malloc(sizeof(VkRenderPassCreateInfo2KHR));
renderpasscreateinfo2khr->sType=VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR;
renderpasscreateinfo2khr->pNext=___arg1;
renderpasscreateinfo2khr->flags=___arg2;
renderpasscreateinfo2khr->attachmentCount=___arg3;
renderpasscreateinfo2khr->pAttachments=___arg4;
renderpasscreateinfo2khr->subpassCount=___arg5;
renderpasscreateinfo2khr->pSubpasses=___arg6;
renderpasscreateinfo2khr->dependencyCount=___arg7;
renderpasscreateinfo2khr->pDependencies=___arg8;
renderpasscreateinfo2khr->correlatedViewMaskCount=___arg9;
renderpasscreateinfo2khr->pCorrelatedViewMasks=___arg10;
___return (renderpasscreateinfo2khr);"))
(begin-ffi
   (make-VkSubpassBeginInfoKHR
      ptr->VkSubpassBeginInfoKHR
      ref-VkSubpassBeginInfoKHR
      make-VkSubpassBeginInfoKHR*
      VkSubpassBeginInfoKHRcontents
      VkSubpassBeginInfoKHRpNext
      VkSubpassBeginInfoKHRsType
      VkSubpassBeginInfoKHR
      VkSubpassBeginInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSubpassBeginInfoKHR (struct "VkSubpassBeginInfoKHR"))
   (c-define-type VkSubpassBeginInfoKHR* (pointer VkSubpassBeginInfoKHR))
   (define-c-lambda
      VkSubpassBeginInfoKHRsType
      (VkSubpassBeginInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSubpassBeginInfoKHRpNext
      (VkSubpassBeginInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSubpassBeginInfoKHRcontents
      (VkSubpassBeginInfoKHR*)
      VkSubpassContents
      "___return (___arg1->contents);")
   (define-c-lambda
      make-VkSubpassBeginInfoKHR*
      (int)
      VkSubpassBeginInfoKHR*
      "VkSubpassBeginInfoKHR* vksubpassbegininfokhr = malloc(___arg1 * sizeof(VkSubpassBeginInfoKHR));
      ___return (vksubpassbegininfokhr);")
   (define-c-lambda
      ref-VkSubpassBeginInfoKHR
      (VkSubpassBeginInfoKHR* int)
      VkSubpassBeginInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSubpassBeginInfoKHR
      (void* VkSubpassContents)
      VkSubpassBeginInfoKHR*
      "VkSubpassBeginInfoKHR *subpassbegininfokhr = malloc(sizeof(VkSubpassBeginInfoKHR));
subpassbegininfokhr->sType=VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR;
subpassbegininfokhr->pNext=___arg1;
subpassbegininfokhr->contents=___arg2;
___return (subpassbegininfokhr);"))
(begin-ffi
   (make-VkSubpassEndInfoKHR
      ptr->VkSubpassEndInfoKHR
      ref-VkSubpassEndInfoKHR
      make-VkSubpassEndInfoKHR*
      VkSubpassEndInfoKHRpNext
      VkSubpassEndInfoKHRsType
      VkSubpassEndInfoKHR
      VkSubpassEndInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkSubpassEndInfoKHR (struct "VkSubpassEndInfoKHR"))
   (c-define-type VkSubpassEndInfoKHR* (pointer VkSubpassEndInfoKHR))
   (define-c-lambda
      VkSubpassEndInfoKHRsType
      (VkSubpassEndInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSubpassEndInfoKHRpNext
      (VkSubpassEndInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      make-VkSubpassEndInfoKHR*
      (int)
      VkSubpassEndInfoKHR*
      "VkSubpassEndInfoKHR* vksubpassendinfokhr = malloc(___arg1 * sizeof(VkSubpassEndInfoKHR));
      ___return (vksubpassendinfokhr);")
   (define-c-lambda
      ref-VkSubpassEndInfoKHR
      (VkSubpassEndInfoKHR* int)
      VkSubpassEndInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSubpassEndInfoKHR
      (void*)
      VkSubpassEndInfoKHR*
      "VkSubpassEndInfoKHR *subpassendinfokhr = malloc(sizeof(VkSubpassEndInfoKHR));
subpassendinfokhr->sType=VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR;
subpassendinfokhr->pNext=___arg1;
___return (subpassendinfokhr);"))
(begin-ffi
   (make-VkVertexInputBindingDivisorDescriptionEXT
      ptr->VkVertexInputBindingDivisorDescriptionEXT
      ref-VkVertexInputBindingDivisorDescriptionEXT
      make-VkVertexInputBindingDivisorDescriptionEXT*
      VkVertexInputBindingDivisorDescriptionEXTdivisor
      VkVertexInputBindingDivisorDescriptionEXTbinding
      VkVertexInputBindingDivisorDescriptionEXT
      VkVertexInputBindingDivisorDescriptionEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkVertexInputBindingDivisorDescriptionEXT
      (struct "VkVertexInputBindingDivisorDescriptionEXT"))
   (c-define-type
      VkVertexInputBindingDivisorDescriptionEXT*
      (pointer VkVertexInputBindingDivisorDescriptionEXT))
   (define-c-lambda
      VkVertexInputBindingDivisorDescriptionEXTbinding
      (VkVertexInputBindingDivisorDescriptionEXT*)
      uint32_t
      "___return (___arg1->binding);")
   (define-c-lambda
      VkVertexInputBindingDivisorDescriptionEXTdivisor
      (VkVertexInputBindingDivisorDescriptionEXT*)
      uint32_t
      "___return (___arg1->divisor);")
   (define-c-lambda
      make-VkVertexInputBindingDivisorDescriptionEXT*
      (int)
      VkVertexInputBindingDivisorDescriptionEXT*
      "VkVertexInputBindingDivisorDescriptionEXT* vkvertexinputbindingdivisordescriptionext = malloc(___arg1 * sizeof(VkVertexInputBindingDivisorDescriptionEXT));
      ___return (vkvertexinputbindingdivisordescriptionext);")
   (define-c-lambda
      ref-VkVertexInputBindingDivisorDescriptionEXT
      (VkVertexInputBindingDivisorDescriptionEXT* int)
      VkVertexInputBindingDivisorDescriptionEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkVertexInputBindingDivisorDescriptionEXT
      ((pointer VkVertexInputBindingDivisorDescriptionEXT))
      VkVertexInputBindingDivisorDescriptionEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkVertexInputBindingDivisorDescriptionEXT
      (uint32_t uint32_t)
      VkVertexInputBindingDivisorDescriptionEXT*
      "VkVertexInputBindingDivisorDescriptionEXT *vertexinputbindingdivisordescriptionext = malloc(sizeof(VkVertexInputBindingDivisorDescriptionEXT));
vertexinputbindingdivisordescriptionext->binding=___arg1;
vertexinputbindingdivisordescriptionext->divisor=___arg2;
___return (vertexinputbindingdivisordescriptionext);"))
(begin-ffi
   (make-VkPipelineVertexInputDivisorStateCreateInfoEXT
      ptr->VkPipelineVertexInputDivisorStateCreateInfoEXT
      ref-VkPipelineVertexInputDivisorStateCreateInfoEXT
      make-VkPipelineVertexInputDivisorStateCreateInfoEXT*
      VkPipelineVertexInputDivisorStateCreateInfoEXTpVertexBindingDivisors
      VkPipelineVertexInputDivisorStateCreateInfoEXTvertexBindingDivisorCount
      VkPipelineVertexInputDivisorStateCreateInfoEXTpNext
      VkPipelineVertexInputDivisorStateCreateInfoEXTsType
      VkPipelineVertexInputDivisorStateCreateInfoEXT
      VkPipelineVertexInputDivisorStateCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineVertexInputDivisorStateCreateInfoEXT
      (struct "VkPipelineVertexInputDivisorStateCreateInfoEXT"))
   (c-define-type
      VkPipelineVertexInputDivisorStateCreateInfoEXT*
      (pointer VkPipelineVertexInputDivisorStateCreateInfoEXT))
   (define-c-lambda
      VkPipelineVertexInputDivisorStateCreateInfoEXTsType
      (VkPipelineVertexInputDivisorStateCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineVertexInputDivisorStateCreateInfoEXTpNext
      (VkPipelineVertexInputDivisorStateCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineVertexInputDivisorStateCreateInfoEXTvertexBindingDivisorCount
      (VkPipelineVertexInputDivisorStateCreateInfoEXT*)
      uint32_t
      "___return (___arg1->vertexBindingDivisorCount);")
   (define-c-lambda
      VkPipelineVertexInputDivisorStateCreateInfoEXTpVertexBindingDivisors
      (VkPipelineVertexInputDivisorStateCreateInfoEXT*)
      VkVertexInputBindingDivisorDescriptionEXT*
      "___return (___arg1->pVertexBindingDivisors);")
   (define-c-lambda
      make-VkPipelineVertexInputDivisorStateCreateInfoEXT*
      (int)
      VkPipelineVertexInputDivisorStateCreateInfoEXT*
      "VkPipelineVertexInputDivisorStateCreateInfoEXT* vkpipelinevertexinputdivisorstatecreateinfoext = malloc(___arg1 * sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT));
      ___return (vkpipelinevertexinputdivisorstatecreateinfoext);")
   (define-c-lambda
      ref-VkPipelineVertexInputDivisorStateCreateInfoEXT
      (VkPipelineVertexInputDivisorStateCreateInfoEXT* int)
      VkPipelineVertexInputDivisorStateCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineVertexInputDivisorStateCreateInfoEXT
      ((pointer VkPipelineVertexInputDivisorStateCreateInfoEXT))
      VkPipelineVertexInputDivisorStateCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineVertexInputDivisorStateCreateInfoEXT
      (void* uint32_t VkVertexInputBindingDivisorDescriptionEXT*)
      VkPipelineVertexInputDivisorStateCreateInfoEXT*
      "VkPipelineVertexInputDivisorStateCreateInfoEXT *pipelinevertexinputdivisorstatecreateinfoext = malloc(sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT));
pipelinevertexinputdivisorstatecreateinfoext->sType=VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
pipelinevertexinputdivisorstatecreateinfoext->pNext=___arg1;
pipelinevertexinputdivisorstatecreateinfoext->vertexBindingDivisorCount=___arg2;
pipelinevertexinputdivisorstatecreateinfoext->pVertexBindingDivisors=___arg3;
___return (pipelinevertexinputdivisorstatecreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
      ptr->VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
      ref-VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
      make-VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTmaxVertexAttribDivisor
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTpNext
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTsType
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
      (struct "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*
      (pointer VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTsType
      (VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTpNext
      (VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTmaxVertexAttribDivisor
      (VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxVertexAttribDivisor);")
   (define-c-lambda
      make-VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*
      (int)
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*
      "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* vkphysicaldevicevertexattributedivisorpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT));
      ___return (vkphysicaldevicevertexattributedivisorpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
      (VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* int)
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
      ((pointer VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT))
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
      (void* uint32_t)
      VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*
      "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT *physicaldevicevertexattributedivisorpropertiesext = malloc(sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT));
physicaldevicevertexattributedivisorpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
physicaldevicevertexattributedivisorpropertiesext->pNext=___arg1;
physicaldevicevertexattributedivisorpropertiesext->maxVertexAttribDivisor=___arg2;
___return (physicaldevicevertexattributedivisorpropertiesext);"))
(begin-ffi
   (make-VkPhysicalDevicePCIBusInfoPropertiesEXT
      ptr->VkPhysicalDevicePCIBusInfoPropertiesEXT
      ref-VkPhysicalDevicePCIBusInfoPropertiesEXT
      make-VkPhysicalDevicePCIBusInfoPropertiesEXT*
      VkPhysicalDevicePCIBusInfoPropertiesEXTpciFunction
      VkPhysicalDevicePCIBusInfoPropertiesEXTpciDevice
      VkPhysicalDevicePCIBusInfoPropertiesEXTpciBus
      VkPhysicalDevicePCIBusInfoPropertiesEXTpciDomain
      VkPhysicalDevicePCIBusInfoPropertiesEXTpNext
      VkPhysicalDevicePCIBusInfoPropertiesEXTsType
      VkPhysicalDevicePCIBusInfoPropertiesEXT
      VkPhysicalDevicePCIBusInfoPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDevicePCIBusInfoPropertiesEXT
      (struct "VkPhysicalDevicePCIBusInfoPropertiesEXT"))
   (c-define-type
      VkPhysicalDevicePCIBusInfoPropertiesEXT*
      (pointer VkPhysicalDevicePCIBusInfoPropertiesEXT))
   (define-c-lambda
      VkPhysicalDevicePCIBusInfoPropertiesEXTsType
      (VkPhysicalDevicePCIBusInfoPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDevicePCIBusInfoPropertiesEXTpNext
      (VkPhysicalDevicePCIBusInfoPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDevicePCIBusInfoPropertiesEXTpciDomain
      (VkPhysicalDevicePCIBusInfoPropertiesEXT*)
      uint32_t
      "___return (___arg1->pciDomain);")
   (define-c-lambda
      VkPhysicalDevicePCIBusInfoPropertiesEXTpciBus
      (VkPhysicalDevicePCIBusInfoPropertiesEXT*)
      uint32_t
      "___return (___arg1->pciBus);")
   (define-c-lambda
      VkPhysicalDevicePCIBusInfoPropertiesEXTpciDevice
      (VkPhysicalDevicePCIBusInfoPropertiesEXT*)
      uint32_t
      "___return (___arg1->pciDevice);")
   (define-c-lambda
      VkPhysicalDevicePCIBusInfoPropertiesEXTpciFunction
      (VkPhysicalDevicePCIBusInfoPropertiesEXT*)
      uint32_t
      "___return (___arg1->pciFunction);")
   (define-c-lambda
      make-VkPhysicalDevicePCIBusInfoPropertiesEXT*
      (int)
      VkPhysicalDevicePCIBusInfoPropertiesEXT*
      "VkPhysicalDevicePCIBusInfoPropertiesEXT* vkphysicaldevicepcibusinfopropertiesext = malloc(___arg1 * sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT));
      ___return (vkphysicaldevicepcibusinfopropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDevicePCIBusInfoPropertiesEXT
      (VkPhysicalDevicePCIBusInfoPropertiesEXT* int)
      VkPhysicalDevicePCIBusInfoPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDevicePCIBusInfoPropertiesEXT
      ((pointer VkPhysicalDevicePCIBusInfoPropertiesEXT))
      VkPhysicalDevicePCIBusInfoPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDevicePCIBusInfoPropertiesEXT
      (void* uint32_t uint32_t uint32_t uint32_t)
      VkPhysicalDevicePCIBusInfoPropertiesEXT*
      "VkPhysicalDevicePCIBusInfoPropertiesEXT *physicaldevicepcibusinfopropertiesext = malloc(sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT));
physicaldevicepcibusinfopropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
physicaldevicepcibusinfopropertiesext->pNext=___arg1;
physicaldevicepcibusinfopropertiesext->pciDomain=___arg2;
physicaldevicepcibusinfopropertiesext->pciBus=___arg3;
physicaldevicepcibusinfopropertiesext->pciDevice=___arg4;
physicaldevicepcibusinfopropertiesext->pciFunction=___arg5;
___return (physicaldevicepcibusinfopropertiesext);"))
(begin-ffi
   (make-VkCommandBufferInheritanceConditionalRenderingInfoEXT
      ptr->VkCommandBufferInheritanceConditionalRenderingInfoEXT
      ref-VkCommandBufferInheritanceConditionalRenderingInfoEXT
      make-VkCommandBufferInheritanceConditionalRenderingInfoEXT*
      VkCommandBufferInheritanceConditionalRenderingInfoEXTconditionalRenderingEnable
      VkCommandBufferInheritanceConditionalRenderingInfoEXTpNext
      VkCommandBufferInheritanceConditionalRenderingInfoEXTsType
      VkCommandBufferInheritanceConditionalRenderingInfoEXT
      VkCommandBufferInheritanceConditionalRenderingInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkCommandBufferInheritanceConditionalRenderingInfoEXT
      (struct "VkCommandBufferInheritanceConditionalRenderingInfoEXT"))
   (c-define-type
      VkCommandBufferInheritanceConditionalRenderingInfoEXT*
      (pointer VkCommandBufferInheritanceConditionalRenderingInfoEXT))
   (define-c-lambda
      VkCommandBufferInheritanceConditionalRenderingInfoEXTsType
      (VkCommandBufferInheritanceConditionalRenderingInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCommandBufferInheritanceConditionalRenderingInfoEXTpNext
      (VkCommandBufferInheritanceConditionalRenderingInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCommandBufferInheritanceConditionalRenderingInfoEXTconditionalRenderingEnable
      (VkCommandBufferInheritanceConditionalRenderingInfoEXT*)
      VkBool32
      "___return (___arg1->conditionalRenderingEnable);")
   (define-c-lambda
      make-VkCommandBufferInheritanceConditionalRenderingInfoEXT*
      (int)
      VkCommandBufferInheritanceConditionalRenderingInfoEXT*
      "VkCommandBufferInheritanceConditionalRenderingInfoEXT* vkcommandbufferinheritanceconditionalrenderinginfoext = malloc(___arg1 * sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT));
      ___return (vkcommandbufferinheritanceconditionalrenderinginfoext);")
   (define-c-lambda
      ref-VkCommandBufferInheritanceConditionalRenderingInfoEXT
      (VkCommandBufferInheritanceConditionalRenderingInfoEXT* int)
      VkCommandBufferInheritanceConditionalRenderingInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCommandBufferInheritanceConditionalRenderingInfoEXT
      ((pointer VkCommandBufferInheritanceConditionalRenderingInfoEXT))
      VkCommandBufferInheritanceConditionalRenderingInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCommandBufferInheritanceConditionalRenderingInfoEXT
      (void* VkBool32)
      VkCommandBufferInheritanceConditionalRenderingInfoEXT*
      "VkCommandBufferInheritanceConditionalRenderingInfoEXT *commandbufferinheritanceconditionalrenderinginfoext = malloc(sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT));
commandbufferinheritanceconditionalrenderinginfoext->sType=VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
commandbufferinheritanceconditionalrenderinginfoext->pNext=___arg1;
commandbufferinheritanceconditionalrenderinginfoext->conditionalRenderingEnable=___arg2;
___return (commandbufferinheritanceconditionalrenderinginfoext);"))
(begin-ffi
   (make-VkPhysicalDevice8BitStorageFeaturesKHR
      ptr->VkPhysicalDevice8BitStorageFeaturesKHR
      ref-VkPhysicalDevice8BitStorageFeaturesKHR
      make-VkPhysicalDevice8BitStorageFeaturesKHR*
      VkPhysicalDevice8BitStorageFeaturesKHRstoragePushConstant8
      VkPhysicalDevice8BitStorageFeaturesKHRuniformAndStorageBuffer8BitAccess
      VkPhysicalDevice8BitStorageFeaturesKHRstorageBuffer8BitAccess
      VkPhysicalDevice8BitStorageFeaturesKHRpNext
      VkPhysicalDevice8BitStorageFeaturesKHRsType
      VkPhysicalDevice8BitStorageFeaturesKHR
      VkPhysicalDevice8BitStorageFeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDevice8BitStorageFeaturesKHR
      (struct "VkPhysicalDevice8BitStorageFeaturesKHR"))
   (c-define-type
      VkPhysicalDevice8BitStorageFeaturesKHR*
      (pointer VkPhysicalDevice8BitStorageFeaturesKHR))
   (define-c-lambda
      VkPhysicalDevice8BitStorageFeaturesKHRsType
      (VkPhysicalDevice8BitStorageFeaturesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDevice8BitStorageFeaturesKHRpNext
      (VkPhysicalDevice8BitStorageFeaturesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDevice8BitStorageFeaturesKHRstorageBuffer8BitAccess
      (VkPhysicalDevice8BitStorageFeaturesKHR*)
      VkBool32
      "___return (___arg1->storageBuffer8BitAccess);")
   (define-c-lambda
      VkPhysicalDevice8BitStorageFeaturesKHRuniformAndStorageBuffer8BitAccess
      (VkPhysicalDevice8BitStorageFeaturesKHR*)
      VkBool32
      "___return (___arg1->uniformAndStorageBuffer8BitAccess);")
   (define-c-lambda
      VkPhysicalDevice8BitStorageFeaturesKHRstoragePushConstant8
      (VkPhysicalDevice8BitStorageFeaturesKHR*)
      VkBool32
      "___return (___arg1->storagePushConstant8);")
   (define-c-lambda
      make-VkPhysicalDevice8BitStorageFeaturesKHR*
      (int)
      VkPhysicalDevice8BitStorageFeaturesKHR*
      "VkPhysicalDevice8BitStorageFeaturesKHR* vkphysicaldevice8bitstoragefeatureskhr = malloc(___arg1 * sizeof(VkPhysicalDevice8BitStorageFeaturesKHR));
      ___return (vkphysicaldevice8bitstoragefeatureskhr);")
   (define-c-lambda
      ref-VkPhysicalDevice8BitStorageFeaturesKHR
      (VkPhysicalDevice8BitStorageFeaturesKHR* int)
      VkPhysicalDevice8BitStorageFeaturesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDevice8BitStorageFeaturesKHR
      (void* VkBool32 VkBool32 VkBool32)
      VkPhysicalDevice8BitStorageFeaturesKHR*
      "VkPhysicalDevice8BitStorageFeaturesKHR *physicaldevice8bitstoragefeatureskhr = malloc(sizeof(VkPhysicalDevice8BitStorageFeaturesKHR));
physicaldevice8bitstoragefeatureskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR;
physicaldevice8bitstoragefeatureskhr->pNext=___arg1;
physicaldevice8bitstoragefeatureskhr->storageBuffer8BitAccess=___arg2;
physicaldevice8bitstoragefeatureskhr->uniformAndStorageBuffer8BitAccess=___arg3;
physicaldevice8bitstoragefeatureskhr->storagePushConstant8=___arg4;
___return (physicaldevice8bitstoragefeatureskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceConditionalRenderingFeaturesEXT
      ptr->VkPhysicalDeviceConditionalRenderingFeaturesEXT
      ref-VkPhysicalDeviceConditionalRenderingFeaturesEXT
      make-VkPhysicalDeviceConditionalRenderingFeaturesEXT*
      VkPhysicalDeviceConditionalRenderingFeaturesEXTinheritedConditionalRendering
      VkPhysicalDeviceConditionalRenderingFeaturesEXTconditionalRendering
      VkPhysicalDeviceConditionalRenderingFeaturesEXTpNext
      VkPhysicalDeviceConditionalRenderingFeaturesEXTsType
      VkPhysicalDeviceConditionalRenderingFeaturesEXT
      VkPhysicalDeviceConditionalRenderingFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceConditionalRenderingFeaturesEXT
      (struct "VkPhysicalDeviceConditionalRenderingFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceConditionalRenderingFeaturesEXT*
      (pointer VkPhysicalDeviceConditionalRenderingFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceConditionalRenderingFeaturesEXTsType
      (VkPhysicalDeviceConditionalRenderingFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceConditionalRenderingFeaturesEXTpNext
      (VkPhysicalDeviceConditionalRenderingFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceConditionalRenderingFeaturesEXTconditionalRendering
      (VkPhysicalDeviceConditionalRenderingFeaturesEXT*)
      VkBool32
      "___return (___arg1->conditionalRendering);")
   (define-c-lambda
      VkPhysicalDeviceConditionalRenderingFeaturesEXTinheritedConditionalRendering
      (VkPhysicalDeviceConditionalRenderingFeaturesEXT*)
      VkBool32
      "___return (___arg1->inheritedConditionalRendering);")
   (define-c-lambda
      make-VkPhysicalDeviceConditionalRenderingFeaturesEXT*
      (int)
      VkPhysicalDeviceConditionalRenderingFeaturesEXT*
      "VkPhysicalDeviceConditionalRenderingFeaturesEXT* vkphysicaldeviceconditionalrenderingfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT));
      ___return (vkphysicaldeviceconditionalrenderingfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceConditionalRenderingFeaturesEXT
      (VkPhysicalDeviceConditionalRenderingFeaturesEXT* int)
      VkPhysicalDeviceConditionalRenderingFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceConditionalRenderingFeaturesEXT
      ((pointer VkPhysicalDeviceConditionalRenderingFeaturesEXT))
      VkPhysicalDeviceConditionalRenderingFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceConditionalRenderingFeaturesEXT
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceConditionalRenderingFeaturesEXT*
      "VkPhysicalDeviceConditionalRenderingFeaturesEXT *physicaldeviceconditionalrenderingfeaturesext = malloc(sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT));
physicaldeviceconditionalrenderingfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
physicaldeviceconditionalrenderingfeaturesext->pNext=___arg1;
physicaldeviceconditionalrenderingfeaturesext->conditionalRendering=___arg2;
physicaldeviceconditionalrenderingfeaturesext->inheritedConditionalRendering=___arg3;
___return (physicaldeviceconditionalrenderingfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceVulkanMemoryModelFeaturesKHR
      ptr->VkPhysicalDeviceVulkanMemoryModelFeaturesKHR
      ref-VkPhysicalDeviceVulkanMemoryModelFeaturesKHR
      make-VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHRvulkanMemoryModelAvailabilityVisibilityChains
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHRvulkanMemoryModelDeviceScope
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHRvulkanMemoryModel
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHRpNext
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHRsType
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHR
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHR
      (struct "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR"))
   (c-define-type
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*
      (pointer VkPhysicalDeviceVulkanMemoryModelFeaturesKHR))
   (define-c-lambda
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHRsType
      (VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHRpNext
      (VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHRvulkanMemoryModel
      (VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*)
      VkBool32
      "___return (___arg1->vulkanMemoryModel);")
   (define-c-lambda
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHRvulkanMemoryModelDeviceScope
      (VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*)
      VkBool32
      "___return (___arg1->vulkanMemoryModelDeviceScope);")
   (define-c-lambda
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHRvulkanMemoryModelAvailabilityVisibilityChains
      (VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*)
      VkBool32
      "___return (___arg1->vulkanMemoryModelAvailabilityVisibilityChains);")
   (define-c-lambda
      make-VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*
      (int)
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*
      "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR* vkphysicaldevicevulkanmemorymodelfeatureskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR));
      ___return (vkphysicaldevicevulkanmemorymodelfeatureskhr);")
   (define-c-lambda
      ref-VkPhysicalDeviceVulkanMemoryModelFeaturesKHR
      (VkPhysicalDeviceVulkanMemoryModelFeaturesKHR* int)
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDeviceVulkanMemoryModelFeaturesKHR
      (void* VkBool32 VkBool32 VkBool32)
      VkPhysicalDeviceVulkanMemoryModelFeaturesKHR*
      "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR *physicaldevicevulkanmemorymodelfeatureskhr = malloc(sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR));
physicaldevicevulkanmemorymodelfeatureskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR;
physicaldevicevulkanmemorymodelfeatureskhr->pNext=___arg1;
physicaldevicevulkanmemorymodelfeatureskhr->vulkanMemoryModel=___arg2;
physicaldevicevulkanmemorymodelfeatureskhr->vulkanMemoryModelDeviceScope=___arg3;
physicaldevicevulkanmemorymodelfeatureskhr->vulkanMemoryModelAvailabilityVisibilityChains=___arg4;
___return (physicaldevicevulkanmemorymodelfeatureskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
      ptr->VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
      ref-VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
      make-VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHRshaderSharedInt64Atomics
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHRshaderBufferInt64Atomics
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHRpNext
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHRsType
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
      (struct "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR"))
   (c-define-type
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*
      (pointer VkPhysicalDeviceShaderAtomicInt64FeaturesKHR))
   (define-c-lambda
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHRsType
      (VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHRpNext
      (VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHRshaderBufferInt64Atomics
      (VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*)
      VkBool32
      "___return (___arg1->shaderBufferInt64Atomics);")
   (define-c-lambda
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHRshaderSharedInt64Atomics
      (VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*)
      VkBool32
      "___return (___arg1->shaderSharedInt64Atomics);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*
      (int)
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*
      "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR* vkphysicaldeviceshaderatomicint64featureskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR));
      ___return (vkphysicaldeviceshaderatomicint64featureskhr);")
   (define-c-lambda
      ref-VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
      (VkPhysicalDeviceShaderAtomicInt64FeaturesKHR* int)
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceShaderAtomicInt64FeaturesKHR*
      "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR *physicaldeviceshaderatomicint64featureskhr = malloc(sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR));
physicaldeviceshaderatomicint64featureskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR;
physicaldeviceshaderatomicint64featureskhr->pNext=___arg1;
physicaldeviceshaderatomicint64featureskhr->shaderBufferInt64Atomics=___arg2;
physicaldeviceshaderatomicint64featureskhr->shaderSharedInt64Atomics=___arg3;
___return (physicaldeviceshaderatomicint64featureskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
      ptr->VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
      ref-VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
      make-VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTvertexAttributeInstanceRateZeroDivisor
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTvertexAttributeInstanceRateDivisor
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTpNext
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTsType
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
      (struct "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*
      (pointer VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTsType
      (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTpNext
      (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTvertexAttributeInstanceRateDivisor
      (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*)
      VkBool32
      "___return (___arg1->vertexAttributeInstanceRateDivisor);")
   (define-c-lambda
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTvertexAttributeInstanceRateZeroDivisor
      (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*)
      VkBool32
      "___return (___arg1->vertexAttributeInstanceRateZeroDivisor);")
   (define-c-lambda
      make-VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*
      (int)
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*
      "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT* vkphysicaldevicevertexattributedivisorfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT));
      ___return (vkphysicaldevicevertexattributedivisorfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
      (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT* int)
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
      ((pointer VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT))
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*
      "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT *physicaldevicevertexattributedivisorfeaturesext = malloc(sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT));
physicaldevicevertexattributedivisorfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
physicaldevicevertexattributedivisorfeaturesext->pNext=___arg1;
physicaldevicevertexattributedivisorfeaturesext->vertexAttributeInstanceRateDivisor=___arg2;
physicaldevicevertexattributedivisorfeaturesext->vertexAttributeInstanceRateZeroDivisor=___arg3;
___return (physicaldevicevertexattributedivisorfeaturesext);"))
(begin-ffi
   (make-VkQueueFamilyCheckpointPropertiesNV
      ptr->VkQueueFamilyCheckpointPropertiesNV
      ref-VkQueueFamilyCheckpointPropertiesNV
      make-VkQueueFamilyCheckpointPropertiesNV*
      VkQueueFamilyCheckpointPropertiesNVcheckpointExecutionStageMask
      VkQueueFamilyCheckpointPropertiesNVpNext
      VkQueueFamilyCheckpointPropertiesNVsType
      VkQueueFamilyCheckpointPropertiesNV
      VkQueueFamilyCheckpointPropertiesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkQueueFamilyCheckpointPropertiesNV
      (struct "VkQueueFamilyCheckpointPropertiesNV"))
   (c-define-type
      VkQueueFamilyCheckpointPropertiesNV*
      (pointer VkQueueFamilyCheckpointPropertiesNV))
   (define-c-lambda
      VkQueueFamilyCheckpointPropertiesNVsType
      (VkQueueFamilyCheckpointPropertiesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkQueueFamilyCheckpointPropertiesNVpNext
      (VkQueueFamilyCheckpointPropertiesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkQueueFamilyCheckpointPropertiesNVcheckpointExecutionStageMask
      (VkQueueFamilyCheckpointPropertiesNV*)
      VkPipelineStageFlags
      "___return (___arg1->checkpointExecutionStageMask);")
   (define-c-lambda
      make-VkQueueFamilyCheckpointPropertiesNV*
      (int)
      VkQueueFamilyCheckpointPropertiesNV*
      "VkQueueFamilyCheckpointPropertiesNV* vkqueuefamilycheckpointpropertiesnv = malloc(___arg1 * sizeof(VkQueueFamilyCheckpointPropertiesNV));
      ___return (vkqueuefamilycheckpointpropertiesnv);")
   (define-c-lambda
      ref-VkQueueFamilyCheckpointPropertiesNV
      (VkQueueFamilyCheckpointPropertiesNV* int)
      VkQueueFamilyCheckpointPropertiesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkQueueFamilyCheckpointPropertiesNV
      ((pointer VkQueueFamilyCheckpointPropertiesNV))
      VkQueueFamilyCheckpointPropertiesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkQueueFamilyCheckpointPropertiesNV
      (void* VkPipelineStageFlags)
      VkQueueFamilyCheckpointPropertiesNV*
      "VkQueueFamilyCheckpointPropertiesNV *queuefamilycheckpointpropertiesnv = malloc(sizeof(VkQueueFamilyCheckpointPropertiesNV));
queuefamilycheckpointpropertiesnv->sType=VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;
queuefamilycheckpointpropertiesnv->pNext=___arg1;
queuefamilycheckpointpropertiesnv->checkpointExecutionStageMask=___arg2;
___return (queuefamilycheckpointpropertiesnv);"))
(begin-ffi
   (make-VkCheckpointDataNV
      ptr->VkCheckpointDataNV
      ref-VkCheckpointDataNV
      make-VkCheckpointDataNV*
      VkCheckpointDataNVpCheckpointMarker
      VkCheckpointDataNVstage
      VkCheckpointDataNVpNext
      VkCheckpointDataNVsType
      VkCheckpointDataNV
      VkCheckpointDataNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkCheckpointDataNV (struct "VkCheckpointDataNV"))
   (c-define-type VkCheckpointDataNV* (pointer VkCheckpointDataNV))
   (define-c-lambda
      VkCheckpointDataNVsType
      (VkCheckpointDataNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCheckpointDataNVpNext
      (VkCheckpointDataNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCheckpointDataNVstage
      (VkCheckpointDataNV*)
      VkPipelineStageFlagBits
      "___return (___arg1->stage);")
   (define-c-lambda
      VkCheckpointDataNVpCheckpointMarker
      (VkCheckpointDataNV*)
      void*
      "___return (___arg1->pCheckpointMarker);")
   (define-c-lambda
      make-VkCheckpointDataNV*
      (int)
      VkCheckpointDataNV*
      "VkCheckpointDataNV* vkcheckpointdatanv = malloc(___arg1 * sizeof(VkCheckpointDataNV));
      ___return (vkcheckpointdatanv);")
   (define-c-lambda
      ref-VkCheckpointDataNV
      (VkCheckpointDataNV* int)
      VkCheckpointDataNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCheckpointDataNV
      ((pointer VkCheckpointDataNV))
      VkCheckpointDataNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCheckpointDataNV
      (void* VkPipelineStageFlagBits void*)
      VkCheckpointDataNV*
      "VkCheckpointDataNV *checkpointdatanv = malloc(sizeof(VkCheckpointDataNV));
checkpointdatanv->sType=VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV;
checkpointdatanv->pNext=___arg1;
checkpointdatanv->stage=___arg2;
checkpointdatanv->pCheckpointMarker=___arg3;
___return (checkpointdatanv);"))
(begin-ffi
   (make-VkPhysicalDeviceDepthStencilResolvePropertiesKHR
      ptr->VkPhysicalDeviceDepthStencilResolvePropertiesKHR
      ref-VkPhysicalDeviceDepthStencilResolvePropertiesKHR
      make-VkPhysicalDeviceDepthStencilResolvePropertiesKHR*
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRindependentResolve
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRindependentResolveNone
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRsupportedStencilResolveModes
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRsupportedDepthResolveModes
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRpNext
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRsType
      VkPhysicalDeviceDepthStencilResolvePropertiesKHR
      VkPhysicalDeviceDepthStencilResolvePropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceDepthStencilResolvePropertiesKHR
      (struct "VkPhysicalDeviceDepthStencilResolvePropertiesKHR"))
   (c-define-type
      VkPhysicalDeviceDepthStencilResolvePropertiesKHR*
      (pointer VkPhysicalDeviceDepthStencilResolvePropertiesKHR))
   (define-c-lambda
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRsType
      (VkPhysicalDeviceDepthStencilResolvePropertiesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRpNext
      (VkPhysicalDeviceDepthStencilResolvePropertiesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRsupportedDepthResolveModes
      (VkPhysicalDeviceDepthStencilResolvePropertiesKHR*)
      VkResolveModeFlagsKHR
      "___return (___arg1->supportedDepthResolveModes);")
   (define-c-lambda
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRsupportedStencilResolveModes
      (VkPhysicalDeviceDepthStencilResolvePropertiesKHR*)
      VkResolveModeFlagsKHR
      "___return (___arg1->supportedStencilResolveModes);")
   (define-c-lambda
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRindependentResolveNone
      (VkPhysicalDeviceDepthStencilResolvePropertiesKHR*)
      VkBool32
      "___return (___arg1->independentResolveNone);")
   (define-c-lambda
      VkPhysicalDeviceDepthStencilResolvePropertiesKHRindependentResolve
      (VkPhysicalDeviceDepthStencilResolvePropertiesKHR*)
      VkBool32
      "___return (___arg1->independentResolve);")
   (define-c-lambda
      make-VkPhysicalDeviceDepthStencilResolvePropertiesKHR*
      (int)
      VkPhysicalDeviceDepthStencilResolvePropertiesKHR*
      "VkPhysicalDeviceDepthStencilResolvePropertiesKHR* vkphysicaldevicedepthstencilresolvepropertieskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR));
      ___return (vkphysicaldevicedepthstencilresolvepropertieskhr);")
   (define-c-lambda
      ref-VkPhysicalDeviceDepthStencilResolvePropertiesKHR
      (VkPhysicalDeviceDepthStencilResolvePropertiesKHR* int)
      VkPhysicalDeviceDepthStencilResolvePropertiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDeviceDepthStencilResolvePropertiesKHR
      (void* VkResolveModeFlagsKHR VkResolveModeFlagsKHR VkBool32 VkBool32)
      VkPhysicalDeviceDepthStencilResolvePropertiesKHR*
      "VkPhysicalDeviceDepthStencilResolvePropertiesKHR *physicaldevicedepthstencilresolvepropertieskhr = malloc(sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR));
physicaldevicedepthstencilresolvepropertieskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR;
physicaldevicedepthstencilresolvepropertieskhr->pNext=___arg1;
physicaldevicedepthstencilresolvepropertieskhr->supportedDepthResolveModes=___arg2;
physicaldevicedepthstencilresolvepropertieskhr->supportedStencilResolveModes=___arg3;
physicaldevicedepthstencilresolvepropertieskhr->independentResolveNone=___arg4;
physicaldevicedepthstencilresolvepropertieskhr->independentResolve=___arg5;
___return (physicaldevicedepthstencilresolvepropertieskhr);"))
(begin-ffi
   (make-VkSubpassDescriptionDepthStencilResolveKHR
      ptr->VkSubpassDescriptionDepthStencilResolveKHR
      ref-VkSubpassDescriptionDepthStencilResolveKHR
      make-VkSubpassDescriptionDepthStencilResolveKHR*
      VkSubpassDescriptionDepthStencilResolveKHRpDepthStencilResolveAttachment
      VkSubpassDescriptionDepthStencilResolveKHRstencilResolveMode
      VkSubpassDescriptionDepthStencilResolveKHRdepthResolveMode
      VkSubpassDescriptionDepthStencilResolveKHRpNext
      VkSubpassDescriptionDepthStencilResolveKHRsType
      VkSubpassDescriptionDepthStencilResolveKHR
      VkSubpassDescriptionDepthStencilResolveKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSubpassDescriptionDepthStencilResolveKHR
      (struct "VkSubpassDescriptionDepthStencilResolveKHR"))
   (c-define-type
      VkSubpassDescriptionDepthStencilResolveKHR*
      (pointer VkSubpassDescriptionDepthStencilResolveKHR))
   (define-c-lambda
      VkSubpassDescriptionDepthStencilResolveKHRsType
      (VkSubpassDescriptionDepthStencilResolveKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSubpassDescriptionDepthStencilResolveKHRpNext
      (VkSubpassDescriptionDepthStencilResolveKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSubpassDescriptionDepthStencilResolveKHRdepthResolveMode
      (VkSubpassDescriptionDepthStencilResolveKHR*)
      VkResolveModeFlagBitsKHR
      "___return (___arg1->depthResolveMode);")
   (define-c-lambda
      VkSubpassDescriptionDepthStencilResolveKHRstencilResolveMode
      (VkSubpassDescriptionDepthStencilResolveKHR*)
      VkResolveModeFlagBitsKHR
      "___return (___arg1->stencilResolveMode);")
   (define-c-lambda
      VkSubpassDescriptionDepthStencilResolveKHRpDepthStencilResolveAttachment
      (VkSubpassDescriptionDepthStencilResolveKHR*)
      VkAttachmentReference2KHR*
      "___return (___arg1->pDepthStencilResolveAttachment);")
   (define-c-lambda
      make-VkSubpassDescriptionDepthStencilResolveKHR*
      (int)
      VkSubpassDescriptionDepthStencilResolveKHR*
      "VkSubpassDescriptionDepthStencilResolveKHR* vksubpassdescriptiondepthstencilresolvekhr = malloc(___arg1 * sizeof(VkSubpassDescriptionDepthStencilResolveKHR));
      ___return (vksubpassdescriptiondepthstencilresolvekhr);")
   (define-c-lambda
      ref-VkSubpassDescriptionDepthStencilResolveKHR
      (VkSubpassDescriptionDepthStencilResolveKHR* int)
      VkSubpassDescriptionDepthStencilResolveKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSubpassDescriptionDepthStencilResolveKHR
      (void* VkResolveModeFlagBitsKHR VkResolveModeFlagBitsKHR VkAttachmentReference2KHR*)
      VkSubpassDescriptionDepthStencilResolveKHR*
      "VkSubpassDescriptionDepthStencilResolveKHR *subpassdescriptiondepthstencilresolvekhr = malloc(sizeof(VkSubpassDescriptionDepthStencilResolveKHR));
subpassdescriptiondepthstencilresolvekhr->sType=VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR;
subpassdescriptiondepthstencilresolvekhr->pNext=___arg1;
subpassdescriptiondepthstencilresolvekhr->depthResolveMode=___arg2;
subpassdescriptiondepthstencilresolvekhr->stencilResolveMode=___arg3;
subpassdescriptiondepthstencilresolvekhr->pDepthStencilResolveAttachment=___arg4;
___return (subpassdescriptiondepthstencilresolvekhr);"))
(begin-ffi
   (make-VkImageViewASTCDecodeModeEXT
      ptr->VkImageViewASTCDecodeModeEXT
      ref-VkImageViewASTCDecodeModeEXT
      make-VkImageViewASTCDecodeModeEXT*
      VkImageViewASTCDecodeModeEXTdecodeMode
      VkImageViewASTCDecodeModeEXTpNext
      VkImageViewASTCDecodeModeEXTsType
      VkImageViewASTCDecodeModeEXT
      VkImageViewASTCDecodeModeEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageViewASTCDecodeModeEXT (struct "VkImageViewASTCDecodeModeEXT"))
   (c-define-type VkImageViewASTCDecodeModeEXT* (pointer VkImageViewASTCDecodeModeEXT))
   (define-c-lambda
      VkImageViewASTCDecodeModeEXTsType
      (VkImageViewASTCDecodeModeEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageViewASTCDecodeModeEXTpNext
      (VkImageViewASTCDecodeModeEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageViewASTCDecodeModeEXTdecodeMode
      (VkImageViewASTCDecodeModeEXT*)
      VkFormat
      "___return (___arg1->decodeMode);")
   (define-c-lambda
      make-VkImageViewASTCDecodeModeEXT*
      (int)
      VkImageViewASTCDecodeModeEXT*
      "VkImageViewASTCDecodeModeEXT* vkimageviewastcdecodemodeext = malloc(___arg1 * sizeof(VkImageViewASTCDecodeModeEXT));
      ___return (vkimageviewastcdecodemodeext);")
   (define-c-lambda
      ref-VkImageViewASTCDecodeModeEXT
      (VkImageViewASTCDecodeModeEXT* int)
      VkImageViewASTCDecodeModeEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageViewASTCDecodeModeEXT
      ((pointer VkImageViewASTCDecodeModeEXT))
      VkImageViewASTCDecodeModeEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageViewASTCDecodeModeEXT
      (void* VkFormat)
      VkImageViewASTCDecodeModeEXT*
      "VkImageViewASTCDecodeModeEXT *imageviewastcdecodemodeext = malloc(sizeof(VkImageViewASTCDecodeModeEXT));
imageviewastcdecodemodeext->sType=VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
imageviewastcdecodemodeext->pNext=___arg1;
imageviewastcdecodemodeext->decodeMode=___arg2;
___return (imageviewastcdecodemodeext);"))
(begin-ffi
   (make-VkPhysicalDeviceASTCDecodeFeaturesEXT
      ptr->VkPhysicalDeviceASTCDecodeFeaturesEXT
      ref-VkPhysicalDeviceASTCDecodeFeaturesEXT
      make-VkPhysicalDeviceASTCDecodeFeaturesEXT*
      VkPhysicalDeviceASTCDecodeFeaturesEXTdecodeModeSharedExponent
      VkPhysicalDeviceASTCDecodeFeaturesEXTpNext
      VkPhysicalDeviceASTCDecodeFeaturesEXTsType
      VkPhysicalDeviceASTCDecodeFeaturesEXT
      VkPhysicalDeviceASTCDecodeFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceASTCDecodeFeaturesEXT
      (struct "VkPhysicalDeviceASTCDecodeFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceASTCDecodeFeaturesEXT*
      (pointer VkPhysicalDeviceASTCDecodeFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceASTCDecodeFeaturesEXTsType
      (VkPhysicalDeviceASTCDecodeFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceASTCDecodeFeaturesEXTpNext
      (VkPhysicalDeviceASTCDecodeFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceASTCDecodeFeaturesEXTdecodeModeSharedExponent
      (VkPhysicalDeviceASTCDecodeFeaturesEXT*)
      VkBool32
      "___return (___arg1->decodeModeSharedExponent);")
   (define-c-lambda
      make-VkPhysicalDeviceASTCDecodeFeaturesEXT*
      (int)
      VkPhysicalDeviceASTCDecodeFeaturesEXT*
      "VkPhysicalDeviceASTCDecodeFeaturesEXT* vkphysicaldeviceastcdecodefeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT));
      ___return (vkphysicaldeviceastcdecodefeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceASTCDecodeFeaturesEXT
      (VkPhysicalDeviceASTCDecodeFeaturesEXT* int)
      VkPhysicalDeviceASTCDecodeFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceASTCDecodeFeaturesEXT
      ((pointer VkPhysicalDeviceASTCDecodeFeaturesEXT))
      VkPhysicalDeviceASTCDecodeFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceASTCDecodeFeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceASTCDecodeFeaturesEXT*
      "VkPhysicalDeviceASTCDecodeFeaturesEXT *physicaldeviceastcdecodefeaturesext = malloc(sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT));
physicaldeviceastcdecodefeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
physicaldeviceastcdecodefeaturesext->pNext=___arg1;
physicaldeviceastcdecodefeaturesext->decodeModeSharedExponent=___arg2;
___return (physicaldeviceastcdecodefeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceTransformFeedbackFeaturesEXT
      ptr->VkPhysicalDeviceTransformFeedbackFeaturesEXT
      ref-VkPhysicalDeviceTransformFeedbackFeaturesEXT
      make-VkPhysicalDeviceTransformFeedbackFeaturesEXT*
      VkPhysicalDeviceTransformFeedbackFeaturesEXTgeometryStreams
      VkPhysicalDeviceTransformFeedbackFeaturesEXTtransformFeedback
      VkPhysicalDeviceTransformFeedbackFeaturesEXTpNext
      VkPhysicalDeviceTransformFeedbackFeaturesEXTsType
      VkPhysicalDeviceTransformFeedbackFeaturesEXT
      VkPhysicalDeviceTransformFeedbackFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceTransformFeedbackFeaturesEXT
      (struct "VkPhysicalDeviceTransformFeedbackFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceTransformFeedbackFeaturesEXT*
      (pointer VkPhysicalDeviceTransformFeedbackFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackFeaturesEXTsType
      (VkPhysicalDeviceTransformFeedbackFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackFeaturesEXTpNext
      (VkPhysicalDeviceTransformFeedbackFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackFeaturesEXTtransformFeedback
      (VkPhysicalDeviceTransformFeedbackFeaturesEXT*)
      VkBool32
      "___return (___arg1->transformFeedback);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackFeaturesEXTgeometryStreams
      (VkPhysicalDeviceTransformFeedbackFeaturesEXT*)
      VkBool32
      "___return (___arg1->geometryStreams);")
   (define-c-lambda
      make-VkPhysicalDeviceTransformFeedbackFeaturesEXT*
      (int)
      VkPhysicalDeviceTransformFeedbackFeaturesEXT*
      "VkPhysicalDeviceTransformFeedbackFeaturesEXT* vkphysicaldevicetransformfeedbackfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT));
      ___return (vkphysicaldevicetransformfeedbackfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceTransformFeedbackFeaturesEXT
      (VkPhysicalDeviceTransformFeedbackFeaturesEXT* int)
      VkPhysicalDeviceTransformFeedbackFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceTransformFeedbackFeaturesEXT
      ((pointer VkPhysicalDeviceTransformFeedbackFeaturesEXT))
      VkPhysicalDeviceTransformFeedbackFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceTransformFeedbackFeaturesEXT
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceTransformFeedbackFeaturesEXT*
      "VkPhysicalDeviceTransformFeedbackFeaturesEXT *physicaldevicetransformfeedbackfeaturesext = malloc(sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT));
physicaldevicetransformfeedbackfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
physicaldevicetransformfeedbackfeaturesext->pNext=___arg1;
physicaldevicetransformfeedbackfeaturesext->transformFeedback=___arg2;
physicaldevicetransformfeedbackfeaturesext->geometryStreams=___arg3;
___return (physicaldevicetransformfeedbackfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceTransformFeedbackPropertiesEXT
      ptr->VkPhysicalDeviceTransformFeedbackPropertiesEXT
      ref-VkPhysicalDeviceTransformFeedbackPropertiesEXT
      make-VkPhysicalDeviceTransformFeedbackPropertiesEXT*
      VkPhysicalDeviceTransformFeedbackPropertiesEXTtransformFeedbackDraw
      VkPhysicalDeviceTransformFeedbackPropertiesEXTtransformFeedbackRasterizationStreamSelect
      VkPhysicalDeviceTransformFeedbackPropertiesEXTtransformFeedbackStreamsLinesTriangles
      VkPhysicalDeviceTransformFeedbackPropertiesEXTtransformFeedbackQueries
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackBufferDataStride
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackBufferDataSize
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackStreamDataSize
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackBufferSize
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackBuffers
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackStreams
      VkPhysicalDeviceTransformFeedbackPropertiesEXTpNext
      VkPhysicalDeviceTransformFeedbackPropertiesEXTsType
      VkPhysicalDeviceTransformFeedbackPropertiesEXT
      VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceTransformFeedbackPropertiesEXT
      (struct "VkPhysicalDeviceTransformFeedbackPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceTransformFeedbackPropertiesEXT*
      (pointer VkPhysicalDeviceTransformFeedbackPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTsType
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTpNext
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackStreams
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxTransformFeedbackStreams);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackBuffers
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxTransformFeedbackBuffers);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackBufferSize
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      VkDeviceSize
      "___return (___arg1->maxTransformFeedbackBufferSize);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackStreamDataSize
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxTransformFeedbackStreamDataSize);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackBufferDataSize
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxTransformFeedbackBufferDataSize);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTmaxTransformFeedbackBufferDataStride
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxTransformFeedbackBufferDataStride);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTtransformFeedbackQueries
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      VkBool32
      "___return (___arg1->transformFeedbackQueries);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTtransformFeedbackStreamsLinesTriangles
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      VkBool32
      "___return (___arg1->transformFeedbackStreamsLinesTriangles);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTtransformFeedbackRasterizationStreamSelect
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      VkBool32
      "___return (___arg1->transformFeedbackRasterizationStreamSelect);")
   (define-c-lambda
      VkPhysicalDeviceTransformFeedbackPropertiesEXTtransformFeedbackDraw
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT*)
      VkBool32
      "___return (___arg1->transformFeedbackDraw);")
   (define-c-lambda
      make-VkPhysicalDeviceTransformFeedbackPropertiesEXT*
      (int)
      VkPhysicalDeviceTransformFeedbackPropertiesEXT*
      "VkPhysicalDeviceTransformFeedbackPropertiesEXT* vkphysicaldevicetransformfeedbackpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT));
      ___return (vkphysicaldevicetransformfeedbackpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceTransformFeedbackPropertiesEXT
      (VkPhysicalDeviceTransformFeedbackPropertiesEXT* int)
      VkPhysicalDeviceTransformFeedbackPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceTransformFeedbackPropertiesEXT
      ((pointer VkPhysicalDeviceTransformFeedbackPropertiesEXT))
      VkPhysicalDeviceTransformFeedbackPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceTransformFeedbackPropertiesEXT
      (void*
         uint32_t
         uint32_t
         VkDeviceSize
         uint32_t
         uint32_t
         uint32_t
         VkBool32
         VkBool32
         VkBool32
         VkBool32)
      VkPhysicalDeviceTransformFeedbackPropertiesEXT*
      "VkPhysicalDeviceTransformFeedbackPropertiesEXT *physicaldevicetransformfeedbackpropertiesext = malloc(sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT));
physicaldevicetransformfeedbackpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
physicaldevicetransformfeedbackpropertiesext->pNext=___arg1;
physicaldevicetransformfeedbackpropertiesext->maxTransformFeedbackStreams=___arg2;
physicaldevicetransformfeedbackpropertiesext->maxTransformFeedbackBuffers=___arg3;
physicaldevicetransformfeedbackpropertiesext->maxTransformFeedbackBufferSize=___arg4;
physicaldevicetransformfeedbackpropertiesext->maxTransformFeedbackStreamDataSize=___arg5;
physicaldevicetransformfeedbackpropertiesext->maxTransformFeedbackBufferDataSize=___arg6;
physicaldevicetransformfeedbackpropertiesext->maxTransformFeedbackBufferDataStride=___arg7;
physicaldevicetransformfeedbackpropertiesext->transformFeedbackQueries=___arg8;
physicaldevicetransformfeedbackpropertiesext->transformFeedbackStreamsLinesTriangles=___arg9;
physicaldevicetransformfeedbackpropertiesext->transformFeedbackRasterizationStreamSelect=___arg10;
physicaldevicetransformfeedbackpropertiesext->transformFeedbackDraw=___arg11;
___return (physicaldevicetransformfeedbackpropertiesext);"))
(begin-ffi
   (make-VkPipelineRasterizationStateStreamCreateInfoEXT
      ptr->VkPipelineRasterizationStateStreamCreateInfoEXT
      ref-VkPipelineRasterizationStateStreamCreateInfoEXT
      make-VkPipelineRasterizationStateStreamCreateInfoEXT*
      VkPipelineRasterizationStateStreamCreateInfoEXTrasterizationStream
      VkPipelineRasterizationStateStreamCreateInfoEXTflags
      VkPipelineRasterizationStateStreamCreateInfoEXTpNext
      VkPipelineRasterizationStateStreamCreateInfoEXTsType
      VkPipelineRasterizationStateStreamCreateInfoEXT
      VkPipelineRasterizationStateStreamCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineRasterizationStateStreamCreateInfoEXT
      (struct "VkPipelineRasterizationStateStreamCreateInfoEXT"))
   (c-define-type
      VkPipelineRasterizationStateStreamCreateInfoEXT*
      (pointer VkPipelineRasterizationStateStreamCreateInfoEXT))
   (define-c-lambda
      VkPipelineRasterizationStateStreamCreateInfoEXTsType
      (VkPipelineRasterizationStateStreamCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineRasterizationStateStreamCreateInfoEXTpNext
      (VkPipelineRasterizationStateStreamCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineRasterizationStateStreamCreateInfoEXTflags
      (VkPipelineRasterizationStateStreamCreateInfoEXT*)
      VkPipelineRasterizationStateStreamCreateFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineRasterizationStateStreamCreateInfoEXTrasterizationStream
      (VkPipelineRasterizationStateStreamCreateInfoEXT*)
      uint32_t
      "___return (___arg1->rasterizationStream);")
   (define-c-lambda
      make-VkPipelineRasterizationStateStreamCreateInfoEXT*
      (int)
      VkPipelineRasterizationStateStreamCreateInfoEXT*
      "VkPipelineRasterizationStateStreamCreateInfoEXT* vkpipelinerasterizationstatestreamcreateinfoext = malloc(___arg1 * sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT));
      ___return (vkpipelinerasterizationstatestreamcreateinfoext);")
   (define-c-lambda
      ref-VkPipelineRasterizationStateStreamCreateInfoEXT
      (VkPipelineRasterizationStateStreamCreateInfoEXT* int)
      VkPipelineRasterizationStateStreamCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineRasterizationStateStreamCreateInfoEXT
      ((pointer VkPipelineRasterizationStateStreamCreateInfoEXT))
      VkPipelineRasterizationStateStreamCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineRasterizationStateStreamCreateInfoEXT
      (void* VkPipelineRasterizationStateStreamCreateFlagsEXT uint32_t)
      VkPipelineRasterizationStateStreamCreateInfoEXT*
      "VkPipelineRasterizationStateStreamCreateInfoEXT *pipelinerasterizationstatestreamcreateinfoext = malloc(sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT));
pipelinerasterizationstatestreamcreateinfoext->sType=VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
pipelinerasterizationstatestreamcreateinfoext->pNext=___arg1;
pipelinerasterizationstatestreamcreateinfoext->flags=___arg2;
pipelinerasterizationstatestreamcreateinfoext->rasterizationStream=___arg3;
___return (pipelinerasterizationstatestreamcreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
      ptr->VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
      ref-VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
      make-VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVrepresentativeFragmentTest
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVpNext
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVsType
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
      (struct "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*
      (pointer VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVsType
      (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVpNext
      (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVrepresentativeFragmentTest
      (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*)
      VkBool32
      "___return (___arg1->representativeFragmentTest);")
   (define-c-lambda
      make-VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*
      (int)
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*
      "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV* vkphysicaldevicerepresentativefragmenttestfeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV));
      ___return (vkphysicaldevicerepresentativefragmenttestfeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
      (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV* int)
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
      ((pointer VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV))
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
      (void* VkBool32)
      VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*
      "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV *physicaldevicerepresentativefragmenttestfeaturesnv = malloc(sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV));
physicaldevicerepresentativefragmenttestfeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
physicaldevicerepresentativefragmenttestfeaturesnv->pNext=___arg1;
physicaldevicerepresentativefragmenttestfeaturesnv->representativeFragmentTest=___arg2;
___return (physicaldevicerepresentativefragmenttestfeaturesnv);"))
(begin-ffi
   (make-VkPipelineRepresentativeFragmentTestStateCreateInfoNV
      ptr->VkPipelineRepresentativeFragmentTestStateCreateInfoNV
      ref-VkPipelineRepresentativeFragmentTestStateCreateInfoNV
      make-VkPipelineRepresentativeFragmentTestStateCreateInfoNV*
      VkPipelineRepresentativeFragmentTestStateCreateInfoNVrepresentativeFragmentTestEnable
      VkPipelineRepresentativeFragmentTestStateCreateInfoNVpNext
      VkPipelineRepresentativeFragmentTestStateCreateInfoNVsType
      VkPipelineRepresentativeFragmentTestStateCreateInfoNV
      VkPipelineRepresentativeFragmentTestStateCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineRepresentativeFragmentTestStateCreateInfoNV
      (struct "VkPipelineRepresentativeFragmentTestStateCreateInfoNV"))
   (c-define-type
      VkPipelineRepresentativeFragmentTestStateCreateInfoNV*
      (pointer VkPipelineRepresentativeFragmentTestStateCreateInfoNV))
   (define-c-lambda
      VkPipelineRepresentativeFragmentTestStateCreateInfoNVsType
      (VkPipelineRepresentativeFragmentTestStateCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineRepresentativeFragmentTestStateCreateInfoNVpNext
      (VkPipelineRepresentativeFragmentTestStateCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineRepresentativeFragmentTestStateCreateInfoNVrepresentativeFragmentTestEnable
      (VkPipelineRepresentativeFragmentTestStateCreateInfoNV*)
      VkBool32
      "___return (___arg1->representativeFragmentTestEnable);")
   (define-c-lambda
      make-VkPipelineRepresentativeFragmentTestStateCreateInfoNV*
      (int)
      VkPipelineRepresentativeFragmentTestStateCreateInfoNV*
      "VkPipelineRepresentativeFragmentTestStateCreateInfoNV* vkpipelinerepresentativefragmentteststatecreateinfonv = malloc(___arg1 * sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV));
      ___return (vkpipelinerepresentativefragmentteststatecreateinfonv);")
   (define-c-lambda
      ref-VkPipelineRepresentativeFragmentTestStateCreateInfoNV
      (VkPipelineRepresentativeFragmentTestStateCreateInfoNV* int)
      VkPipelineRepresentativeFragmentTestStateCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineRepresentativeFragmentTestStateCreateInfoNV
      ((pointer VkPipelineRepresentativeFragmentTestStateCreateInfoNV))
      VkPipelineRepresentativeFragmentTestStateCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineRepresentativeFragmentTestStateCreateInfoNV
      (void* VkBool32)
      VkPipelineRepresentativeFragmentTestStateCreateInfoNV*
      "VkPipelineRepresentativeFragmentTestStateCreateInfoNV *pipelinerepresentativefragmentteststatecreateinfonv = malloc(sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV));
pipelinerepresentativefragmentteststatecreateinfonv->sType=VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
pipelinerepresentativefragmentteststatecreateinfonv->pNext=___arg1;
pipelinerepresentativefragmentteststatecreateinfonv->representativeFragmentTestEnable=___arg2;
___return (pipelinerepresentativefragmentteststatecreateinfonv);"))
(begin-ffi
   (make-VkPhysicalDeviceExclusiveScissorFeaturesNV
      ptr->VkPhysicalDeviceExclusiveScissorFeaturesNV
      ref-VkPhysicalDeviceExclusiveScissorFeaturesNV
      make-VkPhysicalDeviceExclusiveScissorFeaturesNV*
      VkPhysicalDeviceExclusiveScissorFeaturesNVexclusiveScissor
      VkPhysicalDeviceExclusiveScissorFeaturesNVpNext
      VkPhysicalDeviceExclusiveScissorFeaturesNVsType
      VkPhysicalDeviceExclusiveScissorFeaturesNV
      VkPhysicalDeviceExclusiveScissorFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceExclusiveScissorFeaturesNV
      (struct "VkPhysicalDeviceExclusiveScissorFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceExclusiveScissorFeaturesNV*
      (pointer VkPhysicalDeviceExclusiveScissorFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceExclusiveScissorFeaturesNVsType
      (VkPhysicalDeviceExclusiveScissorFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceExclusiveScissorFeaturesNVpNext
      (VkPhysicalDeviceExclusiveScissorFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceExclusiveScissorFeaturesNVexclusiveScissor
      (VkPhysicalDeviceExclusiveScissorFeaturesNV*)
      VkBool32
      "___return (___arg1->exclusiveScissor);")
   (define-c-lambda
      make-VkPhysicalDeviceExclusiveScissorFeaturesNV*
      (int)
      VkPhysicalDeviceExclusiveScissorFeaturesNV*
      "VkPhysicalDeviceExclusiveScissorFeaturesNV* vkphysicaldeviceexclusivescissorfeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV));
      ___return (vkphysicaldeviceexclusivescissorfeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceExclusiveScissorFeaturesNV
      (VkPhysicalDeviceExclusiveScissorFeaturesNV* int)
      VkPhysicalDeviceExclusiveScissorFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceExclusiveScissorFeaturesNV
      ((pointer VkPhysicalDeviceExclusiveScissorFeaturesNV))
      VkPhysicalDeviceExclusiveScissorFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceExclusiveScissorFeaturesNV
      (void* VkBool32)
      VkPhysicalDeviceExclusiveScissorFeaturesNV*
      "VkPhysicalDeviceExclusiveScissorFeaturesNV *physicaldeviceexclusivescissorfeaturesnv = malloc(sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV));
physicaldeviceexclusivescissorfeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
physicaldeviceexclusivescissorfeaturesnv->pNext=___arg1;
physicaldeviceexclusivescissorfeaturesnv->exclusiveScissor=___arg2;
___return (physicaldeviceexclusivescissorfeaturesnv);"))
(begin-ffi
   (make-VkPipelineViewportExclusiveScissorStateCreateInfoNV
      ptr->VkPipelineViewportExclusiveScissorStateCreateInfoNV
      ref-VkPipelineViewportExclusiveScissorStateCreateInfoNV
      make-VkPipelineViewportExclusiveScissorStateCreateInfoNV*
      VkPipelineViewportExclusiveScissorStateCreateInfoNVpExclusiveScissors
      VkPipelineViewportExclusiveScissorStateCreateInfoNVexclusiveScissorCount
      VkPipelineViewportExclusiveScissorStateCreateInfoNVpNext
      VkPipelineViewportExclusiveScissorStateCreateInfoNVsType
      VkPipelineViewportExclusiveScissorStateCreateInfoNV
      VkPipelineViewportExclusiveScissorStateCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineViewportExclusiveScissorStateCreateInfoNV
      (struct "VkPipelineViewportExclusiveScissorStateCreateInfoNV"))
   (c-define-type
      VkPipelineViewportExclusiveScissorStateCreateInfoNV*
      (pointer VkPipelineViewportExclusiveScissorStateCreateInfoNV))
   (define-c-lambda
      VkPipelineViewportExclusiveScissorStateCreateInfoNVsType
      (VkPipelineViewportExclusiveScissorStateCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineViewportExclusiveScissorStateCreateInfoNVpNext
      (VkPipelineViewportExclusiveScissorStateCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineViewportExclusiveScissorStateCreateInfoNVexclusiveScissorCount
      (VkPipelineViewportExclusiveScissorStateCreateInfoNV*)
      uint32_t
      "___return (___arg1->exclusiveScissorCount);")
   (define-c-lambda
      VkPipelineViewportExclusiveScissorStateCreateInfoNVpExclusiveScissors
      (VkPipelineViewportExclusiveScissorStateCreateInfoNV*)
      VkRect2D*
      "___return (___arg1->pExclusiveScissors);")
   (define-c-lambda
      make-VkPipelineViewportExclusiveScissorStateCreateInfoNV*
      (int)
      VkPipelineViewportExclusiveScissorStateCreateInfoNV*
      "VkPipelineViewportExclusiveScissorStateCreateInfoNV* vkpipelineviewportexclusivescissorstatecreateinfonv = malloc(___arg1 * sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV));
      ___return (vkpipelineviewportexclusivescissorstatecreateinfonv);")
   (define-c-lambda
      ref-VkPipelineViewportExclusiveScissorStateCreateInfoNV
      (VkPipelineViewportExclusiveScissorStateCreateInfoNV* int)
      VkPipelineViewportExclusiveScissorStateCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineViewportExclusiveScissorStateCreateInfoNV
      ((pointer VkPipelineViewportExclusiveScissorStateCreateInfoNV))
      VkPipelineViewportExclusiveScissorStateCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineViewportExclusiveScissorStateCreateInfoNV
      (void* uint32_t VkRect2D*)
      VkPipelineViewportExclusiveScissorStateCreateInfoNV*
      "VkPipelineViewportExclusiveScissorStateCreateInfoNV *pipelineviewportexclusivescissorstatecreateinfonv = malloc(sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV));
pipelineviewportexclusivescissorstatecreateinfonv->sType=VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
pipelineviewportexclusivescissorstatecreateinfonv->pNext=___arg1;
pipelineviewportexclusivescissorstatecreateinfonv->exclusiveScissorCount=___arg2;
pipelineviewportexclusivescissorstatecreateinfonv->pExclusiveScissors=___arg3;
___return (pipelineviewportexclusivescissorstatecreateinfonv);"))
(begin-ffi
   (make-VkPhysicalDeviceCornerSampledImageFeaturesNV
      ptr->VkPhysicalDeviceCornerSampledImageFeaturesNV
      ref-VkPhysicalDeviceCornerSampledImageFeaturesNV
      make-VkPhysicalDeviceCornerSampledImageFeaturesNV*
      VkPhysicalDeviceCornerSampledImageFeaturesNVcornerSampledImage
      VkPhysicalDeviceCornerSampledImageFeaturesNVpNext
      VkPhysicalDeviceCornerSampledImageFeaturesNVsType
      VkPhysicalDeviceCornerSampledImageFeaturesNV
      VkPhysicalDeviceCornerSampledImageFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceCornerSampledImageFeaturesNV
      (struct "VkPhysicalDeviceCornerSampledImageFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceCornerSampledImageFeaturesNV*
      (pointer VkPhysicalDeviceCornerSampledImageFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceCornerSampledImageFeaturesNVsType
      (VkPhysicalDeviceCornerSampledImageFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceCornerSampledImageFeaturesNVpNext
      (VkPhysicalDeviceCornerSampledImageFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceCornerSampledImageFeaturesNVcornerSampledImage
      (VkPhysicalDeviceCornerSampledImageFeaturesNV*)
      VkBool32
      "___return (___arg1->cornerSampledImage);")
   (define-c-lambda
      make-VkPhysicalDeviceCornerSampledImageFeaturesNV*
      (int)
      VkPhysicalDeviceCornerSampledImageFeaturesNV*
      "VkPhysicalDeviceCornerSampledImageFeaturesNV* vkphysicaldevicecornersampledimagefeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV));
      ___return (vkphysicaldevicecornersampledimagefeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceCornerSampledImageFeaturesNV
      (VkPhysicalDeviceCornerSampledImageFeaturesNV* int)
      VkPhysicalDeviceCornerSampledImageFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceCornerSampledImageFeaturesNV
      ((pointer VkPhysicalDeviceCornerSampledImageFeaturesNV))
      VkPhysicalDeviceCornerSampledImageFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceCornerSampledImageFeaturesNV
      (void* VkBool32)
      VkPhysicalDeviceCornerSampledImageFeaturesNV*
      "VkPhysicalDeviceCornerSampledImageFeaturesNV *physicaldevicecornersampledimagefeaturesnv = malloc(sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV));
physicaldevicecornersampledimagefeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
physicaldevicecornersampledimagefeaturesnv->pNext=___arg1;
physicaldevicecornersampledimagefeaturesnv->cornerSampledImage=___arg2;
___return (physicaldevicecornersampledimagefeaturesnv);"))
(begin-ffi
   (make-VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
      ptr->VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
      ref-VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
      make-VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNVcomputeDerivativeGroupLinear
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNVcomputeDerivativeGroupQuads
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNVpNext
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNVsType
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
      (struct "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*
      (pointer VkPhysicalDeviceComputeShaderDerivativesFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNVsType
      (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNVpNext
      (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNVcomputeDerivativeGroupQuads
      (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*)
      VkBool32
      "___return (___arg1->computeDerivativeGroupQuads);")
   (define-c-lambda
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNVcomputeDerivativeGroupLinear
      (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*)
      VkBool32
      "___return (___arg1->computeDerivativeGroupLinear);")
   (define-c-lambda
      make-VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*
      (int)
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*
      "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV* vkphysicaldevicecomputeshaderderivativesfeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV));
      ___return (vkphysicaldevicecomputeshaderderivativesfeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
      (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV* int)
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
      ((pointer VkPhysicalDeviceComputeShaderDerivativesFeaturesNV))
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*
      "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV *physicaldevicecomputeshaderderivativesfeaturesnv = malloc(sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV));
physicaldevicecomputeshaderderivativesfeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
physicaldevicecomputeshaderderivativesfeaturesnv->pNext=___arg1;
physicaldevicecomputeshaderderivativesfeaturesnv->computeDerivativeGroupQuads=___arg2;
physicaldevicecomputeshaderderivativesfeaturesnv->computeDerivativeGroupLinear=___arg3;
___return (physicaldevicecomputeshaderderivativesfeaturesnv);"))
(begin-ffi
   (make-VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
      ptr->VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
      ref-VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
      make-VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVfragmentShaderBarycentric
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVpNext
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVsType
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
      (struct "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*
      (pointer VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVsType
      (VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVpNext
      (VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVfragmentShaderBarycentric
      (VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*)
      VkBool32
      "___return (___arg1->fragmentShaderBarycentric);")
   (define-c-lambda
      make-VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*
      (int)
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*
      "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV* vkphysicaldevicefragmentshaderbarycentricfeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV));
      ___return (vkphysicaldevicefragmentshaderbarycentricfeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
      (VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV* int)
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
      ((pointer VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV))
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
      (void* VkBool32)
      VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*
      "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV *physicaldevicefragmentshaderbarycentricfeaturesnv = malloc(sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV));
physicaldevicefragmentshaderbarycentricfeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV;
physicaldevicefragmentshaderbarycentricfeaturesnv->pNext=___arg1;
physicaldevicefragmentshaderbarycentricfeaturesnv->fragmentShaderBarycentric=___arg2;
___return (physicaldevicefragmentshaderbarycentricfeaturesnv);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderImageFootprintFeaturesNV
      ptr->VkPhysicalDeviceShaderImageFootprintFeaturesNV
      ref-VkPhysicalDeviceShaderImageFootprintFeaturesNV
      make-VkPhysicalDeviceShaderImageFootprintFeaturesNV*
      VkPhysicalDeviceShaderImageFootprintFeaturesNVimageFootprint
      VkPhysicalDeviceShaderImageFootprintFeaturesNVpNext
      VkPhysicalDeviceShaderImageFootprintFeaturesNVsType
      VkPhysicalDeviceShaderImageFootprintFeaturesNV
      VkPhysicalDeviceShaderImageFootprintFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderImageFootprintFeaturesNV
      (struct "VkPhysicalDeviceShaderImageFootprintFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceShaderImageFootprintFeaturesNV*
      (pointer VkPhysicalDeviceShaderImageFootprintFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceShaderImageFootprintFeaturesNVsType
      (VkPhysicalDeviceShaderImageFootprintFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShaderImageFootprintFeaturesNVpNext
      (VkPhysicalDeviceShaderImageFootprintFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShaderImageFootprintFeaturesNVimageFootprint
      (VkPhysicalDeviceShaderImageFootprintFeaturesNV*)
      VkBool32
      "___return (___arg1->imageFootprint);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderImageFootprintFeaturesNV*
      (int)
      VkPhysicalDeviceShaderImageFootprintFeaturesNV*
      "VkPhysicalDeviceShaderImageFootprintFeaturesNV* vkphysicaldeviceshaderimagefootprintfeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV));
      ___return (vkphysicaldeviceshaderimagefootprintfeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceShaderImageFootprintFeaturesNV
      (VkPhysicalDeviceShaderImageFootprintFeaturesNV* int)
      VkPhysicalDeviceShaderImageFootprintFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceShaderImageFootprintFeaturesNV
      ((pointer VkPhysicalDeviceShaderImageFootprintFeaturesNV))
      VkPhysicalDeviceShaderImageFootprintFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderImageFootprintFeaturesNV
      (void* VkBool32)
      VkPhysicalDeviceShaderImageFootprintFeaturesNV*
      "VkPhysicalDeviceShaderImageFootprintFeaturesNV *physicaldeviceshaderimagefootprintfeaturesnv = malloc(sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV));
physicaldeviceshaderimagefootprintfeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
physicaldeviceshaderimagefootprintfeaturesnv->pNext=___arg1;
physicaldeviceshaderimagefootprintfeaturesnv->imageFootprint=___arg2;
___return (physicaldeviceshaderimagefootprintfeaturesnv);"))
(begin-ffi
   (make-VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
      ptr->VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
      ref-VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
      make-VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVdedicatedAllocationImageAliasing
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVpNext
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVsType
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
      (struct "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*
      (pointer VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVsType
      (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVpNext
      (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVdedicatedAllocationImageAliasing
      (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*)
      VkBool32
      "___return (___arg1->dedicatedAllocationImageAliasing);")
   (define-c-lambda
      make-VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*
      (int)
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*
      "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV* vkphysicaldevicededicatedallocationimagealiasingfeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV));
      ___return (vkphysicaldevicededicatedallocationimagealiasingfeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
      (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV* int)
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
      ((pointer VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV))
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
      (void* VkBool32)
      VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*
      "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV *physicaldevicededicatedallocationimagealiasingfeaturesnv = malloc(sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV));
physicaldevicededicatedallocationimagealiasingfeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
physicaldevicededicatedallocationimagealiasingfeaturesnv->pNext=___arg1;
physicaldevicededicatedallocationimagealiasingfeaturesnv->dedicatedAllocationImageAliasing=___arg2;
___return (physicaldevicededicatedallocationimagealiasingfeaturesnv);"))
(begin-ffi
   (make-VkShadingRatePaletteNV
      ptr->VkShadingRatePaletteNV
      ref-VkShadingRatePaletteNV
      make-VkShadingRatePaletteNV*
      VkShadingRatePaletteNVpShadingRatePaletteEntries
      VkShadingRatePaletteNVshadingRatePaletteEntryCount
      VkShadingRatePaletteNV
      VkShadingRatePaletteNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkShadingRatePaletteNV (struct "VkShadingRatePaletteNV"))
   (c-define-type VkShadingRatePaletteNV* (pointer VkShadingRatePaletteNV))
   (define-c-lambda
      VkShadingRatePaletteNVshadingRatePaletteEntryCount
      (VkShadingRatePaletteNV*)
      uint32_t
      "___return (___arg1->shadingRatePaletteEntryCount);")
   (define-c-lambda
      VkShadingRatePaletteNVpShadingRatePaletteEntries
      (VkShadingRatePaletteNV*)
      VkShadingRatePaletteEntryNV*
      "___return (___arg1->pShadingRatePaletteEntries);")
   (define-c-lambda
      make-VkShadingRatePaletteNV*
      (int)
      VkShadingRatePaletteNV*
      "VkShadingRatePaletteNV* vkshadingratepalettenv = malloc(___arg1 * sizeof(VkShadingRatePaletteNV));
      ___return (vkshadingratepalettenv);")
   (define-c-lambda
      ref-VkShadingRatePaletteNV
      (VkShadingRatePaletteNV* int)
      VkShadingRatePaletteNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkShadingRatePaletteNV
      ((pointer VkShadingRatePaletteNV))
      VkShadingRatePaletteNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkShadingRatePaletteNV
      (uint32_t VkShadingRatePaletteEntryNV*)
      VkShadingRatePaletteNV*
      "VkShadingRatePaletteNV *shadingratepalettenv = malloc(sizeof(VkShadingRatePaletteNV));
shadingratepalettenv->shadingRatePaletteEntryCount=___arg1;
shadingratepalettenv->pShadingRatePaletteEntries=___arg2;
___return (shadingratepalettenv);"))
(begin-ffi
   (make-VkPipelineViewportShadingRateImageStateCreateInfoNV
      ptr->VkPipelineViewportShadingRateImageStateCreateInfoNV
      ref-VkPipelineViewportShadingRateImageStateCreateInfoNV
      make-VkPipelineViewportShadingRateImageStateCreateInfoNV*
      VkPipelineViewportShadingRateImageStateCreateInfoNVpShadingRatePalettes
      VkPipelineViewportShadingRateImageStateCreateInfoNVviewportCount
      VkPipelineViewportShadingRateImageStateCreateInfoNVshadingRateImageEnable
      VkPipelineViewportShadingRateImageStateCreateInfoNVpNext
      VkPipelineViewportShadingRateImageStateCreateInfoNVsType
      VkPipelineViewportShadingRateImageStateCreateInfoNV
      VkPipelineViewportShadingRateImageStateCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineViewportShadingRateImageStateCreateInfoNV
      (struct "VkPipelineViewportShadingRateImageStateCreateInfoNV"))
   (c-define-type
      VkPipelineViewportShadingRateImageStateCreateInfoNV*
      (pointer VkPipelineViewportShadingRateImageStateCreateInfoNV))
   (define-c-lambda
      VkPipelineViewportShadingRateImageStateCreateInfoNVsType
      (VkPipelineViewportShadingRateImageStateCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineViewportShadingRateImageStateCreateInfoNVpNext
      (VkPipelineViewportShadingRateImageStateCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineViewportShadingRateImageStateCreateInfoNVshadingRateImageEnable
      (VkPipelineViewportShadingRateImageStateCreateInfoNV*)
      VkBool32
      "___return (___arg1->shadingRateImageEnable);")
   (define-c-lambda
      VkPipelineViewportShadingRateImageStateCreateInfoNVviewportCount
      (VkPipelineViewportShadingRateImageStateCreateInfoNV*)
      uint32_t
      "___return (___arg1->viewportCount);")
   (define-c-lambda
      VkPipelineViewportShadingRateImageStateCreateInfoNVpShadingRatePalettes
      (VkPipelineViewportShadingRateImageStateCreateInfoNV*)
      VkShadingRatePaletteNV*
      "___return (___arg1->pShadingRatePalettes);")
   (define-c-lambda
      make-VkPipelineViewportShadingRateImageStateCreateInfoNV*
      (int)
      VkPipelineViewportShadingRateImageStateCreateInfoNV*
      "VkPipelineViewportShadingRateImageStateCreateInfoNV* vkpipelineviewportshadingrateimagestatecreateinfonv = malloc(___arg1 * sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV));
      ___return (vkpipelineviewportshadingrateimagestatecreateinfonv);")
   (define-c-lambda
      ref-VkPipelineViewportShadingRateImageStateCreateInfoNV
      (VkPipelineViewportShadingRateImageStateCreateInfoNV* int)
      VkPipelineViewportShadingRateImageStateCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineViewportShadingRateImageStateCreateInfoNV
      ((pointer VkPipelineViewportShadingRateImageStateCreateInfoNV))
      VkPipelineViewportShadingRateImageStateCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineViewportShadingRateImageStateCreateInfoNV
      (void* VkBool32 uint32_t VkShadingRatePaletteNV*)
      VkPipelineViewportShadingRateImageStateCreateInfoNV*
      "VkPipelineViewportShadingRateImageStateCreateInfoNV *pipelineviewportshadingrateimagestatecreateinfonv = malloc(sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV));
pipelineviewportshadingrateimagestatecreateinfonv->sType=VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
pipelineviewportshadingrateimagestatecreateinfonv->pNext=___arg1;
pipelineviewportshadingrateimagestatecreateinfonv->shadingRateImageEnable=___arg2;
pipelineviewportshadingrateimagestatecreateinfonv->viewportCount=___arg3;
pipelineviewportshadingrateimagestatecreateinfonv->pShadingRatePalettes=___arg4;
___return (pipelineviewportshadingrateimagestatecreateinfonv);"))
(begin-ffi
   (make-VkPhysicalDeviceShadingRateImageFeaturesNV
      ptr->VkPhysicalDeviceShadingRateImageFeaturesNV
      ref-VkPhysicalDeviceShadingRateImageFeaturesNV
      make-VkPhysicalDeviceShadingRateImageFeaturesNV*
      VkPhysicalDeviceShadingRateImageFeaturesNVshadingRateCoarseSampleOrder
      VkPhysicalDeviceShadingRateImageFeaturesNVshadingRateImage
      VkPhysicalDeviceShadingRateImageFeaturesNVpNext
      VkPhysicalDeviceShadingRateImageFeaturesNVsType
      VkPhysicalDeviceShadingRateImageFeaturesNV
      VkPhysicalDeviceShadingRateImageFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShadingRateImageFeaturesNV
      (struct "VkPhysicalDeviceShadingRateImageFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceShadingRateImageFeaturesNV*
      (pointer VkPhysicalDeviceShadingRateImageFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceShadingRateImageFeaturesNVsType
      (VkPhysicalDeviceShadingRateImageFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShadingRateImageFeaturesNVpNext
      (VkPhysicalDeviceShadingRateImageFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShadingRateImageFeaturesNVshadingRateImage
      (VkPhysicalDeviceShadingRateImageFeaturesNV*)
      VkBool32
      "___return (___arg1->shadingRateImage);")
   (define-c-lambda
      VkPhysicalDeviceShadingRateImageFeaturesNVshadingRateCoarseSampleOrder
      (VkPhysicalDeviceShadingRateImageFeaturesNV*)
      VkBool32
      "___return (___arg1->shadingRateCoarseSampleOrder);")
   (define-c-lambda
      make-VkPhysicalDeviceShadingRateImageFeaturesNV*
      (int)
      VkPhysicalDeviceShadingRateImageFeaturesNV*
      "VkPhysicalDeviceShadingRateImageFeaturesNV* vkphysicaldeviceshadingrateimagefeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV));
      ___return (vkphysicaldeviceshadingrateimagefeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceShadingRateImageFeaturesNV
      (VkPhysicalDeviceShadingRateImageFeaturesNV* int)
      VkPhysicalDeviceShadingRateImageFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceShadingRateImageFeaturesNV
      ((pointer VkPhysicalDeviceShadingRateImageFeaturesNV))
      VkPhysicalDeviceShadingRateImageFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceShadingRateImageFeaturesNV
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceShadingRateImageFeaturesNV*
      "VkPhysicalDeviceShadingRateImageFeaturesNV *physicaldeviceshadingrateimagefeaturesnv = malloc(sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV));
physicaldeviceshadingrateimagefeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
physicaldeviceshadingrateimagefeaturesnv->pNext=___arg1;
physicaldeviceshadingrateimagefeaturesnv->shadingRateImage=___arg2;
physicaldeviceshadingrateimagefeaturesnv->shadingRateCoarseSampleOrder=___arg3;
___return (physicaldeviceshadingrateimagefeaturesnv);"))
(begin-ffi
   (make-VkPhysicalDeviceShadingRateImagePropertiesNV
      ptr->VkPhysicalDeviceShadingRateImagePropertiesNV
      ref-VkPhysicalDeviceShadingRateImagePropertiesNV
      make-VkPhysicalDeviceShadingRateImagePropertiesNV*
      VkPhysicalDeviceShadingRateImagePropertiesNVshadingRateMaxCoarseSamples
      VkPhysicalDeviceShadingRateImagePropertiesNVshadingRatePaletteSize
      VkPhysicalDeviceShadingRateImagePropertiesNVshadingRateTexelSize
      VkPhysicalDeviceShadingRateImagePropertiesNVpNext
      VkPhysicalDeviceShadingRateImagePropertiesNVsType
      VkPhysicalDeviceShadingRateImagePropertiesNV
      VkPhysicalDeviceShadingRateImagePropertiesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShadingRateImagePropertiesNV
      (struct "VkPhysicalDeviceShadingRateImagePropertiesNV"))
   (c-define-type
      VkPhysicalDeviceShadingRateImagePropertiesNV*
      (pointer VkPhysicalDeviceShadingRateImagePropertiesNV))
   (define-c-lambda
      VkPhysicalDeviceShadingRateImagePropertiesNVsType
      (VkPhysicalDeviceShadingRateImagePropertiesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShadingRateImagePropertiesNVpNext
      (VkPhysicalDeviceShadingRateImagePropertiesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShadingRateImagePropertiesNVshadingRateTexelSize
      (VkPhysicalDeviceShadingRateImagePropertiesNV*)
      VkExtent2D
      "___return (___arg1->shadingRateTexelSize);")
   (define-c-lambda
      VkPhysicalDeviceShadingRateImagePropertiesNVshadingRatePaletteSize
      (VkPhysicalDeviceShadingRateImagePropertiesNV*)
      uint32_t
      "___return (___arg1->shadingRatePaletteSize);")
   (define-c-lambda
      VkPhysicalDeviceShadingRateImagePropertiesNVshadingRateMaxCoarseSamples
      (VkPhysicalDeviceShadingRateImagePropertiesNV*)
      uint32_t
      "___return (___arg1->shadingRateMaxCoarseSamples);")
   (define-c-lambda
      make-VkPhysicalDeviceShadingRateImagePropertiesNV*
      (int)
      VkPhysicalDeviceShadingRateImagePropertiesNV*
      "VkPhysicalDeviceShadingRateImagePropertiesNV* vkphysicaldeviceshadingrateimagepropertiesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV));
      ___return (vkphysicaldeviceshadingrateimagepropertiesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceShadingRateImagePropertiesNV
      (VkPhysicalDeviceShadingRateImagePropertiesNV* int)
      VkPhysicalDeviceShadingRateImagePropertiesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceShadingRateImagePropertiesNV
      ((pointer VkPhysicalDeviceShadingRateImagePropertiesNV))
      VkPhysicalDeviceShadingRateImagePropertiesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceShadingRateImagePropertiesNV
      (void* VkExtent2D uint32_t uint32_t)
      VkPhysicalDeviceShadingRateImagePropertiesNV*
      "VkPhysicalDeviceShadingRateImagePropertiesNV *physicaldeviceshadingrateimagepropertiesnv = malloc(sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV));
physicaldeviceshadingrateimagepropertiesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;
physicaldeviceshadingrateimagepropertiesnv->pNext=___arg1;
physicaldeviceshadingrateimagepropertiesnv->shadingRateTexelSize=___arg2;
physicaldeviceshadingrateimagepropertiesnv->shadingRatePaletteSize=___arg3;
physicaldeviceshadingrateimagepropertiesnv->shadingRateMaxCoarseSamples=___arg4;
___return (physicaldeviceshadingrateimagepropertiesnv);"))
(begin-ffi
   (make-VkCoarseSampleLocationNV
      ptr->VkCoarseSampleLocationNV
      ref-VkCoarseSampleLocationNV
      make-VkCoarseSampleLocationNV*
      VkCoarseSampleLocationNVsample
      VkCoarseSampleLocationNVpixelY
      VkCoarseSampleLocationNVpixelX
      VkCoarseSampleLocationNV
      VkCoarseSampleLocationNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkCoarseSampleLocationNV (struct "VkCoarseSampleLocationNV"))
   (c-define-type VkCoarseSampleLocationNV* (pointer VkCoarseSampleLocationNV))
   (define-c-lambda
      VkCoarseSampleLocationNVpixelX
      (VkCoarseSampleLocationNV*)
      uint32_t
      "___return (___arg1->pixelX);")
   (define-c-lambda
      VkCoarseSampleLocationNVpixelY
      (VkCoarseSampleLocationNV*)
      uint32_t
      "___return (___arg1->pixelY);")
   (define-c-lambda
      VkCoarseSampleLocationNVsample
      (VkCoarseSampleLocationNV*)
      uint32_t
      "___return (___arg1->sample);")
   (define-c-lambda
      make-VkCoarseSampleLocationNV*
      (int)
      VkCoarseSampleLocationNV*
      "VkCoarseSampleLocationNV* vkcoarsesamplelocationnv = malloc(___arg1 * sizeof(VkCoarseSampleLocationNV));
      ___return (vkcoarsesamplelocationnv);")
   (define-c-lambda
      ref-VkCoarseSampleLocationNV
      (VkCoarseSampleLocationNV* int)
      VkCoarseSampleLocationNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCoarseSampleLocationNV
      ((pointer VkCoarseSampleLocationNV))
      VkCoarseSampleLocationNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCoarseSampleLocationNV
      (uint32_t uint32_t uint32_t)
      VkCoarseSampleLocationNV*
      "VkCoarseSampleLocationNV *coarsesamplelocationnv = malloc(sizeof(VkCoarseSampleLocationNV));
coarsesamplelocationnv->pixelX=___arg1;
coarsesamplelocationnv->pixelY=___arg2;
coarsesamplelocationnv->sample=___arg3;
___return (coarsesamplelocationnv);"))
(begin-ffi
   (make-VkCoarseSampleOrderCustomNV
      ptr->VkCoarseSampleOrderCustomNV
      ref-VkCoarseSampleOrderCustomNV
      make-VkCoarseSampleOrderCustomNV*
      VkCoarseSampleOrderCustomNVpSampleLocations
      VkCoarseSampleOrderCustomNVsampleLocationCount
      VkCoarseSampleOrderCustomNVsampleCount
      VkCoarseSampleOrderCustomNVshadingRate
      VkCoarseSampleOrderCustomNV
      VkCoarseSampleOrderCustomNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkCoarseSampleOrderCustomNV (struct "VkCoarseSampleOrderCustomNV"))
   (c-define-type VkCoarseSampleOrderCustomNV* (pointer VkCoarseSampleOrderCustomNV))
   (define-c-lambda
      VkCoarseSampleOrderCustomNVshadingRate
      (VkCoarseSampleOrderCustomNV*)
      VkShadingRatePaletteEntryNV
      "___return (___arg1->shadingRate);")
   (define-c-lambda
      VkCoarseSampleOrderCustomNVsampleCount
      (VkCoarseSampleOrderCustomNV*)
      uint32_t
      "___return (___arg1->sampleCount);")
   (define-c-lambda
      VkCoarseSampleOrderCustomNVsampleLocationCount
      (VkCoarseSampleOrderCustomNV*)
      uint32_t
      "___return (___arg1->sampleLocationCount);")
   (define-c-lambda
      VkCoarseSampleOrderCustomNVpSampleLocations
      (VkCoarseSampleOrderCustomNV*)
      VkCoarseSampleLocationNV*
      "___return (___arg1->pSampleLocations);")
   (define-c-lambda
      make-VkCoarseSampleOrderCustomNV*
      (int)
      VkCoarseSampleOrderCustomNV*
      "VkCoarseSampleOrderCustomNV* vkcoarsesampleordercustomnv = malloc(___arg1 * sizeof(VkCoarseSampleOrderCustomNV));
      ___return (vkcoarsesampleordercustomnv);")
   (define-c-lambda
      ref-VkCoarseSampleOrderCustomNV
      (VkCoarseSampleOrderCustomNV* int)
      VkCoarseSampleOrderCustomNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCoarseSampleOrderCustomNV
      ((pointer VkCoarseSampleOrderCustomNV))
      VkCoarseSampleOrderCustomNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCoarseSampleOrderCustomNV
      (VkShadingRatePaletteEntryNV uint32_t uint32_t VkCoarseSampleLocationNV*)
      VkCoarseSampleOrderCustomNV*
      "VkCoarseSampleOrderCustomNV *coarsesampleordercustomnv = malloc(sizeof(VkCoarseSampleOrderCustomNV));
coarsesampleordercustomnv->shadingRate=___arg1;
coarsesampleordercustomnv->sampleCount=___arg2;
coarsesampleordercustomnv->sampleLocationCount=___arg3;
coarsesampleordercustomnv->pSampleLocations=___arg4;
___return (coarsesampleordercustomnv);"))
(begin-ffi
   (make-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
      ptr->VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
      ref-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
      make-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNVpCustomSampleOrders
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNVcustomSampleOrderCount
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNVsampleOrderType
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNVpNext
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNVsType
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
      (struct "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"))
   (c-define-type
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*
      (pointer VkPipelineViewportCoarseSampleOrderStateCreateInfoNV))
   (define-c-lambda
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNVsType
      (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNVpNext
      (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNVsampleOrderType
      (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*)
      VkCoarseSampleOrderTypeNV
      "___return (___arg1->sampleOrderType);")
   (define-c-lambda
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNVcustomSampleOrderCount
      (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*)
      uint32_t
      "___return (___arg1->customSampleOrderCount);")
   (define-c-lambda
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNVpCustomSampleOrders
      (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*)
      VkCoarseSampleOrderCustomNV*
      "___return (___arg1->pCustomSampleOrders);")
   (define-c-lambda
      make-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*
      (int)
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*
      "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV* vkpipelineviewportcoarsesampleorderstatecreateinfonv = malloc(___arg1 * sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV));
      ___return (vkpipelineviewportcoarsesampleorderstatecreateinfonv);")
   (define-c-lambda
      ref-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
      (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV* int)
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
      ((pointer VkPipelineViewportCoarseSampleOrderStateCreateInfoNV))
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
      (void* VkCoarseSampleOrderTypeNV uint32_t VkCoarseSampleOrderCustomNV*)
      VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*
      "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV *pipelineviewportcoarsesampleorderstatecreateinfonv = malloc(sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV));
pipelineviewportcoarsesampleorderstatecreateinfonv->sType=VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
pipelineviewportcoarsesampleorderstatecreateinfonv->pNext=___arg1;
pipelineviewportcoarsesampleorderstatecreateinfonv->sampleOrderType=___arg2;
pipelineviewportcoarsesampleorderstatecreateinfonv->customSampleOrderCount=___arg3;
pipelineviewportcoarsesampleorderstatecreateinfonv->pCustomSampleOrders=___arg4;
___return (pipelineviewportcoarsesampleorderstatecreateinfonv);"))
(begin-ffi
   (make-VkPhysicalDeviceMeshShaderFeaturesNV
      ptr->VkPhysicalDeviceMeshShaderFeaturesNV
      ref-VkPhysicalDeviceMeshShaderFeaturesNV
      make-VkPhysicalDeviceMeshShaderFeaturesNV*
      VkPhysicalDeviceMeshShaderFeaturesNVmeshShader
      VkPhysicalDeviceMeshShaderFeaturesNVtaskShader
      VkPhysicalDeviceMeshShaderFeaturesNVpNext
      VkPhysicalDeviceMeshShaderFeaturesNVsType
      VkPhysicalDeviceMeshShaderFeaturesNV
      VkPhysicalDeviceMeshShaderFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMeshShaderFeaturesNV
      (struct "VkPhysicalDeviceMeshShaderFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceMeshShaderFeaturesNV*
      (pointer VkPhysicalDeviceMeshShaderFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceMeshShaderFeaturesNVsType
      (VkPhysicalDeviceMeshShaderFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderFeaturesNVpNext
      (VkPhysicalDeviceMeshShaderFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderFeaturesNVtaskShader
      (VkPhysicalDeviceMeshShaderFeaturesNV*)
      VkBool32
      "___return (___arg1->taskShader);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderFeaturesNVmeshShader
      (VkPhysicalDeviceMeshShaderFeaturesNV*)
      VkBool32
      "___return (___arg1->meshShader);")
   (define-c-lambda
      make-VkPhysicalDeviceMeshShaderFeaturesNV*
      (int)
      VkPhysicalDeviceMeshShaderFeaturesNV*
      "VkPhysicalDeviceMeshShaderFeaturesNV* vkphysicaldevicemeshshaderfeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceMeshShaderFeaturesNV));
      ___return (vkphysicaldevicemeshshaderfeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceMeshShaderFeaturesNV
      (VkPhysicalDeviceMeshShaderFeaturesNV* int)
      VkPhysicalDeviceMeshShaderFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceMeshShaderFeaturesNV
      ((pointer VkPhysicalDeviceMeshShaderFeaturesNV))
      VkPhysicalDeviceMeshShaderFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceMeshShaderFeaturesNV
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceMeshShaderFeaturesNV*
      "VkPhysicalDeviceMeshShaderFeaturesNV *physicaldevicemeshshaderfeaturesnv = malloc(sizeof(VkPhysicalDeviceMeshShaderFeaturesNV));
physicaldevicemeshshaderfeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
physicaldevicemeshshaderfeaturesnv->pNext=___arg1;
physicaldevicemeshshaderfeaturesnv->taskShader=___arg2;
physicaldevicemeshshaderfeaturesnv->meshShader=___arg3;
___return (physicaldevicemeshshaderfeaturesnv);"))
(begin-ffi
   (make-VkPhysicalDeviceMeshShaderPropertiesNV
      ptr->VkPhysicalDeviceMeshShaderPropertiesNV
      ref-VkPhysicalDeviceMeshShaderPropertiesNV
      make-VkPhysicalDeviceMeshShaderPropertiesNV*
      VkPhysicalDeviceMeshShaderPropertiesNVmeshOutputPerPrimitiveGranularity
      VkPhysicalDeviceMeshShaderPropertiesNVmeshOutputPerVertexGranularity
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshMultiviewViewCount
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshOutputPrimitives
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshOutputVertices
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshTotalMemorySize
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshWorkGroupSize
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshWorkGroupInvocations
      VkPhysicalDeviceMeshShaderPropertiesNVmaxTaskOutputCount
      VkPhysicalDeviceMeshShaderPropertiesNVmaxTaskTotalMemorySize
      VkPhysicalDeviceMeshShaderPropertiesNVmaxTaskWorkGroupSize
      VkPhysicalDeviceMeshShaderPropertiesNVmaxTaskWorkGroupInvocations
      VkPhysicalDeviceMeshShaderPropertiesNVmaxDrawMeshTasksCount
      VkPhysicalDeviceMeshShaderPropertiesNVpNext
      VkPhysicalDeviceMeshShaderPropertiesNVsType
      VkPhysicalDeviceMeshShaderPropertiesNV
      VkPhysicalDeviceMeshShaderPropertiesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMeshShaderPropertiesNV
      (struct "VkPhysicalDeviceMeshShaderPropertiesNV"))
   (c-define-type
      VkPhysicalDeviceMeshShaderPropertiesNV*
      (pointer VkPhysicalDeviceMeshShaderPropertiesNV))
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVsType
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVpNext
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxDrawMeshTasksCount
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->maxDrawMeshTasksCount);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxTaskWorkGroupInvocations
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->maxTaskWorkGroupInvocations);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxTaskWorkGroupSize
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t*
      "___return (___arg1->maxTaskWorkGroupSize);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxTaskTotalMemorySize
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->maxTaskTotalMemorySize);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxTaskOutputCount
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->maxTaskOutputCount);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshWorkGroupInvocations
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->maxMeshWorkGroupInvocations);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshWorkGroupSize
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t*
      "___return (___arg1->maxMeshWorkGroupSize);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshTotalMemorySize
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->maxMeshTotalMemorySize);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshOutputVertices
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->maxMeshOutputVertices);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshOutputPrimitives
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->maxMeshOutputPrimitives);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmaxMeshMultiviewViewCount
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->maxMeshMultiviewViewCount);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmeshOutputPerVertexGranularity
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->meshOutputPerVertexGranularity);")
   (define-c-lambda
      VkPhysicalDeviceMeshShaderPropertiesNVmeshOutputPerPrimitiveGranularity
      (VkPhysicalDeviceMeshShaderPropertiesNV*)
      uint32_t
      "___return (___arg1->meshOutputPerPrimitiveGranularity);")
   (define-c-lambda
      make-VkPhysicalDeviceMeshShaderPropertiesNV*
      (int)
      VkPhysicalDeviceMeshShaderPropertiesNV*
      "VkPhysicalDeviceMeshShaderPropertiesNV* vkphysicaldevicemeshshaderpropertiesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceMeshShaderPropertiesNV));
      ___return (vkphysicaldevicemeshshaderpropertiesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceMeshShaderPropertiesNV
      (VkPhysicalDeviceMeshShaderPropertiesNV* int)
      VkPhysicalDeviceMeshShaderPropertiesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceMeshShaderPropertiesNV
      ((pointer VkPhysicalDeviceMeshShaderPropertiesNV))
      VkPhysicalDeviceMeshShaderPropertiesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceMeshShaderPropertiesNV
      (void*
         uint32_t
         uint32_t
         uint32_t*
         uint32_t
         uint32_t
         uint32_t
         uint32_t*
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         uint32_t)
      VkPhysicalDeviceMeshShaderPropertiesNV*
      "VkPhysicalDeviceMeshShaderPropertiesNV *physicaldevicemeshshaderpropertiesnv = malloc(sizeof(VkPhysicalDeviceMeshShaderPropertiesNV));
physicaldevicemeshshaderpropertiesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
physicaldevicemeshshaderpropertiesnv->pNext=___arg1;
physicaldevicemeshshaderpropertiesnv->maxDrawMeshTasksCount=___arg2;
physicaldevicemeshshaderpropertiesnv->maxTaskWorkGroupInvocations=___arg3;
memcpy(physicaldevicemeshshaderpropertiesnv->maxTaskWorkGroupSize,___arg4,sizeof(___arg4));
physicaldevicemeshshaderpropertiesnv->maxTaskTotalMemorySize=___arg5;
physicaldevicemeshshaderpropertiesnv->maxTaskOutputCount=___arg6;
physicaldevicemeshshaderpropertiesnv->maxMeshWorkGroupInvocations=___arg7;
memcpy(physicaldevicemeshshaderpropertiesnv->maxMeshWorkGroupSize,___arg8,sizeof(___arg8));
physicaldevicemeshshaderpropertiesnv->maxMeshTotalMemorySize=___arg9;
physicaldevicemeshshaderpropertiesnv->maxMeshOutputVertices=___arg10;
physicaldevicemeshshaderpropertiesnv->maxMeshOutputPrimitives=___arg11;
physicaldevicemeshshaderpropertiesnv->maxMeshMultiviewViewCount=___arg12;
physicaldevicemeshshaderpropertiesnv->meshOutputPerVertexGranularity=___arg13;
physicaldevicemeshshaderpropertiesnv->meshOutputPerPrimitiveGranularity=___arg14;
___return (physicaldevicemeshshaderpropertiesnv);"))
(begin-ffi
   (make-VkDrawMeshTasksIndirectCommandNV
      ptr->VkDrawMeshTasksIndirectCommandNV
      ref-VkDrawMeshTasksIndirectCommandNV
      make-VkDrawMeshTasksIndirectCommandNV*
      VkDrawMeshTasksIndirectCommandNVfirstTask
      VkDrawMeshTasksIndirectCommandNVtaskCount
      VkDrawMeshTasksIndirectCommandNV
      VkDrawMeshTasksIndirectCommandNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDrawMeshTasksIndirectCommandNV
      (struct "VkDrawMeshTasksIndirectCommandNV"))
   (c-define-type
      VkDrawMeshTasksIndirectCommandNV*
      (pointer VkDrawMeshTasksIndirectCommandNV))
   (define-c-lambda
      VkDrawMeshTasksIndirectCommandNVtaskCount
      (VkDrawMeshTasksIndirectCommandNV*)
      uint32_t
      "___return (___arg1->taskCount);")
   (define-c-lambda
      VkDrawMeshTasksIndirectCommandNVfirstTask
      (VkDrawMeshTasksIndirectCommandNV*)
      uint32_t
      "___return (___arg1->firstTask);")
   (define-c-lambda
      make-VkDrawMeshTasksIndirectCommandNV*
      (int)
      VkDrawMeshTasksIndirectCommandNV*
      "VkDrawMeshTasksIndirectCommandNV* vkdrawmeshtasksindirectcommandnv = malloc(___arg1 * sizeof(VkDrawMeshTasksIndirectCommandNV));
      ___return (vkdrawmeshtasksindirectcommandnv);")
   (define-c-lambda
      ref-VkDrawMeshTasksIndirectCommandNV
      (VkDrawMeshTasksIndirectCommandNV* int)
      VkDrawMeshTasksIndirectCommandNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDrawMeshTasksIndirectCommandNV
      ((pointer VkDrawMeshTasksIndirectCommandNV))
      VkDrawMeshTasksIndirectCommandNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDrawMeshTasksIndirectCommandNV
      (uint32_t uint32_t)
      VkDrawMeshTasksIndirectCommandNV*
      "VkDrawMeshTasksIndirectCommandNV *drawmeshtasksindirectcommandnv = malloc(sizeof(VkDrawMeshTasksIndirectCommandNV));
drawmeshtasksindirectcommandnv->taskCount=___arg1;
drawmeshtasksindirectcommandnv->firstTask=___arg2;
___return (drawmeshtasksindirectcommandnv);"))
(begin-ffi
   (make-VkRayTracingShaderGroupCreateInfoNV
      ptr->VkRayTracingShaderGroupCreateInfoNV
      ref-VkRayTracingShaderGroupCreateInfoNV
      make-VkRayTracingShaderGroupCreateInfoNV*
      VkRayTracingShaderGroupCreateInfoNVintersectionShader
      VkRayTracingShaderGroupCreateInfoNVanyHitShader
      VkRayTracingShaderGroupCreateInfoNVclosestHitShader
      VkRayTracingShaderGroupCreateInfoNVgeneralShader
      VkRayTracingShaderGroupCreateInfoNVtype
      VkRayTracingShaderGroupCreateInfoNVpNext
      VkRayTracingShaderGroupCreateInfoNVsType
      VkRayTracingShaderGroupCreateInfoNV
      VkRayTracingShaderGroupCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkRayTracingShaderGroupCreateInfoNV
      (struct "VkRayTracingShaderGroupCreateInfoNV"))
   (c-define-type
      VkRayTracingShaderGroupCreateInfoNV*
      (pointer VkRayTracingShaderGroupCreateInfoNV))
   (define-c-lambda
      VkRayTracingShaderGroupCreateInfoNVsType
      (VkRayTracingShaderGroupCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkRayTracingShaderGroupCreateInfoNVpNext
      (VkRayTracingShaderGroupCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkRayTracingShaderGroupCreateInfoNVtype
      (VkRayTracingShaderGroupCreateInfoNV*)
      VkRayTracingShaderGroupTypeNV
      "___return (___arg1->type);")
   (define-c-lambda
      VkRayTracingShaderGroupCreateInfoNVgeneralShader
      (VkRayTracingShaderGroupCreateInfoNV*)
      uint32_t
      "___return (___arg1->generalShader);")
   (define-c-lambda
      VkRayTracingShaderGroupCreateInfoNVclosestHitShader
      (VkRayTracingShaderGroupCreateInfoNV*)
      uint32_t
      "___return (___arg1->closestHitShader);")
   (define-c-lambda
      VkRayTracingShaderGroupCreateInfoNVanyHitShader
      (VkRayTracingShaderGroupCreateInfoNV*)
      uint32_t
      "___return (___arg1->anyHitShader);")
   (define-c-lambda
      VkRayTracingShaderGroupCreateInfoNVintersectionShader
      (VkRayTracingShaderGroupCreateInfoNV*)
      uint32_t
      "___return (___arg1->intersectionShader);")
   (define-c-lambda
      make-VkRayTracingShaderGroupCreateInfoNV*
      (int)
      VkRayTracingShaderGroupCreateInfoNV*
      "VkRayTracingShaderGroupCreateInfoNV* vkraytracingshadergroupcreateinfonv = malloc(___arg1 * sizeof(VkRayTracingShaderGroupCreateInfoNV));
      ___return (vkraytracingshadergroupcreateinfonv);")
   (define-c-lambda
      ref-VkRayTracingShaderGroupCreateInfoNV
      (VkRayTracingShaderGroupCreateInfoNV* int)
      VkRayTracingShaderGroupCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkRayTracingShaderGroupCreateInfoNV
      ((pointer VkRayTracingShaderGroupCreateInfoNV))
      VkRayTracingShaderGroupCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkRayTracingShaderGroupCreateInfoNV
      (void* VkRayTracingShaderGroupTypeNV uint32_t uint32_t uint32_t uint32_t)
      VkRayTracingShaderGroupCreateInfoNV*
      "VkRayTracingShaderGroupCreateInfoNV *raytracingshadergroupcreateinfonv = malloc(sizeof(VkRayTracingShaderGroupCreateInfoNV));
raytracingshadergroupcreateinfonv->sType=VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
raytracingshadergroupcreateinfonv->pNext=___arg1;
raytracingshadergroupcreateinfonv->type=___arg2;
raytracingshadergroupcreateinfonv->generalShader=___arg3;
raytracingshadergroupcreateinfonv->closestHitShader=___arg4;
raytracingshadergroupcreateinfonv->anyHitShader=___arg5;
raytracingshadergroupcreateinfonv->intersectionShader=___arg6;
___return (raytracingshadergroupcreateinfonv);"))
(begin-ffi
   (make-VkRayTracingPipelineCreateInfoNV
      ptr->VkRayTracingPipelineCreateInfoNV
      ref-VkRayTracingPipelineCreateInfoNV
      make-VkRayTracingPipelineCreateInfoNV*
      VkRayTracingPipelineCreateInfoNVbasePipelineIndex
      VkRayTracingPipelineCreateInfoNVbasePipelineHandle
      VkRayTracingPipelineCreateInfoNVlayout
      VkRayTracingPipelineCreateInfoNVmaxRecursionDepth
      VkRayTracingPipelineCreateInfoNVpGroups
      VkRayTracingPipelineCreateInfoNVgroupCount
      VkRayTracingPipelineCreateInfoNVpStages
      VkRayTracingPipelineCreateInfoNVstageCount
      VkRayTracingPipelineCreateInfoNVflags
      VkRayTracingPipelineCreateInfoNVpNext
      VkRayTracingPipelineCreateInfoNVsType
      VkRayTracingPipelineCreateInfoNV
      VkRayTracingPipelineCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkRayTracingPipelineCreateInfoNV
      (struct "VkRayTracingPipelineCreateInfoNV"))
   (c-define-type
      VkRayTracingPipelineCreateInfoNV*
      (pointer VkRayTracingPipelineCreateInfoNV))
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVsType
      (VkRayTracingPipelineCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVpNext
      (VkRayTracingPipelineCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVflags
      (VkRayTracingPipelineCreateInfoNV*)
      VkPipelineCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVstageCount
      (VkRayTracingPipelineCreateInfoNV*)
      uint32_t
      "___return (___arg1->stageCount);")
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVpStages
      (VkRayTracingPipelineCreateInfoNV*)
      VkPipelineShaderStageCreateInfo*
      "___return (___arg1->pStages);")
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVgroupCount
      (VkRayTracingPipelineCreateInfoNV*)
      uint32_t
      "___return (___arg1->groupCount);")
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVpGroups
      (VkRayTracingPipelineCreateInfoNV*)
      VkRayTracingShaderGroupCreateInfoNV*
      "___return (___arg1->pGroups);")
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVmaxRecursionDepth
      (VkRayTracingPipelineCreateInfoNV*)
      uint32_t
      "___return (___arg1->maxRecursionDepth);")
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVlayout
      (VkRayTracingPipelineCreateInfoNV*)
      VkPipelineLayout
      "___return (___arg1->layout);")
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVbasePipelineHandle
      (VkRayTracingPipelineCreateInfoNV*)
      VkPipeline
      "___return (___arg1->basePipelineHandle);")
   (define-c-lambda
      VkRayTracingPipelineCreateInfoNVbasePipelineIndex
      (VkRayTracingPipelineCreateInfoNV*)
      int32_t
      "___return (___arg1->basePipelineIndex);")
   (define-c-lambda
      make-VkRayTracingPipelineCreateInfoNV*
      (int)
      VkRayTracingPipelineCreateInfoNV*
      "VkRayTracingPipelineCreateInfoNV* vkraytracingpipelinecreateinfonv = malloc(___arg1 * sizeof(VkRayTracingPipelineCreateInfoNV));
      ___return (vkraytracingpipelinecreateinfonv);")
   (define-c-lambda
      ref-VkRayTracingPipelineCreateInfoNV
      (VkRayTracingPipelineCreateInfoNV* int)
      VkRayTracingPipelineCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkRayTracingPipelineCreateInfoNV
      ((pointer VkRayTracingPipelineCreateInfoNV))
      VkRayTracingPipelineCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkRayTracingPipelineCreateInfoNV
      (void*
         VkPipelineCreateFlags
         uint32_t
         VkPipelineShaderStageCreateInfo*
         uint32_t
         VkRayTracingShaderGroupCreateInfoNV*
         uint32_t
         VkPipelineLayout
         VkPipeline
         int32_t)
      VkRayTracingPipelineCreateInfoNV*
      "VkRayTracingPipelineCreateInfoNV *raytracingpipelinecreateinfonv = malloc(sizeof(VkRayTracingPipelineCreateInfoNV));
raytracingpipelinecreateinfonv->sType=VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV;
raytracingpipelinecreateinfonv->pNext=___arg1;
raytracingpipelinecreateinfonv->flags=___arg2;
raytracingpipelinecreateinfonv->stageCount=___arg3;
raytracingpipelinecreateinfonv->pStages=___arg4;
raytracingpipelinecreateinfonv->groupCount=___arg5;
raytracingpipelinecreateinfonv->pGroups=___arg6;
raytracingpipelinecreateinfonv->maxRecursionDepth=___arg7;
raytracingpipelinecreateinfonv->layout=___arg8;
raytracingpipelinecreateinfonv->basePipelineHandle=___arg9;
raytracingpipelinecreateinfonv->basePipelineIndex=___arg10;
___return (raytracingpipelinecreateinfonv);"))
(begin-ffi
   (make-VkGeometryTrianglesNV
      ptr->VkGeometryTrianglesNV
      ref-VkGeometryTrianglesNV
      make-VkGeometryTrianglesNV*
      VkGeometryTrianglesNVtransformOffset
      VkGeometryTrianglesNVtransformData
      VkGeometryTrianglesNVindexType
      VkGeometryTrianglesNVindexCount
      VkGeometryTrianglesNVindexOffset
      VkGeometryTrianglesNVindexData
      VkGeometryTrianglesNVvertexFormat
      VkGeometryTrianglesNVvertexStride
      VkGeometryTrianglesNVvertexCount
      VkGeometryTrianglesNVvertexOffset
      VkGeometryTrianglesNVvertexData
      VkGeometryTrianglesNVpNext
      VkGeometryTrianglesNVsType
      VkGeometryTrianglesNV
      VkGeometryTrianglesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkGeometryTrianglesNV (struct "VkGeometryTrianglesNV"))
   (c-define-type VkGeometryTrianglesNV* (pointer VkGeometryTrianglesNV))
   (define-c-lambda
      VkGeometryTrianglesNVsType
      (VkGeometryTrianglesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkGeometryTrianglesNVpNext
      (VkGeometryTrianglesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkGeometryTrianglesNVvertexData
      (VkGeometryTrianglesNV*)
      VkBuffer
      "___return (___arg1->vertexData);")
   (define-c-lambda
      VkGeometryTrianglesNVvertexOffset
      (VkGeometryTrianglesNV*)
      VkDeviceSize
      "___return (___arg1->vertexOffset);")
   (define-c-lambda
      VkGeometryTrianglesNVvertexCount
      (VkGeometryTrianglesNV*)
      uint32_t
      "___return (___arg1->vertexCount);")
   (define-c-lambda
      VkGeometryTrianglesNVvertexStride
      (VkGeometryTrianglesNV*)
      VkDeviceSize
      "___return (___arg1->vertexStride);")
   (define-c-lambda
      VkGeometryTrianglesNVvertexFormat
      (VkGeometryTrianglesNV*)
      VkFormat
      "___return (___arg1->vertexFormat);")
   (define-c-lambda
      VkGeometryTrianglesNVindexData
      (VkGeometryTrianglesNV*)
      VkBuffer
      "___return (___arg1->indexData);")
   (define-c-lambda
      VkGeometryTrianglesNVindexOffset
      (VkGeometryTrianglesNV*)
      VkDeviceSize
      "___return (___arg1->indexOffset);")
   (define-c-lambda
      VkGeometryTrianglesNVindexCount
      (VkGeometryTrianglesNV*)
      uint32_t
      "___return (___arg1->indexCount);")
   (define-c-lambda
      VkGeometryTrianglesNVindexType
      (VkGeometryTrianglesNV*)
      VkIndexType
      "___return (___arg1->indexType);")
   (define-c-lambda
      VkGeometryTrianglesNVtransformData
      (VkGeometryTrianglesNV*)
      VkBuffer
      "___return (___arg1->transformData);")
   (define-c-lambda
      VkGeometryTrianglesNVtransformOffset
      (VkGeometryTrianglesNV*)
      VkDeviceSize
      "___return (___arg1->transformOffset);")
   (define-c-lambda
      make-VkGeometryTrianglesNV*
      (int)
      VkGeometryTrianglesNV*
      "VkGeometryTrianglesNV* vkgeometrytrianglesnv = malloc(___arg1 * sizeof(VkGeometryTrianglesNV));
      ___return (vkgeometrytrianglesnv);")
   (define-c-lambda
      ref-VkGeometryTrianglesNV
      (VkGeometryTrianglesNV* int)
      VkGeometryTrianglesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkGeometryTrianglesNV
      ((pointer VkGeometryTrianglesNV))
      VkGeometryTrianglesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkGeometryTrianglesNV
      (void*
         VkBuffer
         VkDeviceSize
         uint32_t
         VkDeviceSize
         VkFormat
         VkBuffer
         VkDeviceSize
         uint32_t
         VkIndexType
         VkBuffer
         VkDeviceSize)
      VkGeometryTrianglesNV*
      "VkGeometryTrianglesNV *geometrytrianglesnv = malloc(sizeof(VkGeometryTrianglesNV));
geometrytrianglesnv->sType=VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV;
geometrytrianglesnv->pNext=___arg1;
geometrytrianglesnv->vertexData=___arg2;
geometrytrianglesnv->vertexOffset=___arg3;
geometrytrianglesnv->vertexCount=___arg4;
geometrytrianglesnv->vertexStride=___arg5;
geometrytrianglesnv->vertexFormat=___arg6;
geometrytrianglesnv->indexData=___arg7;
geometrytrianglesnv->indexOffset=___arg8;
geometrytrianglesnv->indexCount=___arg9;
geometrytrianglesnv->indexType=___arg10;
geometrytrianglesnv->transformData=___arg11;
geometrytrianglesnv->transformOffset=___arg12;
___return (geometrytrianglesnv);"))
(begin-ffi
   (make-VkGeometryAABBNV
      ptr->VkGeometryAABBNV
      ref-VkGeometryAABBNV
      make-VkGeometryAABBNV*
      VkGeometryAABBNVoffset
      VkGeometryAABBNVstride
      VkGeometryAABBNVnumAABBs
      VkGeometryAABBNVaabbData
      VkGeometryAABBNVpNext
      VkGeometryAABBNVsType
      VkGeometryAABBNV
      VkGeometryAABBNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkGeometryAABBNV (struct "VkGeometryAABBNV"))
   (c-define-type VkGeometryAABBNV* (pointer VkGeometryAABBNV))
   (define-c-lambda
      VkGeometryAABBNVsType
      (VkGeometryAABBNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkGeometryAABBNVpNext
      (VkGeometryAABBNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkGeometryAABBNVaabbData
      (VkGeometryAABBNV*)
      VkBuffer
      "___return (___arg1->aabbData);")
   (define-c-lambda
      VkGeometryAABBNVnumAABBs
      (VkGeometryAABBNV*)
      uint32_t
      "___return (___arg1->numAABBs);")
   (define-c-lambda
      VkGeometryAABBNVstride
      (VkGeometryAABBNV*)
      uint32_t
      "___return (___arg1->stride);")
   (define-c-lambda
      VkGeometryAABBNVoffset
      (VkGeometryAABBNV*)
      VkDeviceSize
      "___return (___arg1->offset);")
   (define-c-lambda
      make-VkGeometryAABBNV*
      (int)
      VkGeometryAABBNV*
      "VkGeometryAABBNV* vkgeometryaabbnv = malloc(___arg1 * sizeof(VkGeometryAABBNV));
      ___return (vkgeometryaabbnv);")
   (define-c-lambda
      ref-VkGeometryAABBNV
      (VkGeometryAABBNV* int)
      VkGeometryAABBNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkGeometryAABBNV
      ((pointer VkGeometryAABBNV))
      VkGeometryAABBNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkGeometryAABBNV
      (void* VkBuffer uint32_t uint32_t VkDeviceSize)
      VkGeometryAABBNV*
      "VkGeometryAABBNV *geometryaabbnv = malloc(sizeof(VkGeometryAABBNV));
geometryaabbnv->sType=VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV;
geometryaabbnv->pNext=___arg1;
geometryaabbnv->aabbData=___arg2;
geometryaabbnv->numAABBs=___arg3;
geometryaabbnv->stride=___arg4;
geometryaabbnv->offset=___arg5;
___return (geometryaabbnv);"))
(begin-ffi
   (make-VkGeometryDataNV
      ptr->VkGeometryDataNV
      ref-VkGeometryDataNV
      make-VkGeometryDataNV*
      VkGeometryDataNVaabbs
      VkGeometryDataNVtriangles
      VkGeometryDataNV
      VkGeometryDataNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkGeometryDataNV (struct "VkGeometryDataNV"))
   (c-define-type VkGeometryDataNV* (pointer VkGeometryDataNV))
   (define-c-lambda
      VkGeometryDataNVtriangles
      (VkGeometryDataNV*)
      VkGeometryTrianglesNV
      "___return (___arg1->triangles);")
   (define-c-lambda
      VkGeometryDataNVaabbs
      (VkGeometryDataNV*)
      VkGeometryAABBNV
      "___return (___arg1->aabbs);")
   (define-c-lambda
      make-VkGeometryDataNV*
      (int)
      VkGeometryDataNV*
      "VkGeometryDataNV* vkgeometrydatanv = malloc(___arg1 * sizeof(VkGeometryDataNV));
      ___return (vkgeometrydatanv);")
   (define-c-lambda
      ref-VkGeometryDataNV
      (VkGeometryDataNV* int)
      VkGeometryDataNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkGeometryDataNV
      ((pointer VkGeometryDataNV))
      VkGeometryDataNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkGeometryDataNV
      (VkGeometryTrianglesNV VkGeometryAABBNV)
      VkGeometryDataNV*
      "VkGeometryDataNV *geometrydatanv = malloc(sizeof(VkGeometryDataNV));
geometrydatanv->triangles=___arg1;
geometrydatanv->aabbs=___arg2;
___return (geometrydatanv);"))
(begin-ffi
   (make-VkGeometryNV
      ptr->VkGeometryNV
      ref-VkGeometryNV
      make-VkGeometryNV*
      VkGeometryNVflags
      VkGeometryNVgeometry
      VkGeometryNVgeometryType
      VkGeometryNVpNext
      VkGeometryNVsType
      VkGeometryNV
      VkGeometryNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkGeometryNV (struct "VkGeometryNV"))
   (c-define-type VkGeometryNV* (pointer VkGeometryNV))
   (define-c-lambda
      VkGeometryNVsType
      (VkGeometryNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda VkGeometryNVpNext (VkGeometryNV*) void* "___return (___arg1->pNext);")
   (define-c-lambda
      VkGeometryNVgeometryType
      (VkGeometryNV*)
      VkGeometryTypeNV
      "___return (___arg1->geometryType);")
   (define-c-lambda
      VkGeometryNVgeometry
      (VkGeometryNV*)
      VkGeometryDataNV
      "___return (___arg1->geometry);")
   (define-c-lambda
      VkGeometryNVflags
      (VkGeometryNV*)
      VkGeometryFlagsNV
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkGeometryNV*
      (int)
      VkGeometryNV*
      "VkGeometryNV* vkgeometrynv = malloc(___arg1 * sizeof(VkGeometryNV));
      ___return (vkgeometrynv);")
   (define-c-lambda
      ref-VkGeometryNV
      (VkGeometryNV* int)
      VkGeometryNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkGeometryNV
      ((pointer VkGeometryNV))
      VkGeometryNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkGeometryNV
      (void* VkGeometryTypeNV VkGeometryDataNV VkGeometryFlagsNV)
      VkGeometryNV*
      "VkGeometryNV *geometrynv = malloc(sizeof(VkGeometryNV));
geometrynv->sType=VK_STRUCTURE_TYPE_GEOMETRY_NV;
geometrynv->pNext=___arg1;
geometrynv->geometryType=___arg2;
geometrynv->geometry=___arg3;
geometrynv->flags=___arg4;
___return (geometrynv);"))
(begin-ffi
   (make-VkAccelerationStructureInfoNV
      ptr->VkAccelerationStructureInfoNV
      ref-VkAccelerationStructureInfoNV
      make-VkAccelerationStructureInfoNV*
      VkAccelerationStructureInfoNVpGeometries
      VkAccelerationStructureInfoNVgeometryCount
      VkAccelerationStructureInfoNVinstanceCount
      VkAccelerationStructureInfoNVflags
      VkAccelerationStructureInfoNVtype
      VkAccelerationStructureInfoNVpNext
      VkAccelerationStructureInfoNVsType
      VkAccelerationStructureInfoNV
      VkAccelerationStructureInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkAccelerationStructureInfoNV (struct "VkAccelerationStructureInfoNV"))
   (c-define-type VkAccelerationStructureInfoNV* (pointer VkAccelerationStructureInfoNV))
   (define-c-lambda
      VkAccelerationStructureInfoNVsType
      (VkAccelerationStructureInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkAccelerationStructureInfoNVpNext
      (VkAccelerationStructureInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkAccelerationStructureInfoNVtype
      (VkAccelerationStructureInfoNV*)
      VkAccelerationStructureTypeNV
      "___return (___arg1->type);")
   (define-c-lambda
      VkAccelerationStructureInfoNVflags
      (VkAccelerationStructureInfoNV*)
      VkBuildAccelerationStructureFlagsNV
      "___return (___arg1->flags);")
   (define-c-lambda
      VkAccelerationStructureInfoNVinstanceCount
      (VkAccelerationStructureInfoNV*)
      uint32_t
      "___return (___arg1->instanceCount);")
   (define-c-lambda
      VkAccelerationStructureInfoNVgeometryCount
      (VkAccelerationStructureInfoNV*)
      uint32_t
      "___return (___arg1->geometryCount);")
   (define-c-lambda
      VkAccelerationStructureInfoNVpGeometries
      (VkAccelerationStructureInfoNV*)
      VkGeometryNV*
      "___return (___arg1->pGeometries);")
   (define-c-lambda
      make-VkAccelerationStructureInfoNV*
      (int)
      VkAccelerationStructureInfoNV*
      "VkAccelerationStructureInfoNV* vkaccelerationstructureinfonv = malloc(___arg1 * sizeof(VkAccelerationStructureInfoNV));
      ___return (vkaccelerationstructureinfonv);")
   (define-c-lambda
      ref-VkAccelerationStructureInfoNV
      (VkAccelerationStructureInfoNV* int)
      VkAccelerationStructureInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkAccelerationStructureInfoNV
      ((pointer VkAccelerationStructureInfoNV))
      VkAccelerationStructureInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkAccelerationStructureInfoNV
      (void*
         VkAccelerationStructureTypeNV
         VkBuildAccelerationStructureFlagsNV
         uint32_t
         uint32_t
         VkGeometryNV*)
      VkAccelerationStructureInfoNV*
      "VkAccelerationStructureInfoNV *accelerationstructureinfonv = malloc(sizeof(VkAccelerationStructureInfoNV));
accelerationstructureinfonv->sType=VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV;
accelerationstructureinfonv->pNext=___arg1;
accelerationstructureinfonv->type=___arg2;
accelerationstructureinfonv->flags=___arg3;
accelerationstructureinfonv->instanceCount=___arg4;
accelerationstructureinfonv->geometryCount=___arg5;
accelerationstructureinfonv->pGeometries=___arg6;
___return (accelerationstructureinfonv);"))
(begin-ffi
   (make-VkAccelerationStructureCreateInfoNV
      ptr->VkAccelerationStructureCreateInfoNV
      ref-VkAccelerationStructureCreateInfoNV
      make-VkAccelerationStructureCreateInfoNV*
      VkAccelerationStructureCreateInfoNVinfo
      VkAccelerationStructureCreateInfoNVcompactedSize
      VkAccelerationStructureCreateInfoNVpNext
      VkAccelerationStructureCreateInfoNVsType
      VkAccelerationStructureCreateInfoNV
      VkAccelerationStructureCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkAccelerationStructureCreateInfoNV
      (struct "VkAccelerationStructureCreateInfoNV"))
   (c-define-type
      VkAccelerationStructureCreateInfoNV*
      (pointer VkAccelerationStructureCreateInfoNV))
   (define-c-lambda
      VkAccelerationStructureCreateInfoNVsType
      (VkAccelerationStructureCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkAccelerationStructureCreateInfoNVpNext
      (VkAccelerationStructureCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkAccelerationStructureCreateInfoNVcompactedSize
      (VkAccelerationStructureCreateInfoNV*)
      VkDeviceSize
      "___return (___arg1->compactedSize);")
   (define-c-lambda
      VkAccelerationStructureCreateInfoNVinfo
      (VkAccelerationStructureCreateInfoNV*)
      VkAccelerationStructureInfoNV
      "___return (___arg1->info);")
   (define-c-lambda
      make-VkAccelerationStructureCreateInfoNV*
      (int)
      VkAccelerationStructureCreateInfoNV*
      "VkAccelerationStructureCreateInfoNV* vkaccelerationstructurecreateinfonv = malloc(___arg1 * sizeof(VkAccelerationStructureCreateInfoNV));
      ___return (vkaccelerationstructurecreateinfonv);")
   (define-c-lambda
      ref-VkAccelerationStructureCreateInfoNV
      (VkAccelerationStructureCreateInfoNV* int)
      VkAccelerationStructureCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkAccelerationStructureCreateInfoNV
      ((pointer VkAccelerationStructureCreateInfoNV))
      VkAccelerationStructureCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkAccelerationStructureCreateInfoNV
      (void* VkDeviceSize VkAccelerationStructureInfoNV)
      VkAccelerationStructureCreateInfoNV*
      "VkAccelerationStructureCreateInfoNV *accelerationstructurecreateinfonv = malloc(sizeof(VkAccelerationStructureCreateInfoNV));
accelerationstructurecreateinfonv->sType=VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV;
accelerationstructurecreateinfonv->pNext=___arg1;
accelerationstructurecreateinfonv->compactedSize=___arg2;
accelerationstructurecreateinfonv->info=___arg3;
___return (accelerationstructurecreateinfonv);"))
(begin-ffi
   (make-VkBindAccelerationStructureMemoryInfoNV
      ptr->VkBindAccelerationStructureMemoryInfoNV
      ref-VkBindAccelerationStructureMemoryInfoNV
      make-VkBindAccelerationStructureMemoryInfoNV*
      VkBindAccelerationStructureMemoryInfoNVpDeviceIndices
      VkBindAccelerationStructureMemoryInfoNVdeviceIndexCount
      VkBindAccelerationStructureMemoryInfoNVmemoryOffset
      VkBindAccelerationStructureMemoryInfoNVmemory
      VkBindAccelerationStructureMemoryInfoNVaccelerationStructure
      VkBindAccelerationStructureMemoryInfoNVpNext
      VkBindAccelerationStructureMemoryInfoNVsType
      VkBindAccelerationStructureMemoryInfoNV
      VkBindAccelerationStructureMemoryInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkBindAccelerationStructureMemoryInfoNV
      (struct "VkBindAccelerationStructureMemoryInfoNV"))
   (c-define-type
      VkBindAccelerationStructureMemoryInfoNV*
      (pointer VkBindAccelerationStructureMemoryInfoNV))
   (define-c-lambda
      VkBindAccelerationStructureMemoryInfoNVsType
      (VkBindAccelerationStructureMemoryInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBindAccelerationStructureMemoryInfoNVpNext
      (VkBindAccelerationStructureMemoryInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBindAccelerationStructureMemoryInfoNVaccelerationStructure
      (VkBindAccelerationStructureMemoryInfoNV*)
      VkAccelerationStructureNV
      "___return (___arg1->accelerationStructure);")
   (define-c-lambda
      VkBindAccelerationStructureMemoryInfoNVmemory
      (VkBindAccelerationStructureMemoryInfoNV*)
      VkDeviceMemory
      "___return (___arg1->memory);")
   (define-c-lambda
      VkBindAccelerationStructureMemoryInfoNVmemoryOffset
      (VkBindAccelerationStructureMemoryInfoNV*)
      VkDeviceSize
      "___return (___arg1->memoryOffset);")
   (define-c-lambda
      VkBindAccelerationStructureMemoryInfoNVdeviceIndexCount
      (VkBindAccelerationStructureMemoryInfoNV*)
      uint32_t
      "___return (___arg1->deviceIndexCount);")
   (define-c-lambda
      VkBindAccelerationStructureMemoryInfoNVpDeviceIndices
      (VkBindAccelerationStructureMemoryInfoNV*)
      uint32_t*
      "___return (___arg1->pDeviceIndices);")
   (define-c-lambda
      make-VkBindAccelerationStructureMemoryInfoNV*
      (int)
      VkBindAccelerationStructureMemoryInfoNV*
      "VkBindAccelerationStructureMemoryInfoNV* vkbindaccelerationstructurememoryinfonv = malloc(___arg1 * sizeof(VkBindAccelerationStructureMemoryInfoNV));
      ___return (vkbindaccelerationstructurememoryinfonv);")
   (define-c-lambda
      ref-VkBindAccelerationStructureMemoryInfoNV
      (VkBindAccelerationStructureMemoryInfoNV* int)
      VkBindAccelerationStructureMemoryInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBindAccelerationStructureMemoryInfoNV
      ((pointer VkBindAccelerationStructureMemoryInfoNV))
      VkBindAccelerationStructureMemoryInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBindAccelerationStructureMemoryInfoNV
      (void* VkAccelerationStructureNV VkDeviceMemory VkDeviceSize uint32_t uint32_t*)
      VkBindAccelerationStructureMemoryInfoNV*
      "VkBindAccelerationStructureMemoryInfoNV *bindaccelerationstructurememoryinfonv = malloc(sizeof(VkBindAccelerationStructureMemoryInfoNV));
bindaccelerationstructurememoryinfonv->sType=VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
bindaccelerationstructurememoryinfonv->pNext=___arg1;
bindaccelerationstructurememoryinfonv->accelerationStructure=___arg2;
bindaccelerationstructurememoryinfonv->memory=___arg3;
bindaccelerationstructurememoryinfonv->memoryOffset=___arg4;
bindaccelerationstructurememoryinfonv->deviceIndexCount=___arg5;
bindaccelerationstructurememoryinfonv->pDeviceIndices=___arg6;
___return (bindaccelerationstructurememoryinfonv);"))
(begin-ffi
   (make-VkWriteDescriptorSetAccelerationStructureNV
      ptr->VkWriteDescriptorSetAccelerationStructureNV
      ref-VkWriteDescriptorSetAccelerationStructureNV
      make-VkWriteDescriptorSetAccelerationStructureNV*
      VkWriteDescriptorSetAccelerationStructureNVpAccelerationStructures
      VkWriteDescriptorSetAccelerationStructureNVaccelerationStructureCount
      VkWriteDescriptorSetAccelerationStructureNVpNext
      VkWriteDescriptorSetAccelerationStructureNVsType
      VkWriteDescriptorSetAccelerationStructureNV
      VkWriteDescriptorSetAccelerationStructureNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkWriteDescriptorSetAccelerationStructureNV
      (struct "VkWriteDescriptorSetAccelerationStructureNV"))
   (c-define-type
      VkWriteDescriptorSetAccelerationStructureNV*
      (pointer VkWriteDescriptorSetAccelerationStructureNV))
   (define-c-lambda
      VkWriteDescriptorSetAccelerationStructureNVsType
      (VkWriteDescriptorSetAccelerationStructureNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkWriteDescriptorSetAccelerationStructureNVpNext
      (VkWriteDescriptorSetAccelerationStructureNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkWriteDescriptorSetAccelerationStructureNVaccelerationStructureCount
      (VkWriteDescriptorSetAccelerationStructureNV*)
      uint32_t
      "___return (___arg1->accelerationStructureCount);")
   (define-c-lambda
      VkWriteDescriptorSetAccelerationStructureNVpAccelerationStructures
      (VkWriteDescriptorSetAccelerationStructureNV*)
      VkAccelerationStructureNV*
      "___return (___arg1->pAccelerationStructures);")
   (define-c-lambda
      make-VkWriteDescriptorSetAccelerationStructureNV*
      (int)
      VkWriteDescriptorSetAccelerationStructureNV*
      "VkWriteDescriptorSetAccelerationStructureNV* vkwritedescriptorsetaccelerationstructurenv = malloc(___arg1 * sizeof(VkWriteDescriptorSetAccelerationStructureNV));
      ___return (vkwritedescriptorsetaccelerationstructurenv);")
   (define-c-lambda
      ref-VkWriteDescriptorSetAccelerationStructureNV
      (VkWriteDescriptorSetAccelerationStructureNV* int)
      VkWriteDescriptorSetAccelerationStructureNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkWriteDescriptorSetAccelerationStructureNV
      ((pointer VkWriteDescriptorSetAccelerationStructureNV))
      VkWriteDescriptorSetAccelerationStructureNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkWriteDescriptorSetAccelerationStructureNV
      (void* uint32_t VkAccelerationStructureNV*)
      VkWriteDescriptorSetAccelerationStructureNV*
      "VkWriteDescriptorSetAccelerationStructureNV *writedescriptorsetaccelerationstructurenv = malloc(sizeof(VkWriteDescriptorSetAccelerationStructureNV));
writedescriptorsetaccelerationstructurenv->sType=VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
writedescriptorsetaccelerationstructurenv->pNext=___arg1;
writedescriptorsetaccelerationstructurenv->accelerationStructureCount=___arg2;
writedescriptorsetaccelerationstructurenv->pAccelerationStructures=___arg3;
___return (writedescriptorsetaccelerationstructurenv);"))
(begin-ffi
   (make-VkAccelerationStructureMemoryRequirementsInfoNV
      ptr->VkAccelerationStructureMemoryRequirementsInfoNV
      ref-VkAccelerationStructureMemoryRequirementsInfoNV
      make-VkAccelerationStructureMemoryRequirementsInfoNV*
      VkAccelerationStructureMemoryRequirementsInfoNVaccelerationStructure
      VkAccelerationStructureMemoryRequirementsInfoNVtype
      VkAccelerationStructureMemoryRequirementsInfoNVpNext
      VkAccelerationStructureMemoryRequirementsInfoNVsType
      VkAccelerationStructureMemoryRequirementsInfoNV
      VkAccelerationStructureMemoryRequirementsInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkAccelerationStructureMemoryRequirementsInfoNV
      (struct "VkAccelerationStructureMemoryRequirementsInfoNV"))
   (c-define-type
      VkAccelerationStructureMemoryRequirementsInfoNV*
      (pointer VkAccelerationStructureMemoryRequirementsInfoNV))
   (define-c-lambda
      VkAccelerationStructureMemoryRequirementsInfoNVsType
      (VkAccelerationStructureMemoryRequirementsInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkAccelerationStructureMemoryRequirementsInfoNVpNext
      (VkAccelerationStructureMemoryRequirementsInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkAccelerationStructureMemoryRequirementsInfoNVtype
      (VkAccelerationStructureMemoryRequirementsInfoNV*)
      VkAccelerationStructureMemoryRequirementsTypeNV
      "___return (___arg1->type);")
   (define-c-lambda
      VkAccelerationStructureMemoryRequirementsInfoNVaccelerationStructure
      (VkAccelerationStructureMemoryRequirementsInfoNV*)
      VkAccelerationStructureNV
      "___return (___arg1->accelerationStructure);")
   (define-c-lambda
      make-VkAccelerationStructureMemoryRequirementsInfoNV*
      (int)
      VkAccelerationStructureMemoryRequirementsInfoNV*
      "VkAccelerationStructureMemoryRequirementsInfoNV* vkaccelerationstructurememoryrequirementsinfonv = malloc(___arg1 * sizeof(VkAccelerationStructureMemoryRequirementsInfoNV));
      ___return (vkaccelerationstructurememoryrequirementsinfonv);")
   (define-c-lambda
      ref-VkAccelerationStructureMemoryRequirementsInfoNV
      (VkAccelerationStructureMemoryRequirementsInfoNV* int)
      VkAccelerationStructureMemoryRequirementsInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkAccelerationStructureMemoryRequirementsInfoNV
      ((pointer VkAccelerationStructureMemoryRequirementsInfoNV))
      VkAccelerationStructureMemoryRequirementsInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkAccelerationStructureMemoryRequirementsInfoNV
      (void* VkAccelerationStructureMemoryRequirementsTypeNV VkAccelerationStructureNV)
      VkAccelerationStructureMemoryRequirementsInfoNV*
      "VkAccelerationStructureMemoryRequirementsInfoNV *accelerationstructurememoryrequirementsinfonv = malloc(sizeof(VkAccelerationStructureMemoryRequirementsInfoNV));
accelerationstructurememoryrequirementsinfonv->sType=VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
accelerationstructurememoryrequirementsinfonv->pNext=___arg1;
accelerationstructurememoryrequirementsinfonv->type=___arg2;
accelerationstructurememoryrequirementsinfonv->accelerationStructure=___arg3;
___return (accelerationstructurememoryrequirementsinfonv);"))
(begin-ffi
   (make-VkPhysicalDeviceRayTracingPropertiesNV
      ptr->VkPhysicalDeviceRayTracingPropertiesNV
      ref-VkPhysicalDeviceRayTracingPropertiesNV
      make-VkPhysicalDeviceRayTracingPropertiesNV*
      VkPhysicalDeviceRayTracingPropertiesNVmaxDescriptorSetAccelerationStructures
      VkPhysicalDeviceRayTracingPropertiesNVmaxTriangleCount
      VkPhysicalDeviceRayTracingPropertiesNVmaxInstanceCount
      VkPhysicalDeviceRayTracingPropertiesNVmaxGeometryCount
      VkPhysicalDeviceRayTracingPropertiesNVshaderGroupBaseAlignment
      VkPhysicalDeviceRayTracingPropertiesNVmaxShaderGroupStride
      VkPhysicalDeviceRayTracingPropertiesNVmaxRecursionDepth
      VkPhysicalDeviceRayTracingPropertiesNVshaderGroupHandleSize
      VkPhysicalDeviceRayTracingPropertiesNVpNext
      VkPhysicalDeviceRayTracingPropertiesNVsType
      VkPhysicalDeviceRayTracingPropertiesNV
      VkPhysicalDeviceRayTracingPropertiesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceRayTracingPropertiesNV
      (struct "VkPhysicalDeviceRayTracingPropertiesNV"))
   (c-define-type
      VkPhysicalDeviceRayTracingPropertiesNV*
      (pointer VkPhysicalDeviceRayTracingPropertiesNV))
   (define-c-lambda
      VkPhysicalDeviceRayTracingPropertiesNVsType
      (VkPhysicalDeviceRayTracingPropertiesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceRayTracingPropertiesNVpNext
      (VkPhysicalDeviceRayTracingPropertiesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceRayTracingPropertiesNVshaderGroupHandleSize
      (VkPhysicalDeviceRayTracingPropertiesNV*)
      uint32_t
      "___return (___arg1->shaderGroupHandleSize);")
   (define-c-lambda
      VkPhysicalDeviceRayTracingPropertiesNVmaxRecursionDepth
      (VkPhysicalDeviceRayTracingPropertiesNV*)
      uint32_t
      "___return (___arg1->maxRecursionDepth);")
   (define-c-lambda
      VkPhysicalDeviceRayTracingPropertiesNVmaxShaderGroupStride
      (VkPhysicalDeviceRayTracingPropertiesNV*)
      uint32_t
      "___return (___arg1->maxShaderGroupStride);")
   (define-c-lambda
      VkPhysicalDeviceRayTracingPropertiesNVshaderGroupBaseAlignment
      (VkPhysicalDeviceRayTracingPropertiesNV*)
      uint32_t
      "___return (___arg1->shaderGroupBaseAlignment);")
   (define-c-lambda
      VkPhysicalDeviceRayTracingPropertiesNVmaxGeometryCount
      (VkPhysicalDeviceRayTracingPropertiesNV*)
      uint64_t
      "___return (___arg1->maxGeometryCount);")
   (define-c-lambda
      VkPhysicalDeviceRayTracingPropertiesNVmaxInstanceCount
      (VkPhysicalDeviceRayTracingPropertiesNV*)
      uint64_t
      "___return (___arg1->maxInstanceCount);")
   (define-c-lambda
      VkPhysicalDeviceRayTracingPropertiesNVmaxTriangleCount
      (VkPhysicalDeviceRayTracingPropertiesNV*)
      uint64_t
      "___return (___arg1->maxTriangleCount);")
   (define-c-lambda
      VkPhysicalDeviceRayTracingPropertiesNVmaxDescriptorSetAccelerationStructures
      (VkPhysicalDeviceRayTracingPropertiesNV*)
      uint32_t
      "___return (___arg1->maxDescriptorSetAccelerationStructures);")
   (define-c-lambda
      make-VkPhysicalDeviceRayTracingPropertiesNV*
      (int)
      VkPhysicalDeviceRayTracingPropertiesNV*
      "VkPhysicalDeviceRayTracingPropertiesNV* vkphysicaldeviceraytracingpropertiesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceRayTracingPropertiesNV));
      ___return (vkphysicaldeviceraytracingpropertiesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceRayTracingPropertiesNV
      (VkPhysicalDeviceRayTracingPropertiesNV* int)
      VkPhysicalDeviceRayTracingPropertiesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceRayTracingPropertiesNV
      ((pointer VkPhysicalDeviceRayTracingPropertiesNV))
      VkPhysicalDeviceRayTracingPropertiesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceRayTracingPropertiesNV
      (void* uint32_t uint32_t uint32_t uint32_t uint64_t uint64_t uint64_t uint32_t)
      VkPhysicalDeviceRayTracingPropertiesNV*
      "VkPhysicalDeviceRayTracingPropertiesNV *physicaldeviceraytracingpropertiesnv = malloc(sizeof(VkPhysicalDeviceRayTracingPropertiesNV));
physicaldeviceraytracingpropertiesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;
physicaldeviceraytracingpropertiesnv->pNext=___arg1;
physicaldeviceraytracingpropertiesnv->shaderGroupHandleSize=___arg2;
physicaldeviceraytracingpropertiesnv->maxRecursionDepth=___arg3;
physicaldeviceraytracingpropertiesnv->maxShaderGroupStride=___arg4;
physicaldeviceraytracingpropertiesnv->shaderGroupBaseAlignment=___arg5;
physicaldeviceraytracingpropertiesnv->maxGeometryCount=___arg6;
physicaldeviceraytracingpropertiesnv->maxInstanceCount=___arg7;
physicaldeviceraytracingpropertiesnv->maxTriangleCount=___arg8;
physicaldeviceraytracingpropertiesnv->maxDescriptorSetAccelerationStructures=___arg9;
___return (physicaldeviceraytracingpropertiesnv);"))
(begin-ffi
   (make-VkDrmFormatModifierPropertiesEXT
      ptr->VkDrmFormatModifierPropertiesEXT
      ref-VkDrmFormatModifierPropertiesEXT
      make-VkDrmFormatModifierPropertiesEXT*
      VkDrmFormatModifierPropertiesEXTdrmFormatModifierTilingFeatures
      VkDrmFormatModifierPropertiesEXTdrmFormatModifierPlaneCount
      VkDrmFormatModifierPropertiesEXTdrmFormatModifier
      VkDrmFormatModifierPropertiesEXT
      VkDrmFormatModifierPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDrmFormatModifierPropertiesEXT
      (struct "VkDrmFormatModifierPropertiesEXT"))
   (c-define-type
      VkDrmFormatModifierPropertiesEXT*
      (pointer VkDrmFormatModifierPropertiesEXT))
   (define-c-lambda
      VkDrmFormatModifierPropertiesEXTdrmFormatModifier
      (VkDrmFormatModifierPropertiesEXT*)
      uint64_t
      "___return (___arg1->drmFormatModifier);")
   (define-c-lambda
      VkDrmFormatModifierPropertiesEXTdrmFormatModifierPlaneCount
      (VkDrmFormatModifierPropertiesEXT*)
      uint32_t
      "___return (___arg1->drmFormatModifierPlaneCount);")
   (define-c-lambda
      VkDrmFormatModifierPropertiesEXTdrmFormatModifierTilingFeatures
      (VkDrmFormatModifierPropertiesEXT*)
      VkFormatFeatureFlags
      "___return (___arg1->drmFormatModifierTilingFeatures);")
   (define-c-lambda
      make-VkDrmFormatModifierPropertiesEXT*
      (int)
      VkDrmFormatModifierPropertiesEXT*
      "VkDrmFormatModifierPropertiesEXT* vkdrmformatmodifierpropertiesext = malloc(___arg1 * sizeof(VkDrmFormatModifierPropertiesEXT));
      ___return (vkdrmformatmodifierpropertiesext);")
   (define-c-lambda
      ref-VkDrmFormatModifierPropertiesEXT
      (VkDrmFormatModifierPropertiesEXT* int)
      VkDrmFormatModifierPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDrmFormatModifierPropertiesEXT
      ((pointer VkDrmFormatModifierPropertiesEXT))
      VkDrmFormatModifierPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDrmFormatModifierPropertiesEXT
      (uint64_t uint32_t VkFormatFeatureFlags)
      VkDrmFormatModifierPropertiesEXT*
      "VkDrmFormatModifierPropertiesEXT *drmformatmodifierpropertiesext = malloc(sizeof(VkDrmFormatModifierPropertiesEXT));
drmformatmodifierpropertiesext->drmFormatModifier=___arg1;
drmformatmodifierpropertiesext->drmFormatModifierPlaneCount=___arg2;
drmformatmodifierpropertiesext->drmFormatModifierTilingFeatures=___arg3;
___return (drmformatmodifierpropertiesext);"))
(begin-ffi
   (make-VkDrmFormatModifierPropertiesListEXT
      ptr->VkDrmFormatModifierPropertiesListEXT
      ref-VkDrmFormatModifierPropertiesListEXT
      make-VkDrmFormatModifierPropertiesListEXT*
      VkDrmFormatModifierPropertiesListEXTpDrmFormatModifierProperties
      VkDrmFormatModifierPropertiesListEXTdrmFormatModifierCount
      VkDrmFormatModifierPropertiesListEXTpNext
      VkDrmFormatModifierPropertiesListEXTsType
      VkDrmFormatModifierPropertiesListEXT
      VkDrmFormatModifierPropertiesListEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDrmFormatModifierPropertiesListEXT
      (struct "VkDrmFormatModifierPropertiesListEXT"))
   (c-define-type
      VkDrmFormatModifierPropertiesListEXT*
      (pointer VkDrmFormatModifierPropertiesListEXT))
   (define-c-lambda
      VkDrmFormatModifierPropertiesListEXTsType
      (VkDrmFormatModifierPropertiesListEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDrmFormatModifierPropertiesListEXTpNext
      (VkDrmFormatModifierPropertiesListEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDrmFormatModifierPropertiesListEXTdrmFormatModifierCount
      (VkDrmFormatModifierPropertiesListEXT*)
      uint32_t
      "___return (___arg1->drmFormatModifierCount);")
   (define-c-lambda
      VkDrmFormatModifierPropertiesListEXTpDrmFormatModifierProperties
      (VkDrmFormatModifierPropertiesListEXT*)
      VkDrmFormatModifierPropertiesEXT*
      "___return (___arg1->pDrmFormatModifierProperties);")
   (define-c-lambda
      make-VkDrmFormatModifierPropertiesListEXT*
      (int)
      VkDrmFormatModifierPropertiesListEXT*
      "VkDrmFormatModifierPropertiesListEXT* vkdrmformatmodifierpropertieslistext = malloc(___arg1 * sizeof(VkDrmFormatModifierPropertiesListEXT));
      ___return (vkdrmformatmodifierpropertieslistext);")
   (define-c-lambda
      ref-VkDrmFormatModifierPropertiesListEXT
      (VkDrmFormatModifierPropertiesListEXT* int)
      VkDrmFormatModifierPropertiesListEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDrmFormatModifierPropertiesListEXT
      ((pointer VkDrmFormatModifierPropertiesListEXT))
      VkDrmFormatModifierPropertiesListEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDrmFormatModifierPropertiesListEXT
      (void* uint32_t VkDrmFormatModifierPropertiesEXT*)
      VkDrmFormatModifierPropertiesListEXT*
      "VkDrmFormatModifierPropertiesListEXT *drmformatmodifierpropertieslistext = malloc(sizeof(VkDrmFormatModifierPropertiesListEXT));
drmformatmodifierpropertieslistext->sType=VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
drmformatmodifierpropertieslistext->pNext=___arg1;
drmformatmodifierpropertieslistext->drmFormatModifierCount=___arg2;
drmformatmodifierpropertieslistext->pDrmFormatModifierProperties=___arg3;
___return (drmformatmodifierpropertieslistext);"))
(begin-ffi
   (make-VkPhysicalDeviceImageDrmFormatModifierInfoEXT
      ptr->VkPhysicalDeviceImageDrmFormatModifierInfoEXT
      ref-VkPhysicalDeviceImageDrmFormatModifierInfoEXT
      make-VkPhysicalDeviceImageDrmFormatModifierInfoEXT*
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTpQueueFamilyIndices
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTqueueFamilyIndexCount
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTsharingMode
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTdrmFormatModifier
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTpNext
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTsType
      VkPhysicalDeviceImageDrmFormatModifierInfoEXT
      VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceImageDrmFormatModifierInfoEXT
      (struct "VkPhysicalDeviceImageDrmFormatModifierInfoEXT"))
   (c-define-type
      VkPhysicalDeviceImageDrmFormatModifierInfoEXT*
      (pointer VkPhysicalDeviceImageDrmFormatModifierInfoEXT))
   (define-c-lambda
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTsType
      (VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTpNext
      (VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTdrmFormatModifier
      (VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)
      uint64_t
      "___return (___arg1->drmFormatModifier);")
   (define-c-lambda
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTsharingMode
      (VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)
      VkSharingMode
      "___return (___arg1->sharingMode);")
   (define-c-lambda
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTqueueFamilyIndexCount
      (VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)
      uint32_t
      "___return (___arg1->queueFamilyIndexCount);")
   (define-c-lambda
      VkPhysicalDeviceImageDrmFormatModifierInfoEXTpQueueFamilyIndices
      (VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)
      uint32_t*
      "___return (___arg1->pQueueFamilyIndices);")
   (define-c-lambda
      make-VkPhysicalDeviceImageDrmFormatModifierInfoEXT*
      (int)
      VkPhysicalDeviceImageDrmFormatModifierInfoEXT*
      "VkPhysicalDeviceImageDrmFormatModifierInfoEXT* vkphysicaldeviceimagedrmformatmodifierinfoext = malloc(___arg1 * sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT));
      ___return (vkphysicaldeviceimagedrmformatmodifierinfoext);")
   (define-c-lambda
      ref-VkPhysicalDeviceImageDrmFormatModifierInfoEXT
      (VkPhysicalDeviceImageDrmFormatModifierInfoEXT* int)
      VkPhysicalDeviceImageDrmFormatModifierInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceImageDrmFormatModifierInfoEXT
      ((pointer VkPhysicalDeviceImageDrmFormatModifierInfoEXT))
      VkPhysicalDeviceImageDrmFormatModifierInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceImageDrmFormatModifierInfoEXT
      (void* uint64_t VkSharingMode uint32_t uint32_t*)
      VkPhysicalDeviceImageDrmFormatModifierInfoEXT*
      "VkPhysicalDeviceImageDrmFormatModifierInfoEXT *physicaldeviceimagedrmformatmodifierinfoext = malloc(sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT));
physicaldeviceimagedrmformatmodifierinfoext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
physicaldeviceimagedrmformatmodifierinfoext->pNext=___arg1;
physicaldeviceimagedrmformatmodifierinfoext->drmFormatModifier=___arg2;
physicaldeviceimagedrmformatmodifierinfoext->sharingMode=___arg3;
physicaldeviceimagedrmformatmodifierinfoext->queueFamilyIndexCount=___arg4;
physicaldeviceimagedrmformatmodifierinfoext->pQueueFamilyIndices=___arg5;
___return (physicaldeviceimagedrmformatmodifierinfoext);"))
(begin-ffi
   (make-VkImageDrmFormatModifierListCreateInfoEXT
      ptr->VkImageDrmFormatModifierListCreateInfoEXT
      ref-VkImageDrmFormatModifierListCreateInfoEXT
      make-VkImageDrmFormatModifierListCreateInfoEXT*
      VkImageDrmFormatModifierListCreateInfoEXTpDrmFormatModifiers
      VkImageDrmFormatModifierListCreateInfoEXTdrmFormatModifierCount
      VkImageDrmFormatModifierListCreateInfoEXTpNext
      VkImageDrmFormatModifierListCreateInfoEXTsType
      VkImageDrmFormatModifierListCreateInfoEXT
      VkImageDrmFormatModifierListCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImageDrmFormatModifierListCreateInfoEXT
      (struct "VkImageDrmFormatModifierListCreateInfoEXT"))
   (c-define-type
      VkImageDrmFormatModifierListCreateInfoEXT*
      (pointer VkImageDrmFormatModifierListCreateInfoEXT))
   (define-c-lambda
      VkImageDrmFormatModifierListCreateInfoEXTsType
      (VkImageDrmFormatModifierListCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageDrmFormatModifierListCreateInfoEXTpNext
      (VkImageDrmFormatModifierListCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageDrmFormatModifierListCreateInfoEXTdrmFormatModifierCount
      (VkImageDrmFormatModifierListCreateInfoEXT*)
      uint32_t
      "___return (___arg1->drmFormatModifierCount);")
   (define-c-lambda
      VkImageDrmFormatModifierListCreateInfoEXTpDrmFormatModifiers
      (VkImageDrmFormatModifierListCreateInfoEXT*)
      uint64_t*
      "___return (___arg1->pDrmFormatModifiers);")
   (define-c-lambda
      make-VkImageDrmFormatModifierListCreateInfoEXT*
      (int)
      VkImageDrmFormatModifierListCreateInfoEXT*
      "VkImageDrmFormatModifierListCreateInfoEXT* vkimagedrmformatmodifierlistcreateinfoext = malloc(___arg1 * sizeof(VkImageDrmFormatModifierListCreateInfoEXT));
      ___return (vkimagedrmformatmodifierlistcreateinfoext);")
   (define-c-lambda
      ref-VkImageDrmFormatModifierListCreateInfoEXT
      (VkImageDrmFormatModifierListCreateInfoEXT* int)
      VkImageDrmFormatModifierListCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageDrmFormatModifierListCreateInfoEXT
      ((pointer VkImageDrmFormatModifierListCreateInfoEXT))
      VkImageDrmFormatModifierListCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageDrmFormatModifierListCreateInfoEXT
      (void* uint32_t uint64_t*)
      VkImageDrmFormatModifierListCreateInfoEXT*
      "VkImageDrmFormatModifierListCreateInfoEXT *imagedrmformatmodifierlistcreateinfoext = malloc(sizeof(VkImageDrmFormatModifierListCreateInfoEXT));
imagedrmformatmodifierlistcreateinfoext->sType=VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
imagedrmformatmodifierlistcreateinfoext->pNext=___arg1;
imagedrmformatmodifierlistcreateinfoext->drmFormatModifierCount=___arg2;
imagedrmformatmodifierlistcreateinfoext->pDrmFormatModifiers=___arg3;
___return (imagedrmformatmodifierlistcreateinfoext);"))
(begin-ffi
   (make-VkImageDrmFormatModifierExplicitCreateInfoEXT
      ptr->VkImageDrmFormatModifierExplicitCreateInfoEXT
      ref-VkImageDrmFormatModifierExplicitCreateInfoEXT
      make-VkImageDrmFormatModifierExplicitCreateInfoEXT*
      VkImageDrmFormatModifierExplicitCreateInfoEXTpPlaneLayouts
      VkImageDrmFormatModifierExplicitCreateInfoEXTdrmFormatModifierPlaneCount
      VkImageDrmFormatModifierExplicitCreateInfoEXTdrmFormatModifier
      VkImageDrmFormatModifierExplicitCreateInfoEXTpNext
      VkImageDrmFormatModifierExplicitCreateInfoEXTsType
      VkImageDrmFormatModifierExplicitCreateInfoEXT
      VkImageDrmFormatModifierExplicitCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImageDrmFormatModifierExplicitCreateInfoEXT
      (struct "VkImageDrmFormatModifierExplicitCreateInfoEXT"))
   (c-define-type
      VkImageDrmFormatModifierExplicitCreateInfoEXT*
      (pointer VkImageDrmFormatModifierExplicitCreateInfoEXT))
   (define-c-lambda
      VkImageDrmFormatModifierExplicitCreateInfoEXTsType
      (VkImageDrmFormatModifierExplicitCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageDrmFormatModifierExplicitCreateInfoEXTpNext
      (VkImageDrmFormatModifierExplicitCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageDrmFormatModifierExplicitCreateInfoEXTdrmFormatModifier
      (VkImageDrmFormatModifierExplicitCreateInfoEXT*)
      uint64_t
      "___return (___arg1->drmFormatModifier);")
   (define-c-lambda
      VkImageDrmFormatModifierExplicitCreateInfoEXTdrmFormatModifierPlaneCount
      (VkImageDrmFormatModifierExplicitCreateInfoEXT*)
      uint32_t
      "___return (___arg1->drmFormatModifierPlaneCount);")
   (define-c-lambda
      VkImageDrmFormatModifierExplicitCreateInfoEXTpPlaneLayouts
      (VkImageDrmFormatModifierExplicitCreateInfoEXT*)
      VkSubresourceLayout*
      "___return (___arg1->pPlaneLayouts);")
   (define-c-lambda
      make-VkImageDrmFormatModifierExplicitCreateInfoEXT*
      (int)
      VkImageDrmFormatModifierExplicitCreateInfoEXT*
      "VkImageDrmFormatModifierExplicitCreateInfoEXT* vkimagedrmformatmodifierexplicitcreateinfoext = malloc(___arg1 * sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT));
      ___return (vkimagedrmformatmodifierexplicitcreateinfoext);")
   (define-c-lambda
      ref-VkImageDrmFormatModifierExplicitCreateInfoEXT
      (VkImageDrmFormatModifierExplicitCreateInfoEXT* int)
      VkImageDrmFormatModifierExplicitCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageDrmFormatModifierExplicitCreateInfoEXT
      ((pointer VkImageDrmFormatModifierExplicitCreateInfoEXT))
      VkImageDrmFormatModifierExplicitCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageDrmFormatModifierExplicitCreateInfoEXT
      (void* uint64_t uint32_t VkSubresourceLayout*)
      VkImageDrmFormatModifierExplicitCreateInfoEXT*
      "VkImageDrmFormatModifierExplicitCreateInfoEXT *imagedrmformatmodifierexplicitcreateinfoext = malloc(sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT));
imagedrmformatmodifierexplicitcreateinfoext->sType=VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
imagedrmformatmodifierexplicitcreateinfoext->pNext=___arg1;
imagedrmformatmodifierexplicitcreateinfoext->drmFormatModifier=___arg2;
imagedrmformatmodifierexplicitcreateinfoext->drmFormatModifierPlaneCount=___arg3;
imagedrmformatmodifierexplicitcreateinfoext->pPlaneLayouts=___arg4;
___return (imagedrmformatmodifierexplicitcreateinfoext);"))
(begin-ffi
   (make-VkImageDrmFormatModifierPropertiesEXT
      ptr->VkImageDrmFormatModifierPropertiesEXT
      ref-VkImageDrmFormatModifierPropertiesEXT
      make-VkImageDrmFormatModifierPropertiesEXT*
      VkImageDrmFormatModifierPropertiesEXTdrmFormatModifier
      VkImageDrmFormatModifierPropertiesEXTpNext
      VkImageDrmFormatModifierPropertiesEXTsType
      VkImageDrmFormatModifierPropertiesEXT
      VkImageDrmFormatModifierPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImageDrmFormatModifierPropertiesEXT
      (struct "VkImageDrmFormatModifierPropertiesEXT"))
   (c-define-type
      VkImageDrmFormatModifierPropertiesEXT*
      (pointer VkImageDrmFormatModifierPropertiesEXT))
   (define-c-lambda
      VkImageDrmFormatModifierPropertiesEXTsType
      (VkImageDrmFormatModifierPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageDrmFormatModifierPropertiesEXTpNext
      (VkImageDrmFormatModifierPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageDrmFormatModifierPropertiesEXTdrmFormatModifier
      (VkImageDrmFormatModifierPropertiesEXT*)
      uint64_t
      "___return (___arg1->drmFormatModifier);")
   (define-c-lambda
      make-VkImageDrmFormatModifierPropertiesEXT*
      (int)
      VkImageDrmFormatModifierPropertiesEXT*
      "VkImageDrmFormatModifierPropertiesEXT* vkimagedrmformatmodifierpropertiesext = malloc(___arg1 * sizeof(VkImageDrmFormatModifierPropertiesEXT));
      ___return (vkimagedrmformatmodifierpropertiesext);")
   (define-c-lambda
      ref-VkImageDrmFormatModifierPropertiesEXT
      (VkImageDrmFormatModifierPropertiesEXT* int)
      VkImageDrmFormatModifierPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageDrmFormatModifierPropertiesEXT
      ((pointer VkImageDrmFormatModifierPropertiesEXT))
      VkImageDrmFormatModifierPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageDrmFormatModifierPropertiesEXT
      (void* uint64_t)
      VkImageDrmFormatModifierPropertiesEXT*
      "VkImageDrmFormatModifierPropertiesEXT *imagedrmformatmodifierpropertiesext = malloc(sizeof(VkImageDrmFormatModifierPropertiesEXT));
imagedrmformatmodifierpropertiesext->sType=VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
imagedrmformatmodifierpropertiesext->pNext=___arg1;
imagedrmformatmodifierpropertiesext->drmFormatModifier=___arg2;
___return (imagedrmformatmodifierpropertiesext);"))
(begin-ffi
   (make-VkImageStencilUsageCreateInfoEXT
      ptr->VkImageStencilUsageCreateInfoEXT
      ref-VkImageStencilUsageCreateInfoEXT
      make-VkImageStencilUsageCreateInfoEXT*
      VkImageStencilUsageCreateInfoEXTstencilUsage
      VkImageStencilUsageCreateInfoEXTpNext
      VkImageStencilUsageCreateInfoEXTsType
      VkImageStencilUsageCreateInfoEXT
      VkImageStencilUsageCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkImageStencilUsageCreateInfoEXT
      (struct "VkImageStencilUsageCreateInfoEXT"))
   (c-define-type
      VkImageStencilUsageCreateInfoEXT*
      (pointer VkImageStencilUsageCreateInfoEXT))
   (define-c-lambda
      VkImageStencilUsageCreateInfoEXTsType
      (VkImageStencilUsageCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageStencilUsageCreateInfoEXTpNext
      (VkImageStencilUsageCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageStencilUsageCreateInfoEXTstencilUsage
      (VkImageStencilUsageCreateInfoEXT*)
      VkImageUsageFlags
      "___return (___arg1->stencilUsage);")
   (define-c-lambda
      make-VkImageStencilUsageCreateInfoEXT*
      (int)
      VkImageStencilUsageCreateInfoEXT*
      "VkImageStencilUsageCreateInfoEXT* vkimagestencilusagecreateinfoext = malloc(___arg1 * sizeof(VkImageStencilUsageCreateInfoEXT));
      ___return (vkimagestencilusagecreateinfoext);")
   (define-c-lambda
      ref-VkImageStencilUsageCreateInfoEXT
      (VkImageStencilUsageCreateInfoEXT* int)
      VkImageStencilUsageCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageStencilUsageCreateInfoEXT
      ((pointer VkImageStencilUsageCreateInfoEXT))
      VkImageStencilUsageCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageStencilUsageCreateInfoEXT
      (void* VkImageUsageFlags)
      VkImageStencilUsageCreateInfoEXT*
      "VkImageStencilUsageCreateInfoEXT *imagestencilusagecreateinfoext = malloc(sizeof(VkImageStencilUsageCreateInfoEXT));
imagestencilusagecreateinfoext->sType=VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT;
imagestencilusagecreateinfoext->pNext=___arg1;
imagestencilusagecreateinfoext->stencilUsage=___arg2;
___return (imagestencilusagecreateinfoext);"))
(begin-ffi
   (make-VkDeviceMemoryOverallocationCreateInfoAMD
      ptr->VkDeviceMemoryOverallocationCreateInfoAMD
      ref-VkDeviceMemoryOverallocationCreateInfoAMD
      make-VkDeviceMemoryOverallocationCreateInfoAMD*
      VkDeviceMemoryOverallocationCreateInfoAMDoverallocationBehavior
      VkDeviceMemoryOverallocationCreateInfoAMDpNext
      VkDeviceMemoryOverallocationCreateInfoAMDsType
      VkDeviceMemoryOverallocationCreateInfoAMD
      VkDeviceMemoryOverallocationCreateInfoAMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkDeviceMemoryOverallocationCreateInfoAMD
      (struct "VkDeviceMemoryOverallocationCreateInfoAMD"))
   (c-define-type
      VkDeviceMemoryOverallocationCreateInfoAMD*
      (pointer VkDeviceMemoryOverallocationCreateInfoAMD))
   (define-c-lambda
      VkDeviceMemoryOverallocationCreateInfoAMDsType
      (VkDeviceMemoryOverallocationCreateInfoAMD*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkDeviceMemoryOverallocationCreateInfoAMDpNext
      (VkDeviceMemoryOverallocationCreateInfoAMD*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkDeviceMemoryOverallocationCreateInfoAMDoverallocationBehavior
      (VkDeviceMemoryOverallocationCreateInfoAMD*)
      VkMemoryOverallocationBehaviorAMD
      "___return (___arg1->overallocationBehavior);")
   (define-c-lambda
      make-VkDeviceMemoryOverallocationCreateInfoAMD*
      (int)
      VkDeviceMemoryOverallocationCreateInfoAMD*
      "VkDeviceMemoryOverallocationCreateInfoAMD* vkdevicememoryoverallocationcreateinfoamd = malloc(___arg1 * sizeof(VkDeviceMemoryOverallocationCreateInfoAMD));
      ___return (vkdevicememoryoverallocationcreateinfoamd);")
   (define-c-lambda
      ref-VkDeviceMemoryOverallocationCreateInfoAMD
      (VkDeviceMemoryOverallocationCreateInfoAMD* int)
      VkDeviceMemoryOverallocationCreateInfoAMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkDeviceMemoryOverallocationCreateInfoAMD
      ((pointer VkDeviceMemoryOverallocationCreateInfoAMD))
      VkDeviceMemoryOverallocationCreateInfoAMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkDeviceMemoryOverallocationCreateInfoAMD
      (void* VkMemoryOverallocationBehaviorAMD)
      VkDeviceMemoryOverallocationCreateInfoAMD*
      "VkDeviceMemoryOverallocationCreateInfoAMD *devicememoryoverallocationcreateinfoamd = malloc(sizeof(VkDeviceMemoryOverallocationCreateInfoAMD));
devicememoryoverallocationcreateinfoamd->sType=VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
devicememoryoverallocationcreateinfoamd->pNext=___arg1;
devicememoryoverallocationcreateinfoamd->overallocationBehavior=___arg2;
___return (devicememoryoverallocationcreateinfoamd);"))
(begin-ffi
   (make-VkPhysicalDeviceFragmentDensityMapFeaturesEXT
      ptr->VkPhysicalDeviceFragmentDensityMapFeaturesEXT
      ref-VkPhysicalDeviceFragmentDensityMapFeaturesEXT
      make-VkPhysicalDeviceFragmentDensityMapFeaturesEXT*
      VkPhysicalDeviceFragmentDensityMapFeaturesEXTfragmentDensityMapNonSubsampledImages
      VkPhysicalDeviceFragmentDensityMapFeaturesEXTfragmentDensityMapDynamic
      VkPhysicalDeviceFragmentDensityMapFeaturesEXTfragmentDensityMap
      VkPhysicalDeviceFragmentDensityMapFeaturesEXTpNext
      VkPhysicalDeviceFragmentDensityMapFeaturesEXTsType
      VkPhysicalDeviceFragmentDensityMapFeaturesEXT
      VkPhysicalDeviceFragmentDensityMapFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceFragmentDensityMapFeaturesEXT
      (struct "VkPhysicalDeviceFragmentDensityMapFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceFragmentDensityMapFeaturesEXT*
      (pointer VkPhysicalDeviceFragmentDensityMapFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceFragmentDensityMapFeaturesEXTsType
      (VkPhysicalDeviceFragmentDensityMapFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceFragmentDensityMapFeaturesEXTpNext
      (VkPhysicalDeviceFragmentDensityMapFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceFragmentDensityMapFeaturesEXTfragmentDensityMap
      (VkPhysicalDeviceFragmentDensityMapFeaturesEXT*)
      VkBool32
      "___return (___arg1->fragmentDensityMap);")
   (define-c-lambda
      VkPhysicalDeviceFragmentDensityMapFeaturesEXTfragmentDensityMapDynamic
      (VkPhysicalDeviceFragmentDensityMapFeaturesEXT*)
      VkBool32
      "___return (___arg1->fragmentDensityMapDynamic);")
   (define-c-lambda
      VkPhysicalDeviceFragmentDensityMapFeaturesEXTfragmentDensityMapNonSubsampledImages
      (VkPhysicalDeviceFragmentDensityMapFeaturesEXT*)
      VkBool32
      "___return (___arg1->fragmentDensityMapNonSubsampledImages);")
   (define-c-lambda
      make-VkPhysicalDeviceFragmentDensityMapFeaturesEXT*
      (int)
      VkPhysicalDeviceFragmentDensityMapFeaturesEXT*
      "VkPhysicalDeviceFragmentDensityMapFeaturesEXT* vkphysicaldevicefragmentdensitymapfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT));
      ___return (vkphysicaldevicefragmentdensitymapfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceFragmentDensityMapFeaturesEXT
      (VkPhysicalDeviceFragmentDensityMapFeaturesEXT* int)
      VkPhysicalDeviceFragmentDensityMapFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceFragmentDensityMapFeaturesEXT
      ((pointer VkPhysicalDeviceFragmentDensityMapFeaturesEXT))
      VkPhysicalDeviceFragmentDensityMapFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceFragmentDensityMapFeaturesEXT
      (void* VkBool32 VkBool32 VkBool32)
      VkPhysicalDeviceFragmentDensityMapFeaturesEXT*
      "VkPhysicalDeviceFragmentDensityMapFeaturesEXT *physicaldevicefragmentdensitymapfeaturesext = malloc(sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT));
physicaldevicefragmentdensitymapfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
physicaldevicefragmentdensitymapfeaturesext->pNext=___arg1;
physicaldevicefragmentdensitymapfeaturesext->fragmentDensityMap=___arg2;
physicaldevicefragmentdensitymapfeaturesext->fragmentDensityMapDynamic=___arg3;
physicaldevicefragmentdensitymapfeaturesext->fragmentDensityMapNonSubsampledImages=___arg4;
___return (physicaldevicefragmentdensitymapfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceFragmentDensityMapPropertiesEXT
      ptr->VkPhysicalDeviceFragmentDensityMapPropertiesEXT
      ref-VkPhysicalDeviceFragmentDensityMapPropertiesEXT
      make-VkPhysicalDeviceFragmentDensityMapPropertiesEXT*
      VkPhysicalDeviceFragmentDensityMapPropertiesEXTfragmentDensityInvocations
      VkPhysicalDeviceFragmentDensityMapPropertiesEXTmaxFragmentDensityTexelSize
      VkPhysicalDeviceFragmentDensityMapPropertiesEXTminFragmentDensityTexelSize
      VkPhysicalDeviceFragmentDensityMapPropertiesEXTpNext
      VkPhysicalDeviceFragmentDensityMapPropertiesEXTsType
      VkPhysicalDeviceFragmentDensityMapPropertiesEXT
      VkPhysicalDeviceFragmentDensityMapPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceFragmentDensityMapPropertiesEXT
      (struct "VkPhysicalDeviceFragmentDensityMapPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceFragmentDensityMapPropertiesEXT*
      (pointer VkPhysicalDeviceFragmentDensityMapPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceFragmentDensityMapPropertiesEXTsType
      (VkPhysicalDeviceFragmentDensityMapPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceFragmentDensityMapPropertiesEXTpNext
      (VkPhysicalDeviceFragmentDensityMapPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceFragmentDensityMapPropertiesEXTminFragmentDensityTexelSize
      (VkPhysicalDeviceFragmentDensityMapPropertiesEXT*)
      VkExtent2D
      "___return (___arg1->minFragmentDensityTexelSize);")
   (define-c-lambda
      VkPhysicalDeviceFragmentDensityMapPropertiesEXTmaxFragmentDensityTexelSize
      (VkPhysicalDeviceFragmentDensityMapPropertiesEXT*)
      VkExtent2D
      "___return (___arg1->maxFragmentDensityTexelSize);")
   (define-c-lambda
      VkPhysicalDeviceFragmentDensityMapPropertiesEXTfragmentDensityInvocations
      (VkPhysicalDeviceFragmentDensityMapPropertiesEXT*)
      VkBool32
      "___return (___arg1->fragmentDensityInvocations);")
   (define-c-lambda
      make-VkPhysicalDeviceFragmentDensityMapPropertiesEXT*
      (int)
      VkPhysicalDeviceFragmentDensityMapPropertiesEXT*
      "VkPhysicalDeviceFragmentDensityMapPropertiesEXT* vkphysicaldevicefragmentdensitymappropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT));
      ___return (vkphysicaldevicefragmentdensitymappropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceFragmentDensityMapPropertiesEXT
      (VkPhysicalDeviceFragmentDensityMapPropertiesEXT* int)
      VkPhysicalDeviceFragmentDensityMapPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceFragmentDensityMapPropertiesEXT
      ((pointer VkPhysicalDeviceFragmentDensityMapPropertiesEXT))
      VkPhysicalDeviceFragmentDensityMapPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceFragmentDensityMapPropertiesEXT
      (void* VkExtent2D VkExtent2D VkBool32)
      VkPhysicalDeviceFragmentDensityMapPropertiesEXT*
      "VkPhysicalDeviceFragmentDensityMapPropertiesEXT *physicaldevicefragmentdensitymappropertiesext = malloc(sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT));
physicaldevicefragmentdensitymappropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;
physicaldevicefragmentdensitymappropertiesext->pNext=___arg1;
physicaldevicefragmentdensitymappropertiesext->minFragmentDensityTexelSize=___arg2;
physicaldevicefragmentdensitymappropertiesext->maxFragmentDensityTexelSize=___arg3;
physicaldevicefragmentdensitymappropertiesext->fragmentDensityInvocations=___arg4;
___return (physicaldevicefragmentdensitymappropertiesext);"))
(begin-ffi
   (make-VkRenderPassFragmentDensityMapCreateInfoEXT
      ptr->VkRenderPassFragmentDensityMapCreateInfoEXT
      ref-VkRenderPassFragmentDensityMapCreateInfoEXT
      make-VkRenderPassFragmentDensityMapCreateInfoEXT*
      VkRenderPassFragmentDensityMapCreateInfoEXTfragmentDensityMapAttachment
      VkRenderPassFragmentDensityMapCreateInfoEXTpNext
      VkRenderPassFragmentDensityMapCreateInfoEXTsType
      VkRenderPassFragmentDensityMapCreateInfoEXT
      VkRenderPassFragmentDensityMapCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkRenderPassFragmentDensityMapCreateInfoEXT
      (struct "VkRenderPassFragmentDensityMapCreateInfoEXT"))
   (c-define-type
      VkRenderPassFragmentDensityMapCreateInfoEXT*
      (pointer VkRenderPassFragmentDensityMapCreateInfoEXT))
   (define-c-lambda
      VkRenderPassFragmentDensityMapCreateInfoEXTsType
      (VkRenderPassFragmentDensityMapCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkRenderPassFragmentDensityMapCreateInfoEXTpNext
      (VkRenderPassFragmentDensityMapCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkRenderPassFragmentDensityMapCreateInfoEXTfragmentDensityMapAttachment
      (VkRenderPassFragmentDensityMapCreateInfoEXT*)
      VkAttachmentReference
      "___return (___arg1->fragmentDensityMapAttachment);")
   (define-c-lambda
      make-VkRenderPassFragmentDensityMapCreateInfoEXT*
      (int)
      VkRenderPassFragmentDensityMapCreateInfoEXT*
      "VkRenderPassFragmentDensityMapCreateInfoEXT* vkrenderpassfragmentdensitymapcreateinfoext = malloc(___arg1 * sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT));
      ___return (vkrenderpassfragmentdensitymapcreateinfoext);")
   (define-c-lambda
      ref-VkRenderPassFragmentDensityMapCreateInfoEXT
      (VkRenderPassFragmentDensityMapCreateInfoEXT* int)
      VkRenderPassFragmentDensityMapCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkRenderPassFragmentDensityMapCreateInfoEXT
      ((pointer VkRenderPassFragmentDensityMapCreateInfoEXT))
      VkRenderPassFragmentDensityMapCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkRenderPassFragmentDensityMapCreateInfoEXT
      (void* VkAttachmentReference)
      VkRenderPassFragmentDensityMapCreateInfoEXT*
      "VkRenderPassFragmentDensityMapCreateInfoEXT *renderpassfragmentdensitymapcreateinfoext = malloc(sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT));
renderpassfragmentdensitymapcreateinfoext->sType=VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
renderpassfragmentdensitymapcreateinfoext->pNext=___arg1;
renderpassfragmentdensitymapcreateinfoext->fragmentDensityMapAttachment=___arg2;
___return (renderpassfragmentdensitymapcreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
      ptr->VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
      ref-VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
      make-VkPhysicalDeviceScalarBlockLayoutFeaturesEXT*
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXTscalarBlockLayout
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXTpNext
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXTsType
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
      (struct "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXT*
      (pointer VkPhysicalDeviceScalarBlockLayoutFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXTsType
      (VkPhysicalDeviceScalarBlockLayoutFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXTpNext
      (VkPhysicalDeviceScalarBlockLayoutFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXTscalarBlockLayout
      (VkPhysicalDeviceScalarBlockLayoutFeaturesEXT*)
      VkBool32
      "___return (___arg1->scalarBlockLayout);")
   (define-c-lambda
      make-VkPhysicalDeviceScalarBlockLayoutFeaturesEXT*
      (int)
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXT*
      "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT* vkphysicaldevicescalarblocklayoutfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT));
      ___return (vkphysicaldevicescalarblocklayoutfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
      (VkPhysicalDeviceScalarBlockLayoutFeaturesEXT* int)
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
      ((pointer VkPhysicalDeviceScalarBlockLayoutFeaturesEXT))
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceScalarBlockLayoutFeaturesEXT*
      "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT *physicaldevicescalarblocklayoutfeaturesext = malloc(sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT));
physicaldevicescalarblocklayoutfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT;
physicaldevicescalarblocklayoutfeaturesext->pNext=___arg1;
physicaldevicescalarblocklayoutfeaturesext->scalarBlockLayout=___arg2;
___return (physicaldevicescalarblocklayoutfeaturesext);"))
(begin-ffi
   (make-VkSurfaceProtectedCapabilitiesKHR
      ptr->VkSurfaceProtectedCapabilitiesKHR
      ref-VkSurfaceProtectedCapabilitiesKHR
      make-VkSurfaceProtectedCapabilitiesKHR*
      VkSurfaceProtectedCapabilitiesKHRsupportsProtected
      VkSurfaceProtectedCapabilitiesKHRpNext
      VkSurfaceProtectedCapabilitiesKHRsType
      VkSurfaceProtectedCapabilitiesKHR
      VkSurfaceProtectedCapabilitiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkSurfaceProtectedCapabilitiesKHR
      (struct "VkSurfaceProtectedCapabilitiesKHR"))
   (c-define-type
      VkSurfaceProtectedCapabilitiesKHR*
      (pointer VkSurfaceProtectedCapabilitiesKHR))
   (define-c-lambda
      VkSurfaceProtectedCapabilitiesKHRsType
      (VkSurfaceProtectedCapabilitiesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkSurfaceProtectedCapabilitiesKHRpNext
      (VkSurfaceProtectedCapabilitiesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkSurfaceProtectedCapabilitiesKHRsupportsProtected
      (VkSurfaceProtectedCapabilitiesKHR*)
      VkBool32
      "___return (___arg1->supportsProtected);")
   (define-c-lambda
      make-VkSurfaceProtectedCapabilitiesKHR*
      (int)
      VkSurfaceProtectedCapabilitiesKHR*
      "VkSurfaceProtectedCapabilitiesKHR* vksurfaceprotectedcapabilitieskhr = malloc(___arg1 * sizeof(VkSurfaceProtectedCapabilitiesKHR));
      ___return (vksurfaceprotectedcapabilitieskhr);")
   (define-c-lambda
      ref-VkSurfaceProtectedCapabilitiesKHR
      (VkSurfaceProtectedCapabilitiesKHR* int)
      VkSurfaceProtectedCapabilitiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkSurfaceProtectedCapabilitiesKHR
      (void* VkBool32)
      VkSurfaceProtectedCapabilitiesKHR*
      "VkSurfaceProtectedCapabilitiesKHR *surfaceprotectedcapabilitieskhr = malloc(sizeof(VkSurfaceProtectedCapabilitiesKHR));
surfaceprotectedcapabilitieskhr->sType=VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR;
surfaceprotectedcapabilitieskhr->pNext=___arg1;
surfaceprotectedcapabilitieskhr->supportsProtected=___arg2;
___return (surfaceprotectedcapabilitieskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR
      ptr->VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR
      ref-VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR
      make-VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR*
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRuniformBufferStandardLayout
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRpNext
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRsType
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR
      (struct "VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR"))
   (c-define-type
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR*
      (pointer VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR))
   (define-c-lambda
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRsType
      (VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRpNext
      (VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHRuniformBufferStandardLayout
      (VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR*)
      VkBool32
      "___return (___arg1->uniformBufferStandardLayout);")
   (define-c-lambda
      make-VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR*
      (int)
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR*
      "VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR* vkphysicaldeviceuniformbufferstandardlayoutfeatureskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR));
      ___return (vkphysicaldeviceuniformbufferstandardlayoutfeatureskhr);")
   (define-c-lambda
      ref-VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR
      (VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR* int)
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR
      (void* VkBool32)
      VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR*
      "VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR *physicaldeviceuniformbufferstandardlayoutfeatureskhr = malloc(sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR));
physicaldeviceuniformbufferstandardlayoutfeatureskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR;
physicaldeviceuniformbufferstandardlayoutfeatureskhr->pNext=___arg1;
physicaldeviceuniformbufferstandardlayoutfeatureskhr->uniformBufferStandardLayout=___arg2;
___return (physicaldeviceuniformbufferstandardlayoutfeatureskhr);"))
(begin-ffi
   (make-VkPhysicalDeviceDepthClipEnableFeaturesEXT
      ptr->VkPhysicalDeviceDepthClipEnableFeaturesEXT
      ref-VkPhysicalDeviceDepthClipEnableFeaturesEXT
      make-VkPhysicalDeviceDepthClipEnableFeaturesEXT*
      VkPhysicalDeviceDepthClipEnableFeaturesEXTdepthClipEnable
      VkPhysicalDeviceDepthClipEnableFeaturesEXTpNext
      VkPhysicalDeviceDepthClipEnableFeaturesEXTsType
      VkPhysicalDeviceDepthClipEnableFeaturesEXT
      VkPhysicalDeviceDepthClipEnableFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceDepthClipEnableFeaturesEXT
      (struct "VkPhysicalDeviceDepthClipEnableFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceDepthClipEnableFeaturesEXT*
      (pointer VkPhysicalDeviceDepthClipEnableFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceDepthClipEnableFeaturesEXTsType
      (VkPhysicalDeviceDepthClipEnableFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceDepthClipEnableFeaturesEXTpNext
      (VkPhysicalDeviceDepthClipEnableFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceDepthClipEnableFeaturesEXTdepthClipEnable
      (VkPhysicalDeviceDepthClipEnableFeaturesEXT*)
      VkBool32
      "___return (___arg1->depthClipEnable);")
   (define-c-lambda
      make-VkPhysicalDeviceDepthClipEnableFeaturesEXT*
      (int)
      VkPhysicalDeviceDepthClipEnableFeaturesEXT*
      "VkPhysicalDeviceDepthClipEnableFeaturesEXT* vkphysicaldevicedepthclipenablefeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT));
      ___return (vkphysicaldevicedepthclipenablefeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceDepthClipEnableFeaturesEXT
      (VkPhysicalDeviceDepthClipEnableFeaturesEXT* int)
      VkPhysicalDeviceDepthClipEnableFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceDepthClipEnableFeaturesEXT
      ((pointer VkPhysicalDeviceDepthClipEnableFeaturesEXT))
      VkPhysicalDeviceDepthClipEnableFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceDepthClipEnableFeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceDepthClipEnableFeaturesEXT*
      "VkPhysicalDeviceDepthClipEnableFeaturesEXT *physicaldevicedepthclipenablefeaturesext = malloc(sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT));
physicaldevicedepthclipenablefeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
physicaldevicedepthclipenablefeaturesext->pNext=___arg1;
physicaldevicedepthclipenablefeaturesext->depthClipEnable=___arg2;
___return (physicaldevicedepthclipenablefeaturesext);"))
(begin-ffi
   (make-VkPipelineRasterizationDepthClipStateCreateInfoEXT
      ptr->VkPipelineRasterizationDepthClipStateCreateInfoEXT
      ref-VkPipelineRasterizationDepthClipStateCreateInfoEXT
      make-VkPipelineRasterizationDepthClipStateCreateInfoEXT*
      VkPipelineRasterizationDepthClipStateCreateInfoEXTdepthClipEnable
      VkPipelineRasterizationDepthClipStateCreateInfoEXTflags
      VkPipelineRasterizationDepthClipStateCreateInfoEXTpNext
      VkPipelineRasterizationDepthClipStateCreateInfoEXTsType
      VkPipelineRasterizationDepthClipStateCreateInfoEXT
      VkPipelineRasterizationDepthClipStateCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineRasterizationDepthClipStateCreateInfoEXT
      (struct "VkPipelineRasterizationDepthClipStateCreateInfoEXT"))
   (c-define-type
      VkPipelineRasterizationDepthClipStateCreateInfoEXT*
      (pointer VkPipelineRasterizationDepthClipStateCreateInfoEXT))
   (define-c-lambda
      VkPipelineRasterizationDepthClipStateCreateInfoEXTsType
      (VkPipelineRasterizationDepthClipStateCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineRasterizationDepthClipStateCreateInfoEXTpNext
      (VkPipelineRasterizationDepthClipStateCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineRasterizationDepthClipStateCreateInfoEXTflags
      (VkPipelineRasterizationDepthClipStateCreateInfoEXT*)
      VkPipelineRasterizationDepthClipStateCreateFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineRasterizationDepthClipStateCreateInfoEXTdepthClipEnable
      (VkPipelineRasterizationDepthClipStateCreateInfoEXT*)
      VkBool32
      "___return (___arg1->depthClipEnable);")
   (define-c-lambda
      make-VkPipelineRasterizationDepthClipStateCreateInfoEXT*
      (int)
      VkPipelineRasterizationDepthClipStateCreateInfoEXT*
      "VkPipelineRasterizationDepthClipStateCreateInfoEXT* vkpipelinerasterizationdepthclipstatecreateinfoext = malloc(___arg1 * sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT));
      ___return (vkpipelinerasterizationdepthclipstatecreateinfoext);")
   (define-c-lambda
      ref-VkPipelineRasterizationDepthClipStateCreateInfoEXT
      (VkPipelineRasterizationDepthClipStateCreateInfoEXT* int)
      VkPipelineRasterizationDepthClipStateCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineRasterizationDepthClipStateCreateInfoEXT
      ((pointer VkPipelineRasterizationDepthClipStateCreateInfoEXT))
      VkPipelineRasterizationDepthClipStateCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineRasterizationDepthClipStateCreateInfoEXT
      (void* VkPipelineRasterizationDepthClipStateCreateFlagsEXT VkBool32)
      VkPipelineRasterizationDepthClipStateCreateInfoEXT*
      "VkPipelineRasterizationDepthClipStateCreateInfoEXT *pipelinerasterizationdepthclipstatecreateinfoext = malloc(sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT));
pipelinerasterizationdepthclipstatecreateinfoext->sType=VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
pipelinerasterizationdepthclipstatecreateinfoext->pNext=___arg1;
pipelinerasterizationdepthclipstatecreateinfoext->flags=___arg2;
pipelinerasterizationdepthclipstatecreateinfoext->depthClipEnable=___arg3;
___return (pipelinerasterizationdepthclipstatecreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceMemoryBudgetPropertiesEXT
      ptr->VkPhysicalDeviceMemoryBudgetPropertiesEXT
      ref-VkPhysicalDeviceMemoryBudgetPropertiesEXT
      make-VkPhysicalDeviceMemoryBudgetPropertiesEXT*
      VkPhysicalDeviceMemoryBudgetPropertiesEXTheapUsage
      VkPhysicalDeviceMemoryBudgetPropertiesEXTheapBudget
      VkPhysicalDeviceMemoryBudgetPropertiesEXTpNext
      VkPhysicalDeviceMemoryBudgetPropertiesEXTsType
      VkPhysicalDeviceMemoryBudgetPropertiesEXT
      VkPhysicalDeviceMemoryBudgetPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMemoryBudgetPropertiesEXT
      (struct "VkPhysicalDeviceMemoryBudgetPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceMemoryBudgetPropertiesEXT*
      (pointer VkPhysicalDeviceMemoryBudgetPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceMemoryBudgetPropertiesEXTsType
      (VkPhysicalDeviceMemoryBudgetPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceMemoryBudgetPropertiesEXTpNext
      (VkPhysicalDeviceMemoryBudgetPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceMemoryBudgetPropertiesEXTheapBudget
      (VkPhysicalDeviceMemoryBudgetPropertiesEXT*)
      VkDeviceSize*
      "___return (___arg1->heapBudget);")
   (define-c-lambda
      VkPhysicalDeviceMemoryBudgetPropertiesEXTheapUsage
      (VkPhysicalDeviceMemoryBudgetPropertiesEXT*)
      VkDeviceSize*
      "___return (___arg1->heapUsage);")
   (define-c-lambda
      make-VkPhysicalDeviceMemoryBudgetPropertiesEXT*
      (int)
      VkPhysicalDeviceMemoryBudgetPropertiesEXT*
      "VkPhysicalDeviceMemoryBudgetPropertiesEXT* vkphysicaldevicememorybudgetpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT));
      ___return (vkphysicaldevicememorybudgetpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceMemoryBudgetPropertiesEXT
      (VkPhysicalDeviceMemoryBudgetPropertiesEXT* int)
      VkPhysicalDeviceMemoryBudgetPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceMemoryBudgetPropertiesEXT
      ((pointer VkPhysicalDeviceMemoryBudgetPropertiesEXT))
      VkPhysicalDeviceMemoryBudgetPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceMemoryBudgetPropertiesEXT
      (void* VkDeviceSize* VkDeviceSize*)
      VkPhysicalDeviceMemoryBudgetPropertiesEXT*
      "VkPhysicalDeviceMemoryBudgetPropertiesEXT *physicaldevicememorybudgetpropertiesext = malloc(sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT));
physicaldevicememorybudgetpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
physicaldevicememorybudgetpropertiesext->pNext=___arg1;
memcpy(physicaldevicememorybudgetpropertiesext->heapBudget,___arg2,sizeof(___arg2));
memcpy(physicaldevicememorybudgetpropertiesext->heapUsage,___arg3,sizeof(___arg3));
___return (physicaldevicememorybudgetpropertiesext);"))
(begin-ffi
   (make-VkPhysicalDeviceMemoryPriorityFeaturesEXT
      ptr->VkPhysicalDeviceMemoryPriorityFeaturesEXT
      ref-VkPhysicalDeviceMemoryPriorityFeaturesEXT
      make-VkPhysicalDeviceMemoryPriorityFeaturesEXT*
      VkPhysicalDeviceMemoryPriorityFeaturesEXTmemoryPriority
      VkPhysicalDeviceMemoryPriorityFeaturesEXTpNext
      VkPhysicalDeviceMemoryPriorityFeaturesEXTsType
      VkPhysicalDeviceMemoryPriorityFeaturesEXT
      VkPhysicalDeviceMemoryPriorityFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceMemoryPriorityFeaturesEXT
      (struct "VkPhysicalDeviceMemoryPriorityFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceMemoryPriorityFeaturesEXT*
      (pointer VkPhysicalDeviceMemoryPriorityFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceMemoryPriorityFeaturesEXTsType
      (VkPhysicalDeviceMemoryPriorityFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceMemoryPriorityFeaturesEXTpNext
      (VkPhysicalDeviceMemoryPriorityFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceMemoryPriorityFeaturesEXTmemoryPriority
      (VkPhysicalDeviceMemoryPriorityFeaturesEXT*)
      VkBool32
      "___return (___arg1->memoryPriority);")
   (define-c-lambda
      make-VkPhysicalDeviceMemoryPriorityFeaturesEXT*
      (int)
      VkPhysicalDeviceMemoryPriorityFeaturesEXT*
      "VkPhysicalDeviceMemoryPriorityFeaturesEXT* vkphysicaldevicememorypriorityfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT));
      ___return (vkphysicaldevicememorypriorityfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceMemoryPriorityFeaturesEXT
      (VkPhysicalDeviceMemoryPriorityFeaturesEXT* int)
      VkPhysicalDeviceMemoryPriorityFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceMemoryPriorityFeaturesEXT
      ((pointer VkPhysicalDeviceMemoryPriorityFeaturesEXT))
      VkPhysicalDeviceMemoryPriorityFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceMemoryPriorityFeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceMemoryPriorityFeaturesEXT*
      "VkPhysicalDeviceMemoryPriorityFeaturesEXT *physicaldevicememorypriorityfeaturesext = malloc(sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT));
physicaldevicememorypriorityfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
physicaldevicememorypriorityfeaturesext->pNext=___arg1;
physicaldevicememorypriorityfeaturesext->memoryPriority=___arg2;
___return (physicaldevicememorypriorityfeaturesext);"))
(begin-ffi
   (make-VkMemoryPriorityAllocateInfoEXT
      ptr->VkMemoryPriorityAllocateInfoEXT
      ref-VkMemoryPriorityAllocateInfoEXT
      make-VkMemoryPriorityAllocateInfoEXT*
      VkMemoryPriorityAllocateInfoEXTpriority
      VkMemoryPriorityAllocateInfoEXTpNext
      VkMemoryPriorityAllocateInfoEXTsType
      VkMemoryPriorityAllocateInfoEXT
      VkMemoryPriorityAllocateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkMemoryPriorityAllocateInfoEXT
      (struct "VkMemoryPriorityAllocateInfoEXT"))
   (c-define-type
      VkMemoryPriorityAllocateInfoEXT*
      (pointer VkMemoryPriorityAllocateInfoEXT))
   (define-c-lambda
      VkMemoryPriorityAllocateInfoEXTsType
      (VkMemoryPriorityAllocateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkMemoryPriorityAllocateInfoEXTpNext
      (VkMemoryPriorityAllocateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkMemoryPriorityAllocateInfoEXTpriority
      (VkMemoryPriorityAllocateInfoEXT*)
      float
      "___return (___arg1->priority);")
   (define-c-lambda
      make-VkMemoryPriorityAllocateInfoEXT*
      (int)
      VkMemoryPriorityAllocateInfoEXT*
      "VkMemoryPriorityAllocateInfoEXT* vkmemorypriorityallocateinfoext = malloc(___arg1 * sizeof(VkMemoryPriorityAllocateInfoEXT));
      ___return (vkmemorypriorityallocateinfoext);")
   (define-c-lambda
      ref-VkMemoryPriorityAllocateInfoEXT
      (VkMemoryPriorityAllocateInfoEXT* int)
      VkMemoryPriorityAllocateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkMemoryPriorityAllocateInfoEXT
      ((pointer VkMemoryPriorityAllocateInfoEXT))
      VkMemoryPriorityAllocateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkMemoryPriorityAllocateInfoEXT
      (void* float)
      VkMemoryPriorityAllocateInfoEXT*
      "VkMemoryPriorityAllocateInfoEXT *memorypriorityallocateinfoext = malloc(sizeof(VkMemoryPriorityAllocateInfoEXT));
memorypriorityallocateinfoext->sType=VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
memorypriorityallocateinfoext->pNext=___arg1;
memorypriorityallocateinfoext->priority=___arg2;
___return (memorypriorityallocateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
      ptr->VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
      ref-VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
      make-VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXTbufferDeviceAddressMultiDevice
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXTbufferDeviceAddressCaptureReplay
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXTbufferDeviceAddress
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXTpNext
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXTsType
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
      (struct "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*
      (pointer VkPhysicalDeviceBufferDeviceAddressFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXTsType
      (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXTpNext
      (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXTbufferDeviceAddress
      (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*)
      VkBool32
      "___return (___arg1->bufferDeviceAddress);")
   (define-c-lambda
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXTbufferDeviceAddressCaptureReplay
      (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*)
      VkBool32
      "___return (___arg1->bufferDeviceAddressCaptureReplay);")
   (define-c-lambda
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXTbufferDeviceAddressMultiDevice
      (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*)
      VkBool32
      "___return (___arg1->bufferDeviceAddressMultiDevice);")
   (define-c-lambda
      make-VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*
      (int)
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*
      "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT* vkphysicaldevicebufferdeviceaddressfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT));
      ___return (vkphysicaldevicebufferdeviceaddressfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
      (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT* int)
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
      ((pointer VkPhysicalDeviceBufferDeviceAddressFeaturesEXT))
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
      (void* VkBool32 VkBool32 VkBool32)
      VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*
      "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT *physicaldevicebufferdeviceaddressfeaturesext = malloc(sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT));
physicaldevicebufferdeviceaddressfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
physicaldevicebufferdeviceaddressfeaturesext->pNext=___arg1;
physicaldevicebufferdeviceaddressfeaturesext->bufferDeviceAddress=___arg2;
physicaldevicebufferdeviceaddressfeaturesext->bufferDeviceAddressCaptureReplay=___arg3;
physicaldevicebufferdeviceaddressfeaturesext->bufferDeviceAddressMultiDevice=___arg4;
___return (physicaldevicebufferdeviceaddressfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceBufferAddressFeaturesEXT
      ptr->VkPhysicalDeviceBufferAddressFeaturesEXT
      ref-VkPhysicalDeviceBufferAddressFeaturesEXT
      make-VkPhysicalDeviceBufferAddressFeaturesEXT*
      VkPhysicalDeviceBufferAddressFeaturesEXT
      VkPhysicalDeviceBufferAddressFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceBufferAddressFeaturesEXT
      (struct "VkPhysicalDeviceBufferAddressFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceBufferAddressFeaturesEXT*
      (pointer VkPhysicalDeviceBufferAddressFeaturesEXT))
   (define-c-lambda
      make-VkPhysicalDeviceBufferAddressFeaturesEXT*
      (int)
      VkPhysicalDeviceBufferAddressFeaturesEXT*
      "VkPhysicalDeviceBufferAddressFeaturesEXT* vkphysicaldevicebufferaddressfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT));
      ___return (vkphysicaldevicebufferaddressfeaturesext);")
   (define-c-lambda
      make-VkPhysicalDeviceBufferAddressFeaturesEXT
      ()
      VkPhysicalDeviceBufferAddressFeaturesEXT*
      "VkPhysicalDeviceBufferAddressFeaturesEXT *physicaldevicebufferaddressfeaturesext = malloc(sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT));
___return (physicaldevicebufferaddressfeaturesext);"))
(begin-ffi
   (make-VkBufferDeviceAddressInfoEXT
      ptr->VkBufferDeviceAddressInfoEXT
      ref-VkBufferDeviceAddressInfoEXT
      make-VkBufferDeviceAddressInfoEXT*
      VkBufferDeviceAddressInfoEXTbuffer
      VkBufferDeviceAddressInfoEXTpNext
      VkBufferDeviceAddressInfoEXTsType
      VkBufferDeviceAddressInfoEXT
      VkBufferDeviceAddressInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkBufferDeviceAddressInfoEXT (struct "VkBufferDeviceAddressInfoEXT"))
   (c-define-type VkBufferDeviceAddressInfoEXT* (pointer VkBufferDeviceAddressInfoEXT))
   (define-c-lambda
      VkBufferDeviceAddressInfoEXTsType
      (VkBufferDeviceAddressInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBufferDeviceAddressInfoEXTpNext
      (VkBufferDeviceAddressInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBufferDeviceAddressInfoEXTbuffer
      (VkBufferDeviceAddressInfoEXT*)
      VkBuffer
      "___return (___arg1->buffer);")
   (define-c-lambda
      make-VkBufferDeviceAddressInfoEXT*
      (int)
      VkBufferDeviceAddressInfoEXT*
      "VkBufferDeviceAddressInfoEXT* vkbufferdeviceaddressinfoext = malloc(___arg1 * sizeof(VkBufferDeviceAddressInfoEXT));
      ___return (vkbufferdeviceaddressinfoext);")
   (define-c-lambda
      ref-VkBufferDeviceAddressInfoEXT
      (VkBufferDeviceAddressInfoEXT* int)
      VkBufferDeviceAddressInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBufferDeviceAddressInfoEXT
      ((pointer VkBufferDeviceAddressInfoEXT))
      VkBufferDeviceAddressInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBufferDeviceAddressInfoEXT
      (void* VkBuffer)
      VkBufferDeviceAddressInfoEXT*
      "VkBufferDeviceAddressInfoEXT *bufferdeviceaddressinfoext = malloc(sizeof(VkBufferDeviceAddressInfoEXT));
bufferdeviceaddressinfoext->sType=VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT;
bufferdeviceaddressinfoext->pNext=___arg1;
bufferdeviceaddressinfoext->buffer=___arg2;
___return (bufferdeviceaddressinfoext);"))
(begin-ffi
   (make-VkBufferDeviceAddressCreateInfoEXT
      ptr->VkBufferDeviceAddressCreateInfoEXT
      ref-VkBufferDeviceAddressCreateInfoEXT
      make-VkBufferDeviceAddressCreateInfoEXT*
      VkBufferDeviceAddressCreateInfoEXTdeviceAddress
      VkBufferDeviceAddressCreateInfoEXTpNext
      VkBufferDeviceAddressCreateInfoEXTsType
      VkBufferDeviceAddressCreateInfoEXT
      VkBufferDeviceAddressCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkBufferDeviceAddressCreateInfoEXT
      (struct "VkBufferDeviceAddressCreateInfoEXT"))
   (c-define-type
      VkBufferDeviceAddressCreateInfoEXT*
      (pointer VkBufferDeviceAddressCreateInfoEXT))
   (define-c-lambda
      VkBufferDeviceAddressCreateInfoEXTsType
      (VkBufferDeviceAddressCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkBufferDeviceAddressCreateInfoEXTpNext
      (VkBufferDeviceAddressCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkBufferDeviceAddressCreateInfoEXTdeviceAddress
      (VkBufferDeviceAddressCreateInfoEXT*)
      VkDeviceAddress
      "___return (___arg1->deviceAddress);")
   (define-c-lambda
      make-VkBufferDeviceAddressCreateInfoEXT*
      (int)
      VkBufferDeviceAddressCreateInfoEXT*
      "VkBufferDeviceAddressCreateInfoEXT* vkbufferdeviceaddresscreateinfoext = malloc(___arg1 * sizeof(VkBufferDeviceAddressCreateInfoEXT));
      ___return (vkbufferdeviceaddresscreateinfoext);")
   (define-c-lambda
      ref-VkBufferDeviceAddressCreateInfoEXT
      (VkBufferDeviceAddressCreateInfoEXT* int)
      VkBufferDeviceAddressCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkBufferDeviceAddressCreateInfoEXT
      ((pointer VkBufferDeviceAddressCreateInfoEXT))
      VkBufferDeviceAddressCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkBufferDeviceAddressCreateInfoEXT
      (void* VkDeviceAddress)
      VkBufferDeviceAddressCreateInfoEXT*
      "VkBufferDeviceAddressCreateInfoEXT *bufferdeviceaddresscreateinfoext = malloc(sizeof(VkBufferDeviceAddressCreateInfoEXT));
bufferdeviceaddresscreateinfoext->sType=VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
bufferdeviceaddresscreateinfoext->pNext=___arg1;
bufferdeviceaddresscreateinfoext->deviceAddress=___arg2;
___return (bufferdeviceaddresscreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceImageViewImageFormatInfoEXT
      ptr->VkPhysicalDeviceImageViewImageFormatInfoEXT
      ref-VkPhysicalDeviceImageViewImageFormatInfoEXT
      make-VkPhysicalDeviceImageViewImageFormatInfoEXT*
      VkPhysicalDeviceImageViewImageFormatInfoEXTimageViewType
      VkPhysicalDeviceImageViewImageFormatInfoEXTpNext
      VkPhysicalDeviceImageViewImageFormatInfoEXTsType
      VkPhysicalDeviceImageViewImageFormatInfoEXT
      VkPhysicalDeviceImageViewImageFormatInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceImageViewImageFormatInfoEXT
      (struct "VkPhysicalDeviceImageViewImageFormatInfoEXT"))
   (c-define-type
      VkPhysicalDeviceImageViewImageFormatInfoEXT*
      (pointer VkPhysicalDeviceImageViewImageFormatInfoEXT))
   (define-c-lambda
      VkPhysicalDeviceImageViewImageFormatInfoEXTsType
      (VkPhysicalDeviceImageViewImageFormatInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceImageViewImageFormatInfoEXTpNext
      (VkPhysicalDeviceImageViewImageFormatInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceImageViewImageFormatInfoEXTimageViewType
      (VkPhysicalDeviceImageViewImageFormatInfoEXT*)
      VkImageViewType
      "___return (___arg1->imageViewType);")
   (define-c-lambda
      make-VkPhysicalDeviceImageViewImageFormatInfoEXT*
      (int)
      VkPhysicalDeviceImageViewImageFormatInfoEXT*
      "VkPhysicalDeviceImageViewImageFormatInfoEXT* vkphysicaldeviceimageviewimageformatinfoext = malloc(___arg1 * sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT));
      ___return (vkphysicaldeviceimageviewimageformatinfoext);")
   (define-c-lambda
      ref-VkPhysicalDeviceImageViewImageFormatInfoEXT
      (VkPhysicalDeviceImageViewImageFormatInfoEXT* int)
      VkPhysicalDeviceImageViewImageFormatInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceImageViewImageFormatInfoEXT
      ((pointer VkPhysicalDeviceImageViewImageFormatInfoEXT))
      VkPhysicalDeviceImageViewImageFormatInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceImageViewImageFormatInfoEXT
      (void* VkImageViewType)
      VkPhysicalDeviceImageViewImageFormatInfoEXT*
      "VkPhysicalDeviceImageViewImageFormatInfoEXT *physicaldeviceimageviewimageformatinfoext = malloc(sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT));
physicaldeviceimageviewimageformatinfoext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
physicaldeviceimageviewimageformatinfoext->pNext=___arg1;
physicaldeviceimageviewimageformatinfoext->imageViewType=___arg2;
___return (physicaldeviceimageviewimageformatinfoext);"))
(begin-ffi
   (make-VkFilterCubicImageViewImageFormatPropertiesEXT
      ptr->VkFilterCubicImageViewImageFormatPropertiesEXT
      ref-VkFilterCubicImageViewImageFormatPropertiesEXT
      make-VkFilterCubicImageViewImageFormatPropertiesEXT*
      VkFilterCubicImageViewImageFormatPropertiesEXTfilterCubicMinmax
      VkFilterCubicImageViewImageFormatPropertiesEXTfilterCubic
      VkFilterCubicImageViewImageFormatPropertiesEXTpNext
      VkFilterCubicImageViewImageFormatPropertiesEXTsType
      VkFilterCubicImageViewImageFormatPropertiesEXT
      VkFilterCubicImageViewImageFormatPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkFilterCubicImageViewImageFormatPropertiesEXT
      (struct "VkFilterCubicImageViewImageFormatPropertiesEXT"))
   (c-define-type
      VkFilterCubicImageViewImageFormatPropertiesEXT*
      (pointer VkFilterCubicImageViewImageFormatPropertiesEXT))
   (define-c-lambda
      VkFilterCubicImageViewImageFormatPropertiesEXTsType
      (VkFilterCubicImageViewImageFormatPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkFilterCubicImageViewImageFormatPropertiesEXTpNext
      (VkFilterCubicImageViewImageFormatPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkFilterCubicImageViewImageFormatPropertiesEXTfilterCubic
      (VkFilterCubicImageViewImageFormatPropertiesEXT*)
      VkBool32
      "___return (___arg1->filterCubic);")
   (define-c-lambda
      VkFilterCubicImageViewImageFormatPropertiesEXTfilterCubicMinmax
      (VkFilterCubicImageViewImageFormatPropertiesEXT*)
      VkBool32
      "___return (___arg1->filterCubicMinmax);")
   (define-c-lambda
      make-VkFilterCubicImageViewImageFormatPropertiesEXT*
      (int)
      VkFilterCubicImageViewImageFormatPropertiesEXT*
      "VkFilterCubicImageViewImageFormatPropertiesEXT* vkfiltercubicimageviewimageformatpropertiesext = malloc(___arg1 * sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT));
      ___return (vkfiltercubicimageviewimageformatpropertiesext);")
   (define-c-lambda
      ref-VkFilterCubicImageViewImageFormatPropertiesEXT
      (VkFilterCubicImageViewImageFormatPropertiesEXT* int)
      VkFilterCubicImageViewImageFormatPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkFilterCubicImageViewImageFormatPropertiesEXT
      ((pointer VkFilterCubicImageViewImageFormatPropertiesEXT))
      VkFilterCubicImageViewImageFormatPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkFilterCubicImageViewImageFormatPropertiesEXT
      (void* VkBool32 VkBool32)
      VkFilterCubicImageViewImageFormatPropertiesEXT*
      "VkFilterCubicImageViewImageFormatPropertiesEXT *filtercubicimageviewimageformatpropertiesext = malloc(sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT));
filtercubicimageviewimageformatpropertiesext->sType=VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
filtercubicimageviewimageformatpropertiesext->pNext=___arg1;
filtercubicimageviewimageformatpropertiesext->filterCubic=___arg2;
filtercubicimageviewimageformatpropertiesext->filterCubicMinmax=___arg3;
___return (filtercubicimageviewimageformatpropertiesext);"))
(begin-ffi
   (make-VkPhysicalDeviceImagelessFramebufferFeaturesKHR
      ptr->VkPhysicalDeviceImagelessFramebufferFeaturesKHR
      ref-VkPhysicalDeviceImagelessFramebufferFeaturesKHR
      make-VkPhysicalDeviceImagelessFramebufferFeaturesKHR*
      VkPhysicalDeviceImagelessFramebufferFeaturesKHRimagelessFramebuffer
      VkPhysicalDeviceImagelessFramebufferFeaturesKHRpNext
      VkPhysicalDeviceImagelessFramebufferFeaturesKHRsType
      VkPhysicalDeviceImagelessFramebufferFeaturesKHR
      VkPhysicalDeviceImagelessFramebufferFeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceImagelessFramebufferFeaturesKHR
      (struct "VkPhysicalDeviceImagelessFramebufferFeaturesKHR"))
   (c-define-type
      VkPhysicalDeviceImagelessFramebufferFeaturesKHR*
      (pointer VkPhysicalDeviceImagelessFramebufferFeaturesKHR))
   (define-c-lambda
      VkPhysicalDeviceImagelessFramebufferFeaturesKHRsType
      (VkPhysicalDeviceImagelessFramebufferFeaturesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceImagelessFramebufferFeaturesKHRpNext
      (VkPhysicalDeviceImagelessFramebufferFeaturesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceImagelessFramebufferFeaturesKHRimagelessFramebuffer
      (VkPhysicalDeviceImagelessFramebufferFeaturesKHR*)
      VkBool32
      "___return (___arg1->imagelessFramebuffer);")
   (define-c-lambda
      make-VkPhysicalDeviceImagelessFramebufferFeaturesKHR*
      (int)
      VkPhysicalDeviceImagelessFramebufferFeaturesKHR*
      "VkPhysicalDeviceImagelessFramebufferFeaturesKHR* vkphysicaldeviceimagelessframebufferfeatureskhr = malloc(___arg1 * sizeof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR));
      ___return (vkphysicaldeviceimagelessframebufferfeatureskhr);")
   (define-c-lambda
      ref-VkPhysicalDeviceImagelessFramebufferFeaturesKHR
      (VkPhysicalDeviceImagelessFramebufferFeaturesKHR* int)
      VkPhysicalDeviceImagelessFramebufferFeaturesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDeviceImagelessFramebufferFeaturesKHR
      (void* VkBool32)
      VkPhysicalDeviceImagelessFramebufferFeaturesKHR*
      "VkPhysicalDeviceImagelessFramebufferFeaturesKHR *physicaldeviceimagelessframebufferfeatureskhr = malloc(sizeof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR));
physicaldeviceimagelessframebufferfeatureskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR;
physicaldeviceimagelessframebufferfeatureskhr->pNext=___arg1;
physicaldeviceimagelessframebufferfeatureskhr->imagelessFramebuffer=___arg2;
___return (physicaldeviceimagelessframebufferfeatureskhr);"))
(begin-ffi
   (make-VkFramebufferAttachmentImageInfoKHR
      ptr->VkFramebufferAttachmentImageInfoKHR
      ref-VkFramebufferAttachmentImageInfoKHR
      make-VkFramebufferAttachmentImageInfoKHR*
      VkFramebufferAttachmentImageInfoKHRpViewFormats
      VkFramebufferAttachmentImageInfoKHRviewFormatCount
      VkFramebufferAttachmentImageInfoKHRlayerCount
      VkFramebufferAttachmentImageInfoKHRheight
      VkFramebufferAttachmentImageInfoKHRwidth
      VkFramebufferAttachmentImageInfoKHRusage
      VkFramebufferAttachmentImageInfoKHRflags
      VkFramebufferAttachmentImageInfoKHRpNext
      VkFramebufferAttachmentImageInfoKHRsType
      VkFramebufferAttachmentImageInfoKHR
      VkFramebufferAttachmentImageInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkFramebufferAttachmentImageInfoKHR
      (struct "VkFramebufferAttachmentImageInfoKHR"))
   (c-define-type
      VkFramebufferAttachmentImageInfoKHR*
      (pointer VkFramebufferAttachmentImageInfoKHR))
   (define-c-lambda
      VkFramebufferAttachmentImageInfoKHRsType
      (VkFramebufferAttachmentImageInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkFramebufferAttachmentImageInfoKHRpNext
      (VkFramebufferAttachmentImageInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkFramebufferAttachmentImageInfoKHRflags
      (VkFramebufferAttachmentImageInfoKHR*)
      VkImageCreateFlags
      "___return (___arg1->flags);")
   (define-c-lambda
      VkFramebufferAttachmentImageInfoKHRusage
      (VkFramebufferAttachmentImageInfoKHR*)
      VkImageUsageFlags
      "___return (___arg1->usage);")
   (define-c-lambda
      VkFramebufferAttachmentImageInfoKHRwidth
      (VkFramebufferAttachmentImageInfoKHR*)
      uint32_t
      "___return (___arg1->width);")
   (define-c-lambda
      VkFramebufferAttachmentImageInfoKHRheight
      (VkFramebufferAttachmentImageInfoKHR*)
      uint32_t
      "___return (___arg1->height);")
   (define-c-lambda
      VkFramebufferAttachmentImageInfoKHRlayerCount
      (VkFramebufferAttachmentImageInfoKHR*)
      uint32_t
      "___return (___arg1->layerCount);")
   (define-c-lambda
      VkFramebufferAttachmentImageInfoKHRviewFormatCount
      (VkFramebufferAttachmentImageInfoKHR*)
      uint32_t
      "___return (___arg1->viewFormatCount);")
   (define-c-lambda
      VkFramebufferAttachmentImageInfoKHRpViewFormats
      (VkFramebufferAttachmentImageInfoKHR*)
      VkFormat*
      "___return (___arg1->pViewFormats);")
   (define-c-lambda
      make-VkFramebufferAttachmentImageInfoKHR*
      (int)
      VkFramebufferAttachmentImageInfoKHR*
      "VkFramebufferAttachmentImageInfoKHR* vkframebufferattachmentimageinfokhr = malloc(___arg1 * sizeof(VkFramebufferAttachmentImageInfoKHR));
      ___return (vkframebufferattachmentimageinfokhr);")
   (define-c-lambda
      ref-VkFramebufferAttachmentImageInfoKHR
      (VkFramebufferAttachmentImageInfoKHR* int)
      VkFramebufferAttachmentImageInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkFramebufferAttachmentImageInfoKHR
      (void*
         VkImageCreateFlags
         VkImageUsageFlags
         uint32_t
         uint32_t
         uint32_t
         uint32_t
         VkFormat*)
      VkFramebufferAttachmentImageInfoKHR*
      "VkFramebufferAttachmentImageInfoKHR *framebufferattachmentimageinfokhr = malloc(sizeof(VkFramebufferAttachmentImageInfoKHR));
framebufferattachmentimageinfokhr->sType=VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR;
framebufferattachmentimageinfokhr->pNext=___arg1;
framebufferattachmentimageinfokhr->flags=___arg2;
framebufferattachmentimageinfokhr->usage=___arg3;
framebufferattachmentimageinfokhr->width=___arg4;
framebufferattachmentimageinfokhr->height=___arg5;
framebufferattachmentimageinfokhr->layerCount=___arg6;
framebufferattachmentimageinfokhr->viewFormatCount=___arg7;
framebufferattachmentimageinfokhr->pViewFormats=___arg8;
___return (framebufferattachmentimageinfokhr);"))
(begin-ffi
   (make-VkFramebufferAttachmentsCreateInfoKHR
      ptr->VkFramebufferAttachmentsCreateInfoKHR
      ref-VkFramebufferAttachmentsCreateInfoKHR
      make-VkFramebufferAttachmentsCreateInfoKHR*
      VkFramebufferAttachmentsCreateInfoKHRpAttachmentImageInfos
      VkFramebufferAttachmentsCreateInfoKHRattachmentImageInfoCount
      VkFramebufferAttachmentsCreateInfoKHRpNext
      VkFramebufferAttachmentsCreateInfoKHRsType
      VkFramebufferAttachmentsCreateInfoKHR
      VkFramebufferAttachmentsCreateInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkFramebufferAttachmentsCreateInfoKHR
      (struct "VkFramebufferAttachmentsCreateInfoKHR"))
   (c-define-type
      VkFramebufferAttachmentsCreateInfoKHR*
      (pointer VkFramebufferAttachmentsCreateInfoKHR))
   (define-c-lambda
      VkFramebufferAttachmentsCreateInfoKHRsType
      (VkFramebufferAttachmentsCreateInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkFramebufferAttachmentsCreateInfoKHRpNext
      (VkFramebufferAttachmentsCreateInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkFramebufferAttachmentsCreateInfoKHRattachmentImageInfoCount
      (VkFramebufferAttachmentsCreateInfoKHR*)
      uint32_t
      "___return (___arg1->attachmentImageInfoCount);")
   (define-c-lambda
      VkFramebufferAttachmentsCreateInfoKHRpAttachmentImageInfos
      (VkFramebufferAttachmentsCreateInfoKHR*)
      VkFramebufferAttachmentImageInfoKHR*
      "___return (___arg1->pAttachmentImageInfos);")
   (define-c-lambda
      make-VkFramebufferAttachmentsCreateInfoKHR*
      (int)
      VkFramebufferAttachmentsCreateInfoKHR*
      "VkFramebufferAttachmentsCreateInfoKHR* vkframebufferattachmentscreateinfokhr = malloc(___arg1 * sizeof(VkFramebufferAttachmentsCreateInfoKHR));
      ___return (vkframebufferattachmentscreateinfokhr);")
   (define-c-lambda
      ref-VkFramebufferAttachmentsCreateInfoKHR
      (VkFramebufferAttachmentsCreateInfoKHR* int)
      VkFramebufferAttachmentsCreateInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkFramebufferAttachmentsCreateInfoKHR
      (void* uint32_t VkFramebufferAttachmentImageInfoKHR*)
      VkFramebufferAttachmentsCreateInfoKHR*
      "VkFramebufferAttachmentsCreateInfoKHR *framebufferattachmentscreateinfokhr = malloc(sizeof(VkFramebufferAttachmentsCreateInfoKHR));
framebufferattachmentscreateinfokhr->sType=VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR;
framebufferattachmentscreateinfokhr->pNext=___arg1;
framebufferattachmentscreateinfokhr->attachmentImageInfoCount=___arg2;
framebufferattachmentscreateinfokhr->pAttachmentImageInfos=___arg3;
___return (framebufferattachmentscreateinfokhr);"))
(begin-ffi
   (make-VkRenderPassAttachmentBeginInfoKHR
      ptr->VkRenderPassAttachmentBeginInfoKHR
      ref-VkRenderPassAttachmentBeginInfoKHR
      make-VkRenderPassAttachmentBeginInfoKHR*
      VkRenderPassAttachmentBeginInfoKHRpAttachments
      VkRenderPassAttachmentBeginInfoKHRattachmentCount
      VkRenderPassAttachmentBeginInfoKHRpNext
      VkRenderPassAttachmentBeginInfoKHRsType
      VkRenderPassAttachmentBeginInfoKHR
      VkRenderPassAttachmentBeginInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkRenderPassAttachmentBeginInfoKHR
      (struct "VkRenderPassAttachmentBeginInfoKHR"))
   (c-define-type
      VkRenderPassAttachmentBeginInfoKHR*
      (pointer VkRenderPassAttachmentBeginInfoKHR))
   (define-c-lambda
      VkRenderPassAttachmentBeginInfoKHRsType
      (VkRenderPassAttachmentBeginInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkRenderPassAttachmentBeginInfoKHRpNext
      (VkRenderPassAttachmentBeginInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkRenderPassAttachmentBeginInfoKHRattachmentCount
      (VkRenderPassAttachmentBeginInfoKHR*)
      uint32_t
      "___return (___arg1->attachmentCount);")
   (define-c-lambda
      VkRenderPassAttachmentBeginInfoKHRpAttachments
      (VkRenderPassAttachmentBeginInfoKHR*)
      VkImageView*
      "___return (___arg1->pAttachments);")
   (define-c-lambda
      make-VkRenderPassAttachmentBeginInfoKHR*
      (int)
      VkRenderPassAttachmentBeginInfoKHR*
      "VkRenderPassAttachmentBeginInfoKHR* vkrenderpassattachmentbegininfokhr = malloc(___arg1 * sizeof(VkRenderPassAttachmentBeginInfoKHR));
      ___return (vkrenderpassattachmentbegininfokhr);")
   (define-c-lambda
      ref-VkRenderPassAttachmentBeginInfoKHR
      (VkRenderPassAttachmentBeginInfoKHR* int)
      VkRenderPassAttachmentBeginInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkRenderPassAttachmentBeginInfoKHR
      (void* uint32_t VkImageView*)
      VkRenderPassAttachmentBeginInfoKHR*
      "VkRenderPassAttachmentBeginInfoKHR *renderpassattachmentbegininfokhr = malloc(sizeof(VkRenderPassAttachmentBeginInfoKHR));
renderpassattachmentbegininfokhr->sType=VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR;
renderpassattachmentbegininfokhr->pNext=___arg1;
renderpassattachmentbegininfokhr->attachmentCount=___arg2;
renderpassattachmentbegininfokhr->pAttachments=___arg3;
___return (renderpassattachmentbegininfokhr);"))
(begin-ffi
   (make-VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
      ptr->VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
      ref-VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
      make-VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTtextureCompressionASTC_HDR
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTpNext
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTsType
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
      (struct "VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*
      (pointer VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTsType
      (VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTpNext
      (VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTtextureCompressionASTC_HDR
      (VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*)
      VkBool32
      "___return (___arg1->textureCompressionASTC_HDR);")
   (define-c-lambda
      make-VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*
      (int)
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*
      "VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT* vkphysicaldevicetexturecompressionastchdrfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT));
      ___return (vkphysicaldevicetexturecompressionastchdrfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
      (VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT* int)
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
      ((pointer VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT))
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*
      "VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT *physicaldevicetexturecompressionastchdrfeaturesext = malloc(sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT));
physicaldevicetexturecompressionastchdrfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT;
physicaldevicetexturecompressionastchdrfeaturesext->pNext=___arg1;
physicaldevicetexturecompressionastchdrfeaturesext->textureCompressionASTC_HDR=___arg2;
___return (physicaldevicetexturecompressionastchdrfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceCooperativeMatrixFeaturesNV
      ptr->VkPhysicalDeviceCooperativeMatrixFeaturesNV
      ref-VkPhysicalDeviceCooperativeMatrixFeaturesNV
      make-VkPhysicalDeviceCooperativeMatrixFeaturesNV*
      VkPhysicalDeviceCooperativeMatrixFeaturesNVcooperativeMatrixRobustBufferAccess
      VkPhysicalDeviceCooperativeMatrixFeaturesNVcooperativeMatrix
      VkPhysicalDeviceCooperativeMatrixFeaturesNVpNext
      VkPhysicalDeviceCooperativeMatrixFeaturesNVsType
      VkPhysicalDeviceCooperativeMatrixFeaturesNV
      VkPhysicalDeviceCooperativeMatrixFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceCooperativeMatrixFeaturesNV
      (struct "VkPhysicalDeviceCooperativeMatrixFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceCooperativeMatrixFeaturesNV*
      (pointer VkPhysicalDeviceCooperativeMatrixFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceCooperativeMatrixFeaturesNVsType
      (VkPhysicalDeviceCooperativeMatrixFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceCooperativeMatrixFeaturesNVpNext
      (VkPhysicalDeviceCooperativeMatrixFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceCooperativeMatrixFeaturesNVcooperativeMatrix
      (VkPhysicalDeviceCooperativeMatrixFeaturesNV*)
      VkBool32
      "___return (___arg1->cooperativeMatrix);")
   (define-c-lambda
      VkPhysicalDeviceCooperativeMatrixFeaturesNVcooperativeMatrixRobustBufferAccess
      (VkPhysicalDeviceCooperativeMatrixFeaturesNV*)
      VkBool32
      "___return (___arg1->cooperativeMatrixRobustBufferAccess);")
   (define-c-lambda
      make-VkPhysicalDeviceCooperativeMatrixFeaturesNV*
      (int)
      VkPhysicalDeviceCooperativeMatrixFeaturesNV*
      "VkPhysicalDeviceCooperativeMatrixFeaturesNV* vkphysicaldevicecooperativematrixfeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV));
      ___return (vkphysicaldevicecooperativematrixfeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceCooperativeMatrixFeaturesNV
      (VkPhysicalDeviceCooperativeMatrixFeaturesNV* int)
      VkPhysicalDeviceCooperativeMatrixFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceCooperativeMatrixFeaturesNV
      ((pointer VkPhysicalDeviceCooperativeMatrixFeaturesNV))
      VkPhysicalDeviceCooperativeMatrixFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceCooperativeMatrixFeaturesNV
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceCooperativeMatrixFeaturesNV*
      "VkPhysicalDeviceCooperativeMatrixFeaturesNV *physicaldevicecooperativematrixfeaturesnv = malloc(sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV));
physicaldevicecooperativematrixfeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
physicaldevicecooperativematrixfeaturesnv->pNext=___arg1;
physicaldevicecooperativematrixfeaturesnv->cooperativeMatrix=___arg2;
physicaldevicecooperativematrixfeaturesnv->cooperativeMatrixRobustBufferAccess=___arg3;
___return (physicaldevicecooperativematrixfeaturesnv);"))
(begin-ffi
   (make-VkPhysicalDeviceCooperativeMatrixPropertiesNV
      ptr->VkPhysicalDeviceCooperativeMatrixPropertiesNV
      ref-VkPhysicalDeviceCooperativeMatrixPropertiesNV
      make-VkPhysicalDeviceCooperativeMatrixPropertiesNV*
      VkPhysicalDeviceCooperativeMatrixPropertiesNVcooperativeMatrixSupportedStages
      VkPhysicalDeviceCooperativeMatrixPropertiesNVpNext
      VkPhysicalDeviceCooperativeMatrixPropertiesNVsType
      VkPhysicalDeviceCooperativeMatrixPropertiesNV
      VkPhysicalDeviceCooperativeMatrixPropertiesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceCooperativeMatrixPropertiesNV
      (struct "VkPhysicalDeviceCooperativeMatrixPropertiesNV"))
   (c-define-type
      VkPhysicalDeviceCooperativeMatrixPropertiesNV*
      (pointer VkPhysicalDeviceCooperativeMatrixPropertiesNV))
   (define-c-lambda
      VkPhysicalDeviceCooperativeMatrixPropertiesNVsType
      (VkPhysicalDeviceCooperativeMatrixPropertiesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceCooperativeMatrixPropertiesNVpNext
      (VkPhysicalDeviceCooperativeMatrixPropertiesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceCooperativeMatrixPropertiesNVcooperativeMatrixSupportedStages
      (VkPhysicalDeviceCooperativeMatrixPropertiesNV*)
      VkShaderStageFlags
      "___return (___arg1->cooperativeMatrixSupportedStages);")
   (define-c-lambda
      make-VkPhysicalDeviceCooperativeMatrixPropertiesNV*
      (int)
      VkPhysicalDeviceCooperativeMatrixPropertiesNV*
      "VkPhysicalDeviceCooperativeMatrixPropertiesNV* vkphysicaldevicecooperativematrixpropertiesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV));
      ___return (vkphysicaldevicecooperativematrixpropertiesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceCooperativeMatrixPropertiesNV
      (VkPhysicalDeviceCooperativeMatrixPropertiesNV* int)
      VkPhysicalDeviceCooperativeMatrixPropertiesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceCooperativeMatrixPropertiesNV
      ((pointer VkPhysicalDeviceCooperativeMatrixPropertiesNV))
      VkPhysicalDeviceCooperativeMatrixPropertiesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceCooperativeMatrixPropertiesNV
      (void* VkShaderStageFlags)
      VkPhysicalDeviceCooperativeMatrixPropertiesNV*
      "VkPhysicalDeviceCooperativeMatrixPropertiesNV *physicaldevicecooperativematrixpropertiesnv = malloc(sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV));
physicaldevicecooperativematrixpropertiesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV;
physicaldevicecooperativematrixpropertiesnv->pNext=___arg1;
physicaldevicecooperativematrixpropertiesnv->cooperativeMatrixSupportedStages=___arg2;
___return (physicaldevicecooperativematrixpropertiesnv);"))
(begin-ffi
   (make-VkCooperativeMatrixPropertiesNV
      ptr->VkCooperativeMatrixPropertiesNV
      ref-VkCooperativeMatrixPropertiesNV
      make-VkCooperativeMatrixPropertiesNV*
      VkCooperativeMatrixPropertiesNVscope
      VkCooperativeMatrixPropertiesNVDType
      VkCooperativeMatrixPropertiesNVCType
      VkCooperativeMatrixPropertiesNVBType
      VkCooperativeMatrixPropertiesNVAType
      VkCooperativeMatrixPropertiesNVKSize
      VkCooperativeMatrixPropertiesNVNSize
      VkCooperativeMatrixPropertiesNVMSize
      VkCooperativeMatrixPropertiesNVpNext
      VkCooperativeMatrixPropertiesNVsType
      VkCooperativeMatrixPropertiesNV
      VkCooperativeMatrixPropertiesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkCooperativeMatrixPropertiesNV
      (struct "VkCooperativeMatrixPropertiesNV"))
   (c-define-type
      VkCooperativeMatrixPropertiesNV*
      (pointer VkCooperativeMatrixPropertiesNV))
   (define-c-lambda
      VkCooperativeMatrixPropertiesNVsType
      (VkCooperativeMatrixPropertiesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkCooperativeMatrixPropertiesNVpNext
      (VkCooperativeMatrixPropertiesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkCooperativeMatrixPropertiesNVMSize
      (VkCooperativeMatrixPropertiesNV*)
      uint32_t
      "___return (___arg1->MSize);")
   (define-c-lambda
      VkCooperativeMatrixPropertiesNVNSize
      (VkCooperativeMatrixPropertiesNV*)
      uint32_t
      "___return (___arg1->NSize);")
   (define-c-lambda
      VkCooperativeMatrixPropertiesNVKSize
      (VkCooperativeMatrixPropertiesNV*)
      uint32_t
      "___return (___arg1->KSize);")
   (define-c-lambda
      VkCooperativeMatrixPropertiesNVAType
      (VkCooperativeMatrixPropertiesNV*)
      VkComponentTypeNV
      "___return (___arg1->AType);")
   (define-c-lambda
      VkCooperativeMatrixPropertiesNVBType
      (VkCooperativeMatrixPropertiesNV*)
      VkComponentTypeNV
      "___return (___arg1->BType);")
   (define-c-lambda
      VkCooperativeMatrixPropertiesNVCType
      (VkCooperativeMatrixPropertiesNV*)
      VkComponentTypeNV
      "___return (___arg1->CType);")
   (define-c-lambda
      VkCooperativeMatrixPropertiesNVDType
      (VkCooperativeMatrixPropertiesNV*)
      VkComponentTypeNV
      "___return (___arg1->DType);")
   (define-c-lambda
      VkCooperativeMatrixPropertiesNVscope
      (VkCooperativeMatrixPropertiesNV*)
      VkScopeNV
      "___return (___arg1->scope);")
   (define-c-lambda
      make-VkCooperativeMatrixPropertiesNV*
      (int)
      VkCooperativeMatrixPropertiesNV*
      "VkCooperativeMatrixPropertiesNV* vkcooperativematrixpropertiesnv = malloc(___arg1 * sizeof(VkCooperativeMatrixPropertiesNV));
      ___return (vkcooperativematrixpropertiesnv);")
   (define-c-lambda
      ref-VkCooperativeMatrixPropertiesNV
      (VkCooperativeMatrixPropertiesNV* int)
      VkCooperativeMatrixPropertiesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkCooperativeMatrixPropertiesNV
      ((pointer VkCooperativeMatrixPropertiesNV))
      VkCooperativeMatrixPropertiesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkCooperativeMatrixPropertiesNV
      (void*
         uint32_t
         uint32_t
         uint32_t
         VkComponentTypeNV
         VkComponentTypeNV
         VkComponentTypeNV
         VkComponentTypeNV
         VkScopeNV)
      VkCooperativeMatrixPropertiesNV*
      "VkCooperativeMatrixPropertiesNV *cooperativematrixpropertiesnv = malloc(sizeof(VkCooperativeMatrixPropertiesNV));
cooperativematrixpropertiesnv->sType=VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV;
cooperativematrixpropertiesnv->pNext=___arg1;
cooperativematrixpropertiesnv->MSize=___arg2;
cooperativematrixpropertiesnv->NSize=___arg3;
cooperativematrixpropertiesnv->KSize=___arg4;
cooperativematrixpropertiesnv->AType=___arg5;
cooperativematrixpropertiesnv->BType=___arg6;
cooperativematrixpropertiesnv->CType=___arg7;
cooperativematrixpropertiesnv->DType=___arg8;
cooperativematrixpropertiesnv->scope=___arg9;
___return (cooperativematrixpropertiesnv);"))
(begin-ffi
   (make-VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
      ptr->VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
      ref-VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
      make-VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXTycbcrImageArrays
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXTpNext
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXTsType
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
      (struct "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*
      (pointer VkPhysicalDeviceYcbcrImageArraysFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXTsType
      (VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXTpNext
      (VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXTycbcrImageArrays
      (VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*)
      VkBool32
      "___return (___arg1->ycbcrImageArrays);")
   (define-c-lambda
      make-VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*
      (int)
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*
      "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT* vkphysicaldeviceycbcrimagearraysfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT));
      ___return (vkphysicaldeviceycbcrimagearraysfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
      (VkPhysicalDeviceYcbcrImageArraysFeaturesEXT* int)
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
      ((pointer VkPhysicalDeviceYcbcrImageArraysFeaturesEXT))
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*
      "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT *physicaldeviceycbcrimagearraysfeaturesext = malloc(sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT));
physicaldeviceycbcrimagearraysfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
physicaldeviceycbcrimagearraysfeaturesext->pNext=___arg1;
physicaldeviceycbcrimagearraysfeaturesext->ycbcrImageArrays=___arg2;
___return (physicaldeviceycbcrimagearraysfeaturesext);"))
(begin-ffi
   (make-VkImageViewHandleInfoNVX
      ptr->VkImageViewHandleInfoNVX
      ref-VkImageViewHandleInfoNVX
      make-VkImageViewHandleInfoNVX*
      VkImageViewHandleInfoNVXsampler
      VkImageViewHandleInfoNVXdescriptorType
      VkImageViewHandleInfoNVXimageView
      VkImageViewHandleInfoNVXpNext
      VkImageViewHandleInfoNVXsType
      VkImageViewHandleInfoNVX
      VkImageViewHandleInfoNVX*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkImageViewHandleInfoNVX (struct "VkImageViewHandleInfoNVX"))
   (c-define-type VkImageViewHandleInfoNVX* (pointer VkImageViewHandleInfoNVX))
   (define-c-lambda
      VkImageViewHandleInfoNVXsType
      (VkImageViewHandleInfoNVX*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkImageViewHandleInfoNVXpNext
      (VkImageViewHandleInfoNVX*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkImageViewHandleInfoNVXimageView
      (VkImageViewHandleInfoNVX*)
      VkImageView
      "___return (___arg1->imageView);")
   (define-c-lambda
      VkImageViewHandleInfoNVXdescriptorType
      (VkImageViewHandleInfoNVX*)
      VkDescriptorType
      "___return (___arg1->descriptorType);")
   (define-c-lambda
      VkImageViewHandleInfoNVXsampler
      (VkImageViewHandleInfoNVX*)
      VkSampler
      "___return (___arg1->sampler);")
   (define-c-lambda
      make-VkImageViewHandleInfoNVX*
      (int)
      VkImageViewHandleInfoNVX*
      "VkImageViewHandleInfoNVX* vkimageviewhandleinfonvx = malloc(___arg1 * sizeof(VkImageViewHandleInfoNVX));
      ___return (vkimageviewhandleinfonvx);")
   (define-c-lambda
      ref-VkImageViewHandleInfoNVX
      (VkImageViewHandleInfoNVX* int)
      VkImageViewHandleInfoNVX*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkImageViewHandleInfoNVX
      ((pointer VkImageViewHandleInfoNVX))
      VkImageViewHandleInfoNVX
      "___return(*___arg1);")
   (define-c-lambda
      make-VkImageViewHandleInfoNVX
      (void* VkImageView VkDescriptorType VkSampler)
      VkImageViewHandleInfoNVX*
      "VkImageViewHandleInfoNVX *imageviewhandleinfonvx = malloc(sizeof(VkImageViewHandleInfoNVX));
imageviewhandleinfonvx->sType=VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX;
imageviewhandleinfonvx->pNext=___arg1;
imageviewhandleinfonvx->imageView=___arg2;
imageviewhandleinfonvx->descriptorType=___arg3;
imageviewhandleinfonvx->sampler=___arg4;
___return (imageviewhandleinfonvx);"))
(begin-ffi
   (make-VkPipelineCreationFeedbackEXT
      ptr->VkPipelineCreationFeedbackEXT
      ref-VkPipelineCreationFeedbackEXT
      make-VkPipelineCreationFeedbackEXT*
      VkPipelineCreationFeedbackEXTduration
      VkPipelineCreationFeedbackEXTflags
      VkPipelineCreationFeedbackEXT
      VkPipelineCreationFeedbackEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPipelineCreationFeedbackEXT (struct "VkPipelineCreationFeedbackEXT"))
   (c-define-type VkPipelineCreationFeedbackEXT* (pointer VkPipelineCreationFeedbackEXT))
   (define-c-lambda
      VkPipelineCreationFeedbackEXTflags
      (VkPipelineCreationFeedbackEXT*)
      VkPipelineCreationFeedbackFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineCreationFeedbackEXTduration
      (VkPipelineCreationFeedbackEXT*)
      uint64_t
      "___return (___arg1->duration);")
   (define-c-lambda
      make-VkPipelineCreationFeedbackEXT*
      (int)
      VkPipelineCreationFeedbackEXT*
      "VkPipelineCreationFeedbackEXT* vkpipelinecreationfeedbackext = malloc(___arg1 * sizeof(VkPipelineCreationFeedbackEXT));
      ___return (vkpipelinecreationfeedbackext);")
   (define-c-lambda
      ref-VkPipelineCreationFeedbackEXT
      (VkPipelineCreationFeedbackEXT* int)
      VkPipelineCreationFeedbackEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineCreationFeedbackEXT
      ((pointer VkPipelineCreationFeedbackEXT))
      VkPipelineCreationFeedbackEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineCreationFeedbackEXT
      (VkPipelineCreationFeedbackFlagsEXT uint64_t)
      VkPipelineCreationFeedbackEXT*
      "VkPipelineCreationFeedbackEXT *pipelinecreationfeedbackext = malloc(sizeof(VkPipelineCreationFeedbackEXT));
pipelinecreationfeedbackext->flags=___arg1;
pipelinecreationfeedbackext->duration=___arg2;
___return (pipelinecreationfeedbackext);"))
(begin-ffi
   (make-VkPipelineCreationFeedbackCreateInfoEXT
      ptr->VkPipelineCreationFeedbackCreateInfoEXT
      ref-VkPipelineCreationFeedbackCreateInfoEXT
      make-VkPipelineCreationFeedbackCreateInfoEXT*
      VkPipelineCreationFeedbackCreateInfoEXTpPipelineStageCreationFeedbacks
      VkPipelineCreationFeedbackCreateInfoEXTpipelineStageCreationFeedbackCount
      VkPipelineCreationFeedbackCreateInfoEXTpPipelineCreationFeedback
      VkPipelineCreationFeedbackCreateInfoEXTpNext
      VkPipelineCreationFeedbackCreateInfoEXTsType
      VkPipelineCreationFeedbackCreateInfoEXT
      VkPipelineCreationFeedbackCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineCreationFeedbackCreateInfoEXT
      (struct "VkPipelineCreationFeedbackCreateInfoEXT"))
   (c-define-type
      VkPipelineCreationFeedbackCreateInfoEXT*
      (pointer VkPipelineCreationFeedbackCreateInfoEXT))
   (define-c-lambda
      VkPipelineCreationFeedbackCreateInfoEXTsType
      (VkPipelineCreationFeedbackCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineCreationFeedbackCreateInfoEXTpNext
      (VkPipelineCreationFeedbackCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineCreationFeedbackCreateInfoEXTpPipelineCreationFeedback
      (VkPipelineCreationFeedbackCreateInfoEXT*)
      VkPipelineCreationFeedbackEXT*
      "___return (___arg1->pPipelineCreationFeedback);")
   (define-c-lambda
      VkPipelineCreationFeedbackCreateInfoEXTpipelineStageCreationFeedbackCount
      (VkPipelineCreationFeedbackCreateInfoEXT*)
      uint32_t
      "___return (___arg1->pipelineStageCreationFeedbackCount);")
   (define-c-lambda
      VkPipelineCreationFeedbackCreateInfoEXTpPipelineStageCreationFeedbacks
      (VkPipelineCreationFeedbackCreateInfoEXT*)
      VkPipelineCreationFeedbackEXT*
      "___return (___arg1->pPipelineStageCreationFeedbacks);")
   (define-c-lambda
      make-VkPipelineCreationFeedbackCreateInfoEXT*
      (int)
      VkPipelineCreationFeedbackCreateInfoEXT*
      "VkPipelineCreationFeedbackCreateInfoEXT* vkpipelinecreationfeedbackcreateinfoext = malloc(___arg1 * sizeof(VkPipelineCreationFeedbackCreateInfoEXT));
      ___return (vkpipelinecreationfeedbackcreateinfoext);")
   (define-c-lambda
      ref-VkPipelineCreationFeedbackCreateInfoEXT
      (VkPipelineCreationFeedbackCreateInfoEXT* int)
      VkPipelineCreationFeedbackCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineCreationFeedbackCreateInfoEXT
      ((pointer VkPipelineCreationFeedbackCreateInfoEXT))
      VkPipelineCreationFeedbackCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineCreationFeedbackCreateInfoEXT
      (void* VkPipelineCreationFeedbackEXT* uint32_t VkPipelineCreationFeedbackEXT*)
      VkPipelineCreationFeedbackCreateInfoEXT*
      "VkPipelineCreationFeedbackCreateInfoEXT *pipelinecreationfeedbackcreateinfoext = malloc(sizeof(VkPipelineCreationFeedbackCreateInfoEXT));
pipelinecreationfeedbackcreateinfoext->sType=VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT;
pipelinecreationfeedbackcreateinfoext->pNext=___arg1;
pipelinecreationfeedbackcreateinfoext->pPipelineCreationFeedback=___arg2;
pipelinecreationfeedbackcreateinfoext->pipelineStageCreationFeedbackCount=___arg3;
pipelinecreationfeedbackcreateinfoext->pPipelineStageCreationFeedbacks=___arg4;
___return (pipelinecreationfeedbackcreateinfoext);"))
(begin-ffi
   (make-VkHeadlessSurfaceCreateInfoEXT
      ptr->VkHeadlessSurfaceCreateInfoEXT
      ref-VkHeadlessSurfaceCreateInfoEXT
      make-VkHeadlessSurfaceCreateInfoEXT*
      VkHeadlessSurfaceCreateInfoEXTflags
      VkHeadlessSurfaceCreateInfoEXTpNext
      VkHeadlessSurfaceCreateInfoEXTsType
      VkHeadlessSurfaceCreateInfoEXT
      VkHeadlessSurfaceCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkHeadlessSurfaceCreateInfoEXT
      (struct "VkHeadlessSurfaceCreateInfoEXT"))
   (c-define-type
      VkHeadlessSurfaceCreateInfoEXT*
      (pointer VkHeadlessSurfaceCreateInfoEXT))
   (define-c-lambda
      VkHeadlessSurfaceCreateInfoEXTsType
      (VkHeadlessSurfaceCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkHeadlessSurfaceCreateInfoEXTpNext
      (VkHeadlessSurfaceCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkHeadlessSurfaceCreateInfoEXTflags
      (VkHeadlessSurfaceCreateInfoEXT*)
      VkHeadlessSurfaceCreateFlagsEXT
      "___return (___arg1->flags);")
   (define-c-lambda
      make-VkHeadlessSurfaceCreateInfoEXT*
      (int)
      VkHeadlessSurfaceCreateInfoEXT*
      "VkHeadlessSurfaceCreateInfoEXT* vkheadlesssurfacecreateinfoext = malloc(___arg1 * sizeof(VkHeadlessSurfaceCreateInfoEXT));
      ___return (vkheadlesssurfacecreateinfoext);")
   (define-c-lambda
      ref-VkHeadlessSurfaceCreateInfoEXT
      (VkHeadlessSurfaceCreateInfoEXT* int)
      VkHeadlessSurfaceCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkHeadlessSurfaceCreateInfoEXT
      ((pointer VkHeadlessSurfaceCreateInfoEXT))
      VkHeadlessSurfaceCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkHeadlessSurfaceCreateInfoEXT
      (void* VkHeadlessSurfaceCreateFlagsEXT)
      VkHeadlessSurfaceCreateInfoEXT*
      "VkHeadlessSurfaceCreateInfoEXT *headlesssurfacecreateinfoext = malloc(sizeof(VkHeadlessSurfaceCreateInfoEXT));
headlesssurfacecreateinfoext->sType=VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT;
headlesssurfacecreateinfoext->pNext=___arg1;
headlesssurfacecreateinfoext->flags=___arg2;
___return (headlesssurfacecreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceCoverageReductionModeFeaturesNV
      ptr->VkPhysicalDeviceCoverageReductionModeFeaturesNV
      ref-VkPhysicalDeviceCoverageReductionModeFeaturesNV
      make-VkPhysicalDeviceCoverageReductionModeFeaturesNV*
      VkPhysicalDeviceCoverageReductionModeFeaturesNVcoverageReductionMode
      VkPhysicalDeviceCoverageReductionModeFeaturesNVpNext
      VkPhysicalDeviceCoverageReductionModeFeaturesNVsType
      VkPhysicalDeviceCoverageReductionModeFeaturesNV
      VkPhysicalDeviceCoverageReductionModeFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceCoverageReductionModeFeaturesNV
      (struct "VkPhysicalDeviceCoverageReductionModeFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceCoverageReductionModeFeaturesNV*
      (pointer VkPhysicalDeviceCoverageReductionModeFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceCoverageReductionModeFeaturesNVsType
      (VkPhysicalDeviceCoverageReductionModeFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceCoverageReductionModeFeaturesNVpNext
      (VkPhysicalDeviceCoverageReductionModeFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceCoverageReductionModeFeaturesNVcoverageReductionMode
      (VkPhysicalDeviceCoverageReductionModeFeaturesNV*)
      VkBool32
      "___return (___arg1->coverageReductionMode);")
   (define-c-lambda
      make-VkPhysicalDeviceCoverageReductionModeFeaturesNV*
      (int)
      VkPhysicalDeviceCoverageReductionModeFeaturesNV*
      "VkPhysicalDeviceCoverageReductionModeFeaturesNV* vkphysicaldevicecoveragereductionmodefeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV));
      ___return (vkphysicaldevicecoveragereductionmodefeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceCoverageReductionModeFeaturesNV
      (VkPhysicalDeviceCoverageReductionModeFeaturesNV* int)
      VkPhysicalDeviceCoverageReductionModeFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceCoverageReductionModeFeaturesNV
      ((pointer VkPhysicalDeviceCoverageReductionModeFeaturesNV))
      VkPhysicalDeviceCoverageReductionModeFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceCoverageReductionModeFeaturesNV
      (void* VkBool32)
      VkPhysicalDeviceCoverageReductionModeFeaturesNV*
      "VkPhysicalDeviceCoverageReductionModeFeaturesNV *physicaldevicecoveragereductionmodefeaturesnv = malloc(sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV));
physicaldevicecoveragereductionmodefeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
physicaldevicecoveragereductionmodefeaturesnv->pNext=___arg1;
physicaldevicecoveragereductionmodefeaturesnv->coverageReductionMode=___arg2;
___return (physicaldevicecoveragereductionmodefeaturesnv);"))
(begin-ffi
   (make-VkPipelineCoverageReductionStateCreateInfoNV
      ptr->VkPipelineCoverageReductionStateCreateInfoNV
      ref-VkPipelineCoverageReductionStateCreateInfoNV
      make-VkPipelineCoverageReductionStateCreateInfoNV*
      VkPipelineCoverageReductionStateCreateInfoNVcoverageReductionMode
      VkPipelineCoverageReductionStateCreateInfoNVflags
      VkPipelineCoverageReductionStateCreateInfoNVpNext
      VkPipelineCoverageReductionStateCreateInfoNVsType
      VkPipelineCoverageReductionStateCreateInfoNV
      VkPipelineCoverageReductionStateCreateInfoNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineCoverageReductionStateCreateInfoNV
      (struct "VkPipelineCoverageReductionStateCreateInfoNV"))
   (c-define-type
      VkPipelineCoverageReductionStateCreateInfoNV*
      (pointer VkPipelineCoverageReductionStateCreateInfoNV))
   (define-c-lambda
      VkPipelineCoverageReductionStateCreateInfoNVsType
      (VkPipelineCoverageReductionStateCreateInfoNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineCoverageReductionStateCreateInfoNVpNext
      (VkPipelineCoverageReductionStateCreateInfoNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineCoverageReductionStateCreateInfoNVflags
      (VkPipelineCoverageReductionStateCreateInfoNV*)
      VkPipelineCoverageReductionStateCreateFlagsNV
      "___return (___arg1->flags);")
   (define-c-lambda
      VkPipelineCoverageReductionStateCreateInfoNVcoverageReductionMode
      (VkPipelineCoverageReductionStateCreateInfoNV*)
      VkCoverageReductionModeNV
      "___return (___arg1->coverageReductionMode);")
   (define-c-lambda
      make-VkPipelineCoverageReductionStateCreateInfoNV*
      (int)
      VkPipelineCoverageReductionStateCreateInfoNV*
      "VkPipelineCoverageReductionStateCreateInfoNV* vkpipelinecoveragereductionstatecreateinfonv = malloc(___arg1 * sizeof(VkPipelineCoverageReductionStateCreateInfoNV));
      ___return (vkpipelinecoveragereductionstatecreateinfonv);")
   (define-c-lambda
      ref-VkPipelineCoverageReductionStateCreateInfoNV
      (VkPipelineCoverageReductionStateCreateInfoNV* int)
      VkPipelineCoverageReductionStateCreateInfoNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineCoverageReductionStateCreateInfoNV
      ((pointer VkPipelineCoverageReductionStateCreateInfoNV))
      VkPipelineCoverageReductionStateCreateInfoNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineCoverageReductionStateCreateInfoNV
      (void* VkPipelineCoverageReductionStateCreateFlagsNV VkCoverageReductionModeNV)
      VkPipelineCoverageReductionStateCreateInfoNV*
      "VkPipelineCoverageReductionStateCreateInfoNV *pipelinecoveragereductionstatecreateinfonv = malloc(sizeof(VkPipelineCoverageReductionStateCreateInfoNV));
pipelinecoveragereductionstatecreateinfonv->sType=VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
pipelinecoveragereductionstatecreateinfonv->pNext=___arg1;
pipelinecoveragereductionstatecreateinfonv->flags=___arg2;
pipelinecoveragereductionstatecreateinfonv->coverageReductionMode=___arg3;
___return (pipelinecoveragereductionstatecreateinfonv);"))
(begin-ffi
   (make-VkFramebufferMixedSamplesCombinationNV
      ptr->VkFramebufferMixedSamplesCombinationNV
      ref-VkFramebufferMixedSamplesCombinationNV
      make-VkFramebufferMixedSamplesCombinationNV*
      VkFramebufferMixedSamplesCombinationNVcolorSamples
      VkFramebufferMixedSamplesCombinationNVdepthStencilSamples
      VkFramebufferMixedSamplesCombinationNVrasterizationSamples
      VkFramebufferMixedSamplesCombinationNVcoverageReductionMode
      VkFramebufferMixedSamplesCombinationNVpNext
      VkFramebufferMixedSamplesCombinationNVsType
      VkFramebufferMixedSamplesCombinationNV
      VkFramebufferMixedSamplesCombinationNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkFramebufferMixedSamplesCombinationNV
      (struct "VkFramebufferMixedSamplesCombinationNV"))
   (c-define-type
      VkFramebufferMixedSamplesCombinationNV*
      (pointer VkFramebufferMixedSamplesCombinationNV))
   (define-c-lambda
      VkFramebufferMixedSamplesCombinationNVsType
      (VkFramebufferMixedSamplesCombinationNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkFramebufferMixedSamplesCombinationNVpNext
      (VkFramebufferMixedSamplesCombinationNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkFramebufferMixedSamplesCombinationNVcoverageReductionMode
      (VkFramebufferMixedSamplesCombinationNV*)
      VkCoverageReductionModeNV
      "___return (___arg1->coverageReductionMode);")
   (define-c-lambda
      VkFramebufferMixedSamplesCombinationNVrasterizationSamples
      (VkFramebufferMixedSamplesCombinationNV*)
      VkSampleCountFlagBits
      "___return (___arg1->rasterizationSamples);")
   (define-c-lambda
      VkFramebufferMixedSamplesCombinationNVdepthStencilSamples
      (VkFramebufferMixedSamplesCombinationNV*)
      VkSampleCountFlags
      "___return (___arg1->depthStencilSamples);")
   (define-c-lambda
      VkFramebufferMixedSamplesCombinationNVcolorSamples
      (VkFramebufferMixedSamplesCombinationNV*)
      VkSampleCountFlags
      "___return (___arg1->colorSamples);")
   (define-c-lambda
      make-VkFramebufferMixedSamplesCombinationNV*
      (int)
      VkFramebufferMixedSamplesCombinationNV*
      "VkFramebufferMixedSamplesCombinationNV* vkframebuffermixedsamplescombinationnv = malloc(___arg1 * sizeof(VkFramebufferMixedSamplesCombinationNV));
      ___return (vkframebuffermixedsamplescombinationnv);")
   (define-c-lambda
      ref-VkFramebufferMixedSamplesCombinationNV
      (VkFramebufferMixedSamplesCombinationNV* int)
      VkFramebufferMixedSamplesCombinationNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkFramebufferMixedSamplesCombinationNV
      ((pointer VkFramebufferMixedSamplesCombinationNV))
      VkFramebufferMixedSamplesCombinationNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkFramebufferMixedSamplesCombinationNV
      (void*
         VkCoverageReductionModeNV
         VkSampleCountFlagBits
         VkSampleCountFlags
         VkSampleCountFlags)
      VkFramebufferMixedSamplesCombinationNV*
      "VkFramebufferMixedSamplesCombinationNV *framebuffermixedsamplescombinationnv = malloc(sizeof(VkFramebufferMixedSamplesCombinationNV));
framebuffermixedsamplescombinationnv->sType=VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV;
framebuffermixedsamplescombinationnv->pNext=___arg1;
framebuffermixedsamplescombinationnv->coverageReductionMode=___arg2;
framebuffermixedsamplescombinationnv->rasterizationSamples=___arg3;
framebuffermixedsamplescombinationnv->depthStencilSamples=___arg4;
framebuffermixedsamplescombinationnv->colorSamples=___arg5;
___return (framebuffermixedsamplescombinationnv);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
      ptr->VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
      ref-VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
      make-VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELshaderIntegerFunctions2
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELpNext
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELsType
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
      (struct "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"))
   (c-define-type
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*
      (pointer VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL))
   (define-c-lambda
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELsType
      (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELpNext
      (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELshaderIntegerFunctions2
      (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*)
      VkBool32
      "___return (___arg1->shaderIntegerFunctions2);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*
      (int)
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*
      "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL* vkphysicaldeviceshaderintegerfunctions2featuresintel = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL));
      ___return (vkphysicaldeviceshaderintegerfunctions2featuresintel);")
   (define-c-lambda
      ref-VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
      (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL* int)
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
      ((pointer VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL))
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
      (void* VkBool32)
      VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*
      "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL *physicaldeviceshaderintegerfunctions2featuresintel = malloc(sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL));
physicaldeviceshaderintegerfunctions2featuresintel->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
physicaldeviceshaderintegerfunctions2featuresintel->pNext=___arg1;
physicaldeviceshaderintegerfunctions2featuresintel->shaderIntegerFunctions2=___arg2;
___return (physicaldeviceshaderintegerfunctions2featuresintel);"))
(begin-ffi
   (make-VkPerformanceValueINTEL
      ptr->VkPerformanceValueINTEL
      ref-VkPerformanceValueINTEL
      make-VkPerformanceValueINTEL*
      VkPerformanceValueINTELdata
      VkPerformanceValueINTELtype
      VkPerformanceValueINTEL
      VkPerformanceValueINTEL*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPerformanceValueINTEL (struct "VkPerformanceValueINTEL"))
   (c-define-type VkPerformanceValueINTEL* (pointer VkPerformanceValueINTEL))
   (define-c-lambda
      VkPerformanceValueINTELtype
      (VkPerformanceValueINTEL*)
      VkPerformanceValueTypeINTEL
      "___return (___arg1->type);")
   (define-c-lambda
      VkPerformanceValueINTELdata
      (VkPerformanceValueINTEL*)
      VkPerformanceValueDataINTEL
      "___return (___arg1->data);")
   (define-c-lambda
      make-VkPerformanceValueINTEL*
      (int)
      VkPerformanceValueINTEL*
      "VkPerformanceValueINTEL* vkperformancevalueintel = malloc(___arg1 * sizeof(VkPerformanceValueINTEL));
      ___return (vkperformancevalueintel);")
   (define-c-lambda
      ref-VkPerformanceValueINTEL
      (VkPerformanceValueINTEL* int)
      VkPerformanceValueINTEL*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPerformanceValueINTEL
      ((pointer VkPerformanceValueINTEL))
      VkPerformanceValueINTEL
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPerformanceValueINTEL
      (VkPerformanceValueTypeINTEL VkPerformanceValueDataINTEL)
      VkPerformanceValueINTEL*
      "VkPerformanceValueINTEL *performancevalueintel = malloc(sizeof(VkPerformanceValueINTEL));
performancevalueintel->type=___arg1;
performancevalueintel->data=___arg2;
___return (performancevalueintel);"))
(begin-ffi
   (make-VkInitializePerformanceApiInfoINTEL
      ptr->VkInitializePerformanceApiInfoINTEL
      ref-VkInitializePerformanceApiInfoINTEL
      make-VkInitializePerformanceApiInfoINTEL*
      VkInitializePerformanceApiInfoINTELpUserData
      VkInitializePerformanceApiInfoINTELpNext
      VkInitializePerformanceApiInfoINTELsType
      VkInitializePerformanceApiInfoINTEL
      VkInitializePerformanceApiInfoINTEL*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkInitializePerformanceApiInfoINTEL
      (struct "VkInitializePerformanceApiInfoINTEL"))
   (c-define-type
      VkInitializePerformanceApiInfoINTEL*
      (pointer VkInitializePerformanceApiInfoINTEL))
   (define-c-lambda
      VkInitializePerformanceApiInfoINTELsType
      (VkInitializePerformanceApiInfoINTEL*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkInitializePerformanceApiInfoINTELpNext
      (VkInitializePerformanceApiInfoINTEL*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkInitializePerformanceApiInfoINTELpUserData
      (VkInitializePerformanceApiInfoINTEL*)
      void*
      "___return (___arg1->pUserData);")
   (define-c-lambda
      make-VkInitializePerformanceApiInfoINTEL*
      (int)
      VkInitializePerformanceApiInfoINTEL*
      "VkInitializePerformanceApiInfoINTEL* vkinitializeperformanceapiinfointel = malloc(___arg1 * sizeof(VkInitializePerformanceApiInfoINTEL));
      ___return (vkinitializeperformanceapiinfointel);")
   (define-c-lambda
      ref-VkInitializePerformanceApiInfoINTEL
      (VkInitializePerformanceApiInfoINTEL* int)
      VkInitializePerformanceApiInfoINTEL*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkInitializePerformanceApiInfoINTEL
      ((pointer VkInitializePerformanceApiInfoINTEL))
      VkInitializePerformanceApiInfoINTEL
      "___return(*___arg1);")
   (define-c-lambda
      make-VkInitializePerformanceApiInfoINTEL
      (void* void*)
      VkInitializePerformanceApiInfoINTEL*
      "VkInitializePerformanceApiInfoINTEL *initializeperformanceapiinfointel = malloc(sizeof(VkInitializePerformanceApiInfoINTEL));
initializeperformanceapiinfointel->sType=VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL;
initializeperformanceapiinfointel->pNext=___arg1;
initializeperformanceapiinfointel->pUserData=___arg2;
___return (initializeperformanceapiinfointel);"))
(begin-ffi
   (make-VkQueryPoolCreateInfoINTEL
      ptr->VkQueryPoolCreateInfoINTEL
      ref-VkQueryPoolCreateInfoINTEL
      make-VkQueryPoolCreateInfoINTEL*
      VkQueryPoolCreateInfoINTELperformanceCountersSampling
      VkQueryPoolCreateInfoINTELpNext
      VkQueryPoolCreateInfoINTELsType
      VkQueryPoolCreateInfoINTEL
      VkQueryPoolCreateInfoINTEL*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkQueryPoolCreateInfoINTEL (struct "VkQueryPoolCreateInfoINTEL"))
   (c-define-type VkQueryPoolCreateInfoINTEL* (pointer VkQueryPoolCreateInfoINTEL))
   (define-c-lambda
      VkQueryPoolCreateInfoINTELsType
      (VkQueryPoolCreateInfoINTEL*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkQueryPoolCreateInfoINTELpNext
      (VkQueryPoolCreateInfoINTEL*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkQueryPoolCreateInfoINTELperformanceCountersSampling
      (VkQueryPoolCreateInfoINTEL*)
      VkQueryPoolSamplingModeINTEL
      "___return (___arg1->performanceCountersSampling);")
   (define-c-lambda
      make-VkQueryPoolCreateInfoINTEL*
      (int)
      VkQueryPoolCreateInfoINTEL*
      "VkQueryPoolCreateInfoINTEL* vkquerypoolcreateinfointel = malloc(___arg1 * sizeof(VkQueryPoolCreateInfoINTEL));
      ___return (vkquerypoolcreateinfointel);")
   (define-c-lambda
      ref-VkQueryPoolCreateInfoINTEL
      (VkQueryPoolCreateInfoINTEL* int)
      VkQueryPoolCreateInfoINTEL*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkQueryPoolCreateInfoINTEL
      ((pointer VkQueryPoolCreateInfoINTEL))
      VkQueryPoolCreateInfoINTEL
      "___return(*___arg1);")
   (define-c-lambda
      make-VkQueryPoolCreateInfoINTEL
      (void* VkQueryPoolSamplingModeINTEL)
      VkQueryPoolCreateInfoINTEL*
      "VkQueryPoolCreateInfoINTEL *querypoolcreateinfointel = malloc(sizeof(VkQueryPoolCreateInfoINTEL));
querypoolcreateinfointel->sType=VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL;
querypoolcreateinfointel->pNext=___arg1;
querypoolcreateinfointel->performanceCountersSampling=___arg2;
___return (querypoolcreateinfointel);"))
(begin-ffi
   (make-VkPerformanceMarkerInfoINTEL
      ptr->VkPerformanceMarkerInfoINTEL
      ref-VkPerformanceMarkerInfoINTEL
      make-VkPerformanceMarkerInfoINTEL*
      VkPerformanceMarkerInfoINTELmarker
      VkPerformanceMarkerInfoINTELpNext
      VkPerformanceMarkerInfoINTELsType
      VkPerformanceMarkerInfoINTEL
      VkPerformanceMarkerInfoINTEL*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPerformanceMarkerInfoINTEL (struct "VkPerformanceMarkerInfoINTEL"))
   (c-define-type VkPerformanceMarkerInfoINTEL* (pointer VkPerformanceMarkerInfoINTEL))
   (define-c-lambda
      VkPerformanceMarkerInfoINTELsType
      (VkPerformanceMarkerInfoINTEL*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPerformanceMarkerInfoINTELpNext
      (VkPerformanceMarkerInfoINTEL*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPerformanceMarkerInfoINTELmarker
      (VkPerformanceMarkerInfoINTEL*)
      uint64_t
      "___return (___arg1->marker);")
   (define-c-lambda
      make-VkPerformanceMarkerInfoINTEL*
      (int)
      VkPerformanceMarkerInfoINTEL*
      "VkPerformanceMarkerInfoINTEL* vkperformancemarkerinfointel = malloc(___arg1 * sizeof(VkPerformanceMarkerInfoINTEL));
      ___return (vkperformancemarkerinfointel);")
   (define-c-lambda
      ref-VkPerformanceMarkerInfoINTEL
      (VkPerformanceMarkerInfoINTEL* int)
      VkPerformanceMarkerInfoINTEL*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPerformanceMarkerInfoINTEL
      ((pointer VkPerformanceMarkerInfoINTEL))
      VkPerformanceMarkerInfoINTEL
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPerformanceMarkerInfoINTEL
      (void* uint64_t)
      VkPerformanceMarkerInfoINTEL*
      "VkPerformanceMarkerInfoINTEL *performancemarkerinfointel = malloc(sizeof(VkPerformanceMarkerInfoINTEL));
performancemarkerinfointel->sType=VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL;
performancemarkerinfointel->pNext=___arg1;
performancemarkerinfointel->marker=___arg2;
___return (performancemarkerinfointel);"))
(begin-ffi
   (make-VkPerformanceStreamMarkerInfoINTEL
      ptr->VkPerformanceStreamMarkerInfoINTEL
      ref-VkPerformanceStreamMarkerInfoINTEL
      make-VkPerformanceStreamMarkerInfoINTEL*
      VkPerformanceStreamMarkerInfoINTELmarker
      VkPerformanceStreamMarkerInfoINTELpNext
      VkPerformanceStreamMarkerInfoINTELsType
      VkPerformanceStreamMarkerInfoINTEL
      VkPerformanceStreamMarkerInfoINTEL*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPerformanceStreamMarkerInfoINTEL
      (struct "VkPerformanceStreamMarkerInfoINTEL"))
   (c-define-type
      VkPerformanceStreamMarkerInfoINTEL*
      (pointer VkPerformanceStreamMarkerInfoINTEL))
   (define-c-lambda
      VkPerformanceStreamMarkerInfoINTELsType
      (VkPerformanceStreamMarkerInfoINTEL*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPerformanceStreamMarkerInfoINTELpNext
      (VkPerformanceStreamMarkerInfoINTEL*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPerformanceStreamMarkerInfoINTELmarker
      (VkPerformanceStreamMarkerInfoINTEL*)
      uint32_t
      "___return (___arg1->marker);")
   (define-c-lambda
      make-VkPerformanceStreamMarkerInfoINTEL*
      (int)
      VkPerformanceStreamMarkerInfoINTEL*
      "VkPerformanceStreamMarkerInfoINTEL* vkperformancestreammarkerinfointel = malloc(___arg1 * sizeof(VkPerformanceStreamMarkerInfoINTEL));
      ___return (vkperformancestreammarkerinfointel);")
   (define-c-lambda
      ref-VkPerformanceStreamMarkerInfoINTEL
      (VkPerformanceStreamMarkerInfoINTEL* int)
      VkPerformanceStreamMarkerInfoINTEL*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPerformanceStreamMarkerInfoINTEL
      ((pointer VkPerformanceStreamMarkerInfoINTEL))
      VkPerformanceStreamMarkerInfoINTEL
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPerformanceStreamMarkerInfoINTEL
      (void* uint32_t)
      VkPerformanceStreamMarkerInfoINTEL*
      "VkPerformanceStreamMarkerInfoINTEL *performancestreammarkerinfointel = malloc(sizeof(VkPerformanceStreamMarkerInfoINTEL));
performancestreammarkerinfointel->sType=VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL;
performancestreammarkerinfointel->pNext=___arg1;
performancestreammarkerinfointel->marker=___arg2;
___return (performancestreammarkerinfointel);"))
(begin-ffi
   (make-VkPerformanceOverrideInfoINTEL
      ptr->VkPerformanceOverrideInfoINTEL
      ref-VkPerformanceOverrideInfoINTEL
      make-VkPerformanceOverrideInfoINTEL*
      VkPerformanceOverrideInfoINTELparameter
      VkPerformanceOverrideInfoINTELenable
      VkPerformanceOverrideInfoINTELtype
      VkPerformanceOverrideInfoINTELpNext
      VkPerformanceOverrideInfoINTELsType
      VkPerformanceOverrideInfoINTEL
      VkPerformanceOverrideInfoINTEL*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPerformanceOverrideInfoINTEL
      (struct "VkPerformanceOverrideInfoINTEL"))
   (c-define-type
      VkPerformanceOverrideInfoINTEL*
      (pointer VkPerformanceOverrideInfoINTEL))
   (define-c-lambda
      VkPerformanceOverrideInfoINTELsType
      (VkPerformanceOverrideInfoINTEL*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPerformanceOverrideInfoINTELpNext
      (VkPerformanceOverrideInfoINTEL*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPerformanceOverrideInfoINTELtype
      (VkPerformanceOverrideInfoINTEL*)
      VkPerformanceOverrideTypeINTEL
      "___return (___arg1->type);")
   (define-c-lambda
      VkPerformanceOverrideInfoINTELenable
      (VkPerformanceOverrideInfoINTEL*)
      VkBool32
      "___return (___arg1->enable);")
   (define-c-lambda
      VkPerformanceOverrideInfoINTELparameter
      (VkPerformanceOverrideInfoINTEL*)
      uint64_t
      "___return (___arg1->parameter);")
   (define-c-lambda
      make-VkPerformanceOverrideInfoINTEL*
      (int)
      VkPerformanceOverrideInfoINTEL*
      "VkPerformanceOverrideInfoINTEL* vkperformanceoverrideinfointel = malloc(___arg1 * sizeof(VkPerformanceOverrideInfoINTEL));
      ___return (vkperformanceoverrideinfointel);")
   (define-c-lambda
      ref-VkPerformanceOverrideInfoINTEL
      (VkPerformanceOverrideInfoINTEL* int)
      VkPerformanceOverrideInfoINTEL*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPerformanceOverrideInfoINTEL
      ((pointer VkPerformanceOverrideInfoINTEL))
      VkPerformanceOverrideInfoINTEL
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPerformanceOverrideInfoINTEL
      (void* VkPerformanceOverrideTypeINTEL VkBool32 uint64_t)
      VkPerformanceOverrideInfoINTEL*
      "VkPerformanceOverrideInfoINTEL *performanceoverrideinfointel = malloc(sizeof(VkPerformanceOverrideInfoINTEL));
performanceoverrideinfointel->sType=VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL;
performanceoverrideinfointel->pNext=___arg1;
performanceoverrideinfointel->type=___arg2;
performanceoverrideinfointel->enable=___arg3;
performanceoverrideinfointel->parameter=___arg4;
___return (performanceoverrideinfointel);"))
(begin-ffi
   (make-VkPerformanceConfigurationAcquireInfoINTEL
      ptr->VkPerformanceConfigurationAcquireInfoINTEL
      ref-VkPerformanceConfigurationAcquireInfoINTEL
      make-VkPerformanceConfigurationAcquireInfoINTEL*
      VkPerformanceConfigurationAcquireInfoINTELtype
      VkPerformanceConfigurationAcquireInfoINTELpNext
      VkPerformanceConfigurationAcquireInfoINTELsType
      VkPerformanceConfigurationAcquireInfoINTEL
      VkPerformanceConfigurationAcquireInfoINTEL*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPerformanceConfigurationAcquireInfoINTEL
      (struct "VkPerformanceConfigurationAcquireInfoINTEL"))
   (c-define-type
      VkPerformanceConfigurationAcquireInfoINTEL*
      (pointer VkPerformanceConfigurationAcquireInfoINTEL))
   (define-c-lambda
      VkPerformanceConfigurationAcquireInfoINTELsType
      (VkPerformanceConfigurationAcquireInfoINTEL*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPerformanceConfigurationAcquireInfoINTELpNext
      (VkPerformanceConfigurationAcquireInfoINTEL*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPerformanceConfigurationAcquireInfoINTELtype
      (VkPerformanceConfigurationAcquireInfoINTEL*)
      VkPerformanceConfigurationTypeINTEL
      "___return (___arg1->type);")
   (define-c-lambda
      make-VkPerformanceConfigurationAcquireInfoINTEL*
      (int)
      VkPerformanceConfigurationAcquireInfoINTEL*
      "VkPerformanceConfigurationAcquireInfoINTEL* vkperformanceconfigurationacquireinfointel = malloc(___arg1 * sizeof(VkPerformanceConfigurationAcquireInfoINTEL));
      ___return (vkperformanceconfigurationacquireinfointel);")
   (define-c-lambda
      ref-VkPerformanceConfigurationAcquireInfoINTEL
      (VkPerformanceConfigurationAcquireInfoINTEL* int)
      VkPerformanceConfigurationAcquireInfoINTEL*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPerformanceConfigurationAcquireInfoINTEL
      ((pointer VkPerformanceConfigurationAcquireInfoINTEL))
      VkPerformanceConfigurationAcquireInfoINTEL
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPerformanceConfigurationAcquireInfoINTEL
      (void* VkPerformanceConfigurationTypeINTEL)
      VkPerformanceConfigurationAcquireInfoINTEL*
      "VkPerformanceConfigurationAcquireInfoINTEL *performanceconfigurationacquireinfointel = malloc(sizeof(VkPerformanceConfigurationAcquireInfoINTEL));
performanceconfigurationacquireinfointel->sType=VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
performanceconfigurationacquireinfointel->pNext=___arg1;
performanceconfigurationacquireinfointel->type=___arg2;
___return (performanceconfigurationacquireinfointel);"))
(begin-ffi
   (make-VkPhysicalDeviceIndexTypeUint8FeaturesEXT
      ptr->VkPhysicalDeviceIndexTypeUint8FeaturesEXT
      ref-VkPhysicalDeviceIndexTypeUint8FeaturesEXT
      make-VkPhysicalDeviceIndexTypeUint8FeaturesEXT*
      VkPhysicalDeviceIndexTypeUint8FeaturesEXTindexTypeUint8
      VkPhysicalDeviceIndexTypeUint8FeaturesEXTpNext
      VkPhysicalDeviceIndexTypeUint8FeaturesEXTsType
      VkPhysicalDeviceIndexTypeUint8FeaturesEXT
      VkPhysicalDeviceIndexTypeUint8FeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceIndexTypeUint8FeaturesEXT
      (struct "VkPhysicalDeviceIndexTypeUint8FeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceIndexTypeUint8FeaturesEXT*
      (pointer VkPhysicalDeviceIndexTypeUint8FeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceIndexTypeUint8FeaturesEXTsType
      (VkPhysicalDeviceIndexTypeUint8FeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceIndexTypeUint8FeaturesEXTpNext
      (VkPhysicalDeviceIndexTypeUint8FeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceIndexTypeUint8FeaturesEXTindexTypeUint8
      (VkPhysicalDeviceIndexTypeUint8FeaturesEXT*)
      VkBool32
      "___return (___arg1->indexTypeUint8);")
   (define-c-lambda
      make-VkPhysicalDeviceIndexTypeUint8FeaturesEXT*
      (int)
      VkPhysicalDeviceIndexTypeUint8FeaturesEXT*
      "VkPhysicalDeviceIndexTypeUint8FeaturesEXT* vkphysicaldeviceindextypeuint8featuresext = malloc(___arg1 * sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT));
      ___return (vkphysicaldeviceindextypeuint8featuresext);")
   (define-c-lambda
      ref-VkPhysicalDeviceIndexTypeUint8FeaturesEXT
      (VkPhysicalDeviceIndexTypeUint8FeaturesEXT* int)
      VkPhysicalDeviceIndexTypeUint8FeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceIndexTypeUint8FeaturesEXT
      ((pointer VkPhysicalDeviceIndexTypeUint8FeaturesEXT))
      VkPhysicalDeviceIndexTypeUint8FeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceIndexTypeUint8FeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceIndexTypeUint8FeaturesEXT*
      "VkPhysicalDeviceIndexTypeUint8FeaturesEXT *physicaldeviceindextypeuint8featuresext = malloc(sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT));
physicaldeviceindextypeuint8featuresext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
physicaldeviceindextypeuint8featuresext->pNext=___arg1;
physicaldeviceindextypeuint8featuresext->indexTypeUint8=___arg2;
___return (physicaldeviceindextypeuint8featuresext);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
      ptr->VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
      ref-VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
      make-VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNVshaderWarpsPerSM
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNVshaderSMCount
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNVpNext
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNVsType
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
      (struct "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV"))
   (c-define-type
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*
      (pointer VkPhysicalDeviceShaderSMBuiltinsPropertiesNV))
   (define-c-lambda
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNVsType
      (VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNVpNext
      (VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNVshaderSMCount
      (VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*)
      uint32_t
      "___return (___arg1->shaderSMCount);")
   (define-c-lambda
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNVshaderWarpsPerSM
      (VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*)
      uint32_t
      "___return (___arg1->shaderWarpsPerSM);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*
      (int)
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*
      "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV* vkphysicaldeviceshadersmbuiltinspropertiesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV));
      ___return (vkphysicaldeviceshadersmbuiltinspropertiesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
      (VkPhysicalDeviceShaderSMBuiltinsPropertiesNV* int)
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
      ((pointer VkPhysicalDeviceShaderSMBuiltinsPropertiesNV))
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
      (void* uint32_t uint32_t)
      VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*
      "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV *physicaldeviceshadersmbuiltinspropertiesnv = malloc(sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV));
physicaldeviceshadersmbuiltinspropertiesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV;
physicaldeviceshadersmbuiltinspropertiesnv->pNext=___arg1;
physicaldeviceshadersmbuiltinspropertiesnv->shaderSMCount=___arg2;
physicaldeviceshadersmbuiltinspropertiesnv->shaderWarpsPerSM=___arg3;
___return (physicaldeviceshadersmbuiltinspropertiesnv);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
      ptr->VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
      ref-VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
      make-VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNVshaderSMBuiltins
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNVpNext
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNVsType
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
      (struct "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"))
   (c-define-type
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*
      (pointer VkPhysicalDeviceShaderSMBuiltinsFeaturesNV))
   (define-c-lambda
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNVsType
      (VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNVpNext
      (VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNVshaderSMBuiltins
      (VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*)
      VkBool32
      "___return (___arg1->shaderSMBuiltins);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*
      (int)
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*
      "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV* vkphysicaldeviceshadersmbuiltinsfeaturesnv = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV));
      ___return (vkphysicaldeviceshadersmbuiltinsfeaturesnv);")
   (define-c-lambda
      ref-VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
      (VkPhysicalDeviceShaderSMBuiltinsFeaturesNV* int)
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
      ((pointer VkPhysicalDeviceShaderSMBuiltinsFeaturesNV))
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
      (void* VkBool32)
      VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*
      "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV *physicaldeviceshadersmbuiltinsfeaturesnv = malloc(sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV));
physicaldeviceshadersmbuiltinsfeaturesnv->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
physicaldeviceshadersmbuiltinsfeaturesnv->pNext=___arg1;
physicaldeviceshadersmbuiltinsfeaturesnv->shaderSMBuiltins=___arg2;
___return (physicaldeviceshadersmbuiltinsfeaturesnv);"))
(begin-ffi
   (make-VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
      ptr->VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
      ref-VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
      make-VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTfragmentShaderShadingRateInterlock
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTfragmentShaderPixelInterlock
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTfragmentShaderSampleInterlock
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTpNext
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTsType
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
      (struct "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*
      (pointer VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTsType
      (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTpNext
      (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTfragmentShaderSampleInterlock
      (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*)
      VkBool32
      "___return (___arg1->fragmentShaderSampleInterlock);")
   (define-c-lambda
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTfragmentShaderPixelInterlock
      (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*)
      VkBool32
      "___return (___arg1->fragmentShaderPixelInterlock);")
   (define-c-lambda
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTfragmentShaderShadingRateInterlock
      (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*)
      VkBool32
      "___return (___arg1->fragmentShaderShadingRateInterlock);")
   (define-c-lambda
      make-VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*
      (int)
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*
      "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT* vkphysicaldevicefragmentshaderinterlockfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT));
      ___return (vkphysicaldevicefragmentshaderinterlockfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
      (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT* int)
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
      ((pointer VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT))
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
      (void* VkBool32 VkBool32 VkBool32)
      VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*
      "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT *physicaldevicefragmentshaderinterlockfeaturesext = malloc(sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT));
physicaldevicefragmentshaderinterlockfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
physicaldevicefragmentshaderinterlockfeaturesext->pNext=___arg1;
physicaldevicefragmentshaderinterlockfeaturesext->fragmentShaderSampleInterlock=___arg2;
physicaldevicefragmentshaderinterlockfeaturesext->fragmentShaderPixelInterlock=___arg3;
physicaldevicefragmentshaderinterlockfeaturesext->fragmentShaderShadingRateInterlock=___arg4;
___return (physicaldevicefragmentshaderinterlockfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
      ptr->VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
      ref-VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
      make-VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRpipelineExecutableInfo
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRpNext
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRsType
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
      (struct "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"))
   (c-define-type
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*
      (pointer VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR))
   (define-c-lambda
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRsType
      (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRpNext
      (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRpipelineExecutableInfo
      (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*)
      VkBool32
      "___return (___arg1->pipelineExecutableInfo);")
   (define-c-lambda
      make-VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*
      (int)
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*
      "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR* vkphysicaldevicepipelineexecutablepropertiesfeatureskhr = malloc(___arg1 * sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR));
      ___return (vkphysicaldevicepipelineexecutablepropertiesfeatureskhr);")
   (define-c-lambda
      ref-VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
      (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR* int)
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
      (void* VkBool32)
      VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*
      "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR *physicaldevicepipelineexecutablepropertiesfeatureskhr = malloc(sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR));
physicaldevicepipelineexecutablepropertiesfeatureskhr->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
physicaldevicepipelineexecutablepropertiesfeatureskhr->pNext=___arg1;
physicaldevicepipelineexecutablepropertiesfeatureskhr->pipelineExecutableInfo=___arg2;
___return (physicaldevicepipelineexecutablepropertiesfeatureskhr);"))
(begin-ffi
   (make-VkPipelineInfoKHR
      ptr->VkPipelineInfoKHR
      ref-VkPipelineInfoKHR
      make-VkPipelineInfoKHR*
      VkPipelineInfoKHRpipeline
      VkPipelineInfoKHRpNext
      VkPipelineInfoKHRsType
      VkPipelineInfoKHR
      VkPipelineInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPipelineInfoKHR (struct "VkPipelineInfoKHR"))
   (c-define-type VkPipelineInfoKHR* (pointer VkPipelineInfoKHR))
   (define-c-lambda
      VkPipelineInfoKHRsType
      (VkPipelineInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineInfoKHRpNext
      (VkPipelineInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineInfoKHRpipeline
      (VkPipelineInfoKHR*)
      VkPipeline
      "___return (___arg1->pipeline);")
   (define-c-lambda
      make-VkPipelineInfoKHR*
      (int)
      VkPipelineInfoKHR*
      "VkPipelineInfoKHR* vkpipelineinfokhr = malloc(___arg1 * sizeof(VkPipelineInfoKHR));
      ___return (vkpipelineinfokhr);")
   (define-c-lambda
      ref-VkPipelineInfoKHR
      (VkPipelineInfoKHR* int)
      VkPipelineInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPipelineInfoKHR
      (void* VkPipeline)
      VkPipelineInfoKHR*
      "VkPipelineInfoKHR *pipelineinfokhr = malloc(sizeof(VkPipelineInfoKHR));
pipelineinfokhr->sType=VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR;
pipelineinfokhr->pNext=___arg1;
pipelineinfokhr->pipeline=___arg2;
___return (pipelineinfokhr);"))
(begin-ffi
   (make-VkPipelineExecutablePropertiesKHR
      ptr->VkPipelineExecutablePropertiesKHR
      ref-VkPipelineExecutablePropertiesKHR
      make-VkPipelineExecutablePropertiesKHR*
      VkPipelineExecutablePropertiesKHRsubgroupSize
      VkPipelineExecutablePropertiesKHRdescription
      VkPipelineExecutablePropertiesKHRname
      VkPipelineExecutablePropertiesKHRstages
      VkPipelineExecutablePropertiesKHRpNext
      VkPipelineExecutablePropertiesKHRsType
      VkPipelineExecutablePropertiesKHR
      VkPipelineExecutablePropertiesKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineExecutablePropertiesKHR
      (struct "VkPipelineExecutablePropertiesKHR"))
   (c-define-type
      VkPipelineExecutablePropertiesKHR*
      (pointer VkPipelineExecutablePropertiesKHR))
   (define-c-lambda
      VkPipelineExecutablePropertiesKHRsType
      (VkPipelineExecutablePropertiesKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineExecutablePropertiesKHRpNext
      (VkPipelineExecutablePropertiesKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineExecutablePropertiesKHRstages
      (VkPipelineExecutablePropertiesKHR*)
      VkShaderStageFlags
      "___return (___arg1->stages);")
   (define-c-lambda
      VkPipelineExecutablePropertiesKHRname
      (VkPipelineExecutablePropertiesKHR*)
      char*
      "___return (___arg1->name);")
   (define-c-lambda
      VkPipelineExecutablePropertiesKHRdescription
      (VkPipelineExecutablePropertiesKHR*)
      char*
      "___return (___arg1->description);")
   (define-c-lambda
      VkPipelineExecutablePropertiesKHRsubgroupSize
      (VkPipelineExecutablePropertiesKHR*)
      uint32_t
      "___return (___arg1->subgroupSize);")
   (define-c-lambda
      make-VkPipelineExecutablePropertiesKHR*
      (int)
      VkPipelineExecutablePropertiesKHR*
      "VkPipelineExecutablePropertiesKHR* vkpipelineexecutablepropertieskhr = malloc(___arg1 * sizeof(VkPipelineExecutablePropertiesKHR));
      ___return (vkpipelineexecutablepropertieskhr);")
   (define-c-lambda
      ref-VkPipelineExecutablePropertiesKHR
      (VkPipelineExecutablePropertiesKHR* int)
      VkPipelineExecutablePropertiesKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPipelineExecutablePropertiesKHR
      (void* VkShaderStageFlags char* char* uint32_t)
      VkPipelineExecutablePropertiesKHR*
      "VkPipelineExecutablePropertiesKHR *pipelineexecutablepropertieskhr = malloc(sizeof(VkPipelineExecutablePropertiesKHR));
pipelineexecutablepropertieskhr->sType=VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR;
pipelineexecutablepropertieskhr->pNext=___arg1;
pipelineexecutablepropertieskhr->stages=___arg2;
memcpy(pipelineexecutablepropertieskhr->name,___arg3,sizeof(___arg3));
memcpy(pipelineexecutablepropertieskhr->description,___arg4,sizeof(___arg4));
pipelineexecutablepropertieskhr->subgroupSize=___arg5;
___return (pipelineexecutablepropertieskhr);"))
(begin-ffi
   (make-VkPipelineExecutableInfoKHR
      ptr->VkPipelineExecutableInfoKHR
      ref-VkPipelineExecutableInfoKHR
      make-VkPipelineExecutableInfoKHR*
      VkPipelineExecutableInfoKHRexecutableIndex
      VkPipelineExecutableInfoKHRpipeline
      VkPipelineExecutableInfoKHRpNext
      VkPipelineExecutableInfoKHRsType
      VkPipelineExecutableInfoKHR
      VkPipelineExecutableInfoKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type VkPipelineExecutableInfoKHR (struct "VkPipelineExecutableInfoKHR"))
   (c-define-type VkPipelineExecutableInfoKHR* (pointer VkPipelineExecutableInfoKHR))
   (define-c-lambda
      VkPipelineExecutableInfoKHRsType
      (VkPipelineExecutableInfoKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineExecutableInfoKHRpNext
      (VkPipelineExecutableInfoKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineExecutableInfoKHRpipeline
      (VkPipelineExecutableInfoKHR*)
      VkPipeline
      "___return (___arg1->pipeline);")
   (define-c-lambda
      VkPipelineExecutableInfoKHRexecutableIndex
      (VkPipelineExecutableInfoKHR*)
      uint32_t
      "___return (___arg1->executableIndex);")
   (define-c-lambda
      make-VkPipelineExecutableInfoKHR*
      (int)
      VkPipelineExecutableInfoKHR*
      "VkPipelineExecutableInfoKHR* vkpipelineexecutableinfokhr = malloc(___arg1 * sizeof(VkPipelineExecutableInfoKHR));
      ___return (vkpipelineexecutableinfokhr);")
   (define-c-lambda
      ref-VkPipelineExecutableInfoKHR
      (VkPipelineExecutableInfoKHR* int)
      VkPipelineExecutableInfoKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPipelineExecutableInfoKHR
      (void* VkPipeline uint32_t)
      VkPipelineExecutableInfoKHR*
      "VkPipelineExecutableInfoKHR *pipelineexecutableinfokhr = malloc(sizeof(VkPipelineExecutableInfoKHR));
pipelineexecutableinfokhr->sType=VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR;
pipelineexecutableinfokhr->pNext=___arg1;
pipelineexecutableinfokhr->pipeline=___arg2;
pipelineexecutableinfokhr->executableIndex=___arg3;
___return (pipelineexecutableinfokhr);"))
(begin-ffi
   (make-VkPipelineExecutableStatisticKHR
      ptr->VkPipelineExecutableStatisticKHR
      ref-VkPipelineExecutableStatisticKHR
      make-VkPipelineExecutableStatisticKHR*
      VkPipelineExecutableStatisticKHRvalue
      VkPipelineExecutableStatisticKHRformat
      VkPipelineExecutableStatisticKHRdescription
      VkPipelineExecutableStatisticKHRname
      VkPipelineExecutableStatisticKHRpNext
      VkPipelineExecutableStatisticKHRsType
      VkPipelineExecutableStatisticKHR
      VkPipelineExecutableStatisticKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineExecutableStatisticKHR
      (struct "VkPipelineExecutableStatisticKHR"))
   (c-define-type
      VkPipelineExecutableStatisticKHR*
      (pointer VkPipelineExecutableStatisticKHR))
   (define-c-lambda
      VkPipelineExecutableStatisticKHRsType
      (VkPipelineExecutableStatisticKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineExecutableStatisticKHRpNext
      (VkPipelineExecutableStatisticKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineExecutableStatisticKHRname
      (VkPipelineExecutableStatisticKHR*)
      char*
      "___return (___arg1->name);")
   (define-c-lambda
      VkPipelineExecutableStatisticKHRdescription
      (VkPipelineExecutableStatisticKHR*)
      char*
      "___return (___arg1->description);")
   (define-c-lambda
      VkPipelineExecutableStatisticKHRformat
      (VkPipelineExecutableStatisticKHR*)
      VkPipelineExecutableStatisticFormatKHR
      "___return (___arg1->format);")
   (define-c-lambda
      VkPipelineExecutableStatisticKHRvalue
      (VkPipelineExecutableStatisticKHR*)
      VkPipelineExecutableStatisticValueKHR
      "___return (___arg1->value);")
   (define-c-lambda
      make-VkPipelineExecutableStatisticKHR*
      (int)
      VkPipelineExecutableStatisticKHR*
      "VkPipelineExecutableStatisticKHR* vkpipelineexecutablestatistickhr = malloc(___arg1 * sizeof(VkPipelineExecutableStatisticKHR));
      ___return (vkpipelineexecutablestatistickhr);")
   (define-c-lambda
      ref-VkPipelineExecutableStatisticKHR
      (VkPipelineExecutableStatisticKHR* int)
      VkPipelineExecutableStatisticKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPipelineExecutableStatisticKHR
      (void*
         char*
         char*
         VkPipelineExecutableStatisticFormatKHR
         VkPipelineExecutableStatisticValueKHR)
      VkPipelineExecutableStatisticKHR*
      "VkPipelineExecutableStatisticKHR *pipelineexecutablestatistickhr = malloc(sizeof(VkPipelineExecutableStatisticKHR));
pipelineexecutablestatistickhr->sType=VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR;
pipelineexecutablestatistickhr->pNext=___arg1;
memcpy(pipelineexecutablestatistickhr->name,___arg2,sizeof(___arg2));
memcpy(pipelineexecutablestatistickhr->description,___arg3,sizeof(___arg3));
pipelineexecutablestatistickhr->format=___arg4;
pipelineexecutablestatistickhr->value=___arg5;
___return (pipelineexecutablestatistickhr);"))
(begin-ffi
   (make-VkPipelineExecutableInternalRepresentationKHR
      ptr->VkPipelineExecutableInternalRepresentationKHR
      ref-VkPipelineExecutableInternalRepresentationKHR
      make-VkPipelineExecutableInternalRepresentationKHR*
      VkPipelineExecutableInternalRepresentationKHRpData
      VkPipelineExecutableInternalRepresentationKHRdataSize
      VkPipelineExecutableInternalRepresentationKHRisText
      VkPipelineExecutableInternalRepresentationKHRdescription
      VkPipelineExecutableInternalRepresentationKHRname
      VkPipelineExecutableInternalRepresentationKHRpNext
      VkPipelineExecutableInternalRepresentationKHRsType
      VkPipelineExecutableInternalRepresentationKHR
      VkPipelineExecutableInternalRepresentationKHR*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineExecutableInternalRepresentationKHR
      (struct "VkPipelineExecutableInternalRepresentationKHR"))
   (c-define-type
      VkPipelineExecutableInternalRepresentationKHR*
      (pointer VkPipelineExecutableInternalRepresentationKHR))
   (define-c-lambda
      VkPipelineExecutableInternalRepresentationKHRsType
      (VkPipelineExecutableInternalRepresentationKHR*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineExecutableInternalRepresentationKHRpNext
      (VkPipelineExecutableInternalRepresentationKHR*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineExecutableInternalRepresentationKHRname
      (VkPipelineExecutableInternalRepresentationKHR*)
      char*
      "___return (___arg1->name);")
   (define-c-lambda
      VkPipelineExecutableInternalRepresentationKHRdescription
      (VkPipelineExecutableInternalRepresentationKHR*)
      char*
      "___return (___arg1->description);")
   (define-c-lambda
      VkPipelineExecutableInternalRepresentationKHRisText
      (VkPipelineExecutableInternalRepresentationKHR*)
      VkBool32
      "___return (___arg1->isText);")
   (define-c-lambda
      VkPipelineExecutableInternalRepresentationKHRdataSize
      (VkPipelineExecutableInternalRepresentationKHR*)
      size_t
      "___return (___arg1->dataSize);")
   (define-c-lambda
      VkPipelineExecutableInternalRepresentationKHRpData
      (VkPipelineExecutableInternalRepresentationKHR*)
      void*
      "___return (___arg1->pData);")
   (define-c-lambda
      make-VkPipelineExecutableInternalRepresentationKHR*
      (int)
      VkPipelineExecutableInternalRepresentationKHR*
      "VkPipelineExecutableInternalRepresentationKHR* vkpipelineexecutableinternalrepresentationkhr = malloc(___arg1 * sizeof(VkPipelineExecutableInternalRepresentationKHR));
      ___return (vkpipelineexecutableinternalrepresentationkhr);")
   (define-c-lambda
      ref-VkPipelineExecutableInternalRepresentationKHR
      (VkPipelineExecutableInternalRepresentationKHR* int)
      VkPipelineExecutableInternalRepresentationKHR*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      make-VkPipelineExecutableInternalRepresentationKHR
      (void* char* char* VkBool32 size_t void*)
      VkPipelineExecutableInternalRepresentationKHR*
      "VkPipelineExecutableInternalRepresentationKHR *pipelineexecutableinternalrepresentationkhr = malloc(sizeof(VkPipelineExecutableInternalRepresentationKHR));
pipelineexecutableinternalrepresentationkhr->sType=VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;
pipelineexecutableinternalrepresentationkhr->pNext=___arg1;
memcpy(pipelineexecutableinternalrepresentationkhr->name,___arg2,sizeof(___arg2));
memcpy(pipelineexecutableinternalrepresentationkhr->description,___arg3,sizeof(___arg3));
pipelineexecutableinternalrepresentationkhr->isText=___arg4;
pipelineexecutableinternalrepresentationkhr->dataSize=___arg5;
pipelineexecutableinternalrepresentationkhr->pData=___arg6;
___return (pipelineexecutableinternalrepresentationkhr);"))
(begin-ffi
   (make-VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
      ptr->VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
      ref-VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
      make-VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTshaderDemoteToHelperInvocation
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTpNext
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTsType
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
      (struct "VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*
      (pointer VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTsType
      (VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTpNext
      (VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTshaderDemoteToHelperInvocation
      (VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*)
      VkBool32
      "___return (___arg1->shaderDemoteToHelperInvocation);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*
      (int)
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*
      "VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT* vkphysicaldeviceshaderdemotetohelperinvocationfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT));
      ___return (vkphysicaldeviceshaderdemotetohelperinvocationfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
      (VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT* int)
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
      ((pointer VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT))
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*
      "VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT *physicaldeviceshaderdemotetohelperinvocationfeaturesext = malloc(sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT));
physicaldeviceshaderdemotetohelperinvocationfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT;
physicaldeviceshaderdemotetohelperinvocationfeaturesext->pNext=___arg1;
physicaldeviceshaderdemotetohelperinvocationfeaturesext->shaderDemoteToHelperInvocation=___arg2;
___return (physicaldeviceshaderdemotetohelperinvocationfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
      ptr->VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
      ref-VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
      make-VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTtexelBufferAlignment
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTpNext
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTsType
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
      (struct "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*
      (pointer VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTsType
      (VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTpNext
      (VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTtexelBufferAlignment
      (VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*)
      VkBool32
      "___return (___arg1->texelBufferAlignment);")
   (define-c-lambda
      make-VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*
      (int)
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*
      "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT* vkphysicaldevicetexelbufferalignmentfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT));
      ___return (vkphysicaldevicetexelbufferalignmentfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
      (VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT* int)
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
      ((pointer VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT))
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
      (void* VkBool32)
      VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*
      "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT *physicaldevicetexelbufferalignmentfeaturesext = malloc(sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT));
physicaldevicetexelbufferalignmentfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
physicaldevicetexelbufferalignmentfeaturesext->pNext=___arg1;
physicaldevicetexelbufferalignmentfeaturesext->texelBufferAlignment=___arg2;
___return (physicaldevicetexelbufferalignmentfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
      ptr->VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
      ref-VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
      make-VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTuniformTexelBufferOffsetSingleTexelAlignment
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTuniformTexelBufferOffsetAlignmentBytes
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTstorageTexelBufferOffsetSingleTexelAlignment
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTstorageTexelBufferOffsetAlignmentBytes
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTpNext
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTsType
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
      (struct "VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*
      (pointer VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTsType
      (VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTpNext
      (VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTstorageTexelBufferOffsetAlignmentBytes
      (VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*)
      VkDeviceSize
      "___return (___arg1->storageTexelBufferOffsetAlignmentBytes);")
   (define-c-lambda
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTstorageTexelBufferOffsetSingleTexelAlignment
      (VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*)
      VkBool32
      "___return (___arg1->storageTexelBufferOffsetSingleTexelAlignment);")
   (define-c-lambda
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTuniformTexelBufferOffsetAlignmentBytes
      (VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*)
      VkDeviceSize
      "___return (___arg1->uniformTexelBufferOffsetAlignmentBytes);")
   (define-c-lambda
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTuniformTexelBufferOffsetSingleTexelAlignment
      (VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*)
      VkBool32
      "___return (___arg1->uniformTexelBufferOffsetSingleTexelAlignment);")
   (define-c-lambda
      make-VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*
      (int)
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*
      "VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT* vkphysicaldevicetexelbufferalignmentpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT));
      ___return (vkphysicaldevicetexelbufferalignmentpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
      (VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT* int)
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
      ((pointer VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT))
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
      (void* VkDeviceSize VkBool32 VkDeviceSize VkBool32)
      VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*
      "VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT *physicaldevicetexelbufferalignmentpropertiesext = malloc(sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT));
physicaldevicetexelbufferalignmentpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT;
physicaldevicetexelbufferalignmentpropertiesext->pNext=___arg1;
physicaldevicetexelbufferalignmentpropertiesext->storageTexelBufferOffsetAlignmentBytes=___arg2;
physicaldevicetexelbufferalignmentpropertiesext->storageTexelBufferOffsetSingleTexelAlignment=___arg3;
physicaldevicetexelbufferalignmentpropertiesext->uniformTexelBufferOffsetAlignmentBytes=___arg4;
physicaldevicetexelbufferalignmentpropertiesext->uniformTexelBufferOffsetSingleTexelAlignment=___arg5;
___return (physicaldevicetexelbufferalignmentpropertiesext);"))
(begin-ffi
   (make-VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
      ptr->VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
      ref-VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
      make-VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXTcomputeFullSubgroups
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXTsubgroupSizeControl
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXTpNext
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXTsType
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
      (struct "VkPhysicalDeviceSubgroupSizeControlFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*
      (pointer VkPhysicalDeviceSubgroupSizeControlFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXTsType
      (VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXTpNext
      (VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXTsubgroupSizeControl
      (VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*)
      VkBool32
      "___return (___arg1->subgroupSizeControl);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXTcomputeFullSubgroups
      (VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*)
      VkBool32
      "___return (___arg1->computeFullSubgroups);")
   (define-c-lambda
      make-VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*
      (int)
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*
      "VkPhysicalDeviceSubgroupSizeControlFeaturesEXT* vkphysicaldevicesubgroupsizecontrolfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT));
      ___return (vkphysicaldevicesubgroupsizecontrolfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
      (VkPhysicalDeviceSubgroupSizeControlFeaturesEXT* int)
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
      ((pointer VkPhysicalDeviceSubgroupSizeControlFeaturesEXT))
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
      (void* VkBool32 VkBool32)
      VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*
      "VkPhysicalDeviceSubgroupSizeControlFeaturesEXT *physicaldevicesubgroupsizecontrolfeaturesext = malloc(sizeof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT));
physicaldevicesubgroupsizecontrolfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT;
physicaldevicesubgroupsizecontrolfeaturesext->pNext=___arg1;
physicaldevicesubgroupsizecontrolfeaturesext->subgroupSizeControl=___arg2;
physicaldevicesubgroupsizecontrolfeaturesext->computeFullSubgroups=___arg3;
___return (physicaldevicesubgroupsizecontrolfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
      ptr->VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
      ref-VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
      make-VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTrequiredSubgroupSizeStages
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTmaxComputeWorkgroupSubgroups
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTmaxSubgroupSize
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTminSubgroupSize
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTpNext
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTsType
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
      (struct "VkPhysicalDeviceSubgroupSizeControlPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*
      (pointer VkPhysicalDeviceSubgroupSizeControlPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTsType
      (VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTpNext
      (VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTminSubgroupSize
      (VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*)
      uint32_t
      "___return (___arg1->minSubgroupSize);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTmaxSubgroupSize
      (VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxSubgroupSize);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTmaxComputeWorkgroupSubgroups
      (VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*)
      uint32_t
      "___return (___arg1->maxComputeWorkgroupSubgroups);")
   (define-c-lambda
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXTrequiredSubgroupSizeStages
      (VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*)
      VkShaderStageFlags
      "___return (___arg1->requiredSubgroupSizeStages);")
   (define-c-lambda
      make-VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*
      (int)
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*
      "VkPhysicalDeviceSubgroupSizeControlPropertiesEXT* vkphysicaldevicesubgroupsizecontrolpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT));
      ___return (vkphysicaldevicesubgroupsizecontrolpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
      (VkPhysicalDeviceSubgroupSizeControlPropertiesEXT* int)
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
      ((pointer VkPhysicalDeviceSubgroupSizeControlPropertiesEXT))
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
      (void* uint32_t uint32_t uint32_t VkShaderStageFlags)
      VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*
      "VkPhysicalDeviceSubgroupSizeControlPropertiesEXT *physicaldevicesubgroupsizecontrolpropertiesext = malloc(sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT));
physicaldevicesubgroupsizecontrolpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT;
physicaldevicesubgroupsizecontrolpropertiesext->pNext=___arg1;
physicaldevicesubgroupsizecontrolpropertiesext->minSubgroupSize=___arg2;
physicaldevicesubgroupsizecontrolpropertiesext->maxSubgroupSize=___arg3;
physicaldevicesubgroupsizecontrolpropertiesext->maxComputeWorkgroupSubgroups=___arg4;
physicaldevicesubgroupsizecontrolpropertiesext->requiredSubgroupSizeStages=___arg5;
___return (physicaldevicesubgroupsizecontrolpropertiesext);"))
(begin-ffi
   (make-VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
      ptr->VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
      ref-VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
      make-VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTrequiredSubgroupSize
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTpNext
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTsType
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
      (struct "VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT"))
   (c-define-type
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*
      (pointer VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT))
   (define-c-lambda
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTsType
      (VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTpNext
      (VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTrequiredSubgroupSize
      (VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*)
      uint32_t
      "___return (___arg1->requiredSubgroupSize);")
   (define-c-lambda
      make-VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*
      (int)
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*
      "VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT* vkpipelineshaderstagerequiredsubgroupsizecreateinfoext = malloc(___arg1 * sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT));
      ___return (vkpipelineshaderstagerequiredsubgroupsizecreateinfoext);")
   (define-c-lambda
      ref-VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
      (VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT* int)
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
      ((pointer VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT))
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
      (void* uint32_t)
      VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*
      "VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT *pipelineshaderstagerequiredsubgroupsizecreateinfoext = malloc(sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT));
pipelineshaderstagerequiredsubgroupsizecreateinfoext->sType=VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT;
pipelineshaderstagerequiredsubgroupsizecreateinfoext->pNext=___arg1;
pipelineshaderstagerequiredsubgroupsizecreateinfoext->requiredSubgroupSize=___arg2;
___return (pipelineshaderstagerequiredsubgroupsizecreateinfoext);"))
(begin-ffi
   (make-VkPhysicalDeviceLineRasterizationFeaturesEXT
      ptr->VkPhysicalDeviceLineRasterizationFeaturesEXT
      ref-VkPhysicalDeviceLineRasterizationFeaturesEXT
      make-VkPhysicalDeviceLineRasterizationFeaturesEXT*
      VkPhysicalDeviceLineRasterizationFeaturesEXTstippledSmoothLines
      VkPhysicalDeviceLineRasterizationFeaturesEXTstippledBresenhamLines
      VkPhysicalDeviceLineRasterizationFeaturesEXTstippledRectangularLines
      VkPhysicalDeviceLineRasterizationFeaturesEXTsmoothLines
      VkPhysicalDeviceLineRasterizationFeaturesEXTbresenhamLines
      VkPhysicalDeviceLineRasterizationFeaturesEXTrectangularLines
      VkPhysicalDeviceLineRasterizationFeaturesEXTpNext
      VkPhysicalDeviceLineRasterizationFeaturesEXTsType
      VkPhysicalDeviceLineRasterizationFeaturesEXT
      VkPhysicalDeviceLineRasterizationFeaturesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceLineRasterizationFeaturesEXT
      (struct "VkPhysicalDeviceLineRasterizationFeaturesEXT"))
   (c-define-type
      VkPhysicalDeviceLineRasterizationFeaturesEXT*
      (pointer VkPhysicalDeviceLineRasterizationFeaturesEXT))
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationFeaturesEXTsType
      (VkPhysicalDeviceLineRasterizationFeaturesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationFeaturesEXTpNext
      (VkPhysicalDeviceLineRasterizationFeaturesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationFeaturesEXTrectangularLines
      (VkPhysicalDeviceLineRasterizationFeaturesEXT*)
      VkBool32
      "___return (___arg1->rectangularLines);")
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationFeaturesEXTbresenhamLines
      (VkPhysicalDeviceLineRasterizationFeaturesEXT*)
      VkBool32
      "___return (___arg1->bresenhamLines);")
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationFeaturesEXTsmoothLines
      (VkPhysicalDeviceLineRasterizationFeaturesEXT*)
      VkBool32
      "___return (___arg1->smoothLines);")
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationFeaturesEXTstippledRectangularLines
      (VkPhysicalDeviceLineRasterizationFeaturesEXT*)
      VkBool32
      "___return (___arg1->stippledRectangularLines);")
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationFeaturesEXTstippledBresenhamLines
      (VkPhysicalDeviceLineRasterizationFeaturesEXT*)
      VkBool32
      "___return (___arg1->stippledBresenhamLines);")
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationFeaturesEXTstippledSmoothLines
      (VkPhysicalDeviceLineRasterizationFeaturesEXT*)
      VkBool32
      "___return (___arg1->stippledSmoothLines);")
   (define-c-lambda
      make-VkPhysicalDeviceLineRasterizationFeaturesEXT*
      (int)
      VkPhysicalDeviceLineRasterizationFeaturesEXT*
      "VkPhysicalDeviceLineRasterizationFeaturesEXT* vkphysicaldevicelinerasterizationfeaturesext = malloc(___arg1 * sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT));
      ___return (vkphysicaldevicelinerasterizationfeaturesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceLineRasterizationFeaturesEXT
      (VkPhysicalDeviceLineRasterizationFeaturesEXT* int)
      VkPhysicalDeviceLineRasterizationFeaturesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceLineRasterizationFeaturesEXT
      ((pointer VkPhysicalDeviceLineRasterizationFeaturesEXT))
      VkPhysicalDeviceLineRasterizationFeaturesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceLineRasterizationFeaturesEXT
      (void* VkBool32 VkBool32 VkBool32 VkBool32 VkBool32 VkBool32)
      VkPhysicalDeviceLineRasterizationFeaturesEXT*
      "VkPhysicalDeviceLineRasterizationFeaturesEXT *physicaldevicelinerasterizationfeaturesext = malloc(sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT));
physicaldevicelinerasterizationfeaturesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
physicaldevicelinerasterizationfeaturesext->pNext=___arg1;
physicaldevicelinerasterizationfeaturesext->rectangularLines=___arg2;
physicaldevicelinerasterizationfeaturesext->bresenhamLines=___arg3;
physicaldevicelinerasterizationfeaturesext->smoothLines=___arg4;
physicaldevicelinerasterizationfeaturesext->stippledRectangularLines=___arg5;
physicaldevicelinerasterizationfeaturesext->stippledBresenhamLines=___arg6;
physicaldevicelinerasterizationfeaturesext->stippledSmoothLines=___arg7;
___return (physicaldevicelinerasterizationfeaturesext);"))
(begin-ffi
   (make-VkPhysicalDeviceLineRasterizationPropertiesEXT
      ptr->VkPhysicalDeviceLineRasterizationPropertiesEXT
      ref-VkPhysicalDeviceLineRasterizationPropertiesEXT
      make-VkPhysicalDeviceLineRasterizationPropertiesEXT*
      VkPhysicalDeviceLineRasterizationPropertiesEXTlineSubPixelPrecisionBits
      VkPhysicalDeviceLineRasterizationPropertiesEXTpNext
      VkPhysicalDeviceLineRasterizationPropertiesEXTsType
      VkPhysicalDeviceLineRasterizationPropertiesEXT
      VkPhysicalDeviceLineRasterizationPropertiesEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceLineRasterizationPropertiesEXT
      (struct "VkPhysicalDeviceLineRasterizationPropertiesEXT"))
   (c-define-type
      VkPhysicalDeviceLineRasterizationPropertiesEXT*
      (pointer VkPhysicalDeviceLineRasterizationPropertiesEXT))
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationPropertiesEXTsType
      (VkPhysicalDeviceLineRasterizationPropertiesEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationPropertiesEXTpNext
      (VkPhysicalDeviceLineRasterizationPropertiesEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceLineRasterizationPropertiesEXTlineSubPixelPrecisionBits
      (VkPhysicalDeviceLineRasterizationPropertiesEXT*)
      uint32_t
      "___return (___arg1->lineSubPixelPrecisionBits);")
   (define-c-lambda
      make-VkPhysicalDeviceLineRasterizationPropertiesEXT*
      (int)
      VkPhysicalDeviceLineRasterizationPropertiesEXT*
      "VkPhysicalDeviceLineRasterizationPropertiesEXT* vkphysicaldevicelinerasterizationpropertiesext = malloc(___arg1 * sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT));
      ___return (vkphysicaldevicelinerasterizationpropertiesext);")
   (define-c-lambda
      ref-VkPhysicalDeviceLineRasterizationPropertiesEXT
      (VkPhysicalDeviceLineRasterizationPropertiesEXT* int)
      VkPhysicalDeviceLineRasterizationPropertiesEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceLineRasterizationPropertiesEXT
      ((pointer VkPhysicalDeviceLineRasterizationPropertiesEXT))
      VkPhysicalDeviceLineRasterizationPropertiesEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceLineRasterizationPropertiesEXT
      (void* uint32_t)
      VkPhysicalDeviceLineRasterizationPropertiesEXT*
      "VkPhysicalDeviceLineRasterizationPropertiesEXT *physicaldevicelinerasterizationpropertiesext = malloc(sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT));
physicaldevicelinerasterizationpropertiesext->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT;
physicaldevicelinerasterizationpropertiesext->pNext=___arg1;
physicaldevicelinerasterizationpropertiesext->lineSubPixelPrecisionBits=___arg2;
___return (physicaldevicelinerasterizationpropertiesext);"))
(begin-ffi
   (make-VkPipelineRasterizationLineStateCreateInfoEXT
      ptr->VkPipelineRasterizationLineStateCreateInfoEXT
      ref-VkPipelineRasterizationLineStateCreateInfoEXT
      make-VkPipelineRasterizationLineStateCreateInfoEXT*
      VkPipelineRasterizationLineStateCreateInfoEXTlineStipplePattern
      VkPipelineRasterizationLineStateCreateInfoEXTlineStippleFactor
      VkPipelineRasterizationLineStateCreateInfoEXTstippledLineEnable
      VkPipelineRasterizationLineStateCreateInfoEXTlineRasterizationMode
      VkPipelineRasterizationLineStateCreateInfoEXTpNext
      VkPipelineRasterizationLineStateCreateInfoEXTsType
      VkPipelineRasterizationLineStateCreateInfoEXT
      VkPipelineRasterizationLineStateCreateInfoEXT*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineRasterizationLineStateCreateInfoEXT
      (struct "VkPipelineRasterizationLineStateCreateInfoEXT"))
   (c-define-type
      VkPipelineRasterizationLineStateCreateInfoEXT*
      (pointer VkPipelineRasterizationLineStateCreateInfoEXT))
   (define-c-lambda
      VkPipelineRasterizationLineStateCreateInfoEXTsType
      (VkPipelineRasterizationLineStateCreateInfoEXT*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineRasterizationLineStateCreateInfoEXTpNext
      (VkPipelineRasterizationLineStateCreateInfoEXT*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineRasterizationLineStateCreateInfoEXTlineRasterizationMode
      (VkPipelineRasterizationLineStateCreateInfoEXT*)
      VkLineRasterizationModeEXT
      "___return (___arg1->lineRasterizationMode);")
   (define-c-lambda
      VkPipelineRasterizationLineStateCreateInfoEXTstippledLineEnable
      (VkPipelineRasterizationLineStateCreateInfoEXT*)
      VkBool32
      "___return (___arg1->stippledLineEnable);")
   (define-c-lambda
      VkPipelineRasterizationLineStateCreateInfoEXTlineStippleFactor
      (VkPipelineRasterizationLineStateCreateInfoEXT*)
      uint32_t
      "___return (___arg1->lineStippleFactor);")
   (define-c-lambda
      VkPipelineRasterizationLineStateCreateInfoEXTlineStipplePattern
      (VkPipelineRasterizationLineStateCreateInfoEXT*)
      uint16_t
      "___return (___arg1->lineStipplePattern);")
   (define-c-lambda
      make-VkPipelineRasterizationLineStateCreateInfoEXT*
      (int)
      VkPipelineRasterizationLineStateCreateInfoEXT*
      "VkPipelineRasterizationLineStateCreateInfoEXT* vkpipelinerasterizationlinestatecreateinfoext = malloc(___arg1 * sizeof(VkPipelineRasterizationLineStateCreateInfoEXT));
      ___return (vkpipelinerasterizationlinestatecreateinfoext);")
   (define-c-lambda
      ref-VkPipelineRasterizationLineStateCreateInfoEXT
      (VkPipelineRasterizationLineStateCreateInfoEXT* int)
      VkPipelineRasterizationLineStateCreateInfoEXT*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineRasterizationLineStateCreateInfoEXT
      ((pointer VkPipelineRasterizationLineStateCreateInfoEXT))
      VkPipelineRasterizationLineStateCreateInfoEXT
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineRasterizationLineStateCreateInfoEXT
      (void* VkLineRasterizationModeEXT VkBool32 uint32_t uint16_t)
      VkPipelineRasterizationLineStateCreateInfoEXT*
      "VkPipelineRasterizationLineStateCreateInfoEXT *pipelinerasterizationlinestatecreateinfoext = malloc(sizeof(VkPipelineRasterizationLineStateCreateInfoEXT));
pipelinerasterizationlinestatecreateinfoext->sType=VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
pipelinerasterizationlinestatecreateinfoext->pNext=___arg1;
pipelinerasterizationlinestatecreateinfoext->lineRasterizationMode=___arg2;
pipelinerasterizationlinestatecreateinfoext->stippledLineEnable=___arg3;
pipelinerasterizationlinestatecreateinfoext->lineStippleFactor=___arg4;
pipelinerasterizationlinestatecreateinfoext->lineStipplePattern=___arg5;
___return (pipelinerasterizationlinestatecreateinfoext);"))
(begin-ffi
   (make-VkPipelineCompilerControlCreateInfoAMD
      ptr->VkPipelineCompilerControlCreateInfoAMD
      ref-VkPipelineCompilerControlCreateInfoAMD
      make-VkPipelineCompilerControlCreateInfoAMD*
      VkPipelineCompilerControlCreateInfoAMDcompilerControlFlags
      VkPipelineCompilerControlCreateInfoAMDpNext
      VkPipelineCompilerControlCreateInfoAMDsType
      VkPipelineCompilerControlCreateInfoAMD
      VkPipelineCompilerControlCreateInfoAMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPipelineCompilerControlCreateInfoAMD
      (struct "VkPipelineCompilerControlCreateInfoAMD"))
   (c-define-type
      VkPipelineCompilerControlCreateInfoAMD*
      (pointer VkPipelineCompilerControlCreateInfoAMD))
   (define-c-lambda
      VkPipelineCompilerControlCreateInfoAMDsType
      (VkPipelineCompilerControlCreateInfoAMD*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPipelineCompilerControlCreateInfoAMDpNext
      (VkPipelineCompilerControlCreateInfoAMD*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPipelineCompilerControlCreateInfoAMDcompilerControlFlags
      (VkPipelineCompilerControlCreateInfoAMD*)
      VkPipelineCompilerControlFlagsAMD
      "___return (___arg1->compilerControlFlags);")
   (define-c-lambda
      make-VkPipelineCompilerControlCreateInfoAMD*
      (int)
      VkPipelineCompilerControlCreateInfoAMD*
      "VkPipelineCompilerControlCreateInfoAMD* vkpipelinecompilercontrolcreateinfoamd = malloc(___arg1 * sizeof(VkPipelineCompilerControlCreateInfoAMD));
      ___return (vkpipelinecompilercontrolcreateinfoamd);")
   (define-c-lambda
      ref-VkPipelineCompilerControlCreateInfoAMD
      (VkPipelineCompilerControlCreateInfoAMD* int)
      VkPipelineCompilerControlCreateInfoAMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPipelineCompilerControlCreateInfoAMD
      ((pointer VkPipelineCompilerControlCreateInfoAMD))
      VkPipelineCompilerControlCreateInfoAMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPipelineCompilerControlCreateInfoAMD
      (void* VkPipelineCompilerControlFlagsAMD)
      VkPipelineCompilerControlCreateInfoAMD*
      "VkPipelineCompilerControlCreateInfoAMD *pipelinecompilercontrolcreateinfoamd = malloc(sizeof(VkPipelineCompilerControlCreateInfoAMD));
pipelinecompilercontrolcreateinfoamd->sType=VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
pipelinecompilercontrolcreateinfoamd->pNext=___arg1;
pipelinecompilercontrolcreateinfoamd->compilerControlFlags=___arg2;
___return (pipelinecompilercontrolcreateinfoamd);"))
(begin-ffi
   (make-VkPhysicalDeviceCoherentMemoryFeaturesAMD
      ptr->VkPhysicalDeviceCoherentMemoryFeaturesAMD
      ref-VkPhysicalDeviceCoherentMemoryFeaturesAMD
      make-VkPhysicalDeviceCoherentMemoryFeaturesAMD*
      VkPhysicalDeviceCoherentMemoryFeaturesAMDdeviceCoherentMemory
      VkPhysicalDeviceCoherentMemoryFeaturesAMDpNext
      VkPhysicalDeviceCoherentMemoryFeaturesAMDsType
      VkPhysicalDeviceCoherentMemoryFeaturesAMD
      VkPhysicalDeviceCoherentMemoryFeaturesAMD*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type
      VkPhysicalDeviceCoherentMemoryFeaturesAMD
      (struct "VkPhysicalDeviceCoherentMemoryFeaturesAMD"))
   (c-define-type
      VkPhysicalDeviceCoherentMemoryFeaturesAMD*
      (pointer VkPhysicalDeviceCoherentMemoryFeaturesAMD))
   (define-c-lambda
      VkPhysicalDeviceCoherentMemoryFeaturesAMDsType
      (VkPhysicalDeviceCoherentMemoryFeaturesAMD*)
      VkStructureType
      "___return (___arg1->sType);")
   (define-c-lambda
      VkPhysicalDeviceCoherentMemoryFeaturesAMDpNext
      (VkPhysicalDeviceCoherentMemoryFeaturesAMD*)
      void*
      "___return (___arg1->pNext);")
   (define-c-lambda
      VkPhysicalDeviceCoherentMemoryFeaturesAMDdeviceCoherentMemory
      (VkPhysicalDeviceCoherentMemoryFeaturesAMD*)
      VkBool32
      "___return (___arg1->deviceCoherentMemory);")
   (define-c-lambda
      make-VkPhysicalDeviceCoherentMemoryFeaturesAMD*
      (int)
      VkPhysicalDeviceCoherentMemoryFeaturesAMD*
      "VkPhysicalDeviceCoherentMemoryFeaturesAMD* vkphysicaldevicecoherentmemoryfeaturesamd = malloc(___arg1 * sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD));
      ___return (vkphysicaldevicecoherentmemoryfeaturesamd);")
   (define-c-lambda
      ref-VkPhysicalDeviceCoherentMemoryFeaturesAMD
      (VkPhysicalDeviceCoherentMemoryFeaturesAMD* int)
      VkPhysicalDeviceCoherentMemoryFeaturesAMD*
      "___return(___arg1 + ___arg2);")
   (define-c-lambda
      ptr->VkPhysicalDeviceCoherentMemoryFeaturesAMD
      ((pointer VkPhysicalDeviceCoherentMemoryFeaturesAMD))
      VkPhysicalDeviceCoherentMemoryFeaturesAMD
      "___return(*___arg1);")
   (define-c-lambda
      make-VkPhysicalDeviceCoherentMemoryFeaturesAMD
      (void* VkBool32)
      VkPhysicalDeviceCoherentMemoryFeaturesAMD*
      "VkPhysicalDeviceCoherentMemoryFeaturesAMD *physicaldevicecoherentmemoryfeaturesamd = malloc(sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD));
physicaldevicecoherentmemoryfeaturesamd->sType=VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
physicaldevicecoherentmemoryfeaturesamd->pNext=___arg1;
physicaldevicecoherentmemoryfeaturesamd->deviceCoherentMemory=___arg2;
___return (physicaldevicecoherentmemoryfeaturesamd);"))
(begin-ffi
   (PFN_vkVoidFunction PFN_vkVoidFunction*)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (c-define-type PFN_vkVoidFunction (function () void))
   (c-define-type PFN_vkVoidFunction* (pointer PFN_vkVoidFunction)))
(begin-ffi
   (vkGetDescriptorSetLayoutSupport
      vkGetDeviceQueue2
      vkDestroySamplerYcbcrConversion
      vkCreateSamplerYcbcrConversion
      vkGetImageSparseMemoryRequirements2
      vkGetImageMemoryRequirements2
      vkGetBufferMemoryRequirements2
      vkUpdateDescriptorSetWithTemplate
      vkDestroyDescriptorUpdateTemplate
      vkCreateDescriptorUpdateTemplate
      vkCmdDispatchBase
      vkCmdSetDeviceMask
      vkBindImageMemory2
      vkBindBufferMemory2
      vkGetDeviceGroupPeerMemoryFeatures
      vkEnumeratePhysicalDeviceGroups
      vkGetPhysicalDeviceExternalFenceProperties
      vkGetPhysicalDeviceExternalSemaphoreProperties
      vkGetPhysicalDeviceExternalBufferProperties
      vkTrimCommandPool
      vkGetPhysicalDeviceSparseImageFormatProperties2
      vkGetPhysicalDeviceMemoryProperties2
      vkGetPhysicalDeviceQueueFamilyProperties2
      vkGetPhysicalDeviceImageFormatProperties2
      vkGetPhysicalDeviceFormatProperties2
      vkGetPhysicalDeviceProperties2
      vkGetPhysicalDeviceFeatures2
      vkCmdExecuteCommands
      vkCmdEndRenderPass
      vkCmdNextSubpass
      vkCmdBeginRenderPass
      vkCmdPushConstants
      vkCmdCopyQueryPoolResults
      vkCmdWriteTimestamp
      vkCmdResetQueryPool
      vkCmdEndQuery
      vkCmdBeginQuery
      vkCmdPipelineBarrier
      vkCmdWaitEvents
      vkCmdResetEvent
      vkCmdSetEvent
      vkCmdResolveImage
      vkCmdClearAttachments
      vkCmdClearDepthStencilImage
      vkCmdClearColorImage
      vkCmdFillBuffer
      vkCmdUpdateBuffer
      vkCmdCopyImageToBuffer
      vkCmdCopyBufferToImage
      vkCmdBlitImage
      vkCmdCopyImage
      vkCmdCopyBuffer
      vkCmdDispatchIndirect
      vkCmdDispatch
      vkCmdDrawIndexedIndirect
      vkCmdDrawIndirect
      vkCmdDrawIndexed
      vkCmdDraw
      vkCmdBindVertexBuffers
      vkCmdBindIndexBuffer
      vkCmdBindDescriptorSets
      vkCmdSetStencilReference
      vkCmdSetStencilWriteMask
      vkCmdSetStencilCompareMask
      vkCmdSetDepthBounds
      vkCmdSetBlendConstants
      vkCmdSetDepthBias
      vkCmdSetLineWidth
      vkCmdSetScissor
      vkCmdSetViewport
      vkCmdBindPipeline
      vkResetCommandBuffer
      vkEndCommandBuffer
      vkBeginCommandBuffer
      vkFreeCommandBuffers
      vkAllocateCommandBuffers
      vkResetCommandPool
      vkDestroyCommandPool
      vkCreateCommandPool
      vkGetRenderAreaGranularity
      vkDestroyRenderPass
      vkCreateRenderPass
      vkDestroyFramebuffer
      vkCreateFramebuffer
      vkUpdateDescriptorSets
      vkFreeDescriptorSets
      vkAllocateDescriptorSets
      vkResetDescriptorPool
      vkDestroyDescriptorPool
      vkCreateDescriptorPool
      vkDestroyDescriptorSetLayout
      vkCreateDescriptorSetLayout
      vkDestroySampler
      vkCreateSampler
      vkDestroyPipelineLayout
      vkCreatePipelineLayout
      vkDestroyPipeline
      vkCreateComputePipelines
      vkCreateGraphicsPipelines
      vkMergePipelineCaches
      vkGetPipelineCacheData
      vkDestroyPipelineCache
      vkCreatePipelineCache
      vkDestroyShaderModule
      vkCreateShaderModule
      vkDestroyImageView
      vkCreateImageView
      vkGetImageSubresourceLayout
      vkDestroyImage
      vkCreateImage
      vkDestroyBufferView
      vkCreateBufferView
      vkDestroyBuffer
      vkCreateBuffer
      vkGetQueryPoolResults
      vkDestroyQueryPool
      vkCreateQueryPool
      vkResetEvent
      vkSetEvent
      vkGetEventStatus
      vkDestroyEvent
      vkCreateEvent
      vkDestroySemaphore
      vkCreateSemaphore
      vkWaitForFences
      vkGetFenceStatus
      vkResetFences
      vkDestroyFence
      vkCreateFence
      vkQueueBindSparse
      vkGetPhysicalDeviceSparseImageFormatProperties
      vkGetImageSparseMemoryRequirements
      vkBindImageMemory
      vkGetImageMemoryRequirements
      vkBindBufferMemory
      vkGetBufferMemoryRequirements
      vkGetDeviceMemoryCommitment
      vkInvalidateMappedMemoryRanges
      vkFlushMappedMemoryRanges
      vkUnmapMemory
      vkMapMemory
      vkFreeMemory
      vkAllocateMemory
      vkDeviceWaitIdle
      vkQueueWaitIdle
      vkQueueSubmit
      vkGetDeviceQueue
      vkEnumerateDeviceExtensionProperties
      vkEnumerateDeviceLayerProperties
      vkEnumerateInstanceExtensionProperties
      vkEnumerateInstanceLayerProperties
      vkEnumerateInstanceVersion
      vkDestroyDevice
      vkCreateDevice
      vkGetPhysicalDeviceImageFormatProperties
      vkGetPhysicalDeviceFormatProperties
      vkGetPhysicalDeviceFeatures
      vkGetPhysicalDeviceMemoryProperties
      vkGetPhysicalDeviceQueueFamilyProperties
      vkGetPhysicalDeviceProperties
      vkGetInstanceProcAddr
      vkGetDeviceProcAddr
      vkEnumeratePhysicalDevices
      vkDestroyInstance
      vkCreateInstance)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkCreateInstance
      ((pointer VkInstanceCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkInstance))
      VkResult
      "vkCreateInstance")
   (define-c-lambda
      vkDestroyInstance
      (VkInstance (pointer VkAllocationCallbacks))
      void
      "vkDestroyInstance")
   (define-c-lambda
      vkEnumeratePhysicalDevices
      (VkInstance (pointer uint32_t) (pointer VkPhysicalDevice))
      VkResult
      "vkEnumeratePhysicalDevices")
   (define-c-lambda
      vkGetDeviceProcAddr
      (VkDevice (pointer char))
      PFN_vkVoidFunction
      "vkGetDeviceProcAddr")
   (define-c-lambda
      vkGetInstanceProcAddr
      (VkInstance (pointer char))
      PFN_vkVoidFunction
      "vkGetInstanceProcAddr")
   (define-c-lambda
      vkGetPhysicalDeviceProperties
      (VkPhysicalDevice (pointer VkPhysicalDeviceProperties))
      void
      "vkGetPhysicalDeviceProperties")
   (define-c-lambda
      vkGetPhysicalDeviceQueueFamilyProperties
      (VkPhysicalDevice (pointer uint32_t) (pointer VkQueueFamilyProperties))
      void
      "vkGetPhysicalDeviceQueueFamilyProperties")
   (define-c-lambda
      vkGetPhysicalDeviceMemoryProperties
      (VkPhysicalDevice (pointer VkPhysicalDeviceMemoryProperties))
      void
      "vkGetPhysicalDeviceMemoryProperties")
   (define-c-lambda
      vkGetPhysicalDeviceFeatures
      (VkPhysicalDevice (pointer VkPhysicalDeviceFeatures))
      void
      "vkGetPhysicalDeviceFeatures")
   (define-c-lambda
      vkGetPhysicalDeviceFormatProperties
      (VkPhysicalDevice VkFormat (pointer VkFormatProperties))
      void
      "vkGetPhysicalDeviceFormatProperties")
   (define-c-lambda
      vkGetPhysicalDeviceImageFormatProperties
      (VkPhysicalDevice
         VkFormat
         VkImageType
         VkImageTiling
         VkImageUsageFlags
         VkImageCreateFlags
         (pointer VkImageFormatProperties))
      VkResult
      "vkGetPhysicalDeviceImageFormatProperties")
   (define-c-lambda
      vkCreateDevice
      (VkPhysicalDevice
         (pointer VkDeviceCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkDevice))
      VkResult
      "vkCreateDevice")
   (define-c-lambda
      vkDestroyDevice
      (VkDevice (pointer VkAllocationCallbacks))
      void
      "vkDestroyDevice")
   (define-c-lambda
      vkEnumerateInstanceVersion
      ((pointer uint32_t))
      VkResult
      "vkEnumerateInstanceVersion")
   (define-c-lambda
      vkEnumerateInstanceLayerProperties
      ((pointer uint32_t) (pointer VkLayerProperties))
      VkResult
      "vkEnumerateInstanceLayerProperties")
   (define-c-lambda
      vkEnumerateInstanceExtensionProperties
      ((pointer char) (pointer uint32_t) (pointer VkExtensionProperties))
      VkResult
      "vkEnumerateInstanceExtensionProperties")
   (define-c-lambda
      vkEnumerateDeviceLayerProperties
      (VkPhysicalDevice (pointer uint32_t) (pointer VkLayerProperties))
      VkResult
      "vkEnumerateDeviceLayerProperties")
   (define-c-lambda
      vkEnumerateDeviceExtensionProperties
      (VkPhysicalDevice (pointer char) (pointer uint32_t) (pointer VkExtensionProperties))
      VkResult
      "vkEnumerateDeviceExtensionProperties")
   (define-c-lambda
      vkGetDeviceQueue
      (VkDevice uint32_t uint32_t (pointer VkQueue))
      void
      "vkGetDeviceQueue")
   (define-c-lambda
      vkQueueSubmit
      (VkQueue uint32_t (pointer VkSubmitInfo) VkFence)
      VkResult
      "vkQueueSubmit")
   (define-c-lambda vkQueueWaitIdle (VkQueue) VkResult "vkQueueWaitIdle")
   (define-c-lambda vkDeviceWaitIdle (VkDevice) VkResult "vkDeviceWaitIdle")
   (define-c-lambda
      vkAllocateMemory
      (VkDevice
         (pointer VkMemoryAllocateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkDeviceMemory))
      VkResult
      "vkAllocateMemory")
   (define-c-lambda
      vkFreeMemory
      (VkDevice VkDeviceMemory (pointer VkAllocationCallbacks))
      void
      "vkFreeMemory")
   (define-c-lambda
      vkMapMemory
      (VkDevice VkDeviceMemory VkDeviceSize VkDeviceSize VkMemoryMapFlags (pointer void))
      VkResult
      "vkMapMemory")
   (define-c-lambda vkUnmapMemory (VkDevice VkDeviceMemory) void "vkUnmapMemory")
   (define-c-lambda
      vkFlushMappedMemoryRanges
      (VkDevice uint32_t (pointer VkMappedMemoryRange))
      VkResult
      "vkFlushMappedMemoryRanges")
   (define-c-lambda
      vkInvalidateMappedMemoryRanges
      (VkDevice uint32_t (pointer VkMappedMemoryRange))
      VkResult
      "vkInvalidateMappedMemoryRanges")
   (define-c-lambda
      vkGetDeviceMemoryCommitment
      (VkDevice VkDeviceMemory (pointer VkDeviceSize))
      void
      "vkGetDeviceMemoryCommitment")
   (define-c-lambda
      vkGetBufferMemoryRequirements
      (VkDevice VkBuffer (pointer VkMemoryRequirements))
      void
      "vkGetBufferMemoryRequirements")
   (define-c-lambda
      vkBindBufferMemory
      (VkDevice VkBuffer VkDeviceMemory VkDeviceSize)
      VkResult
      "vkBindBufferMemory")
   (define-c-lambda
      vkGetImageMemoryRequirements
      (VkDevice VkImage (pointer VkMemoryRequirements))
      void
      "vkGetImageMemoryRequirements")
   (define-c-lambda
      vkBindImageMemory
      (VkDevice VkImage VkDeviceMemory VkDeviceSize)
      VkResult
      "vkBindImageMemory")
   (define-c-lambda
      vkGetImageSparseMemoryRequirements
      (VkDevice VkImage (pointer uint32_t) (pointer VkSparseImageMemoryRequirements))
      void
      "vkGetImageSparseMemoryRequirements")
   (define-c-lambda
      vkGetPhysicalDeviceSparseImageFormatProperties
      (VkPhysicalDevice
         VkFormat
         VkImageType
         VkSampleCountFlagBits
         VkImageUsageFlags
         VkImageTiling
         (pointer uint32_t)
         (pointer VkSparseImageFormatProperties))
      void
      "vkGetPhysicalDeviceSparseImageFormatProperties")
   (define-c-lambda
      vkQueueBindSparse
      (VkQueue uint32_t (pointer VkBindSparseInfo) VkFence)
      VkResult
      "vkQueueBindSparse")
   (define-c-lambda
      vkCreateFence
      (VkDevice
         (pointer VkFenceCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkFence))
      VkResult
      "vkCreateFence")
   (define-c-lambda
      vkDestroyFence
      (VkDevice VkFence (pointer VkAllocationCallbacks))
      void
      "vkDestroyFence")
   (define-c-lambda
      vkResetFences
      (VkDevice uint32_t (pointer VkFence))
      VkResult
      "vkResetFences")
   (define-c-lambda vkGetFenceStatus (VkDevice VkFence) VkResult "vkGetFenceStatus")
   (define-c-lambda
      vkWaitForFences
      (VkDevice uint32_t (pointer VkFence) VkBool32 uint64_t)
      VkResult
      "vkWaitForFences")
   (define-c-lambda
      vkCreateSemaphore
      (VkDevice
         (pointer VkSemaphoreCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkSemaphore))
      VkResult
      "vkCreateSemaphore")
   (define-c-lambda
      vkDestroySemaphore
      (VkDevice VkSemaphore (pointer VkAllocationCallbacks))
      void
      "vkDestroySemaphore")
   (define-c-lambda
      vkCreateEvent
      (VkDevice
         (pointer VkEventCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkEvent))
      VkResult
      "vkCreateEvent")
   (define-c-lambda
      vkDestroyEvent
      (VkDevice VkEvent (pointer VkAllocationCallbacks))
      void
      "vkDestroyEvent")
   (define-c-lambda vkGetEventStatus (VkDevice VkEvent) VkResult "vkGetEventStatus")
   (define-c-lambda vkSetEvent (VkDevice VkEvent) VkResult "vkSetEvent")
   (define-c-lambda vkResetEvent (VkDevice VkEvent) VkResult "vkResetEvent")
   (define-c-lambda
      vkCreateQueryPool
      (VkDevice
         (pointer VkQueryPoolCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkQueryPool))
      VkResult
      "vkCreateQueryPool")
   (define-c-lambda
      vkDestroyQueryPool
      (VkDevice VkQueryPool (pointer VkAllocationCallbacks))
      void
      "vkDestroyQueryPool")
   (define-c-lambda
      vkGetQueryPoolResults
      (VkDevice
         VkQueryPool
         uint32_t
         uint32_t
         size_t
         (pointer void)
         VkDeviceSize
         VkQueryResultFlags)
      VkResult
      "vkGetQueryPoolResults")
   (define-c-lambda
      vkCreateBuffer
      (VkDevice
         (pointer VkBufferCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkBuffer))
      VkResult
      "vkCreateBuffer")
   (define-c-lambda
      vkDestroyBuffer
      (VkDevice VkBuffer (pointer VkAllocationCallbacks))
      void
      "vkDestroyBuffer")
   (define-c-lambda
      vkCreateBufferView
      (VkDevice
         (pointer VkBufferViewCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkBufferView))
      VkResult
      "vkCreateBufferView")
   (define-c-lambda
      vkDestroyBufferView
      (VkDevice VkBufferView (pointer VkAllocationCallbacks))
      void
      "vkDestroyBufferView")
   (define-c-lambda
      vkCreateImage
      (VkDevice
         (pointer VkImageCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkImage))
      VkResult
      "vkCreateImage")
   (define-c-lambda
      vkDestroyImage
      (VkDevice VkImage (pointer VkAllocationCallbacks))
      void
      "vkDestroyImage")
   (define-c-lambda
      vkGetImageSubresourceLayout
      (VkDevice VkImage (pointer VkImageSubresource) (pointer VkSubresourceLayout))
      void
      "vkGetImageSubresourceLayout")
   (define-c-lambda
      vkCreateImageView
      (VkDevice
         (pointer VkImageViewCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkImageView))
      VkResult
      "vkCreateImageView")
   (define-c-lambda
      vkDestroyImageView
      (VkDevice VkImageView (pointer VkAllocationCallbacks))
      void
      "vkDestroyImageView")
   (define-c-lambda
      vkCreateShaderModule
      (VkDevice
         (pointer VkShaderModuleCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkShaderModule))
      VkResult
      "vkCreateShaderModule")
   (define-c-lambda
      vkDestroyShaderModule
      (VkDevice VkShaderModule (pointer VkAllocationCallbacks))
      void
      "vkDestroyShaderModule")
   (define-c-lambda
      vkCreatePipelineCache
      (VkDevice
         (pointer VkPipelineCacheCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkPipelineCache))
      VkResult
      "vkCreatePipelineCache")
   (define-c-lambda
      vkDestroyPipelineCache
      (VkDevice VkPipelineCache (pointer VkAllocationCallbacks))
      void
      "vkDestroyPipelineCache")
   (define-c-lambda
      vkGetPipelineCacheData
      (VkDevice VkPipelineCache (pointer size_t) (pointer void))
      VkResult
      "vkGetPipelineCacheData")
   (define-c-lambda
      vkMergePipelineCaches
      (VkDevice VkPipelineCache uint32_t (pointer VkPipelineCache))
      VkResult
      "vkMergePipelineCaches")
   (define-c-lambda
      vkCreateGraphicsPipelines
      (VkDevice
         VkPipelineCache
         uint32_t
         (pointer VkGraphicsPipelineCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkPipeline))
      VkResult
      "vkCreateGraphicsPipelines")
   (define-c-lambda
      vkCreateComputePipelines
      (VkDevice
         VkPipelineCache
         uint32_t
         (pointer VkComputePipelineCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkPipeline))
      VkResult
      "vkCreateComputePipelines")
   (define-c-lambda
      vkDestroyPipeline
      (VkDevice VkPipeline (pointer VkAllocationCallbacks))
      void
      "vkDestroyPipeline")
   (define-c-lambda
      vkCreatePipelineLayout
      (VkDevice
         (pointer VkPipelineLayoutCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkPipelineLayout))
      VkResult
      "vkCreatePipelineLayout")
   (define-c-lambda
      vkDestroyPipelineLayout
      (VkDevice VkPipelineLayout (pointer VkAllocationCallbacks))
      void
      "vkDestroyPipelineLayout")
   (define-c-lambda
      vkCreateSampler
      (VkDevice
         (pointer VkSamplerCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkSampler))
      VkResult
      "vkCreateSampler")
   (define-c-lambda
      vkDestroySampler
      (VkDevice VkSampler (pointer VkAllocationCallbacks))
      void
      "vkDestroySampler")
   (define-c-lambda
      vkCreateDescriptorSetLayout
      (VkDevice
         (pointer VkDescriptorSetLayoutCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkDescriptorSetLayout))
      VkResult
      "vkCreateDescriptorSetLayout")
   (define-c-lambda
      vkDestroyDescriptorSetLayout
      (VkDevice VkDescriptorSetLayout (pointer VkAllocationCallbacks))
      void
      "vkDestroyDescriptorSetLayout")
   (define-c-lambda
      vkCreateDescriptorPool
      (VkDevice
         (pointer VkDescriptorPoolCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkDescriptorPool))
      VkResult
      "vkCreateDescriptorPool")
   (define-c-lambda
      vkDestroyDescriptorPool
      (VkDevice VkDescriptorPool (pointer VkAllocationCallbacks))
      void
      "vkDestroyDescriptorPool")
   (define-c-lambda
      vkResetDescriptorPool
      (VkDevice VkDescriptorPool VkDescriptorPoolResetFlags)
      VkResult
      "vkResetDescriptorPool")
   (define-c-lambda
      vkAllocateDescriptorSets
      (VkDevice (pointer VkDescriptorSetAllocateInfo) (pointer VkDescriptorSet))
      VkResult
      "vkAllocateDescriptorSets")
   (define-c-lambda
      vkFreeDescriptorSets
      (VkDevice VkDescriptorPool uint32_t (pointer VkDescriptorSet))
      VkResult
      "vkFreeDescriptorSets")
   (define-c-lambda
      vkUpdateDescriptorSets
      (VkDevice
         uint32_t
         (pointer VkWriteDescriptorSet)
         uint32_t
         (pointer VkCopyDescriptorSet))
      void
      "vkUpdateDescriptorSets")
   (define-c-lambda
      vkCreateFramebuffer
      (VkDevice
         (pointer VkFramebufferCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkFramebuffer))
      VkResult
      "vkCreateFramebuffer")
   (define-c-lambda
      vkDestroyFramebuffer
      (VkDevice VkFramebuffer (pointer VkAllocationCallbacks))
      void
      "vkDestroyFramebuffer")
   (define-c-lambda
      vkCreateRenderPass
      (VkDevice
         (pointer VkRenderPassCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkRenderPass))
      VkResult
      "vkCreateRenderPass")
   (define-c-lambda
      vkDestroyRenderPass
      (VkDevice VkRenderPass (pointer VkAllocationCallbacks))
      void
      "vkDestroyRenderPass")
   (define-c-lambda
      vkGetRenderAreaGranularity
      (VkDevice VkRenderPass (pointer VkExtent2D))
      void
      "vkGetRenderAreaGranularity")
   (define-c-lambda
      vkCreateCommandPool
      (VkDevice
         (pointer VkCommandPoolCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkCommandPool))
      VkResult
      "vkCreateCommandPool")
   (define-c-lambda
      vkDestroyCommandPool
      (VkDevice VkCommandPool (pointer VkAllocationCallbacks))
      void
      "vkDestroyCommandPool")
   (define-c-lambda
      vkResetCommandPool
      (VkDevice VkCommandPool VkCommandPoolResetFlags)
      VkResult
      "vkResetCommandPool")
   (define-c-lambda
      vkAllocateCommandBuffers
      (VkDevice (pointer VkCommandBufferAllocateInfo) (pointer VkCommandBuffer))
      VkResult
      "vkAllocateCommandBuffers")
   (define-c-lambda
      vkFreeCommandBuffers
      (VkDevice VkCommandPool uint32_t (pointer VkCommandBuffer))
      void
      "vkFreeCommandBuffers")
   (define-c-lambda
      vkBeginCommandBuffer
      (VkCommandBuffer (pointer VkCommandBufferBeginInfo))
      VkResult
      "vkBeginCommandBuffer")
   (define-c-lambda vkEndCommandBuffer (VkCommandBuffer) VkResult "vkEndCommandBuffer")
   (define-c-lambda
      vkResetCommandBuffer
      (VkCommandBuffer VkCommandBufferResetFlags)
      VkResult
      "vkResetCommandBuffer")
   (define-c-lambda
      vkCmdBindPipeline
      (VkCommandBuffer VkPipelineBindPoint VkPipeline)
      void
      "vkCmdBindPipeline")
   (define-c-lambda
      vkCmdSetViewport
      (VkCommandBuffer uint32_t uint32_t (pointer VkViewport))
      void
      "vkCmdSetViewport")
   (define-c-lambda
      vkCmdSetScissor
      (VkCommandBuffer uint32_t uint32_t (pointer VkRect2D))
      void
      "vkCmdSetScissor")
   (define-c-lambda vkCmdSetLineWidth (VkCommandBuffer float) void "vkCmdSetLineWidth")
   (define-c-lambda
      vkCmdSetDepthBias
      (VkCommandBuffer float float float)
      void
      "vkCmdSetDepthBias")
   (define-c-lambda
      vkCmdSetBlendConstants
      (VkCommandBuffer (pointer float))
      void
      "vkCmdSetBlendConstants")
   (define-c-lambda
      vkCmdSetDepthBounds
      (VkCommandBuffer float float)
      void
      "vkCmdSetDepthBounds")
   (define-c-lambda
      vkCmdSetStencilCompareMask
      (VkCommandBuffer VkStencilFaceFlags uint32_t)
      void
      "vkCmdSetStencilCompareMask")
   (define-c-lambda
      vkCmdSetStencilWriteMask
      (VkCommandBuffer VkStencilFaceFlags uint32_t)
      void
      "vkCmdSetStencilWriteMask")
   (define-c-lambda
      vkCmdSetStencilReference
      (VkCommandBuffer VkStencilFaceFlags uint32_t)
      void
      "vkCmdSetStencilReference")
   (define-c-lambda
      vkCmdBindDescriptorSets
      (VkCommandBuffer
         VkPipelineBindPoint
         VkPipelineLayout
         uint32_t
         uint32_t
         (pointer VkDescriptorSet)
         uint32_t
         (pointer uint32_t))
      void
      "vkCmdBindDescriptorSets")
   (define-c-lambda
      vkCmdBindIndexBuffer
      (VkCommandBuffer VkBuffer VkDeviceSize VkIndexType)
      void
      "vkCmdBindIndexBuffer")
   (define-c-lambda
      vkCmdBindVertexBuffers
      (VkCommandBuffer uint32_t uint32_t (pointer VkBuffer) (pointer VkDeviceSize))
      void
      "vkCmdBindVertexBuffers")
   (define-c-lambda
      vkCmdDraw
      (VkCommandBuffer uint32_t uint32_t uint32_t uint32_t)
      void
      "vkCmdDraw")
   (define-c-lambda
      vkCmdDrawIndexed
      (VkCommandBuffer uint32_t uint32_t uint32_t int32_t uint32_t)
      void
      "vkCmdDrawIndexed")
   (define-c-lambda
      vkCmdDrawIndirect
      (VkCommandBuffer VkBuffer VkDeviceSize uint32_t uint32_t)
      void
      "vkCmdDrawIndirect")
   (define-c-lambda
      vkCmdDrawIndexedIndirect
      (VkCommandBuffer VkBuffer VkDeviceSize uint32_t uint32_t)
      void
      "vkCmdDrawIndexedIndirect")
   (define-c-lambda
      vkCmdDispatch
      (VkCommandBuffer uint32_t uint32_t uint32_t)
      void
      "vkCmdDispatch")
   (define-c-lambda
      vkCmdDispatchIndirect
      (VkCommandBuffer VkBuffer VkDeviceSize)
      void
      "vkCmdDispatchIndirect")
   (define-c-lambda
      vkCmdCopyBuffer
      (VkCommandBuffer VkBuffer VkBuffer uint32_t (pointer VkBufferCopy))
      void
      "vkCmdCopyBuffer")
   (define-c-lambda
      vkCmdCopyImage
      (VkCommandBuffer
         VkImage
         VkImageLayout
         VkImage
         VkImageLayout
         uint32_t
         (pointer VkImageCopy))
      void
      "vkCmdCopyImage")
   (define-c-lambda
      vkCmdBlitImage
      (VkCommandBuffer
         VkImage
         VkImageLayout
         VkImage
         VkImageLayout
         uint32_t
         (pointer VkImageBlit)
         VkFilter)
      void
      "vkCmdBlitImage")
   (define-c-lambda
      vkCmdCopyBufferToImage
      (VkCommandBuffer
         VkBuffer
         VkImage
         VkImageLayout
         uint32_t
         (pointer VkBufferImageCopy))
      void
      "vkCmdCopyBufferToImage")
   (define-c-lambda
      vkCmdCopyImageToBuffer
      (VkCommandBuffer
         VkImage
         VkImageLayout
         VkBuffer
         uint32_t
         (pointer VkBufferImageCopy))
      void
      "vkCmdCopyImageToBuffer")
   (define-c-lambda
      vkCmdUpdateBuffer
      (VkCommandBuffer VkBuffer VkDeviceSize VkDeviceSize (pointer void))
      void
      "vkCmdUpdateBuffer")
   (define-c-lambda
      vkCmdFillBuffer
      (VkCommandBuffer VkBuffer VkDeviceSize VkDeviceSize uint32_t)
      void
      "vkCmdFillBuffer")
   (define-c-lambda
      vkCmdClearColorImage
      (VkCommandBuffer
         VkImage
         VkImageLayout
         (pointer VkClearColorValue)
         uint32_t
         (pointer VkImageSubresourceRange))
      void
      "vkCmdClearColorImage")
   (define-c-lambda
      vkCmdClearDepthStencilImage
      (VkCommandBuffer
         VkImage
         VkImageLayout
         (pointer VkClearDepthStencilValue)
         uint32_t
         (pointer VkImageSubresourceRange))
      void
      "vkCmdClearDepthStencilImage")
   (define-c-lambda
      vkCmdClearAttachments
      (VkCommandBuffer
         uint32_t
         (pointer VkClearAttachment)
         uint32_t
         (pointer VkClearRect))
      void
      "vkCmdClearAttachments")
   (define-c-lambda
      vkCmdResolveImage
      (VkCommandBuffer
         VkImage
         VkImageLayout
         VkImage
         VkImageLayout
         uint32_t
         (pointer VkImageResolve))
      void
      "vkCmdResolveImage")
   (define-c-lambda
      vkCmdSetEvent
      (VkCommandBuffer VkEvent VkPipelineStageFlags)
      void
      "vkCmdSetEvent")
   (define-c-lambda
      vkCmdResetEvent
      (VkCommandBuffer VkEvent VkPipelineStageFlags)
      void
      "vkCmdResetEvent")
   (define-c-lambda
      vkCmdWaitEvents
      (VkCommandBuffer
         uint32_t
         (pointer VkEvent)
         VkPipelineStageFlags
         VkPipelineStageFlags
         uint32_t
         (pointer VkMemoryBarrier)
         uint32_t
         (pointer VkBufferMemoryBarrier)
         uint32_t
         (pointer VkImageMemoryBarrier))
      void
      "vkCmdWaitEvents")
   (define-c-lambda
      vkCmdPipelineBarrier
      (VkCommandBuffer
         VkPipelineStageFlags
         VkPipelineStageFlags
         VkDependencyFlags
         uint32_t
         (pointer VkMemoryBarrier)
         uint32_t
         (pointer VkBufferMemoryBarrier)
         uint32_t
         (pointer VkImageMemoryBarrier))
      void
      "vkCmdPipelineBarrier")
   (define-c-lambda
      vkCmdBeginQuery
      (VkCommandBuffer VkQueryPool uint32_t VkQueryControlFlags)
      void
      "vkCmdBeginQuery")
   (define-c-lambda
      vkCmdEndQuery
      (VkCommandBuffer VkQueryPool uint32_t)
      void
      "vkCmdEndQuery")
   (define-c-lambda
      vkCmdResetQueryPool
      (VkCommandBuffer VkQueryPool uint32_t uint32_t)
      void
      "vkCmdResetQueryPool")
   (define-c-lambda
      vkCmdWriteTimestamp
      (VkCommandBuffer VkPipelineStageFlagBits VkQueryPool uint32_t)
      void
      "vkCmdWriteTimestamp")
   (define-c-lambda
      vkCmdCopyQueryPoolResults
      (VkCommandBuffer
         VkQueryPool
         uint32_t
         uint32_t
         VkBuffer
         VkDeviceSize
         VkDeviceSize
         VkQueryResultFlags)
      void
      "vkCmdCopyQueryPoolResults")
   (define-c-lambda
      vkCmdPushConstants
      (VkCommandBuffer
         VkPipelineLayout
         VkShaderStageFlags
         uint32_t
         uint32_t
         (pointer void))
      void
      "vkCmdPushConstants")
   (define-c-lambda
      vkCmdBeginRenderPass
      (VkCommandBuffer (pointer VkRenderPassBeginInfo) VkSubpassContents)
      void
      "vkCmdBeginRenderPass")
   (define-c-lambda
      vkCmdNextSubpass
      (VkCommandBuffer VkSubpassContents)
      void
      "vkCmdNextSubpass")
   (define-c-lambda vkCmdEndRenderPass (VkCommandBuffer) void "vkCmdEndRenderPass")
   (define-c-lambda
      vkCmdExecuteCommands
      (VkCommandBuffer uint32_t (pointer VkCommandBuffer))
      void
      "vkCmdExecuteCommands")
   (define-c-lambda
      vkGetPhysicalDeviceFeatures2
      (VkPhysicalDevice (pointer VkPhysicalDeviceFeatures2))
      void
      "vkGetPhysicalDeviceFeatures2")
   (define-c-lambda
      vkGetPhysicalDeviceProperties2
      (VkPhysicalDevice (pointer VkPhysicalDeviceProperties2))
      void
      "vkGetPhysicalDeviceProperties2")
   (define-c-lambda
      vkGetPhysicalDeviceFormatProperties2
      (VkPhysicalDevice VkFormat (pointer VkFormatProperties2))
      void
      "vkGetPhysicalDeviceFormatProperties2")
   (define-c-lambda
      vkGetPhysicalDeviceImageFormatProperties2
      (VkPhysicalDevice
         (pointer VkPhysicalDeviceImageFormatInfo2)
         (pointer VkImageFormatProperties2))
      VkResult
      "vkGetPhysicalDeviceImageFormatProperties2")
   (define-c-lambda
      vkGetPhysicalDeviceQueueFamilyProperties2
      (VkPhysicalDevice (pointer uint32_t) (pointer VkQueueFamilyProperties2))
      void
      "vkGetPhysicalDeviceQueueFamilyProperties2")
   (define-c-lambda
      vkGetPhysicalDeviceMemoryProperties2
      (VkPhysicalDevice (pointer VkPhysicalDeviceMemoryProperties2))
      void
      "vkGetPhysicalDeviceMemoryProperties2")
   (define-c-lambda
      vkGetPhysicalDeviceSparseImageFormatProperties2
      (VkPhysicalDevice
         (pointer VkPhysicalDeviceSparseImageFormatInfo2)
         (pointer uint32_t)
         (pointer VkSparseImageFormatProperties2))
      void
      "vkGetPhysicalDeviceSparseImageFormatProperties2")
   (define-c-lambda
      vkTrimCommandPool
      (VkDevice VkCommandPool VkCommandPoolTrimFlags)
      void
      "vkTrimCommandPool")
   (define-c-lambda
      vkGetPhysicalDeviceExternalBufferProperties
      (VkPhysicalDevice
         (pointer VkPhysicalDeviceExternalBufferInfo)
         (pointer VkExternalBufferProperties))
      void
      "vkGetPhysicalDeviceExternalBufferProperties")
   (define-c-lambda
      vkGetPhysicalDeviceExternalSemaphoreProperties
      (VkPhysicalDevice
         (pointer VkPhysicalDeviceExternalSemaphoreInfo)
         (pointer VkExternalSemaphoreProperties))
      void
      "vkGetPhysicalDeviceExternalSemaphoreProperties")
   (define-c-lambda
      vkGetPhysicalDeviceExternalFenceProperties
      (VkPhysicalDevice
         (pointer VkPhysicalDeviceExternalFenceInfo)
         (pointer VkExternalFenceProperties))
      void
      "vkGetPhysicalDeviceExternalFenceProperties")
   (define-c-lambda
      vkEnumeratePhysicalDeviceGroups
      (VkInstance (pointer uint32_t) (pointer VkPhysicalDeviceGroupProperties))
      VkResult
      "vkEnumeratePhysicalDeviceGroups")
   (define-c-lambda
      vkGetDeviceGroupPeerMemoryFeatures
      (VkDevice uint32_t uint32_t uint32_t (pointer VkPeerMemoryFeatureFlags))
      void
      "vkGetDeviceGroupPeerMemoryFeatures")
   (define-c-lambda
      vkBindBufferMemory2
      (VkDevice uint32_t (pointer VkBindBufferMemoryInfo))
      VkResult
      "vkBindBufferMemory2")
   (define-c-lambda
      vkBindImageMemory2
      (VkDevice uint32_t (pointer VkBindImageMemoryInfo))
      VkResult
      "vkBindImageMemory2")
   (define-c-lambda
      vkCmdSetDeviceMask
      (VkCommandBuffer uint32_t)
      void
      "vkCmdSetDeviceMask")
   (define-c-lambda
      vkCmdDispatchBase
      (VkCommandBuffer uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t)
      void
      "vkCmdDispatchBase")
   (define-c-lambda
      vkCreateDescriptorUpdateTemplate
      (VkDevice
         (pointer VkDescriptorUpdateTemplateCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkDescriptorUpdateTemplate))
      VkResult
      "vkCreateDescriptorUpdateTemplate")
   (define-c-lambda
      vkDestroyDescriptorUpdateTemplate
      (VkDevice VkDescriptorUpdateTemplate (pointer VkAllocationCallbacks))
      void
      "vkDestroyDescriptorUpdateTemplate")
   (define-c-lambda
      vkUpdateDescriptorSetWithTemplate
      (VkDevice VkDescriptorSet VkDescriptorUpdateTemplate (pointer void))
      void
      "vkUpdateDescriptorSetWithTemplate")
   (define-c-lambda
      vkGetBufferMemoryRequirements2
      (VkDevice (pointer VkBufferMemoryRequirementsInfo2) (pointer VkMemoryRequirements2))
      void
      "vkGetBufferMemoryRequirements2")
   (define-c-lambda
      vkGetImageMemoryRequirements2
      (VkDevice (pointer VkImageMemoryRequirementsInfo2) (pointer VkMemoryRequirements2))
      void
      "vkGetImageMemoryRequirements2")
   (define-c-lambda
      vkGetImageSparseMemoryRequirements2
      (VkDevice
         (pointer VkImageSparseMemoryRequirementsInfo2)
         (pointer uint32_t)
         (pointer VkSparseImageMemoryRequirements2))
      void
      "vkGetImageSparseMemoryRequirements2")
   (define-c-lambda
      vkCreateSamplerYcbcrConversion
      (VkDevice
         (pointer VkSamplerYcbcrConversionCreateInfo)
         (pointer VkAllocationCallbacks)
         (pointer VkSamplerYcbcrConversion))
      VkResult
      "vkCreateSamplerYcbcrConversion")
   (define-c-lambda
      vkDestroySamplerYcbcrConversion
      (VkDevice VkSamplerYcbcrConversion (pointer VkAllocationCallbacks))
      void
      "vkDestroySamplerYcbcrConversion")
   (define-c-lambda
      vkGetDeviceQueue2
      (VkDevice (pointer VkDeviceQueueInfo2) (pointer VkQueue))
      void
      "vkGetDeviceQueue2")
   (define-c-lambda
      vkGetDescriptorSetLayoutSupport
      (VkDevice
         (pointer VkDescriptorSetLayoutCreateInfo)
         (pointer VkDescriptorSetLayoutSupport))
      void
      "vkGetDescriptorSetLayoutSupport"))
(begin-ffi
   (vulkan-debug-callback)
   (c-define
      (vulkan-debug-callback str)
      (char-string)
      void
      "vulkan_callback"
      ""
      (displayln "debug callback:" str))
   (c-declare
      "
   static VKAPI_ATTR VkBool32 VKAPI_CALL
   debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
                 VkDebugUtilsMessageTypeFlagsEXT messageType,
                 const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData,
                 void* pUserData) {
       vulkan_callback(pCallbackData->pMessage);
       return VK_FALSE;
   }"))
(define VK_KHR_SURFACE_SPEC_VERSION 25)
(define VK_ERROR_SURFACE_LOST_KHR -999999900)
(define VK_ERROR_NATIVE_WINDOW_IN_USE_KHR -999999901)
(define VK_OBJECT_TYPE_SURFACE_KHR 999999900)
(begin-ffi
   (vkDestroySurfaceKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkDestroySurfaceKHR
      (VkInstance VkSurfaceKHR (pointer VkAllocationCallbacks))
      void
      "PFN_vkDestroySurfaceKHR func = (PFN_vkDestroySurfaceKHR) vkGetInstanceProcAddr(___arg1,\"vkDestroySurfaceKHR\");
func(___arg1,___arg2,___arg3);
 ___return;"))
(begin-ffi
   (vkGetPhysicalDeviceSurfaceSupportKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkGetPhysicalDeviceSurfaceSupportKHR
      (VkInstance VkPhysicalDevice uint32_t VkSurfaceKHR (pointer VkBool32))
      VkResult
      "PFN_vkGetPhysicalDeviceSurfaceSupportKHR func = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR) vkGetInstanceProcAddr(___arg1,\"vkGetPhysicalDeviceSurfaceSupportKHR\");
___return (func(___arg2,___arg3,___arg4,___arg5));"))
(begin-ffi
   (vkGetPhysicalDeviceSurfaceCapabilitiesKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkGetPhysicalDeviceSurfaceCapabilitiesKHR
      (VkInstance VkPhysicalDevice VkSurfaceKHR (pointer VkSurfaceCapabilitiesKHR))
      VkResult
      "PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR func = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR) vkGetInstanceProcAddr(___arg1,\"vkGetPhysicalDeviceSurfaceCapabilitiesKHR\");
___return (func(___arg2,___arg3,___arg4));"))
(begin-ffi
   (vkGetPhysicalDeviceSurfaceFormatsKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkGetPhysicalDeviceSurfaceFormatsKHR
      (VkInstance
         VkPhysicalDevice
         VkSurfaceKHR
         (pointer uint32_t)
         (pointer VkSurfaceFormatKHR))
      VkResult
      "PFN_vkGetPhysicalDeviceSurfaceFormatsKHR func = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR) vkGetInstanceProcAddr(___arg1,\"vkGetPhysicalDeviceSurfaceFormatsKHR\");
___return (func(___arg2,___arg3,___arg4,___arg5));"))
(begin-ffi
   (vkGetPhysicalDeviceSurfacePresentModesKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkGetPhysicalDeviceSurfacePresentModesKHR
      (VkInstance
         VkPhysicalDevice
         VkSurfaceKHR
         (pointer uint32_t)
         (pointer VkPresentModeKHR))
      VkResult
      "PFN_vkGetPhysicalDeviceSurfacePresentModesKHR func = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR) vkGetInstanceProcAddr(___arg1,\"vkGetPhysicalDeviceSurfacePresentModesKHR\");
___return (func(___arg2,___arg3,___arg4,___arg5));"))
(define VK_KHR_SWAPCHAIN_SPEC_VERSION 70)
(define VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR 999999900)
(define VK_STRUCTURE_TYPE_PRESENT_INFO_KHR 999999901)
(define VK_IMAGE_LAYOUT_PRESENT_SRC_KHR 999999902)
(define VK_SUBOPTIMAL_KHR 999999903)
(define VK_ERROR_OUT_OF_DATE_KHR -999999904)
(define VK_OBJECT_TYPE_SWAPCHAIN_KHR 999999900)
(define VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR 1000006007)
(define VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR 1000006008)
(define VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR 1000006009)
(define VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR 1000006010)
(define VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR 1000006011)
(define VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR 1000006012)
(define VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR 1)
(define VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR 2)
(begin-ffi
   (vkCreateSwapchainKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkCreateSwapchainKHR
      (VkInstance
         VkDevice
         (pointer VkSwapchainCreateInfoKHR)
         (pointer VkAllocationCallbacks)
         (pointer VkSwapchainKHR))
      VkResult
      "PFN_vkCreateSwapchainKHR func = (PFN_vkCreateSwapchainKHR) vkGetInstanceProcAddr(___arg1,\"vkCreateSwapchainKHR\");
___return (func(___arg2,___arg3,___arg4,___arg5));"))
(begin-ffi
   (vkDestroySwapchainKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkDestroySwapchainKHR
      (VkInstance VkDevice VkSwapchainKHR (pointer VkAllocationCallbacks))
      void
      "PFN_vkDestroySwapchainKHR func = (PFN_vkDestroySwapchainKHR) vkGetInstanceProcAddr(___arg1,\"vkDestroySwapchainKHR\");
func(___arg2,___arg3,___arg4);
 ___return;"))
(begin-ffi
   (vkGetSwapchainImagesKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkGetSwapchainImagesKHR
      (VkInstance VkDevice VkSwapchainKHR (pointer uint32_t) (pointer VkImage))
      VkResult
      "PFN_vkGetSwapchainImagesKHR func = (PFN_vkGetSwapchainImagesKHR) vkGetInstanceProcAddr(___arg1,\"vkGetSwapchainImagesKHR\");
___return (func(___arg2,___arg3,___arg4,___arg5));"))
(begin-ffi
   (vkAcquireNextImageKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkAcquireNextImageKHR
      (VkInstance VkDevice VkSwapchainKHR uint64_t VkSemaphore VkFence (pointer uint32_t))
      VkResult
      "PFN_vkAcquireNextImageKHR func = (PFN_vkAcquireNextImageKHR) vkGetInstanceProcAddr(___arg1,\"vkAcquireNextImageKHR\");
___return (func(___arg2,___arg3,___arg4,___arg5,___arg6,___arg7));"))
(begin-ffi
   (vkQueuePresentKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkQueuePresentKHR
      (VkInstance VkQueue (pointer VkPresentInfoKHR))
      VkResult
      "PFN_vkQueuePresentKHR func = (PFN_vkQueuePresentKHR) vkGetInstanceProcAddr(___arg1,\"vkQueuePresentKHR\");
___return (func(___arg2,___arg3));"))
(begin-ffi
   (vkGetDeviceGroupPresentCapabilitiesKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkGetDeviceGroupPresentCapabilitiesKHR
      (VkInstance VkDevice (pointer VkDeviceGroupPresentCapabilitiesKHR))
      VkResult
      "PFN_vkGetDeviceGroupPresentCapabilitiesKHR func = (PFN_vkGetDeviceGroupPresentCapabilitiesKHR) vkGetInstanceProcAddr(___arg1,\"vkGetDeviceGroupPresentCapabilitiesKHR\");
___return (func(___arg2,___arg3));"))
(begin-ffi
   (vkGetDeviceGroupSurfacePresentModesKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkGetDeviceGroupSurfacePresentModesKHR
      (VkInstance VkDevice VkSurfaceKHR (pointer VkDeviceGroupPresentModeFlagsKHR))
      VkResult
      "PFN_vkGetDeviceGroupSurfacePresentModesKHR func = (PFN_vkGetDeviceGroupSurfacePresentModesKHR) vkGetInstanceProcAddr(___arg1,\"vkGetDeviceGroupSurfacePresentModesKHR\");
___return (func(___arg2,___arg3,___arg4));"))
(begin-ffi
   (vkGetPhysicalDevicePresentRectanglesKHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkGetPhysicalDevicePresentRectanglesKHR
      (VkInstance VkPhysicalDevice VkSurfaceKHR (pointer uint32_t) (pointer VkRect2D))
      VkResult
      "PFN_vkGetPhysicalDevicePresentRectanglesKHR func = (PFN_vkGetPhysicalDevicePresentRectanglesKHR) vkGetInstanceProcAddr(___arg1,\"vkGetPhysicalDevicePresentRectanglesKHR\");
___return (func(___arg2,___arg3,___arg4,___arg5));"))
(begin-ffi
   (vkAcquireNextImage2KHR)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkAcquireNextImage2KHR
      (VkInstance VkDevice (pointer VkAcquireNextImageInfoKHR) (pointer uint32_t))
      VkResult
      "PFN_vkAcquireNextImage2KHR func = (PFN_vkAcquireNextImage2KHR) vkGetInstanceProcAddr(___arg1,\"vkAcquireNextImage2KHR\");
___return (func(___arg2,___arg3,___arg4));"))
(define VK_EXT_DEBUG_UTILS_SPEC_VERSION 1)
(define VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT 999999900)
(define VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT 999999901)
(define VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT 999999902)
(define VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT 999999903)
(define VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT 999999904)
(define VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT 999999900)
(begin-ffi
   (vkSetDebugUtilsObjectNameEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkSetDebugUtilsObjectNameEXT
      (VkInstance VkDevice (pointer VkDebugUtilsObjectNameInfoEXT))
      VkResult
      "PFN_vkSetDebugUtilsObjectNameEXT func = (PFN_vkSetDebugUtilsObjectNameEXT) vkGetInstanceProcAddr(___arg1,\"vkSetDebugUtilsObjectNameEXT\");
___return (func(___arg2,___arg3));"))
(begin-ffi
   (vkSetDebugUtilsObjectTagEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkSetDebugUtilsObjectTagEXT
      (VkInstance VkDevice (pointer VkDebugUtilsObjectTagInfoEXT))
      VkResult
      "PFN_vkSetDebugUtilsObjectTagEXT func = (PFN_vkSetDebugUtilsObjectTagEXT) vkGetInstanceProcAddr(___arg1,\"vkSetDebugUtilsObjectTagEXT\");
___return (func(___arg2,___arg3));"))
(begin-ffi
   (vkQueueBeginDebugUtilsLabelEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkQueueBeginDebugUtilsLabelEXT
      (VkInstance VkQueue (pointer VkDebugUtilsLabelEXT))
      void
      "PFN_vkQueueBeginDebugUtilsLabelEXT func = (PFN_vkQueueBeginDebugUtilsLabelEXT) vkGetInstanceProcAddr(___arg1,\"vkQueueBeginDebugUtilsLabelEXT\");
func(___arg2,___arg3);
 ___return;"))
(begin-ffi
   (vkQueueEndDebugUtilsLabelEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkQueueEndDebugUtilsLabelEXT
      (VkInstance VkQueue)
      void
      "PFN_vkQueueEndDebugUtilsLabelEXT func = (PFN_vkQueueEndDebugUtilsLabelEXT) vkGetInstanceProcAddr(___arg1,\"vkQueueEndDebugUtilsLabelEXT\");
func(___arg2);
 ___return;"))
(begin-ffi
   (vkQueueInsertDebugUtilsLabelEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkQueueInsertDebugUtilsLabelEXT
      (VkInstance VkQueue (pointer VkDebugUtilsLabelEXT))
      void
      "PFN_vkQueueInsertDebugUtilsLabelEXT func = (PFN_vkQueueInsertDebugUtilsLabelEXT) vkGetInstanceProcAddr(___arg1,\"vkQueueInsertDebugUtilsLabelEXT\");
func(___arg2,___arg3);
 ___return;"))
(begin-ffi
   (vkCmdBeginDebugUtilsLabelEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkCmdBeginDebugUtilsLabelEXT
      (VkInstance VkCommandBuffer (pointer VkDebugUtilsLabelEXT))
      void
      "PFN_vkCmdBeginDebugUtilsLabelEXT func = (PFN_vkCmdBeginDebugUtilsLabelEXT) vkGetInstanceProcAddr(___arg1,\"vkCmdBeginDebugUtilsLabelEXT\");
func(___arg2,___arg3);
 ___return;"))
(begin-ffi
   (vkCmdEndDebugUtilsLabelEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkCmdEndDebugUtilsLabelEXT
      (VkInstance VkCommandBuffer)
      void
      "PFN_vkCmdEndDebugUtilsLabelEXT func = (PFN_vkCmdEndDebugUtilsLabelEXT) vkGetInstanceProcAddr(___arg1,\"vkCmdEndDebugUtilsLabelEXT\");
func(___arg2);
 ___return;"))
(begin-ffi
   (vkCmdInsertDebugUtilsLabelEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkCmdInsertDebugUtilsLabelEXT
      (VkInstance VkCommandBuffer (pointer VkDebugUtilsLabelEXT))
      void
      "PFN_vkCmdInsertDebugUtilsLabelEXT func = (PFN_vkCmdInsertDebugUtilsLabelEXT) vkGetInstanceProcAddr(___arg1,\"vkCmdInsertDebugUtilsLabelEXT\");
func(___arg2,___arg3);
 ___return;"))
(begin-ffi
   (vkCreateDebugUtilsMessengerEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkCreateDebugUtilsMessengerEXT
      (VkInstance
         (pointer VkDebugUtilsMessengerCreateInfoEXT)
         (pointer VkAllocationCallbacks)
         (pointer VkDebugUtilsMessengerEXT))
      VkResult
      "PFN_vkCreateDebugUtilsMessengerEXT func = (PFN_vkCreateDebugUtilsMessengerEXT) vkGetInstanceProcAddr(___arg1,\"vkCreateDebugUtilsMessengerEXT\");
___return (func(___arg1,___arg2,___arg3,___arg4));"))
(begin-ffi
   (vkDestroyDebugUtilsMessengerEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkDestroyDebugUtilsMessengerEXT
      (VkInstance VkDebugUtilsMessengerEXT (pointer VkAllocationCallbacks))
      void
      "PFN_vkDestroyDebugUtilsMessengerEXT func = (PFN_vkDestroyDebugUtilsMessengerEXT) vkGetInstanceProcAddr(___arg1,\"vkDestroyDebugUtilsMessengerEXT\");
func(___arg1,___arg2,___arg3);
 ___return;"))
(begin-ffi
   (vkSubmitDebugUtilsMessageEXT)
   (c-declare
      "   
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vulkan/vulkan.h> 
#include <X11/Xlib.h>
#include <xcb/xcb.h>
")
   (define-c-lambda
      vkSubmitDebugUtilsMessageEXT
      (VkInstance
         VkDebugUtilsMessageSeverityFlagBitsEXT
         VkDebugUtilsMessageTypeFlagsEXT
         (pointer VkDebugUtilsMessengerCallbackDataEXT))
      void
      "PFN_vkSubmitDebugUtilsMessageEXT func = (PFN_vkSubmitDebugUtilsMessageEXT) vkGetInstanceProcAddr(___arg1,\"vkSubmitDebugUtilsMessageEXT\");
func(___arg1,___arg2,___arg3,___arg4);
 ___return;"))
